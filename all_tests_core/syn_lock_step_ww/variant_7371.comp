#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (_GLF_IDENTITY(! ((false)), (! ((false))) || false)) && true))) && true, ((false) && true) && true))));
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5623.0461, -273.913)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))), (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (false) && true))), ! (! (! ((_GLF_IDENTITY(false, (false) && true)))))))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))));
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))) | _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u), min(uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u)), clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u), uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u)))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(vec2(-2.4, 115.843)))).y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) + 0.0), injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5755.7308))) < injectionSwitch.y)))))))), true))))), true && (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), true)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 ^ (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true) || false))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0)), mix(vec2((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0)))[0], _GLF_FUZZED(5.1)), vec2(_GLF_FUZZED(-7380.1980), _GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0)))[1], float(mat4x3((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0)))[1], 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), bvec2(false, true)))).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true)))), false, true))), true, false, false)))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true))), true, false, false))))) || false))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7262.9403)), vec2(_GLF_FUZZED((- 325.439)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && ((bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))) && true)))), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false)), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))))) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true), true))), true))))))) || false)), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true))))))))) || false))))))))))
  {
   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-63339), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(_GLF_IDENTITY((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-63339, (-63339) - 0)), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x))))))), int(ivec2(_GLF_IDENTITY((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-63339, (-63339) - 0)), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-63339, (-63339) - 0)), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) * 1), 1))), ((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-63339), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | ((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-63339), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | ((true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-63339), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(-63339), (_GLF_FUZZED(-63339)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false, false, true)), true)))))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))) && true))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(workgroup_id) : workgroup_size)), workgroup_size, workgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), uint(uvec3(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), 1u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)))))))) >> 0u), (workgroup_size) * 1u) * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) + 0u, ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) + 0u) * 1u))) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 ^ (6))) | (_GLF_IDENTITY(6, (6) << 0))))) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) | 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), uint(_GLF_IDENTITY(uvec2(_GLF_FUZZED(subgroup_id), 0u), (uvec2(_GLF_FUZZED(subgroup_id), 0u)) >> uvec2(0u, 0u)))) : subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(true, true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(true, true)), false), bvec3(bvec3(bvec3(bvec2(bvec2(true, true)), false)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(true, true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(true, true)), false), bvec3(bvec3(bvec3(bvec2(bvec2(true, true)), false)))))), false)))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true)))))))), false, false, true))))) && true)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), (_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1)))) >> 0u), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), true && (_GLF_WRAPPED_LOOP(false))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           for(int _injected_loop_counter = (0 & int(133027u)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (0 << _GLF_IDENTITY(int(6), int(6))) + (int(3))), _GLF_IDENTITY(int(3), (int(3)) | 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 0 + (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | (1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (85766 * 215))); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true))))))), (bool(_GLF_IDENTITY(true, bool(bool(true))))) && true)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(74.01)))))))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_ONE(1.0, injectionSwitch.y)))))), (true ? transpose(transpose(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_ONE(1.0, injectionSwitch.y)))))) : _GLF_FUZZED(mat2(69.39, -8359.9140, -9414.8692, -7.4)))) : _GLF_FUZZED(mat2(-281.916, -7.7, 547.879, -6.7))))) * (injectionSwitch)).x > injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), (_GLF_DEAD(false)) && true))))))) && true), false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * _GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), _GLF_IDENTITY(float(_GLF_FUZZED(-541.045)), (false ? _GLF_FUZZED(-5.4) : _GLF_IDENTITY(float(_GLF_FUZZED(-541.045)), (false ? _GLF_FUZZED(2084.6111) : _GLF_IDENTITY(float(_GLF_FUZZED(-541.045)), (false ? _GLF_FUZZED(-1739.2732) : float(_GLF_FUZZED(-541.045)))))))), bool(false)))) < injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * _GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-541.045)), bool(false)))) < injectionSwitch.y)), (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) * _GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-541.045)), bool(false)))) < injectionSwitch.y))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y)))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), max(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5747.7662, 2.7)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.2)), bool(false))), injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(45.07)), bool(false)))))) / 1.0)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y)))), false), true, true)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y)))), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y)))), false), true, true))))))))), true, true)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0)), min(vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0)), vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0))))).x))) * _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED((false ? -8.3 : 3.0))))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), (true ? (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0) : _GLF_FUZZED(injectionSwitch.r)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)))) < injectionSwitch.y)))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(34.78)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0))))))) < injectionSwitch.y))), ! (! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) - tan(0.0)), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0))))))) < injectionSwitch.y))))))), false), true, true))), true, true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0)), min(vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0)), vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0))))).x))) * _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED((false ? -8.3 : 3.0))))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), (true ? (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0) : _GLF_FUZZED(injectionSwitch.r)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)))) < injectionSwitch.y)))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(34.78)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0))))))) < injectionSwitch.y))), ! (! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) - tan(0.0)), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0))))))) < injectionSwitch.y))))))), false), true, true))), true, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0)), min(vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0)), vec2(mat3(injectionSwitch, sin(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(1.0), 0.0))))).x))) * _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED((false ? -8.3 : 3.0))))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), (true ? (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0) : _GLF_FUZZED(injectionSwitch.r)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)))) < injectionSwitch.y)))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(34.78)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) < injectionSwitch.y), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0))))))) < injectionSwitch.y))), ! (! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0)) - tan(0.0)), float(_GLF_IDENTITY(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat3x2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * abs(1.0), 1.0, 0.0, 1.0, tan(0.0), 1.0))))))) < injectionSwitch.y))))))), false), true, true))), true, true))))))))), true, false)))))))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false))))))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(6151) : _injected_loop_counter ++)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(423.612)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), true && (bool(bool(bool(false)))))))), max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))))), (! (_GLF_DEAD(false))) && true)), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))))), (! (_GLF_DEAD(false))) && true)), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))), true))))))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))))), (! (_GLF_DEAD(false))) && true)), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))))))))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     return;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.2)), float(injectionSwitch.x), bool(true))), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.2)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.2)), float(injectionSwitch.x), bool(true)))))) / 1.0) > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), (true ? _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))) : _GLF_FUZZED(_injected_loop_counter)))) >> 0), clamp(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), clamp(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))), ~ (~ (_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), int(ivec4(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), 1, 1, 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), int(ivec4(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), 1, 1, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), int(ivec4(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) << 0)))))), 1, 1, 0)))) >> 0))))))) >> _GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, max(5, 5))) / 1), _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) - 0)) + _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 + (0)), 0))))), (5) | (5))))))), min((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(63686) : 5)), clamp(5, _GLF_IDENTITY(_GLF_IDENTITY(5, 0 ^ (5)), (_GLF_IDENTITY(_GLF_IDENTITY(5, 0 ^ (5)), (_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, (5) | (5))))) ^ 0)) | (_GLF_IDENTITY(5, 0 ^ (5)))), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) - 0)) + 0), (5) | (_GLF_IDENTITY(5, max(5, 5))))))))), (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5)))), 0 ^ (_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5))))))), max(int(_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5)))), 0 ^ (_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5)))), 0 ^ (_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 ^ (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) - 0)) + 0), (5) | (5)))))))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) + 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) ^ 0))))), int(int((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) ^ 0))), int(ivec2(_GLF_IDENTITY(int(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) ^ 0))), ~ (~ (int(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) ^ 0)))))), 0)))))))), (false ? _GLF_FUZZED(24967) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(69967, clamp(_GLF_IDENTITY(69967, _GLF_IDENTITY(int(ivec4(69967, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(69967, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) + 0)), 69967, _GLF_IDENTITY(69967, int(ivec4(69967, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))))), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 0, 1), ~ (~ (ivec3(5, 0, 1))))))), (int(5)) / 1), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 0, 1), ~ (~ (ivec3(5, 0, 1))))))), (int(5)) / 1), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 0, 1), ~ (~ (ivec3(5, 0, 1))))))), _GLF_IDENTITY((int(5)), ~ (~ ((int(5))))) / 1), min(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 0, 1), ~ (~ (ivec3(5, 0, 1)))))), ~ (~ (_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 0, 1), ~ (~ (ivec3(5, _GLF_IDENTITY(0, (0) << 0), 1)))))))))), (int(5)) / 1), _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 0, 1), ~ (~ (ivec3(5, 0, 1))))))), (int(5)) / 1))), 1))))), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))), _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))), _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))), _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))), _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))), _GLF_IDENTITY(0, (0) * 1) ^ (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) << 0) : _GLF_FUZZED(-37361))))))))))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, _GLF_IDENTITY(0 + (5), ~ (~ (0 + (5)))))), int(5)), max(int(5), int(5))))), int(5)))))), max(1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(_GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(5, ~ (~ (5)))))))), (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(5, ~ (~ (5))))))))) | 0), int(5)), max(int(5), int(5))))), int(5)))))), 1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), (int(5)) >> 0), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(_GLF_IDENTITY(5, min(5, 5)))))))))))) | (int(5)))), 0 ^ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(5, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), (true ? int(ivec4(5, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY(1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5)))))), max(1 * _GLF_IDENTITY((_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), 0 | (_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), (max(int(_GLF_IDENTITY(5, 0 + (5))), int(5))) ^ 0))), max(int(5), int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(5, min(5, 5)), 0, 1, 0))), 5))))))), int(5)))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), 0 | (_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), (max(int(_GLF_IDENTITY(5, 0 + (5))), int(5))) ^ 0))), max(int(5), int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(5, min(5, 5)), 0, 1, 0))), 5))))))), int(5)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), 0 | (_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), (max(int(_GLF_IDENTITY(5, 0 + (5))), int(5))) ^ 0))), max(int(5), int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(5, min(5, 5)), 0, 1, 0))), 5))))))), int(5))))))), 1 * (~ ((_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), 0 | (_GLF_IDENTITY(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), (max(int(_GLF_IDENTITY(5, 0 + (5))), int(5))) ^ 0))), max(int(5), int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(5, min(5, 5)), 0, 1, 0))), 5))))))), int(5)))))))))))) << 0), 1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5)))))))))) | (int(5)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5)))))), max(1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5))))), int(ivec4(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5))))), 0, 1, 0)))), 1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5)))))))))) | (int(5))))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5)))))), max(1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5))))), int(ivec4(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5))))), 0, 1, 0)))), 1 * (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), max(max(int(_GLF_IDENTITY(5, 0 + (5))), int(5)), max(int(5), int(5))))), int(5)))))))))) | (int(5)))))) >> 0) >> 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), max(~ (5), ~ (5)))))), int(5)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) >> 0)), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-38858), max(_GLF_FUZZED(-38858), _GLF_FUZZED(-38858))) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) - 0))))))))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) - 0))))))))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) - 0))))))))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) - 0))))))))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) - 0))))))))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) - 0))))))))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), (int(_GLF_IDENTITY(5, 0 + (5))))))) | (_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) - 0))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, 0 + (5)))), (false ? _GLF_FUZZED(-38858) : (int(_GLF_IDENTITY(5, 0 + (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), (int(_GLF_IDENTITY(5, 0 + (5)))))))), 0))))), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-35005)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))) : _GLF_FUZZED(14602)))))), (_GLF_IDENTITY(1, int(ivec3(1, 0, 0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true))), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true))), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true)))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true))), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true)))) && true), false, false, false))))))))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0), 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(118.279)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(bool(true)))))), injectionSwitch.y))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false)), false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), clamp(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))))), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch))))))))))))).y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / _GLF_IDENTITY(1, (0 | 0) | (1)))) << 0)), ((_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0))))), (0 | 0) | (1)))) << 0))) - 0) << 0), (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / _GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), clamp(_GLF_IDENTITY(1, (0 | 0) | (1)), _GLF_IDENTITY(1, (0 | 0) | (1)), _GLF_IDENTITY(1, (0 | 0) | (1)))), _GLF_IDENTITY(1, (0 | 0) | (1))))) | (_GLF_IDENTITY(1, (0 | 0) | (1)))))) << 0)), ((_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / _GLF_IDENTITY(1, (0 | 0) | (1)))) << 0))) - 0) << 0)) | 0))
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(uvec4(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) - 0u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (true ? uint(3u) : _GLF_FUZZED((virtual_gid)))), _GLF_IDENTITY(uint(3u), 0u + (uint(3u))))), 1u, 1u))), (next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), ~ (~ ((_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))) | (next_virtual_gid))))], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    break;
  }
}
