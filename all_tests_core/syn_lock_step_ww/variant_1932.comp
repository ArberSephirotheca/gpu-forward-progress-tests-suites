#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint _f0;
 ivec3 _f1;
 mat2x3 _f2;
 mat4x2 _f3;
 uint next_virtual_gid;
 int _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 mat4x2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))))))
      return;
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, log(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0)), (vec2(mat3x4(injectionSwitch, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, log(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0))) / sqrt(vec2(1.0, 1.0)))).y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-694.529, 76.83)) : (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)), false)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))), true, false)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                        }
                       return;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, true && (false)) || (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))))) && (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.3) : injectionSwitch.x)) > injectionSwitch.y))))
                    break;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED((injectionSwitch / -2024.1552)), (_GLF_FUZZED((injectionSwitch / -2024.1552))) - sin(vec2(0.0, 0.0))))).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false))))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false))))))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                          break;
                         continue;
                        }
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.5)), float(injectionSwitch.x), bool(true))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                            return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             break;
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            break;
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) / 1) > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                    return;
                                   if(_GLF_DEAD(false))
                                    return;
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 continue;
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 continue;
                                }
                               if(_GLF_DEAD(false))
                                break;
                               return;
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-88912 & 0)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((1 ^ 1), ~ (~ ((1 ^ 1))))); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7)))))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                  }
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    break;
                                   if(_GLF_DEAD(false))
                                    return;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                                    return;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))))))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           break;
                          }
                         return;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        break;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
                        break;
                       break;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)))) || false), bool(bool(_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)))) || false), bool(bool(_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(false, false || (false)))))) && true))))) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               return;
              }
            }
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), int(4)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), false))))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(94208) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            break;
                           for(int _injected_loop_counter = (((1 & ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) >> _GLF_IDENTITY(int(3), int(3)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 0, (0 | 0) + int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                          }
                         return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                     continue;
                    }
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))))
                break;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              break;
             break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bool(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))))))))))))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) || false))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0)))) + vec2(0.0, 0.0)).x)) > injectionSwitch.y, false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0)))) + vec2(0.0, 0.0)).x)) > injectionSwitch.y, false, true))), true && (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0)))))) * vec2(1.0, 1.0)))) + vec2(0.0, 0.0)).x)) > injectionSwitch.y, false, true)))))))))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - abs(vec2(0.0, 0.0)), min((injectionSwitch) - abs(vec2(0.0, 0.0)), (injectionSwitch) - abs(vec2(0.0, 0.0))))).y)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) && true))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                              return;
                            }
                           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         break;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           return;
                          }
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > 0); _injected_loop_counter --)
                                {
                                 return;
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), true, false)))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), 1.0))), injectionSwitch)).y))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                break;
                               return;
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               return;
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                              break;
                             break;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-556.019)), float(injectionSwitch.y), bool(true))), (injectionSwitch.y) / 1.0))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = ((((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), min(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) ^ (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), ~ (~ (int(7))))), (_GLF_IDENTITY((int(7)), ((int(7))) ^ 0)) ^ 0) | (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     return;
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              return;
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(false, true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
                return;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               return;
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                 else
                                  {
                                  }
                                 break;
                                }
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   return;
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
                              return;
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            break;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      return;
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 if(_GLF_DEAD(false))
                                  continue;
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0)))); _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), true)))))))))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                                      {
                                       return;
                                      }
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      break;
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       return;
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             return;
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                       if(_GLF_DEAD(false))
                                        continue;
                                      }
                                     do
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec3(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false)))); _injected_loop_counter ++)
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  continue;
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1.0)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))
                                        {
                                         do
                                          {
                                           return;
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(71.00)), bool(false))), injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                                        {
                                         do
                                          {
                                           return;
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                         if(_GLF_DEAD(false))
                                          continue;
                                         if(_GLF_DEAD(false))
                                          continue;
                                        }
                                      }
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), vec2(mat2x4(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), 0.0, 0.0, abs(0.0), exp(0.0), 0.0, exp(0.0)))))).x > injectionSwitch.y))))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                                  break;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, determinant(mat4(0.0, 1.0, _GLF_IDENTITY(log(1.0), mix(float(_GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), float(mat4(log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) / 1.0)), float(_GLF_FUZZED((+ -359.756))), bool(false))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, tan(0.0)))).y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4)))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.4)))))))))))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0))))))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y)))), true, true))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(vec4(-23.19, 5.3, 3651.3181, -3577.6040))))) > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && true), true))), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(vec4(-23.19, 5.3, 3651.3181, -3577.6040))))) > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && true), true))))))))), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))), true))));
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     do
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0)))) / 1.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0)))) / 1.0)))) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         return;
        }
      }
     else
      {
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(98.66))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(98.66))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0), max(vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(98.66))), 1.0, 1.0, 1.0), vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(98.66))), 1.0, 1.0, 1.0))))) > injectionSwitch.y)))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
              }
             else
              {
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   return;
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (43644 & (97693 & 0))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          continue;
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), (((injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             break;
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        continue;
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (! (_GLF_WRAPPED_IF_FALSE(false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true)))
                return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   return;
                  }
                }
              }
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(1u, ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), mat2x3(1.0), mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(914.585)), bool(false)))) - 0.0), 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), sqrt(1.0) * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), 1)), mat4x2(1.0));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 & -33794); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    break;
                   return;
                  }
                 else
                  {
                  }
                }
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.6)), bool(false))) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[_GLF_struct_replacement_2._f0._f0.next_virtual_gid], uint(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(2, (2) << 0)))), 4, 64, 4);
}
