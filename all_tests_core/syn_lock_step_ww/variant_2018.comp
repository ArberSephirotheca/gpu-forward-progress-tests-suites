#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_197 {
 mat4x3 _f0;
 vec3 _f1;
 ivec4 _f2;
 vec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_196 {
 mat3x4 _f0;
 uint _f1;
 mat2x4 _f2;
 vec2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_198 {
 _GLF_struct_196 _f0;
 int _f1;
 bvec2 _f2;
 vec3 _f3;
 _GLF_struct_197 _f4;
} ;

struct _GLF_struct_194 {
 uvec3 _f0;
 mat4x2 _f1;
 mat3 _f2;
 ivec4 _f3;
 mat2x4 _f4;
 uvec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_193 {
 float _f0;
 vec4 _f1;
 ivec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_195 {
 mat3 _f0;
 _GLF_struct_193 _f1;
 bool _f2;
 mat3x4 _f3;
 _GLF_struct_194 _f4;
} ;

struct _GLF_struct_199 {
 _GLF_struct_195 _f0;
 uvec4 _f1;
 _GLF_struct_198 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_190 {
 vec2 _f0;
 uvec4 _f1;
 bvec2 _f2;
 uvec2 _f3;
 float _f4;
 ivec4 _f5;
 bvec3 _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_189 {
 bool _f0;
 mat2 _f1;
 mat2 _f2;
 int _f3;
 uvec3 _f4;
 ivec4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_188 {
 int _f0;
 mat3 _f1;
 vec2 _f2;
 ivec3 _f3;
 bvec3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_191 {
 _GLF_struct_188 _f0;
 ivec2 _f1;
 _GLF_struct_189 _f2;
 _GLF_struct_190 _f3;
} ;

struct _GLF_struct_186 {
 mat4x3 _f0;
 int _f1;
} ;

struct _GLF_struct_185 {
 vec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_184 {
 uvec2 _f0;
} ;

struct _GLF_struct_187 {
 _GLF_struct_184 _f0;
 mat3x2 _f1;
 _GLF_struct_185 _f2;
 _GLF_struct_186 _f3;
} ;

struct _GLF_struct_182 {
 mat2x4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_181 {
 ivec2 _f0;
} ;

struct _GLF_struct_180 {
 ivec3 _f0;
 uvec2 _f1;
 mat2 _f2;
 mat4 _f3;
 mat2x3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_179 {
 mat4x2 _f0;
 uvec4 _f1;
 mat4x3 _f2;
 vec2 _f3;
 mat2 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_183 {
 mat4x3 _f0;
 _GLF_struct_179 _f1;
 mat3x2 _f2;
 vec3 _f3;
 _GLF_struct_180 _f4;
 _GLF_struct_181 _f5;
 _GLF_struct_182 _f6;
} ;

struct _GLF_struct_192 {
 _GLF_struct_183 _f0;
 _GLF_struct_187 _f1;
 mat4x3 _f2;
 _GLF_struct_191 _f3;
 float _f4;
} ;

struct _GLF_struct_177 {
 mat2x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_178 {
 int _f0;
 mat3 _f1;
 bvec4 _f2;
 int _injected_loop_counter;
 mat4x3 _f3;
 _GLF_struct_177 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_174 {
 mat3x2 _f0;
} ;

struct _GLF_struct_175 {
 _GLF_struct_174 _f0;
} ;

struct _GLF_struct_173 {
 vec4 _f0;
} ;

struct _GLF_struct_176 {
 uvec4 _f0;
 _GLF_struct_173 _f1;
 int _injected_loop_counter;
 _GLF_struct_175 _f2;
} ;

struct _GLF_struct_172 {
 int _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_169 {
 float _f0;
 ivec2 _f1;
 mat3x4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_168 {
 vec4 _f0;
 uint _f1;
 mat2 _f2;
 uvec3 _f3;
 mat3x4 _f4;
 mat4x2 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_167 {
 uvec4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_166 {
 ivec3 _f0;
} ;

struct _GLF_struct_170 {
 _GLF_struct_166 _f0;
 _GLF_struct_167 _f1;
 _GLF_struct_168 _f2;
 uvec4 _f3;
 _GLF_struct_169 _f4;
} ;

struct _GLF_struct_171 {
 _GLF_struct_170 _f0;
 int _injected_loop_counter;
 mat4 _f1;
} ;

struct _GLF_struct_163 {
 bvec4 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_164 {
 _GLF_struct_163 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_161 {
 int _f0;
 mat3x4 _f1;
 vec2 _f2;
 ivec3 _f3;
 mat2x3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_160 {
 mat2x4 _f0;
 mat3x2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_162 {
 mat4 _f0;
 mat3x2 _f1;
 int _f2;
 _GLF_struct_160 _f3;
 _GLF_struct_161 _f4;
} ;

struct _GLF_struct_158 {
 mat4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_157 {
 bvec2 _f0;
} ;

struct _GLF_struct_156 {
 mat3 _f0;
 vec4 _f1;
 vec4 _f2;
 vec3 _f3;
 ivec3 _f4;
 bvec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_155 {
 bvec3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_159 {
 _GLF_struct_155 _f0;
 _GLF_struct_156 _f1;
 _GLF_struct_157 _f2;
 _GLF_struct_158 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_165 {
 vec2 _f0;
 _GLF_struct_159 _f1;
 mat2x4 _f2;
 _GLF_struct_162 _f3;
 _GLF_struct_164 _f4;
 int _injected_loop_counter;
 mat3x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_152 {
 mat3 _f0;
 bool _f1;
} ;

struct _GLF_struct_153 {
 int _injected_loop_counter;
 _GLF_struct_152 _f0;
} ;

struct _GLF_struct_154 {
 _GLF_struct_153 _f0;
} ;

struct _GLF_struct_149 {
 ivec3 _f0;
 ivec4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_148 {
 mat2x3 _f0;
 uvec4 _f1;
 mat4x3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_147 {
 vec2 _f0;
 bvec2 _f1;
 int _f2;
 ivec3 _f3;
 uint _f4;
 float _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_150 {
 _GLF_struct_147 _f0;
 _GLF_struct_148 _f1;
 mat2 _f2;
 _GLF_struct_149 _f3;
} ;

struct _GLF_struct_145 {
 bvec4 _f0;
 mat4 _f1;
 uvec2 _f2;
 mat4 _f3;
 uint _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_144 {
 mat2x4 _f0;
 mat3 _f1;
 uvec4 _f2;
 mat3x4 _f3;
 bvec4 _f4;
 float _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_143 {
 ivec3 _f0;
 mat4x3 _f1;
 mat4x2 _f2;
 ivec4 _f3;
 ivec4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_146 {
 _GLF_struct_143 _f0;
 uvec3 _f1;
 _GLF_struct_144 _f2;
 bvec4 _f3;
 int _f4;
 _GLF_struct_145 _f5;
} ;

struct _GLF_struct_141 {
 uvec3 _f0;
 ivec4 _f1;
 ivec2 _f2;
 bool _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_140 {
 mat4x2 _f0;
 uvec4 _f1;
 mat2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_139 {
 uvec4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_142 {
 uvec2 _f0;
 _GLF_struct_139 _f1;
 mat3x2 _f2;
 _GLF_struct_140 _f3;
 int _f4;
 int _f5;
 _GLF_struct_141 _f6;
} ;

struct _GLF_struct_138 {
 mat4x3 _f0;
} ;

struct _GLF_struct_151 {
 _GLF_struct_138 _f0;
 int _injected_loop_counter;
 _GLF_struct_142 _f1;
 _GLF_struct_146 _f2;
 _GLF_struct_150 _f3;
 ivec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_135 {
 bvec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_134 {
 mat2 _f0;
 mat2x3 _f1;
 uint workgroup_base;
} ;

struct _GLF_struct_136 {
 _GLF_struct_134 _f0;
 mat4 _f1;
 _GLF_struct_135 _f2;
 mat4x2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_132 {
 uvec3 _f0;
 ivec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_133 {
 ivec3 _f0;
 float _f1;
 _GLF_struct_132 _f2;
} ;

struct _GLF_struct_137 {
 bvec2 _f0;
 mat2x4 _f1;
 _GLF_struct_133 _f2;
 _GLF_struct_136 _f3;
} ;

struct _GLF_struct_129 {
 int _injected_loop_counter;
 bvec3 _f0;
 int _f1;
 uvec2 _f2;
 int _f3;
 ivec2 _f4;
 bool _f5;
 bool _f6;
} ;

struct _GLF_struct_130 {
 _GLF_struct_129 _f0;
} ;

struct _GLF_struct_131 {
 _GLF_struct_130 _f0;
} ;

struct _GLF_struct_126 {
 int _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_125 {
 ivec3 _f0;
 bvec2 _f1;
 ivec3 _f2;
 vec4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_124 {
 uint _f0;
 mat3x4 _f1;
 mat3x4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_127 {
 _GLF_struct_124 _f0;
 _GLF_struct_125 _f1;
 _GLF_struct_126 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_122 {
 int _f0;
 ivec4 _f1;
 mat3 _f2;
 vec2 _f3;
 mat2 _f4;
 mat2x3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_123 {
 _GLF_struct_122 _f0;
} ;

struct _GLF_struct_120 {
 vec2 _f0;
} ;

struct _GLF_struct_119 {
 uvec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_121 {
 _GLF_struct_119 _f0;
 vec4 _f1;
 uvec4 _f2;
 mat3x4 _f3;
 _GLF_struct_120 _f4;
} ;

struct _GLF_struct_117 {
 mat3x2 _f0;
 uvec3 _f1;
 uvec3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_118 {
 vec4 _f0;
 mat4x3 _f1;
 _GLF_struct_117 _f2;
} ;

struct _GLF_struct_128 {
 _GLF_struct_118 _f0;
 int _injected_loop_counter;
 _GLF_struct_121 _f1;
 _GLF_struct_123 _f2;
 _GLF_struct_127 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_114 {
 bvec4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_115 {
 _GLF_struct_114 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_112 {
 mat2 _f0;
 mat4x3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_111 {
 mat4x3 _f0;
 uvec2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_113 {
 int _f0;
 _GLF_struct_111 _f1;
 bvec2 _f2;
 mat2 _f3;
 mat4 _f4;
 _GLF_struct_112 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_116 {
 _GLF_struct_113 _f0;
 int _injected_loop_counter;
 mat3 _f1;
 _GLF_struct_115 _f2;
} ;

struct _GLF_struct_108 {
 mat2x4 _f0;
 int _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_109 {
 ivec4 _f0;
 ivec3 _f1;
 _GLF_struct_108 _f2;
} ;

struct _GLF_struct_110 {
 uint num_workgroup;
 _GLF_struct_109 _f0;
 vec2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_105 {
 uvec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_104 {
 mat2x4 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
 uint _f3;
 ivec4 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_103 {
 bool _f0;
 vec3 _f1;
 uvec2 _f2;
 vec4 _f3;
 mat3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_102 {
 ivec4 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_106 {
 _GLF_struct_102 _f0;
 _GLF_struct_103 _f1;
 _GLF_struct_104 _f2;
 bvec4 _f3;
 mat4 _f4;
 _GLF_struct_105 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_107 {
 _GLF_struct_106 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_100 {
 mat3 _f0;
} ;

struct _GLF_struct_98 {
 mat2x4 _f0;
 mat3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_97 {
 mat2x3 _f0;
 mat2x3 _f1;
 ivec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_99 {
 _GLF_struct_97 _f0;
 mat4x3 _f1;
 _GLF_struct_98 _f2;
 uint _f3;
 int _injected_loop_counter;
 bvec2 _f4;
} ;

struct _GLF_struct_101 {
 _GLF_struct_99 _f0;
 mat4 _f1;
 _GLF_struct_100 _f2;
} ;

struct _GLF_struct_95 {
 mat3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_93 {
 mat2x3 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_94 {
 bvec4 _f0;
 uint _f1;
 mat3 _f2;
 mat4x2 _f3;
 mat3 _f4;
 _GLF_struct_93 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_91 {
 mat3 _f0;
 mat4x2 _f1;
 mat4 _f2;
 mat2 _f3;
 int _f4;
 int _f5;
 mat4 _f6;
} ;

struct _GLF_struct_90 {
 mat2x3 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 vec2 _f3;
 mat4x2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_89 {
 bvec3 _f0;
 ivec4 _f1;
 bool _f2;
 vec3 _f3;
} ;

struct _GLF_struct_92 {
 _GLF_struct_89 _f0;
 bool _f1;
 _GLF_struct_90 _f2;
 _GLF_struct_91 _f3;
} ;

struct _GLF_struct_87 {
 uvec2 _f0;
 int _f1;
} ;

struct _GLF_struct_86 {
 bvec2 _f0;
 vec3 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 vec4 _f4;
 vec3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_85 {
 ivec4 _f0;
 mat3x2 _f1;
 mat4x2 _f2;
 vec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_84 {
 bvec3 _f0;
 ivec4 _f1;
 vec3 _f2;
 mat2x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_88 {
 _GLF_struct_84 _f0;
 _GLF_struct_85 _f1;
 _GLF_struct_86 _f2;
 uvec4 _f3;
 _GLF_struct_87 _f4;
} ;

struct _GLF_struct_96 {
 _GLF_struct_88 _f0;
 uint next_virtual_gid;
 _GLF_struct_92 _f1;
 _GLF_struct_94 _f2;
 _GLF_struct_95 _f3;
 mat3 _f4;
 uvec3 _f5;
 uint _f6;
} ;

struct _GLF_struct_81 {
 int _f0;
 mat3 _f1;
} ;

struct _GLF_struct_82 {
 _GLF_struct_81 _f0;
 uvec3 _f1;
 mat4x2 _f2;
 uint _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_83 {
 uvec2 _f0;
 _GLF_struct_82 _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_78 {
 uint _f0;
 bvec3 _f1;
 vec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_79 {
 uvec2 _f0;
 vec4 _f1;
 vec2 _f2;
 mat3 _f3;
 _GLF_struct_78 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_77 {
 ivec3 _f0;
} ;

struct _GLF_struct_75 {
 ivec4 _f0;
 mat4x3 _f1;
 vec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_74 {
 vec4 _f0;
 mat2x4 _f1;
 float _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_76 {
 _GLF_struct_74 _f0;
 mat3 _f1;
 mat3 _f2;
 bvec2 _f3;
 _GLF_struct_75 _f4;
 int _injected_loop_counter;
 mat4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_80 {
 _GLF_struct_76 _f0;
 mat4x2 _f1;
 uvec3 _f2;
 ivec4 _f3;
 _GLF_struct_77 _f4;
 _GLF_struct_79 _f5;
} ;

struct _GLF_struct_71 {
 mat4x3 _f0;
 bvec3 _f1;
 ivec2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_70 {
 mat3x4 _f0;
 bool _f1;
} ;

struct _GLF_struct_69 {
 vec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_72 {
 _GLF_struct_69 _f0;
 _GLF_struct_70 _f1;
 vec4 _f2;
 _GLF_struct_71 _f3;
} ;

struct _GLF_struct_73 {
 _GLF_struct_72 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_67 {
 int _injected_loop_counter;
 uvec4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_65 {
 mat2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_66 {
 _GLF_struct_65 _f0;
} ;

struct _GLF_struct_63 {
 vec3 _f0;
 vec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_62 {
 ivec3 _f0;
 bvec2 _f1;
 ivec2 _f2;
 mat2 _f3;
 mat3x4 _f4;
 uint _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_61 {
 mat2 _f0;
} ;

struct _GLF_struct_64 {
 _GLF_struct_61 _f0;
 _GLF_struct_62 _f1;
 uvec2 _f2;
 float _f3;
 _GLF_struct_63 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_68 {
 _GLF_struct_64 _f0;
 _GLF_struct_66 _f1;
 _GLF_struct_67 _f2;
} ;

struct _GLF_struct_60 {
 int _injected_loop_counter;
 ivec2 _f0;
 uvec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_57 {
 mat4x2 _f0;
 ivec4 _f1;
 uint _f2;
 vec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_56 {
 vec2 _f0;
 vec4 _f1;
 int _f2;
} ;

struct _GLF_struct_55 {
 ivec4 _f0;
 mat4x3 _f1;
 uvec3 _f2;
 mat3 _f3;
 ivec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_58 {
 _GLF_struct_55 _f0;
 _GLF_struct_56 _f1;
 _GLF_struct_57 _f2;
} ;

struct _GLF_struct_59 {
 ivec2 _f0;
 int _injected_loop_counter;
 _GLF_struct_58 _f1;
} ;

struct _GLF_struct_54 {
 vec4 _f0;
 vec3 _f1;
 int _injected_loop_counter;
 bool _f2;
} ;

struct _GLF_struct_51 {
 uvec3 _f0;
 uint _f1;
 mat4x2 _f2;
 bvec4 _f3;
 mat2 _f4;
 vec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_52 {
 _GLF_struct_51 _f0;
} ;

struct _GLF_struct_49 {
 mat4x2 _f0;
 vec4 _f1;
 mat4x3 _f2;
 ivec2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_48 {
 uvec4 _f0;
 float _f1;
 vec2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_50 {
 _GLF_struct_48 _f0;
 _GLF_struct_49 _f1;
} ;

struct _GLF_struct_46 {
 uint _f0;
 float _f1;
} ;

struct _GLF_struct_45 {
 uint _f0;
 mat3x2 _f1;
 mat3 _f2;
 int _f3;
 bool _f4;
 mat2 _f5;
} ;

struct _GLF_struct_47 {
 _GLF_struct_45 _f0;
 bvec4 _f1;
 _GLF_struct_46 _f2;
} ;

struct _GLF_struct_53 {
 uint _f0;
 _GLF_struct_47 _f1;
 _GLF_struct_50 _f2;
 int _injected_loop_counter;
 _GLF_struct_52 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_43 {
 int _f0;
 mat4x3 _f1;
 int _injected_loop_counter;
 mat3 _f2;
} ;

struct _GLF_struct_41 {
 uvec4 _f0;
 uint _f1;
 ivec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_40 {
 mat3x4 _f0;
 mat2 _f1;
 bvec2 _f2;
 ivec3 _f3;
 mat4 _f4;
 bool _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_39 {
 mat4x3 _f0;
 uvec4 _f1;
 bvec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_38 {
 vec4 _f0;
 ivec2 _f1;
 bool _f2;
 bvec4 _f3;
 int _f4;
 mat4x3 _f5;
 int _f6;
} ;

struct _GLF_struct_37 {
 mat3 _f0;
 uvec3 _f1;
 uint _f2;
 bvec2 _f3;
 vec4 _f4;
 bvec3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_42 {
 _GLF_struct_37 _f0;
 _GLF_struct_38 _f1;
 _GLF_struct_39 _f2;
 vec3 _f3;
 _GLF_struct_40 _f4;
 _GLF_struct_41 _f5;
} ;

struct _GLF_struct_44 {
 _GLF_struct_42 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 uvec3 _f3;
 _GLF_struct_43 _f4;
} ;

struct _GLF_struct_36 {
 vec3 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_33 {
 uvec4 _f0;
 mat4 _f1;
 mat4 _f2;
 ivec2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_32 {
 uint subgroup_base;
 mat3 _f0;
} ;

struct _GLF_struct_34 {
 ivec3 _f0;
 _GLF_struct_32 _f1;
 float _f2;
 _GLF_struct_33 _f3;
 bvec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_35 {
 uvec4 _f0;
 _GLF_struct_34 _f1;
} ;

struct _GLF_struct_29 {
 ivec3 _f0;
 bool _f1;
 mat2 _f2;
 uvec4 _f3;
 mat3x4 _f4;
 mat4x3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_28 {
 vec4 _f0;
 mat3x4 _f1;
 uint _f2;
 mat2x3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_27 {
 uvec3 _f0;
 float _f1;
 mat3x2 _f2;
 mat2x3 _f3;
 int _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_30 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 uvec2 _f2;
 int _f3;
 _GLF_struct_29 _f4;
} ;

struct _GLF_struct_25 {
 mat2x3 _f0;
 float _f1;
 vec4 _f2;
 mat3x2 _f3;
 mat3x2 _f4;
 ivec2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_24 {
 float _f0;
 ivec4 _f1;
 mat4x3 _f2;
 uvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_23 {
 uvec2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_22 {
 uvec4 _f0;
 ivec3 _f1;
 ivec4 _f2;
 float _f3;
} ;

struct _GLF_struct_26 {
 _GLF_struct_22 _f0;
 uvec3 _f1;
 vec4 _f2;
 _GLF_struct_23 _f3;
 _GLF_struct_24 _f4;
 _GLF_struct_25 _f5;
 uint _f6;
} ;

struct _GLF_struct_20 {
 int _f0;
 uvec4 _f1;
 mat4x2 _f2;
 uvec2 _f3;
 ivec4 _f4;
 vec3 _f5;
 int _f6;
} ;

struct _GLF_struct_19 {
 mat2x4 _f0;
 vec4 _f1;
 float _f2;
 vec2 _f3;
 int _f4;
 mat2 _f5;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 ivec2 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 ivec4 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
} ;

struct _GLF_struct_31 {
 uint subgroup_size;
 vec4 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_26 _f2;
 mat3x2 _f3;
 _GLF_struct_30 _f4;
 uint _f5;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 mat4 _f1;
 int _f2;
 vec3 _f3;
 float _f4;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 uvec4 _f1;
 uvec4 _f2;
 mat2x3 _f3;
 float _f4;
 vec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_12 {
 mat4x2 _f0;
 ivec2 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_16 {
 bvec2 _f0;
 uvec2 _f1;
 _GLF_struct_12 _f2;
 uvec3 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_14 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_17 {
 uint virtual_gid;
 uint _f0;
 _GLF_struct_16 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_9 {
 bool _f0;
 mat3x2 _f1;
 mat2x3 _f2;
 uvec4 _f3;
 mat4x2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 ivec2 _f1;
 bvec3 _f2;
 mat4x2 _f3;
 mat3 _f4;
 vec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 vec4 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_7 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 uint _f1;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 bvec3 _f1;
 mat4x2 _f2;
 float _f3;
 vec4 _f4;
} ;

struct _GLF_struct_0 {
 int _f0;
 uvec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_11 {
 mat2x4 _f0;
 uint subgroup_id;
 _GLF_struct_3 _f1;
 ivec2 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_10 _f4;
 vec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat2x4(1.0), gl_SubgroupID, _GLF_struct_3(_GLF_struct_0(1, uvec3(1u), ivec4(1)), _GLF_struct_1(vec2(1.0), bvec3(true), mat4x2(1.0), 1.0, vec4(1.0)), _GLF_struct_2(ivec3(1), 1u), uvec4(1u)), ivec2(1), _GLF_struct_8(mat3x4(1.0), _GLF_struct_4(mat2x3(1.0)), _GLF_struct_5(mat3x2(1.0)), vec4(1.0), _GLF_struct_6(vec4(1.0), ivec2(1), bvec3(true), mat4x2(1.0), mat3(1.0), vec2(1.0), mat2(1.0)), _GLF_struct_7(mat3x4(1.0)), vec4(1.0)), _GLF_struct_10(mat3x2(1.0), _GLF_struct_9(true, mat3x2(1.0), mat2x3(1.0), uvec4(1u), mat4x2(1.0), uvec2(1u))), vec4(1.0));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           if(_GLF_DEAD(false))
            return;
           continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (99788 & 0)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                    continue;
                   for(_GLF_struct_59 _GLF_struct_replacement_59 = _GLF_struct_59(ivec2(1), 1, _GLF_struct_58(_GLF_struct_55(ivec4(1), mat4x3(1.0), uvec3(1u), mat3(1.0), ivec4(1), mat2(1.0)), _GLF_struct_56(vec2(1.0), vec4(1.0), 1), _GLF_struct_57(mat4x2(1.0), ivec4(1), 1u, vec4(1.0), ivec2(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_59._injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))); _GLF_struct_replacement_59._injected_loop_counter --)
                    {
                     for(_GLF_struct_107 _GLF_struct_replacement_107 = _GLF_struct_107(_GLF_struct_106(_GLF_struct_102(ivec4(1), mat2x3(1.0), bvec4(true), bvec4(true)), _GLF_struct_103(true, vec3(1.0), uvec2(1u), vec4(1.0), mat3(1.0), vec3(1.0)), _GLF_struct_104(mat2x4(1.0), mat2x4(1.0), mat2x3(1.0), 1u, ivec4(1), mat4(1.0)), bvec4(true), mat4(1.0), _GLF_struct_105(uvec4(1u), ((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(2), int(2)))), ivec4(1)), mat3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_107._f0._f5._injected_loop_counter != 1); _GLF_struct_replacement_107._f0._f5._injected_loop_counter ++)
                      {
                       return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   for(_GLF_struct_60 _GLF_struct_replacement_60 = _GLF_struct_60(1, ivec2(1), uvec3(1u), mat2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_60._injected_loop_counter > 0); _GLF_struct_replacement_60._injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     break;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(gl_SubgroupSize, vec4(1.0), _GLF_struct_21(_GLF_struct_18(bvec3(true), ivec2(1), mat4(1.0)), ivec4(1), _GLF_struct_19(mat2x4(1.0), vec4(1.0), 1.0, vec2(1.0), 1, mat2(1.0)), _GLF_struct_20(1, uvec4(1u), mat4x2(1.0), uvec2(1u), ivec4(1), vec3(1.0), 1)), _GLF_struct_26(_GLF_struct_22(uvec4(1u), ivec3(1), ivec4(1), 1.0), uvec3(1u), vec4(1.0), _GLF_struct_23(uvec2(1u), uvec4(1u)), _GLF_struct_24(1.0, ivec4(1), mat4x3(1.0), uvec2(1u), mat4x2(1.0)), _GLF_struct_25(mat2x3(1.0), 1.0, vec4(1.0), mat3x2(1.0), mat3x2(1.0), ivec2(1), vec4(1.0)), 1u), mat3x2(1.0), _GLF_struct_30(_GLF_struct_27(uvec3(1u), 1.0, mat3x2(1.0), mat2x3(1.0), 1, mat4x2(1.0)), _GLF_struct_28(vec4(1.0), mat3x4(1.0), 1u, mat2x3(1.0), ivec3(1)), uvec2(1u), 1, _GLF_struct_29(ivec3(1), true, mat2(1.0), uvec4(1u), mat3x4(1.0), mat4x3(1.0), mat2x4(1.0))), 1u);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 _GLF_struct_110 _GLF_struct_replacement_110 = _GLF_struct_110(gl_NumWorkGroups.x, _GLF_struct_109(ivec4(1), ivec3(1), _GLF_struct_108(mat2x4(1.0), 1, uvec2(1u))), vec2(1.0), ivec4(1));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(_GLF_struct_128 _GLF_struct_replacement_128 = _GLF_struct_128(_GLF_struct_118(vec4(1.0), mat4x3(1.0), _GLF_struct_117(mat3x2(1.0), uvec3(1u), uvec3(1u), mat2x3(1.0))), 1, _GLF_struct_121(_GLF_struct_119(uvec3(1u), mat3(1.0)), vec4(1.0), uvec4(1u), mat3x4(1.0), _GLF_struct_120(vec2(1.0))), _GLF_struct_123(_GLF_struct_122(1, ivec4(1), mat3(1.0), vec2(1.0), mat2(1.0), mat2x3(1.0), mat2x3(1.0))), _GLF_struct_127(_GLF_struct_124(1u, mat3x4(1.0), mat3x4(1.0), vec3(1.0)), _GLF_struct_125(ivec3(1), bvec2(true), ivec3(1), vec4(1.0), uvec3(1u)), _GLF_struct_126(1, uvec3(1u)), mat3x2(1.0)), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_128._injected_loop_counter != 0); _GLF_struct_replacement_128._injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 break;
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(_GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(vec3(1.0), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_36._injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_struct_replacement_36._injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             for(_GLF_struct_68 _GLF_struct_replacement_68 = _GLF_struct_68(_GLF_struct_64(_GLF_struct_61(mat2(1.0)), _GLF_struct_62(ivec3(1), bvec2(true), ivec2(1), mat2(1.0), mat3x4(1.0), 1u, ivec3(1)), uvec2(1u), 1.0, _GLF_struct_63(vec3(1.0), vec3(1.0), uvec3(1u)), mat3x2(1.0)), _GLF_struct_66(_GLF_struct_65(mat2(1.0), mat4(1.0))), _GLF_struct_67(0, uvec4(1u), uvec4(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_68._f2._injected_loop_counter < 1); _GLF_struct_replacement_68._f2._injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                         return;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                            break;
                           break;
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             continue;
                            }
                           do
                            {
                             for(_GLF_struct_154 _GLF_struct_replacement_154 = _GLF_struct_154(_GLF_struct_153(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_152(mat3(1.0), true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_154._f0._injected_loop_counter < 1); _GLF_struct_replacement_154._f0._injected_loop_counter ++)
                              {
                               return;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                  return;
                                }
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               for(_GLF_struct_80 _GLF_struct_replacement_80 = _GLF_struct_80(_GLF_struct_76(_GLF_struct_74(vec4(1.0), mat2x4(1.0), 1.0, mat4x3(1.0)), mat3(1.0), mat3(1.0), bvec2(true), _GLF_struct_75(ivec4(1), mat4x3(1.0), vec3(1.0), uvec4(1u)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0))), mat4(1.0), mat4(1.0)), mat4x2(1.0), uvec3(1u), ivec4(1), _GLF_struct_77(ivec3(1)), _GLF_struct_79(uvec2(1u), vec4(1.0), vec2(1.0), mat3(1.0), _GLF_struct_78(1u, bvec3(true), vec3(1.0), true), vec3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_80._f0._injected_loop_counter != 1); _GLF_struct_replacement_80._f0._injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = ((0 | 0) & (+ -57468)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(_GLF_struct_131 _GLF_struct_replacement_131 = _GLF_struct_131(_GLF_struct_130(_GLF_struct_129(0, bvec3(true), 1, uvec2(1u), 1, ivec2(1), true, true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_131._f0._f0._injected_loop_counter < 1); _GLF_struct_replacement_131._f0._f0._injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(_GLF_struct_54 _GLF_struct_replacement_54 = _GLF_struct_54(vec4(1.0), vec3(1.0), 0, true); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_54._injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) >> 0)) >> 0)))); _GLF_struct_replacement_54._injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               for(_GLF_struct_165 _GLF_struct_replacement_165 = _GLF_struct_165(vec2(1.0), _GLF_struct_159(_GLF_struct_155(bvec3(true), uvec3(1u)), _GLF_struct_156(mat3(1.0), vec4(1.0), vec4(1.0), vec3(1.0), ivec3(1), bvec3(true), bvec3(true)), _GLF_struct_157(bvec2(true)), _GLF_struct_158(mat4(1.0), ivec3(1)), mat3x2(1.0)), mat2x4(1.0), _GLF_struct_162(mat4(1.0), mat3x2(1.0), 1, _GLF_struct_160(mat2x4(1.0), mat3x2(1.0), vec2(1.0)), _GLF_struct_161(1, mat3x4(1.0), vec2(1.0), ivec3(1), mat2x3(1.0), vec3(1.0))), _GLF_struct_164(_GLF_struct_163(bvec4(true), mat2x4(1.0), mat4x2(1.0)), mat2(1.0)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -18638), mat3x4(1.0), vec3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_165._injected_loop_counter < 1); _GLF_struct_replacement_165._injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    return;
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
            }
           else
            {
            }
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_137 _GLF_struct_replacement_137 = _GLF_struct_137(bvec2(true), mat2x4(1.0), _GLF_struct_133(ivec3(1), 1.0, _GLF_struct_132(uvec3(1u), ivec2(1), bvec3(true))), _GLF_struct_136(_GLF_struct_134(mat2(1.0), mat2x3(1.0), workgroup_size * workgroup_id), mat4(1.0), _GLF_struct_135(bvec4(true), mat3x4(1.0)), mat4x2(1.0), vec4(1.0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(_GLF_struct_171 _GLF_struct_replacement_171 = _GLF_struct_171(_GLF_struct_170(_GLF_struct_166(ivec3(1)), _GLF_struct_167(uvec4(1u), uvec2(1u)), _GLF_struct_168(vec4(1.0), 1u, mat2(1.0), uvec3(1u), mat3x4(1.0), mat4x2(1.0), uvec2(1u)), uvec4(1u), _GLF_struct_169(1.0, ivec2(1), mat3x4(1.0), mat4(1.0))), _GLF_IDENTITY(1, max(1, 1)), mat4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_171._injected_loop_counter != (0 & 21944)); _GLF_struct_replacement_171._injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(_GLF_struct_172 _GLF_struct_replacement_172 = _GLF_struct_172(1, ((1 ^ 1) & -73291)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_172._injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_struct_replacement_172._injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))) | 0)); _injected_loop_counter ++)
            {
             for(_GLF_struct_176 _GLF_struct_replacement_176 = _GLF_struct_176(uvec4(1u), _GLF_struct_173(vec4(1.0)), 0, _GLF_struct_175(_GLF_struct_174(mat3x2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_176._injected_loop_counter != (1 | 0)); _GLF_struct_replacement_176._injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
              }
            }
           else
            {
             for(int _injected_loop_counter = (((1 | int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
  }
 for(_GLF_struct_73 _GLF_struct_replacement_73 = _GLF_struct_73(_GLF_struct_72(_GLF_struct_69(vec4(1.0), int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_struct_70(mat3x4(1.0), true), vec4(1.0), _GLF_struct_71(mat4x3(1.0), bvec3(true), ivec2(1), mat4(1.0))), ivec2(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_73._f0._f0._injected_loop_counter > 0); _GLF_struct_replacement_73._f0._f0._injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       for(_GLF_struct_53 _GLF_struct_replacement_53 = _GLF_struct_53(1u, _GLF_struct_47(_GLF_struct_45(1u, mat3x2(1.0), mat3(1.0), 1, true, mat2(1.0)), bvec4(true), _GLF_struct_46(1u, 1.0)), _GLF_struct_50(_GLF_struct_48(uvec4(1u), 1.0, vec2(1.0), uvec4(1u)), _GLF_struct_49(mat4x2(1.0), vec4(1.0), mat4x3(1.0), ivec2(1), ivec4(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_52(_GLF_struct_51(uvec3(1u), 1u, mat4x2(1.0), bvec4(true), mat2(1.0), vec3(1.0), vec3(1.0))), uvec2(1u)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_53._injected_loop_counter != 1); _GLF_struct_replacement_53._injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            break;
           return;
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(3))) | (1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(_GLF_struct_178 _GLF_struct_replacement_178 = _GLF_struct_178(1, mat3(1.0), bvec4(true), 0, mat4x3(1.0), _GLF_struct_177(mat2x3(1.0), ivec3(1)), mat3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_178._injected_loop_counter != 1); _GLF_struct_replacement_178._injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 _GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(uvec4(1u), _GLF_struct_34(ivec3(1), _GLF_struct_32(_GLF_struct_replacement_11.subgroup_id * _GLF_struct_replacement_31.subgroup_size, mat3(1.0)), 1.0, _GLF_struct_33(uvec4(1u), mat4(1.0), mat4(1.0), ivec2(1), mat2(1.0)), bvec2(true), bvec3(true)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      return;
     for(_GLF_struct_44 _GLF_struct_replacement_44 = _GLF_struct_44(_GLF_struct_42(_GLF_struct_37(mat3(1.0), uvec3(1u), 1u, bvec2(true), vec4(1.0), bvec3(true), ivec3(1)), _GLF_struct_38(vec4(1.0), ivec2(1), true, bvec4(true), 1, mat4x3(1.0), 1), _GLF_struct_39(mat4x3(1.0), uvec4(1u), bvec2(true), mat2(1.0)), vec3(1.0), _GLF_struct_40(mat3x4(1.0), mat2(1.0), bvec2(true), ivec3(1), mat4(1.0), true, mat4x3(1.0)), _GLF_struct_41(uvec4(1u), 1u, ivec2(1), vec2(1.0))), uvec3(1u), mat2x4(1.0), uvec3(1u), _GLF_struct_43(1, mat4x3(1.0), 0, mat3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_44._f4._injected_loop_counter < (1 & 1)); _GLF_struct_replacement_44._f4._injected_loop_counter ++)
      {
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(ivec2(int(3), 0), ivec2(0, 0) ^ (ivec2(int(3), 0))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_replacement_137._f3._f0.workgroup_base + _GLF_struct_replacement_35._f1._f1.subgroup_base + subgroup_local_id, 1u, _GLF_struct_16(bvec2(true), uvec2(1u), _GLF_struct_12(mat4x2(1.0), ivec2(1), mat3x2(1.0)), uvec3(1u), _GLF_struct_13(mat2x4(1.0), mat3(1.0)), _GLF_struct_14(mat4(1.0), uvec4(1u), uvec4(1u), mat2x3(1.0), 1.0, vec4(1.0), true), _GLF_struct_15(uvec3(1u), mat4(1.0), 1, vec3(1.0), 1.0)), uvec3(1u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(_GLF_struct_116 _GLF_struct_replacement_116 = _GLF_struct_116(_GLF_struct_113(1, _GLF_struct_111(mat4x3(1.0), uvec2(1u), mat4x3(1.0)), bvec2(true), mat2(1.0), mat4(1.0), _GLF_struct_112(mat2(1.0), mat4x3(1.0), vec2(1.0)), uvec2(1u)), (0 | 0), mat3(1.0), _GLF_struct_115(_GLF_struct_114(bvec4(true), bvec3(true)), uvec2(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_116._injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_struct_replacement_116._injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
      return;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           continue;
          }
         break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, false))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     continue;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(_GLF_struct_151 _GLF_struct_replacement_151 = _GLF_struct_151(_GLF_struct_138(mat4x3(1.0)), 1, _GLF_struct_142(uvec2(1u), _GLF_struct_139(uvec4(1u), ivec4(1)), mat3x2(1.0), _GLF_struct_140(mat4x2(1.0), uvec4(1u), mat2(1.0), mat2x4(1.0)), 1, 1, _GLF_struct_141(uvec3(1u), ivec4(1), ivec2(1), true, mat2x4(1.0))), _GLF_struct_146(_GLF_struct_143(ivec3(1), mat4x3(1.0), mat4x2(1.0), ivec4(1), ivec4(1), vec4(1.0)), uvec3(1u), _GLF_struct_144(mat2x4(1.0), mat3(1.0), uvec4(1u), mat3x4(1.0), bvec4(true), 1.0, ivec2(1)), bvec4(true), 1, _GLF_struct_145(bvec4(true), mat4(1.0), uvec2(1u), mat4(1.0), 1u, bvec3(true))), _GLF_struct_150(_GLF_struct_147(vec2(1.0), bvec2(true), 1, ivec3(1), 1u, 1.0, uvec2(1u)), _GLF_struct_148(mat2x3(1.0), uvec4(1u), mat4x3(1.0), ivec2(1)), mat2(1.0), _GLF_struct_149(ivec3(1), ivec4(1), ivec4(1))), ivec3(1), vec2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_151._injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _GLF_struct_replacement_151._injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       for(_GLF_struct_83 _GLF_struct_replacement_83 = _GLF_struct_83(uvec2(1u), _GLF_struct_82(_GLF_struct_81(1, mat3(1.0)), uvec3(1u), mat4x2(1.0), 1u, mat4x3(1.0)), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_83._injected_loop_counter > 0); _GLF_struct_replacement_83._injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) && true))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             for(_GLF_struct_192 _GLF_struct_replacement_192 = _GLF_struct_192(_GLF_struct_183(mat4x3(1.0), _GLF_struct_179(mat4x2(1.0), uvec4(1u), mat4x3(1.0), vec2(1.0), mat2(1.0), mat3x2(1.0)), mat3x2(1.0), vec3(1.0), _GLF_struct_180(ivec3(1), uvec2(1u), mat2(1.0), mat4(1.0), mat2x3(1.0), mat3(1.0)), _GLF_struct_181(ivec2(1)), _GLF_struct_182(mat2x4(1.0), uvec2(1u))), _GLF_struct_187(_GLF_struct_184(uvec2(1u)), mat3x2(1.0), _GLF_struct_185(vec3(1.0), mat2(1.0)), _GLF_struct_186(mat4x3(1.0), 1)), mat4x3(1.0), _GLF_struct_191(_GLF_struct_188(1, mat3(1.0), vec2(1.0), ivec3(1), bvec3(true), mat2x4(1.0)), ivec2(1), _GLF_struct_189(true, mat2(1.0), mat2(1.0), 1, uvec3(1u), ivec4(1), mat4x2(1.0)), _GLF_struct_190(vec2(1.0), uvec4(1u), bvec2(true), uvec2(1u), 1.0, ivec4(1), bvec3(true), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), 1.0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_192._f3._f3._injected_loop_counter != (1 ^ 1)); _GLF_struct_replacement_192._f3._f3._injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_96 _GLF_struct_replacement_96 = _GLF_struct_96(_GLF_struct_88(_GLF_struct_84(bvec3(true), ivec4(1), vec3(1.0), mat2x3(1.0), bvec2(true)), _GLF_struct_85(ivec4(1), mat3x2(1.0), mat4x2(1.0), vec2(1.0), 1u), _GLF_struct_86(bvec2(true), vec3(1.0), mat4x3(1.0), uvec4(1u), vec4(1.0), vec3(1.0), ivec4(1)), uvec4(1u), _GLF_struct_87(uvec2(1u), 1)), _GLF_struct_replacement_137._f3._f0.workgroup_base + _GLF_struct_replacement_35._f1._f1.subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_31.subgroup_size), _GLF_struct_92(_GLF_struct_89(bvec3(true), ivec4(1), true, vec3(1.0)), true, _GLF_struct_90(mat2x3(1.0), uvec4(1u), mat3x2(1.0), vec2(1.0), mat4x2(1.0), vec4(1.0)), _GLF_struct_91(mat3(1.0), mat4x2(1.0), mat4(1.0), mat2(1.0), 1, 1, mat4(1.0))), _GLF_struct_94(bvec4(true), 1u, mat3(1.0), mat4x2(1.0), mat3(1.0), _GLF_struct_93(mat2x3(1.0), mat4x2(1.0), mat2x4(1.0)), mat4x3(1.0)), _GLF_struct_95(mat3(1.0), mat2x3(1.0)), mat3(1.0), uvec3(1u), 1u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           atomicStore(buf[_GLF_struct_replacement_17.virtual_gid], uint(1), 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      break;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       atomicStore(buf[_GLF_struct_replacement_96.next_virtual_gid], uint(2), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   for(_GLF_struct_101 _GLF_struct_replacement_101 = _GLF_struct_101(_GLF_struct_99(_GLF_struct_97(mat2x3(1.0), mat2x3(1.0), ivec2(1), bvec2(true)), mat4x3(1.0), _GLF_struct_98(mat2x4(1.0), mat3(1.0), ivec3(1)), 1u, (1 & 1), bvec2(true)), mat4(1.0), _GLF_struct_100(mat3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_101._f0._injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _GLF_struct_replacement_101._f0._injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(_GLF_struct_199 _GLF_struct_replacement_199 = _GLF_struct_199(_GLF_struct_195(mat3(1.0), _GLF_struct_193(1.0, vec4(1.0), ivec3(1), true), true, mat3x4(1.0), _GLF_struct_194(uvec3(1u), mat4x2(1.0), mat3(1.0), ivec4(1), mat2x4(1.0), uvec3(1u), mat2x3(1.0))), uvec4(1u), _GLF_struct_198(_GLF_struct_196(mat3x4(1.0), 1u, mat2x4(1.0), vec2(1.0), vec2(1.0)), 1, bvec2(true), vec3(1.0), _GLF_struct_197(mat4x3(1.0), vec3(1.0), ivec4(1), vec3(1.0), 1u)), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_199._injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_struct_replacement_199._injected_loop_counter) : 1))); _GLF_struct_replacement_199._injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
}
