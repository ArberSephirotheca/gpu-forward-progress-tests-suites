#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_40 {
 bvec2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_39 {
 mat3x2 _f0;
 float _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_38 {
 mat2 _f0;
 bool _f1;
 mat3x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_41 {
 _GLF_struct_38 _f0;
 _GLF_struct_39 _f1;
 _GLF_struct_40 _f2;
 vec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_36 {
 ivec3 _f0;
 uvec2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_35 {
 mat3x2 _f0;
 vec2 _f1;
 vec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_34 {
 bool _f0;
} ;

struct _GLF_struct_37 {
 _GLF_struct_34 _f0;
 _GLF_struct_35 _f1;
 _GLF_struct_36 _f2;
} ;

struct _GLF_struct_32 {
 uvec2 _f0;
} ;

struct _GLF_struct_31 {
 mat4 _f0;
 mat3 _f1;
 bool _f2;
} ;

struct _GLF_struct_33 {
 bvec2 _f0;
 _GLF_struct_31 _f1;
 _GLF_struct_32 _f2;
} ;

struct _GLF_struct_29 {
 ivec4 _f0;
 mat4 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
 uvec2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_28 {
 int _f0;
 vec3 _f1;
 bool _f2;
 int _f3;
 ivec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_27 {
 bvec3 _f0;
 mat4 _f1;
 bvec3 _f2;
 mat4x3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_26 {
 bool _f0;
 uvec2 _f1;
 mat4 _f2;
 mat3 _f3;
 mat3x2 _f4;
 int _f5;
 mat3 _f6;
} ;

struct _GLF_struct_30 {
 _GLF_struct_26 _f0;
 mat2x4 _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_28 _f3;
 _GLF_struct_29 _f4;
} ;

struct _GLF_struct_24 {
 float _f0;
} ;

struct _GLF_struct_23 {
 mat3x2 _f0;
 vec2 _f1;
 uvec4 _f2;
 uvec4 _f3;
 vec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_22 {
 mat2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_25 {
 _GLF_struct_21 _f0;
 _GLF_struct_22 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_24 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_42 {
 uint num_workgroup;
 _GLF_struct_25 _f0;
 uint _f1;
 _GLF_struct_30 _f2;
 _GLF_struct_33 _f3;
 _GLF_struct_37 _f4;
 _GLF_struct_41 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_18 {
 vec2 _f0;
 mat4x3 _f1;
 float _f2;
 mat3x2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_19 {
 uint workgroup_size;
 _GLF_struct_18 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_16 {
 vec4 _f0;
 vec2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 uint _f1;
} ;

struct _GLF_struct_14 {
 bvec2 _f0;
 bvec2 _f1;
 uint _f2;
 float _f3;
} ;

struct _GLF_struct_13 {
 mat3 _f0;
 uvec4 _f1;
 mat4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_17 {
 _GLF_struct_13 _f0;
 mat4x2 _f1;
 _GLF_struct_14 _f2;
 uvec2 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 mat2x4 _f1;
 bvec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 uvec4 _f1;
 ivec4 _f2;
 mat4 _f3;
 vec2 _f4;
 ivec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_11 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 mat4x3 _f1;
 mat2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 int _f1;
 mat4 _f2;
 mat2x4 _f3;
 bool _f4;
 mat2x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
 uint _f1;
 bvec2 _f2;
 uvec2 _f3;
 ivec4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 mat3x2 _f1;
 vec2 _f2;
 mat4x3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 uvec2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uvec3 _f1;
 mat2 _f2;
 int _f3;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_1 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_17 _f4;
 vec3 _f5;
 _GLF_struct_19 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4x3(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(-8.0, 62.63)) : mat2(1.0) * (injectionSwitch))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))).y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.3) : injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4x3(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(-8.0, 62.63)) : mat2(1.0) * (injectionSwitch))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))).y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.3) : injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4x3(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(-8.0, 62.63)) : mat2(1.0) * (injectionSwitch))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))).y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.3) : injectionSwitch.y))))))), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.8, -3.6)))).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.8, -3.6)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.3) : injectionSwitch.y))))))), bool(bvec4((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.8, -3.6)))).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.8, -3.6)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.3) : injectionSwitch.y))))))), false, false, true)))))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(-9361.9088, -1983.8042).g), _GLF_FUZZED(257.971)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, true, false))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(-9361.9088, -1983.8042).g), _GLF_FUZZED(257.971)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, true, false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 _GLF_struct_42 _GLF_struct_replacement_42 = _GLF_struct_42(gl_NumWorkGroups.x, _GLF_struct_25(_GLF_struct_21(mat4x2(1.0), mat3x4(1.0)), _GLF_struct_22(mat2(1.0), mat4x2(1.0)), _GLF_struct_23(mat3x2(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))), vec2(_GLF_IDENTITY(mat3(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), (mat3(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0))), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))), max(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))), vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(6.0, -5.3, -2.1).z)), bool(false)))))))), uvec4(1u), uvec4(1u), vec3(1.0), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(979.174) : (1.0))) + 0.0))), _GLF_struct_24(1.0), ivec2(1)), _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) + 0u))), _GLF_struct_30(_GLF_struct_26(true, uvec2(1u), mat4(1.0), mat3(1.0), mat3x2(1.0), 1, mat3(1.0)), mat2x4(1.0), _GLF_struct_27(bvec3(true), mat4(1.0), bvec3(true), mat4x3(1.0), bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_struct_28(1, vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (1.0), (1.0 * (1.0)) - 0.0), clamp(_GLF_IDENTITY(1.0 * (1.0), (1.0 * (1.0)) - 0.0), _GLF_IDENTITY(1.0 * (1.0), (1.0 * (1.0)) - 0.0), _GLF_IDENTITY(1.0 * (1.0), (1.0 * (1.0)) - 0.0))))), float(_GLF_FUZZED(-13.73)), bool(false)))), true, 1, ivec2(1), uvec3(1u)), _GLF_struct_29(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 | (1)))), min(1, 1))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(-60592, ~ (~ (-60592)))), (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 | (1)))), min(1, 1))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(-60592, ~ (~ (-60592))))) | (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 | (1)))), min(1, 1))) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(-60592, ~ (~ (-60592))))))), _GLF_IDENTITY(_GLF_IDENTITY(((true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0) : _GLF_FUZZED(-60592))) * 1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(((true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0) : _GLF_FUZZED(-60592))) * 1, max(((true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0) : _GLF_FUZZED(-60592))) * 1, ((true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0) : _GLF_FUZZED(-60592))) * 1)) : _GLF_FUZZED(24013))), (((true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0) : _GLF_FUZZED(-60592))) * 1) ^ 0)))), mat4(1.0), mat3x4(1.0), mat3x2(1.0), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(uvec2(1u), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), uint(uvec3(uint(_GLF_IDENTITY(1u, max(1u, 1u))), uint(_GLF_ONE(1.0, injectionSwitch.y)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u))))))))) << uvec2(0u, 0u), ((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u)))))))), min(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), _GLF_IDENTITY(0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u)))), ~ (~ (0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u))))))))))), (uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u))))))))) | uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u)))))))), (uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u))))))))) >> uvec2(0u, 0u))))) << uvec2(0u, 0u)) | ((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u)))))))), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u)))))))), max(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u)))))))), uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, max(1u, 1u))), 0u ^ (uint(_GLF_IDENTITY(1u, max(1u, 1u))))))))))) ^ uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << uvec2(0u, 0u)))))), ivec4(1))), _GLF_struct_33(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))))))))), bvec2(bvec4(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_struct_31(mat4(1.0), mat3(_GLF_IDENTITY(1.0, 0.0 + (1.0))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_struct_32(uvec2(1u))), _GLF_struct_37(_GLF_struct_34(true), _GLF_struct_35(mat3x2(1.0), vec2(1.0), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) / _GLF_IDENTITY(abs(vec3(1.0, 1.0, 1.0)), mix(vec3(_GLF_FUZZED(4.7), _GLF_FUZZED(float(_GLF_IDENTITY(141679u, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))) ? 141679u : _GLF_FUZZED(subgroup_id))))), _GLF_FUZZED(-7.1)), vec3(_GLF_IDENTITY((abs(vec3(1.0, 1.0, 1.0))), max(_GLF_IDENTITY((abs(vec3(1.0, 1.0, 1.0))), min((abs(vec3(1.0, 1.0, 1.0))), (abs(vec3(1.0, 1.0, 1.0))))), (abs(vec3(1.0, 1.0, 1.0)))))[0], (abs(vec3(1.0, 1.0, 1.0)))[1], _GLF_IDENTITY((abs(vec3(1.0, 1.0, 1.0)))[2], clamp((abs(vec3(1.0, 1.0, 1.0)))[2], (abs(vec3(1.0, 1.0, 1.0)))[2], (abs(vec3(1.0, 1.0, 1.0)))[_GLF_IDENTITY(2, min(2, 2))]))), bvec3(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)), true)))), mat2(1.0)), _GLF_struct_36(ivec3(1), uvec2(1u), mat2x4(1.0))), _GLF_struct_41(_GLF_struct_38(mat2(1.0), true, mat3x4(1.0), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, false || (true))), true && (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))))))))), _GLF_struct_39(mat3x2(1.0), 1.0, ivec2(1)), _GLF_struct_40(bvec2(true), ivec2(1)), vec4(1.0), 1u), vec4(1.0));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(false, true, false)))) || false)))
  barrier();
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_1(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) | (uvec2(1u))), _GLF_struct_0(uvec4(1u), uvec3(1u), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0))), 1)), _GLF_struct_6(_GLF_struct_2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), max(_GLF_IDENTITY(vec3(1.0), vec3(mat3x2(vec3(1.0), 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(_GLF_IDENTITY(1.0, (1.0) * cos(0.0))), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1.6) : 1.0, mix(float(false ? _GLF_FUZZED(1.6) : 1.0), float(_GLF_FUZZED(3133.2208)), bool(false)))))))))))), min(_GLF_IDENTITY(vec3(1.0), max(_GLF_IDENTITY(vec3(1.0), vec3(mat3x2(vec3(1.0), 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(_GLF_IDENTITY(1.0, (1.0) * cos(0.0))), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1.6) : 1.0, mix(float(false ? _GLF_FUZZED(1.6) : 1.0), float(_GLF_FUZZED(3133.2208)), bool(false)))))))))))), _GLF_IDENTITY(vec3(1.0), max(_GLF_IDENTITY(vec3(1.0), vec3(mat3x2(vec3(1.0), 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(_GLF_IDENTITY(1.0, (1.0) * cos(0.0))), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1.6) : 1.0, mix(float(false ? _GLF_FUZZED(1.6) : 1.0), float(_GLF_FUZZED(3133.2208)), bool(false)))))))))))))), mat3x2(1.0), vec2(1.0), mat4x3(1.0), ivec4(1)), uvec2(1u), _GLF_struct_3(mat2x4(1.0), 1u, bvec2(true), uvec2(1u), ivec4(1), vec2(1.0)), _GLF_struct_4(ivec2(1)), _GLF_struct_5(mat3x4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, abs(1.0), 1.0), vec3(mat2x3(_GLF_IDENTITY(vec3(1.0, abs(1.0), 1.0), clamp(vec3(1.0, abs(1.0), 1.0), vec3(1.0, abs(1.0), 1.0), _GLF_IDENTITY(vec3(1.0, abs(1.0), 1.0), (vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), abs(1.0), 1.0)) / vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)))))), 1, mat4(1.0), mat2x4(1.0), true, mat2x4(1.0), vec3(1.0))), _GLF_struct_8(_GLF_struct_7(bvec2(true), mat4x3(1.0), _GLF_IDENTITY(mat2(1.0), mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY((mat2(1.0)), transpose(transpose((mat2(1.0)))))), ivec4(1)), ivec2(1)), _GLF_struct_12(ivec4(1), ivec3(1), mat3x4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), _GLF_struct_9(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), uvec4(1u), _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (ivec4(1)) * ivec4(1, 1, 1, 1))) * ivec4(1, 1, 1, 1)), mat4(1.0), vec2(1.0), ivec3(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, 1)), 1, 0)))), mat3x2(1.0)), _GLF_struct_10(mat4(1.0), mat2x4(1.0)), _GLF_struct_11(mat3x2(1.0), mat2x4(1.0), bvec4(true), mat4x2(1.0)), vec3(1.0)), _GLF_struct_17(_GLF_struct_13(_GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(728.475, 22.99, 52.55, -52.63, 0.2, -1.8, -9.3, 51.07, 947.176)) : mat3(1.0))), uvec4(_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), uint(uint(uint(2u)))))), _GLF_IDENTITY(uint(2u), (uint(2u)) ^ 0u))) * (1u))), mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8362.8183) : _GLF_IDENTITY(1.0, sqrt(0.0) + (1.0))))), vec3(1.0)), mat4x2(1.0), _GLF_struct_14(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec3(bvec2(bvec2(true)), false))), false))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(bvec2(bvec2(true)), false, true))), _GLF_IDENTITY(false, (false) && true), true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec2(bvec2(bvec2(true))))), bvec2(bvec4(bvec2(bvec2(true)), false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))), false, true)))))))), bvec2(_GLF_IDENTITY(true, false || (true))), 1u, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(min(uvec2(1u), uvec2(1u)), clamp(min(uvec2(1u), uvec2(1u)), min(uvec2(1u), uvec2(1u)), min(uvec2(1u), uvec2(1u))))), _GLF_struct_15(mat4x2(1.0), 1u), _GLF_struct_16(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-19.63, -9247.2800, -976.366, 8845.6870)) : vec4(1.0))), clamp(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-19.63, -9247.2800, -976.366, 8845.6870)) : vec4(1.0))), _GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-19.63, -9247.2800, -976.366, 8845.6870)) : vec4(1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-19.63, -9247.2800, -976.366, 8845.6870)) : vec4(1.0))), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-19.63, -9247.2800, -976.366, 8845.6870)) : vec4(1.0))))))), vec2(1.0), bvec2(true))), vec3(1.0), _GLF_struct_19(gl_WorkGroupSize.x, _GLF_struct_18(vec2(1.0), mat4x3(1.0), 1.0, mat3x2(1.0), ivec2(1)), mat3x2(1.0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))), true)), ! (! (bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))), true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), true)), false || (_GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), false, true)))))), false)))), true)), (bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))), true))))))), true))) || false))))), (bool(bool(_GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))), bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true))))))), true)), false || (_GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))), true)), (bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))), true))) || false)))))) && true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u)) >> 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, length(0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(length(0.0), (length(0.0)) / cos(0.0)) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)) > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), max(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (true ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-5907.6938, 5643.6301)))), _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(vec2(-459.669, 0.7)) : min(injectionSwitch, injectionSwitch)))))).x, _GLF_IDENTITY(length(0.0), (length(0.0)) / cos(0.0)) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(171.065)), bool(false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
        barrier();
       barrier();
      }
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))) || false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.3, -5.4)) : injectionSwitch)).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_20._f6.workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ((false)) || false)))))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))), true && (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y)), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))), false || (_GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))), false || (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))))))))))))))))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-1.0)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))).y))), true && (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (_GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))) >> 0u) * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u), 1u * (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size))))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), 0u | (_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_size))))) << 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) | (subgroup_size))) << 0u, ((subgroup_size) << 0u) | ((subgroup_size) << 0u))), clamp(~ (_GLF_IDENTITY((subgroup_size) << 0u, ((subgroup_size) << 0u) | ((subgroup_size) << 0u))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) << 0u, ((subgroup_size) << 0u) | ((subgroup_size) << 0u))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) ^ 0u) << 0u, _GLF_IDENTITY(((subgroup_size) << 0u), (((subgroup_size) << 0u)) - (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) | ((subgroup_size) << 0u))), 0u + (~ (_GLF_IDENTITY((subgroup_size) << 0u, ((subgroup_size) << 0u) | ((subgroup_size) << 0u))))))))))))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, true, false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), true && (false)))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(4448, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(4448, int(ivec4(4448, 1, 0, 0))), 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((ivec4(_GLF_IDENTITY(4448, int(ivec4(4448, 1, 0, 0))), 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), ivec4(0, 0, 0, 0) ^ ((ivec4(_GLF_IDENTITY(4448, int(ivec4(4448, 1, 0, 0))), 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) / ivec4(1, 1, 1, 1))))) : _GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, 0 | (0))))), 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
}
