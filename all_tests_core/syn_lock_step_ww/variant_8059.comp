#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(366.875) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.3) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, sqrt(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))))), injectionSwitch.x)))))) > injectionSwitch.y)) || (_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), bool(bvec3(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), false, true))))))))))) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), bool(bvec3(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), false, true))))))))))) && true)), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), bool(bvec3(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), false, true))))))))))) && true))) || false), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), bool(bvec3(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), false, true))))))))))) && true)), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), bool(bvec3(! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)))), false, true))))))))))) && true))) || false), false, false, false)))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true))))))))) && true), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true))))))))), false, false))))) && true, false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(false)), false)))))), true, true))))))))), false, false))))) && true))))))), bool(bool(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bvec2(false, false)))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) && true))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)), bool(bvec2(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), true, true)), false)))))))))) && true))))))) && true)));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.5)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          return;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0)))) * (injectionSwitch)).y))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) / ivec2(1, 1))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_id)));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) ^ (max(1, 1))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) ^ (max(1, 1)))))))) % subgroup_size), _GLF_IDENTITY(uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), ~ (~ (max(1, 1)))))) % subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false)))), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false)))), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false)))), 1.0 * (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false)))))), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false)))), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false))))), float(_GLF_FUZZED(-6999.3516)), bool(false)))))), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(-751.895)), (float(_GLF_FUZZED(-751.895))) - 0.0), _GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))), (bool(false)) && true)))))))), (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-751.895)), bool(false)))))) | 0u)) ^ _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u))))), 0u)), (uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(max(1, 1), (true ? _GLF_IDENTITY(max(1, 1), (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))) / 1) : _GLF_FUZZED(51184))))) % subgroup_size), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5501.0471)), bvec2(true, false)))) - vec2(0.0, 0.0)).x)), 0u)), (uint(uvec3((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))) % subgroup_size, uint(uvec4((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size, 1u, 1u, 1u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) - 0u), ~ (~ (_GLF_IDENTITY(uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(max(1, 1), (true ? _GLF_IDENTITY(max(1, 1), (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))) / 1) : _GLF_FUZZED(51184))))) % subgroup_size), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5501.0471)), bvec2(true, false)))) - vec2(0.0, 0.0)).x)), 0u)), (uint(uvec3((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))) % subgroup_size, uint(uvec4((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size, 1u, 1u, _GLF_IDENTITY(1u, (1u) - 0u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) - _GLF_IDENTITY(0u, 0u ^ (0u)))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) && (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), (uint(_GLF_IDENTITY(1, (1) | 0))) << 0u), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-13.27), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(0.0, 4.0))))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(973.395)), bvec2(true, false))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-96.52)), vec2(_GLF_FUZZED(7226.9798), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         break;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) || false), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), bool(bvec4(false, true, _GLF_IDENTITY(true, false || (true)), false))), false, false)), true && (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, (false) && true), false, false)))), _GLF_IDENTITY((bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, false))), ((bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, false)))) || false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, _GLF_IDENTITY(true, (true) && true))), _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(true, false, true)))))) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(3), int(3))) | 0)), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), int(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), min(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), clamp(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))))) | 0)))), (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), int(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), min(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), clamp(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))))) | 0)))), bool(bool(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), int(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), min(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), clamp(ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))), ivec4((0 << _GLF_IDENTITY(int(3), int(3))), 1, 1, 1))))) | 0)))))))) || false)); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 1u, _GLF_IDENTITY(0u, (0u) + 0u), 1u), (false ? _GLF_FUZZED((uvec4(38819u, 160994u, 101569u, 67507u) + workgroup_size)) : uvec4(_GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (true), true && (! (true)))))), ! (! ((_GLF_IDENTITY(! (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (true), true && (! (true))))))))))))) ? 0u : _GLF_FUZZED(subgroup_local_id))), 1u, 0u, 1u))))) ^ (uint(2)))) / 1u), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(4, 0, (1 & 1))), (_GLF_IDENTITY(int(ivec3(4, 0, (1 & 1))), min(int(ivec3(4, 0, (1 & 1))), int(ivec3(4, 0, (1 & 1)))))) | (int(ivec3(4, 0, (1 & 1)))))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(421.604)), bool(false)))) / sqrt(cos(0.0))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(421.604), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), (_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(-8.1) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), (_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), (_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), (_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), (_GLF_IDENTITY(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(421.604), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))), bool(false)))) / sqrt(cos(0.0))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), false || (bool(bvec2(_GLF_DEAD(false), false))))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true, true), false))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, (0) / (1 | _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(6), int(6))))), 0 + ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), int(6))), (true ? ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), 0 ^ (~ (6)))))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(_injected_loop_counter)))))), bool(bvec3((_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) / (1 | _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), (true ? ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, min(6, 6))))), int(6))))) >> _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(true, bool(bvec2(true, true))), false)))))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), bool(bool(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), true && ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))))), true))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(19.69)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) + 0.0)))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false, false))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).y))))
                continue;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, clamp(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, int(_GLF_ONE(1.0, injectionSwitch.y)) | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch), (true ? max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch) : _GLF_FUZZED(((- vec2(-0.5, 7.9)) - injectionSwitch))))).x > injectionSwitch.y)), false)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch), (true ? max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch) : _GLF_FUZZED(((- vec2(-0.5, 7.9)) - injectionSwitch))))).x > injectionSwitch.y)), false)))) || false, ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), injectionSwitch), (_GLF_IDENTITY(true ? max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch) : _GLF_FUZZED(((- vec2(-0.5, 7.9)) - injectionSwitch)), max(true ? max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch) : _GLF_FUZZED(((- vec2(-0.5, 7.9)) - injectionSwitch)), true ? max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch) : _GLF_FUZZED(((- vec2(-0.5, 7.9)) - injectionSwitch))))))).x > injectionSwitch.y)), false)))) || false)))) && true)))) && true))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5317.7633) : injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))), false))))) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.4)), float(injectionSwitch.y), bool(true)))), true && ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1]))))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.4)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (bool(true))))))))))))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (61276 & 0) + (_GLF_IDENTITY(2, (2) / 1)))), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 0); _injected_loop_counter --)
    {
     do
      {
       return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  barrier();
}
