#version 460
struct _GLF_struct_1 {
 uvec4 _f0;
 vec3 _f1;
 int _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 uvec2 _f1;
 vec2 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_3 {
 uint workgroup_size;
 uvec2 _f0;
 _GLF_struct_2 _f1;
 bvec2 _f2;
 mat3x2 _f3;
 bool _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 uint subgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(vec2(1.0), gl_SubgroupSize);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_WorkGroupSize.x, uvec2(1u), _GLF_struct_2(mat2(1.0), uvec2(1u), vec2(1.0), _GLF_struct_1(uvec4(1u), vec3(1.0), 1, uvec4(1u))), bvec2(true), mat3x2(1.0), true);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_3.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_0.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_0.subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
}
