#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), true), true)))))))) && true))) || false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), false || (true && (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 + (~ (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), int(int((0 >> _GLF_IDENTITY(int(7), int(7)))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), 1 * (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (false ? _GLF_FUZZED(88680) : int(2)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true))))), false || (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false))), true))))))))))))))), true))))))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
              {
               barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-820.278)), bool(false)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))), false, true, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-477.521, -9.9))))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), min(0 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), 0 | (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(1, ~ (~ (1))) * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), ~ (~ _GLF_IDENTITY(((1 ^ 0)), clamp(_GLF_IDENTITY(((1 ^ 0)), max(((1 ^ 0)), ((1 ^ 0)))), ((1 ^ 0)), _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ 0))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 ^ 0), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((1 ^ 0)), clamp(((1 ^ 0)), ((1 ^ 0)), _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ 0))), ~ (~ (~ _GLF_IDENTITY(((1 ^ 0)), clamp(((1 ^ 0)), ((1 ^ 0)), _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ 0)))))))), 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(int(ivec2(_GLF_IDENTITY((1 ^ 0), ~ (~ _GLF_IDENTITY(((1 ^ 0)), clamp((_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))), ((1 ^ 0)), _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ 0))))), 0)), 0, 0, 1)), (int(ivec4(int(ivec2(_GLF_IDENTITY((1 ^ 0), ~ (~ _GLF_IDENTITY(((1 ^ 0)), clamp((_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))), ((1 ^ 0)), _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ 0))))), 0)), 0, 0, 1))) + 0), min(int(ivec4(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), int(_GLF_IDENTITY(ivec3((1 ^ 0), 0, 0), (true ? _GLF_IDENTITY(ivec3((1 ^ 0), 0, 0), (ivec3((1 ^ 0), 0, 0)) >> ivec3(0, 0, 0)) : _GLF_FUZZED(ivec3(-59680, 21831, 55569)))))), ~ (~ _GLF_IDENTITY(((1 ^ 0)), clamp(((1 ^ 0)), ((_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)))), _GLF_IDENTITY(((1 ^ 0)), (((1 ^ 0))) ^ 0))))), 0)), 0, 0, 1)), int(ivec4(int(ivec2(_GLF_IDENTITY((1 ^ 0), ~ (~ _GLF_IDENTITY(((1 ^ 0)), clamp(((1 ^ 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, (1 ^ 0) << 0), (1 ^ 0) >> (_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(2), int(2)))))), _GLF_IDENTITY(((1 ^ _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0)))), (((1 ^ 0))) ^ 0))))), 0)), 0, 0, 1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) & (_GLF_IDENTITY(~ _GLF_IDENTITY(-13702, (-13702) | _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0))))))) | 0)) - 0))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0))))))) | 0)) - 0)))), ~ (~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, _GLF_IDENTITY((1 ^ 0), ~ (~ ((1 ^ 0)))))), int(ivec2(0, (1 ^ 0))))))) | 0)) - 0))))))))))), (_GLF_IDENTITY(~ _GLF_IDENTITY(-13702, (-13702) | _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0))))))) | 0)) - 0))))), (~ _GLF_IDENTITY(-13702, (-13702) | _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0))))))) | 0)) - 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY(-13702, (-13702) | _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), _GLF_IDENTITY(max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))), 0 ^ (max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) | (1 ^ 0))))), max(int(ivec2(0, (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), min(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0))))))))) | 0)) - 0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ _GLF_IDENTITY(-13702, (-13702) | _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (_GLF_IDENTITY(1, (1) / 1) ^ 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(ivec2(0, (1 ^ 0))), int(ivec2(0, (1 ^ 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (1 ^ 0))), max(int(_GLF_IDENTITY(ivec2(0, (_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, _GLF_IDENTITY(1 ^ 0, int(ivec4(1 ^ 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), 1 ^ 0)))), max(ivec2(0, (_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, _GLF_IDENTITY(1 ^ 0, int(ivec4(1 ^ 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), 1 ^ 0)))), ivec2(0, (_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, _GLF_IDENTITY(1 ^ 0, int(ivec4(1 ^ 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), 1 ^ 0))))))), int(ivec2(0, (1 ^ 0))))))) | 0)) - 0)))))))))))), (_injected_loop_counter) | _GLF_IDENTITY((_injected_loop_counter), ((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) - 0)) > _GLF_IDENTITY(0, ~ (~ (0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), min(1 << _GLF_IDENTITY(int(4), int(4)), 1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) * 1)), 0 + (int(4)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))) / 1), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), 1 * (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))), 1 * (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)) || false))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.y = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) << 0u), (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(_GLF_IDENTITY(0u, (0u) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 0u ^ (uint(5u))), _GLF_IDENTITY(uint(5u), clamp(uint(_GLF_IDENTITY(5u, (5u) ^ 0u)), uint(5u), uint(5u)))))), 0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id) : GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id)), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))) ^ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id), ((GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id)) | uvec4(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 0u))))).y))))), _GLF_IDENTITY(clamp(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | ((GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y))) | 0u, (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | ((GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y))) | 0u) << 0u))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id) / uvec4(1u, 1u, 1u, 1u)).y, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, max(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y))), min(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id), (false ? _GLF_FUZZED((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id % subgroup_id)) : uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id)))).y)))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) | 0u)), clamp(clamp(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) | 0u)), clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, min(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y)), GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) | 0u)), clamp(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) | 0u))))) | 0u)), clamp(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, 1u * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(1u, 0u + (1u)) * (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y)))), (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y) | 0u), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, max(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id, GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id)) : _GLF_FUZZED(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))).y)), GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.y));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w = _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), max((0 << _GLF_IDENTITY(int(0), int(0))), (0 << _GLF_IDENTITY(int(0), int(0))))))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w, _GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w), ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.w)) - 0u) - 0u);
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), true))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), bool(bvec2((_GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (-2463 & 0) | (0)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > 0), _GLF_IDENTITY((! (_injected_loop_counter > 0)), bool(_GLF_IDENTITY(bvec3((! (_injected_loop_counter > 0)), true, false), bvec3(bvec4(bvec3((! (_injected_loop_counter > 0)), true, false), true))))) && true)), bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > 0), (! (_injected_loop_counter > 0)) && true)), true))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (-2463 & 0) | (0)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > 0), _GLF_IDENTITY((! (_injected_loop_counter > 0)), bool(_GLF_IDENTITY(bvec3((! _GLF_IDENTITY((_injected_loop_counter > 0), false || (_GLF_IDENTITY((_injected_loop_counter > 0), bool(bvec2((_injected_loop_counter > 0), true)))))), true, false), bvec3(bvec4(bvec3((! (_injected_loop_counter > 0)), true, false), true))))) && true)), bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > 0), (! (_injected_loop_counter > 0)) && true)), true)))))) && true); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
      barrier();
     barrier();
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.y = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-37969 & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-0.8, -6.6)), mix(vec2(_GLF_FUZZED(79.14), _GLF_FUZZED(-841.893)), vec2((_GLF_FUZZED(vec2(-0.8, -6.6)))[0], (_GLF_FUZZED(_GLF_IDENTITY(vec2(-0.8, -6.6), vec2(vec2(vec2(-0.8, -6.6))))))[_GLF_IDENTITY(1, 0 + (1))]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-570.034), ((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-0.8, -6.6)), mix(vec2(_GLF_FUZZED(79.14), _GLF_FUZZED(-841.893)), vec2((_GLF_FUZZED(vec2(-0.8, _GLF_IDENTITY(-6.6, (-6.6) - 0.0))))[0], (_GLF_FUZZED(_GLF_IDENTITY(vec2(-0.8, -6.6), min(_GLF_IDENTITY(vec2(-0.8, -6.6), min(vec2(-0.8, -6.6), vec2(-0.8, -6.6))), _GLF_IDENTITY(vec2(-0.8, -6.6), vec2(0.0, 0.0) + (vec2(-0.8, -6.6)))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : min(injectionSwitch, injectionSwitch)))[1]), vec2(((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-0.8, -6.6)), mix(vec2(_GLF_FUZZED(79.14), _GLF_FUZZED(-841.893)), vec2((_GLF_FUZZED(vec2(-0.8, -6.6)))[0], (_GLF_FUZZED(vec2(-0.8, -6.6)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-542.733)), bvec2(true, false))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(vec2(-0.8, -6.6)) : min(injectionSwitch, injectionSwitch)))).y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch))), 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), max(vec2(mat3x4(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch))), 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat3x4(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch))), 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))))) * vec2(1.0, 1.0), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) * vec2(1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))) * vec2(1.0, 1.0)) * mat2(1.0)))))) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0), vec2(0.0, 0.0)))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.4, -1.3)) : injectionSwitch)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(vec2(-7.6, -33.21)) : injectionSwitch))), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(9.1, 5.4))))) / vec2(1.0, 1.0))))))).y) || false))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true, true))))), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, false)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u), 1u * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u), (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u)) / 1u)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.w = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.w) >> 0u);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.w;
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
       barrier();
      }
     barrier();
    }
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)) / 1u)) | 0u), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base) / (_GLF_IDENTITY(1u, min(1u, 1u)) & 1u))) - 0u);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(bitCount(76194)) : _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))) && true))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true)))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.y;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z = _GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_base) : subgroup_base))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(-61394)), 1 * (_GLF_IDENTITY((true ? 0 : _GLF_FUZZED(-61394)), clamp((true ? 0 : _GLF_FUZZED(-61394)), (true ? 0 : _GLF_FUZZED(-61394)), (true ? 0 : _GLF_FUZZED(-61394))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) && true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, 1u * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z))) / 1u))), (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z) + uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))).x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), max(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), ~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, _GLF_IDENTITY(clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id), (clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)) | uvec4(0u, 0u, 0u, 0u)))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))).x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), max(_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), (~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x)) | 0u), ~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x))))), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))).x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), max(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), ~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))), min(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))), _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))))), _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))))).x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), max(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), ~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (true ? GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id : _GLF_FUZZED((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id | uvec4(175829u, 73754u, 100055u, 34434u))))), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, max(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))))).x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), max(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), ~ (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x, min(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x))))))))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id)))).x, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), max(~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x), ~ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x))))))))), uint(uvec4(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x, 1u, 0u, 1u)))));
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.6))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)), min(float(mat4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.6))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)), float(mat4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.6))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, true))))))) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(bool(17142u)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), bool(bvec4(! ((false) && true), true, true, false))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.7) : injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))));
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.z + (_GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.y, (_GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.y, (_GLF_IDENTITY((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.y, ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.y) << (0u & 167637u))) >> 0u)) << 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec2(bvec2(! (false), true)))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec2(bvec2(! (false), true)))), false, false)), true)))), _GLF_IDENTITY(bvec2(bvec2(bvec2(! (false), true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(! (false), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))), (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))) || false))))), false)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(! (false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2(bvec2(! (false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))))))), false)), true))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(! (false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), ! (! (bool(bool(true)))))))), bvec2(bvec4(bvec2(bvec2(! (false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), ! (! (bool(bool(true)))))))), true, false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2(bvec2(! (false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))), false)), true))), true)), true))))))), _GLF_IDENTITY(bool(bool(bool(bvec2(! (false), true)))), _GLF_IDENTITY(bool(bool(bool(bool(bool(bvec2(! (false), true)))))), bool(bool(bool(bool(bool(bool(bool(bvec2(! (false), true)))))))))))))), bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), mat4x2(mat4(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x = next_virtual_gid, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x = next_virtual_gid) << 0u)) * 1u);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id.x = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidsubgroup_sizeworkgroup_baseworkgroup_id.x)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 atomicStore(buf[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_12subgroup_local_idsubgroup_sizevirtual_gidworkgroup_id.z], _GLF_IDENTITY(uint(1), (uint(1)) * 1u), 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(98788))), 4);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), true, true))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) | (int(0)), 0 | (_GLF_IDENTITY((int(0)) | (int(0)), ((int(0)) | (int(0))) | ((int(0)) | (int(0)))))))) | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (false ? _GLF_FUZZED(-48331) : _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 1 * (_GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))))), _GLF_IDENTITY(int(2), int(2))))) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), vec2(vec2(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id), (~ (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_17next_virtual_gidnum_workgroupsubgroup_basesubgroup_local_id)) - uvec4(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) | 0u), _GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))).x], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(min(2, 2), (min(2, _GLF_IDENTITY(2, (2) >> (_GLF_IDENTITY(0 | 0, (0 | 0) - 0))))) | 0), max(min(2, 2), min(2, 2))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) ^ 0), 4, 4)), 64, 4);
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 52185)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
              barrier();
            }
          }
        }
       else
        {
        }
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}
