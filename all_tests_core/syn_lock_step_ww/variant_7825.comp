#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 bvec4 _f0;
 bvec2 _f1;
 uint _f2;
 bool _f3;
 bool _f4;
 vec2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 int _f1;
 mat3 _f2;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 mat2 _f1;
 int _f2;
 int _f3;
 mat4x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_9 {
 bool _f0;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 mat2 _f3;
 _GLF_struct_11 _f4;
 uint subgroup_id;
 _GLF_struct_12 _f5;
} ;

struct _GLF_struct_7 {
 uint _f0;
 vec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 mat4x3 _f3;
 uvec4 _f4;
 vec4 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 mat4 _f1;
 _GLF_struct_7 _f2;
} ;

struct _GLF_struct_4 {
 int _f0;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 float _f1;
 uvec4 _f2;
 vec2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_2 {
 uint _f0;
 mat2x3 _f1;
 bvec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 mat2x4 _f1;
 uvec2 _f2;
 mat4x2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 int _f1;
 uvec4 _f2;
 ivec2 _f3;
 mat3x4 _f4;
 mat3x4 _f5;
 uint _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 int _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_5 _f0;
 vec4 _f1;
 mat2 _f2;
 int _f3;
 bool _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_13 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id;
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_5(_GLF_struct_0(mat4x2(1.0), 1, uvec4(1u), ivec2(1), mat3x4(1.0), mat3x4(1.0), 1u), _GLF_struct_1(mat2(1.0), mat2x4(1.0), uvec2(1u), mat4x2(1.0), vec3(1.0)), _GLF_struct_2(1u, mat2x3(1.0), bvec2(true), 1u), _GLF_struct_3(ivec3(1), 1.0, uvec4(1u), vec2(1.0), uvec4(1u)), _GLF_struct_4(1), 1, bvec2(true)), vec4(1.0), mat2(1.0), 1, true, _GLF_struct_8(_GLF_struct_6(mat2(1.0), mat2x3(1.0), bvec3(true), mat4x3(1.0), uvec4(1u), vec4(1.0), mat2x4(1.0)), mat4(1.0), _GLF_struct_7(1u, vec2(1.0), mat3x4(1.0))), _GLF_struct_13(uvec2(1u), _GLF_struct_9(true), _GLF_struct_10(uvec2(1u), mat2(1.0), 1, 1, mat4x3(1.0), ivec2(1)), mat2(1.0), _GLF_struct_11(mat2x3(1.0), 1, mat3(1.0)), gl_SubgroupID, _GLF_struct_12(bvec4(true), bvec2(true), 1u, true, true, vec2(1.0), mat3(1.0))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id.z = _GLF_struct_replacement_14._f6.subgroup_id;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id.z = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id.z;
 uint subgroup_base = GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id.z * subgroup_size;
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id.y = subgroup_base;
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id.y + subgroup_local_id;
 GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id.y = virtual_gid;
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_basesubgroup_id.y + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id.y], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id.x], uint(2), 4, 64, 4);
  }
}
