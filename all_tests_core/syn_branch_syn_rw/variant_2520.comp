#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 84:
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), ! (! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))))), _GLF_IDENTITY((! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || false), false || (true && _GLF_IDENTITY((false), ((false)) || false))), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false))))) && true)) || false)))), ! (! ((! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || false), false || (true && _GLF_IDENTITY((false), ((false)) || false))), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false))))) && true)) || false))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), _GLF_IDENTITY((true && (false)) && true, _GLF_IDENTITY(bool(bvec2((true && (false)) && true, false)), ! (! (bool(bvec2((true && (false)) && true, false))))))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))))), (! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), true && (! (! (true))))))))), false, true, false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false))) || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)))))), (! (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), false, true, false))))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))))))))) || false))))))) && true)))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), 0u ^ (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(workgroup_size)))))) == 0)
      {
       switch(_GLF_SWITCH((_GLF_IDENTITY(-3933 & _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (0 >> _GLF_IDENTITY(int(4), int(4)))))))))), ~ (~ (_GLF_IDENTITY(-3933 & _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (0 >> _GLF_IDENTITY(int(4), int(4)))))))))), (-3933 & _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (0 >> _GLF_IDENTITY(int(4), int(4))))))))))) / 1)))))))
        {
         case 8:
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           mat4(-117.830, 42.71, 9734.8857, -6.9, -21.31, -7.0, 87.51, -1349.8078, 8522.0127, -8.6, -893.537, 0.2, 714.379, 8.2, -82.61, 7699.6289);
          }
         else
          {
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         case 57:
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(float _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v; false; _GLF_IDENTITY((uvec3(_GLF_IDENTITY(173324u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(173324u, uint(uvec4(173324u, 0u, 1u, 0u))), 0u, 0u, 0u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(173324u, (true ? 173324u : _GLF_FUZZED(subgroup_base))), uint(uvec4(173324u, 0u, 1u, 0u))), 0u, 0u, 0u), uvec4(_GLF_IDENTITY(173324u, uint(uvec4(173324u, 0u, 1u, 0u))), 0u, 0u, 0u)))), uint(uvec3(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(173324u, _GLF_IDENTITY(uint(uvec4(173324u, 0u, 1u, 0u)), (uint(uvec4(173324u, 0u, 1u, 0u))) | (uint(uvec4(173324u, 0u, 1u, 0u))))), 0u, 0u, 0u), min(uvec4(_GLF_IDENTITY(173324u, uint(uvec4(173324u, 0u, 1u, 0u))), 0u, 0u, 0u), uvec4(_GLF_IDENTITY(173324u, uint(uvec4(173324u, 0u, 1u, 0u))), 0u, 0u, 0u)))), 1u, 0u)))), 153385u, 161158u) % uint(_GLF_SWITCH_0_1v)), uvec3(uvec4((uvec3(173324u, 153385u, 161158u) % uint(_GLF_SWITCH_0_1v)), 0u))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(true)
              {
               if(_GLF_DEAD(false))
                break;
               mat2x4(75.48, -391.391, 7.5, -873.179, -51.84, 5097.2019, 6.2, 1.0);
               (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat3(-3.3, 2503.8729, 6073.0135, _GLF_IDENTITY(-7.7, min(_GLF_IDENTITY(-7.7, min(_GLF_IDENTITY(-7.7, min(-7.7, -7.7)), -7.7)), -7.7)), -448.538, -924.627, 6.2, -0.7, 1.2), (false ? _GLF_FUZZED(mat3(971.029, -7.3, 6188.4167, -9.4, 55.97, -327.206, -8717.7330, 2.8, -7344.3996)) : mat3(-3.3, 2503.8729, 6073.0135, -7.7, -448.538, -924.627, 6.2, -0.7, 1.2))) / mat3(8232.5057, -5.0, 32.78, 969.662, 5.6, -852.489, 299.455, _GLF_IDENTITY(59.63, clamp(_GLF_IDENTITY(59.63, min(59.63, 59.63)), 59.63, 59.63)), -2822.1074), (false ? _GLF_FUZZED(mat3(-981.877, 84.28, -40.19, 479.632, _GLF_IDENTITY(-938.963, min(_GLF_IDENTITY(-938.963, min(_GLF_IDENTITY(-938.963, max(-938.963, -938.963)), -938.963)), -938.963)), 17.59, 92.31, 6.5, -7.9)) : _GLF_IDENTITY(mat3(-3.3, 2503.8729, 6073.0135, -7.7, -448.538, -924.627, 6.2, -0.7, 1.2), (mat3(-3.3, 2503.8729, 6073.0135, -7.7, -448.538, -924.627, 6.2, -0.7, 1.2)) * mat3(1.0)) / mat3(8232.5057, -5.0, 32.78, _GLF_IDENTITY(969.662, mix(float(_GLF_IDENTITY(969.662, max(969.662, 969.662))), float(_GLF_FUZZED(-6458.7866)), bool(false))), 5.6, -852.489, 299.455, 59.63, _GLF_IDENTITY(-2822.1074, (_GLF_IDENTITY(-2822.1074, mix(float(-2822.1074), float(_GLF_FUZZED(-1.4)), bool(_GLF_IDENTITY(false, false || (false)))))) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), (false ? _GLF_FUZZED(mat3(5.1, -8.7, 57.18, -153.312, 8.5, 8.8, -631.415, 5.0, 24.19)) : _GLF_IDENTITY(_GLF_IDENTITY(mat3(-3.3, 2503.8729, 6073.0135, -7.7, -448.538, -924.627, 6.2, -0.7, 1.2), (false ? _GLF_FUZZED(mat3(971.029, -7.3, 6188.4167, -9.4, 55.97, -327.206, -8717.7330, 2.8, -7344.3996)) : mat3(-3.3, _GLF_IDENTITY(2503.8729, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-7259.3564)), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-7259.3564, (-7259.3564) - 0.0))), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-7259.3564)), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true)), (mix(float(_GLF_FUZZED(-7259.3564)), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true))) - sin(0.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-7259.3564)), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_FUZZED(-7259.3564)), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true)), _GLF_IDENTITY((mix(float(_GLF_FUZZED(-7259.3564)), float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), bool(true))) - 0.0, cos(0.0) * ((mix(float(_GLF_FUZZED(-7259.3564)), _GLF_IDENTITY(float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729))), (float(_GLF_IDENTITY(2503.8729, min(2503.8729, 2503.8729)))) / 1.0), bool(true))) - 0.0))))))) : _GLF_FUZZED(_GLF_SWITCH_0_1v)))), 6073.0135, _GLF_IDENTITY(-7.7, float(_GLF_IDENTITY(mat4x3(-7.7, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(_GLF_SWITCH_0_1v))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))) + 0.0), 0.0))), 1.0)), 1.0)), injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.3)), float(1.0), bool(true)))))), (false ? _GLF_FUZZED(mat4x3(2.1, -754.670, 439.709, -8563.3759, -3.5, 6.8, -9780.1091, 5316.1268, 758.173, _GLF_IDENTITY(89.75, mix(float(_GLF_FUZZED(vec3(396.506, 380.160, 1.4).p)), float(89.75), bool(true))), -1.3, -3.5)) : mat4x3(-7.7, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(sqrt(1.0))))))), -448.538, -924.627, 6.2, -0.7, _GLF_IDENTITY(1.2, clamp(_GLF_IDENTITY(1.2, (true ? 1.2 : _GLF_FUZZED(817.425))), 1.2, 1.2))))) / mat3(8232.5057, -5.0, 32.78, 969.662, 5.6, _GLF_IDENTITY(-852.489, float(float(_GLF_IDENTITY(-852.489, mix(float(-852.489), float(_GLF_FUZZED(7.6)), bool(false)))))), _GLF_IDENTITY(_GLF_IDENTITY(299.455, max(299.455, _GLF_IDENTITY(299.455, min(299.455, 299.455)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (_GLF_IDENTITY(299.455, max(299.455, _GLF_IDENTITY(299.455, min(299.455, 299.455)))))), _GLF_IDENTITY(59.63, clamp(_GLF_IDENTITY(59.63, min(59.63, 59.63)), 59.63, 59.63)), -2822.1074), (false ? _GLF_FUZZED(mat3(-981.877, 84.28, -40.19, 479.632, -938.963, 17.59, 92.31, 6.5, -7.9)) : mat3(-3.3, _GLF_IDENTITY(2503.8729, (_GLF_IDENTITY(2503.8729, mix(float(_GLF_IDENTITY(2503.8729, float(mat4x3(2503.8729, exp(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-3.4)), bool(false)))) + log(abs(1.0))), 6073.0135, -7.7, -448.538, -924.627, 6.2, -0.7, 1.2) / mat3(8232.5057, -5.0, 32.78, _GLF_IDENTITY(_GLF_IDENTITY(969.662, min(_GLF_IDENTITY(969.662, max(969.662, 969.662)), _GLF_IDENTITY(969.662, (969.662) / _GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, abs(1.0), exp(tan(0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)))))), mix(float(_GLF_IDENTITY(969.662, max(969.662, 969.662))), float(_GLF_FUZZED(-6458.7866)), bool(false))), 5.6, -852.489, 299.455, 59.63, _GLF_IDENTITY(-2822.1074, (_GLF_IDENTITY(-2822.1074, _GLF_IDENTITY(mix(float(-2822.1074), float(_GLF_FUZZED(-1.4)), bool(false)), (mix(float(-2822.1074), float(_GLF_FUZZED(-1.4)), bool(false))) - 0.0))) + 0.0)))))));
              }
             else
              {
               ((+ mat4(-78.91, _GLF_IDENTITY(_GLF_IDENTITY(-9.5, mix(float(-9.5), float(_GLF_FUZZED(944.393)), bool(false))), _GLF_IDENTITY(min(-9.5, -9.5), _GLF_IDENTITY(clamp(_GLF_IDENTITY(min(-9.5, -9.5), (_GLF_IDENTITY(min(-9.5, -9.5), clamp(min(-9.5, -9.5), min(-9.5, -9.5), _GLF_IDENTITY(min(-9.5, -9.5), (_GLF_IDENTITY(min(-9.5, -9.5), (min(-9.5, -9.5)) / 1.0)) / cos(sqrt(0.0)))))) * 1.0), min(-9.5, -9.5), min(-9.5, -9.5)), (clamp(_GLF_IDENTITY(min(-9.5, -9.5), (_GLF_IDENTITY(min(-9.5, -9.5), clamp(min(-9.5, -9.5), min(-9.5, -9.5), _GLF_IDENTITY(min(-9.5, -9.5), (_GLF_IDENTITY(min(-9.5, -9.5), (min(-9.5, -9.5)) / 1.0)) / cos(sqrt(0.0)))))) * _GLF_IDENTITY(1.0, min(1.0, 1.0))), min(-9.5, -9.5), min(-9.5, _GLF_IDENTITY(-9.5, (_GLF_IDENTITY(-9.5, max(-9.5, -9.5))) * round(length(normalize(vec3(1.0, 1.0, 1.0)))))))) / 1.0))), 4.9, 1.6, -1.8, -271.587, -0.1, -507.743, 435.268, -6.1, -48.88, _GLF_IDENTITY(6.1, (6.1) - 0.0), 2.8, 503.999, -1677.8748, -9.5)) * mat3x4(4.9, 9.1, 8663.2233, -4834.4093, 349.860, -1.4, 9316.2174, 290.867, 6.6, 8004.8095, 9302.5164, 1.5));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               uint _GLF_SWITCH_0_2v;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
               _GLF_IDENTITY(mat2(((mat4x2(7.8, -51.88, -0.5, 499.172, 9.8, 7138.8671, _GLF_IDENTITY(827.451, clamp(_GLF_IDENTITY(827.451, (true ? 827.451 : _GLF_FUZZED(_GLF_SWITCH_0_0v))), _GLF_IDENTITY(827.451, clamp(827.451, 827.451, 827.451)), 827.451)), 9.0) / mat4x2(1933.0228, 7824.1404, -4.1, -486.886, 1.5, -9067.4671, 216.685, -5.6)) - _GLF_SWITCH_0_1v)), (false ? _GLF_FUZZED((mat2(-273.727, 875.883, 0.8, 772.939) / _GLF_IDENTITY(mat2(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(-8165.5707)), float(-3.0), bool(true))), -87.43, 5737.2121, -58.70), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(-8165.5707)), float(-3.0), bool(true))), -87.43, 5737.2121, -58.70), (false ? _GLF_FUZZED(mat2(-3.7, 8.8, -7.0, 89.53)) : mat2(_GLF_IDENTITY(-3.0, mix(float(_GLF_FUZZED(-8165.5707)), float(-3.0), bool(true))), -87.43, 5737.2121, -58.70)))) - mat2(0.0, 0.0, 0.0, 0.0)))) : mat2(((mat4x2(7.8, -51.88, -0.5, 499.172, 9.8, 7138.8671, 827.451, _GLF_IDENTITY(9.0, _GLF_IDENTITY(min(9.0, 9.0), mix(float(_GLF_IDENTITY(min(9.0, 9.0), 0.0 + (min(9.0, _GLF_IDENTITY(9.0, min(9.0, _GLF_IDENTITY(9.0, mix(float(_GLF_FUZZED(-734.673)), float(9.0), bool(true))))))))), float(_GLF_FUZZED(-3723.0187)), bool(false))))) / mat4x2(1933.0228, 7824.1404, -4.1, -486.886, 1.5, -9067.4671, 216.685, -5.6)) - _GLF_SWITCH_0_1v))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                  break;
                 continue;
                }
               ;
               do
                {
                 ;
                }
               while(_GLF_WRAPPED_LOOP(false));
               bvec4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
              }
             mat2x3 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v[91];
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
               if(_GLF_DEAD(false))
                continue;
              }
             do
              {
               (ivec2(104, -33428) ^ -82223);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         case 0:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(uvec4(next_virtual_gid, 1u, 0u, 1u)), 0u | (_GLF_IDENTITY(uint(uvec4(next_virtual_gid, 1u, 0u, 1u)), min(uint(uvec4(next_virtual_gid, 1u, 0u, 1u)), _GLF_IDENTITY(uint(uvec4(next_virtual_gid, 1u, 0u, 1u)), 0u ^ (uint(uvec4(next_virtual_gid, 1u, 0u, 1u)))))))))], uint(1), 4, 64, 4);
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
          }
         case 58:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (! (bool(bvec4(false, false, false, true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         case 75:
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) | (0 ^ 1)))); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         break;
         case 82:
         while((smoothstep(vec4(4.0, _GLF_IDENTITY(8.8, min(8.8, 8.8)), _GLF_IDENTITY(-6246.6475, float(mat4x2(-6246.6475, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 5.3), vec4(0.8, 32.71, -6.2, -8.2), _GLF_IDENTITY(vec4(-8.5, 115.073, -6484.4925, 2.2), (vec4(-8.5, 115.073, -6484.4925, 2.2)) - vec4(0.0, 0.0, 0.0, 0.0))) == vec4(-2.3, -8549.1327, _GLF_IDENTITY(5804.5056, max(5804.5056, 5804.5056)), -2.8)))
          {
           if(_GLF_DEAD(false))
            break;
           switch(_GLF_SWITCH(0))
            {
             case 49:
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
              break;
             step(-2285.9771, -9.8);
             case 0:
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               break;
              }
             case 46:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             case 70:
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             case 69:
             case 61:
             if(_GLF_DEAD(false))
              return;
             for(             uvec2(168883u, 185195u);
 true; (mat3x4(mat2x3(-2.4, -1.1, -7.1, -0.0, -0.9, _GLF_IDENTITY(6.6, min(6.6, 6.6)))) - mat3x4(mat2x3(0.5, 57.21, -0.1, 4.7, 686.888, -77.74))))
              {
               ivec3(_GLF_IDENTITY(-63299, (_GLF_IDENTITY(-63299, min(-63299, _GLF_IDENTITY(-63299, (-63299) / 1)))) << (0 >> _GLF_IDENTITY(int(4), int(4)))), -91989, -80503);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
               bool _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
               clamp(uvec3(24816u, 183004u, _GLF_IDENTITY(18915u, uint(_GLF_IDENTITY(uvec2(18915u, _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u), clamp(((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, uint(uvec3(4u, 0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))), uint(4u))) ^ 1u), ((0u >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))) ^ 1u) - ((0u << _GLF_IDENTITY(uint(7u), uint(7u))) | 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) + (1u ^ (1u | 0u))), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(read) : 0u)) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), (false ? _GLF_FUZZED(uvec4(77093u, 72942u, 191767u, 98608u)) : uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(workgroup_id)))), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) + (1u ^ (1u | 0u))), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(read) : 0u)) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), (false ? _GLF_FUZZED(uvec4(77093u, 72942u, 191767u, 98608u)) : uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u))))))), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u))) - (uvec2(0u, 0u) ^ uvec2(0u, 0u))), max(_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, _GLF_IDENTITY(((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, max(1u, 1u)))))), uint(uint(((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, max(1u, 1u)))))))))), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, (_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u, min((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u, 0u ^ ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)))))), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (_GLF_IDENTITY(0u, (0u) + 0u) >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) ^ 0u), 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))))) << uvec2(0u, 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (false ? _GLF_FUZZED(28855u) : _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u))), uvec2(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (false ? _GLF_FUZZED(28855u) : _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u))), min((_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (false ? _GLF_FUZZED(28855u) : _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u)), (_GLF_IDENTITY(uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (false ? _GLF_FUZZED(28855u) : _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) ^ 1u)), 0u, 1u)), uvec2(0u, 0u) ^ (uvec2(uvec4(uvec2(18915u, ((_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 1u)), 0u, 1u))))) << uvec2(0u, 0u))))), 1u, 1u))))) - uvec2(0u, 0u)))))))), uvec3(8274u, 176557u, 156131u), bitfieldInsert(uvec3(84345u, 69242u, 189950u), uvec3(43957u, 107895u, 195281u), -12151, 64326));
               uvec3 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             case 21:
             case 91:
             if(_GLF_DEAD(false))
              break;
             case 10:
             vec4 _GLF_SWITCH_0_12v;
             for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, ~ (~ (0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             case 12:
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) << 0), 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, true && (false)))))
                    break;
                   mat2(-5.7, -78.18, 2016.0779, -5.2);
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             case 63:
             ivec3 _GLF_SWITCH_2_0v[85], _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
             default:
             do
              {
               1;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))) || false), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              break;
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         case 38:
         for(         mat3(-434.150, -9.0, -9.2, 16.02, 4.6, _GLF_IDENTITY(_GLF_IDENTITY(48.28, _GLF_IDENTITY(clamp(48.28, _GLF_IDENTITY(48.28, max(48.28, 48.28)), 48.28), clamp(clamp(48.28, _GLF_IDENTITY(48.28, max(48.28, 48.28)), 48.28), clamp(48.28, _GLF_IDENTITY(48.28, max(48.28, 48.28)), 48.28), clamp(48.28, _GLF_IDENTITY(48.28, max(48.28, 48.28)), 48.28)))), min(48.28, 48.28)), 5.0, -3.6, -5886.5294);
 true; mat3(3823.0572, -74.53, -93.92, 29.35, -3.9, -8986.5511, -8.7, 9257.9689, -11.41))
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         default:
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
            continue;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
              }
             else
              {
               1;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       do
        {
         switch(_GLF_SWITCH(0))
          {
           case 32:
           mat2x4 _GLF_SWITCH_1_0v;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           case 56:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), max(float(float(injectionSwitch.y)), float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(960.898) : injectionSwitch.y)))))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0)), max(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0)), (_GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), clamp(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), float(vec4(_GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), max(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0)))))) / 1.0))))))))))
            break;
           ivec4 _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           case 0:
           case 27:
           case 39:
           case 69:
           if(_GLF_DEAD(false))
            continue;
           case 67:
           case 3:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           case 1:
           case 22:
           case 7:
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           default:
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           1;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0), clamp(vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0), vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0), vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
      return;
     break;
     case 59:
     {
      ;
      for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
       {
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8646.5800, clamp(-8646.5800, _GLF_IDENTITY(-8646.5800, float(mat4x3(-8646.5800, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), sqrt(0.0), 1.0))), -8646.5800)))), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), true, false)))))) > injectionSwitch.y))))
           return;
          return;
         }
       }
      bvec4(true, true, true, true);
      ivec4 _GLF_SWITCH_3_0v[55], _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v[83];
      for(      greaterThanEqual((_GLF_SWITCH_3_1v - 32704), (_GLF_IDENTITY(_GLF_SWITCH_3_1v, clamp(_GLF_SWITCH_3_1v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_1v)) + bitfieldInsert(-33874, -16571, -15626, 39458)));
 true; mat4(-635.325, -3.8, -673.043, -24.36, 5139.8899, 1716.4576, 6445.5978, 1373.9950, -175.185, _GLF_IDENTITY(9.0, (9.0) + 0.0), -3584.4645, 382.107, -59.35, -47.41, 123.078, 7.5))
       {
        if(_GLF_DEAD(false))
         continue;
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         continue;
       }
      for(      uvec2(163031u, 51544u);
 true; mat4((- mat3x4(-9938.2984, -2.9, 4430.6614, 0.1, 19.68, 7.3, 1571.3154, 3636.8115, _GLF_IDENTITY(2.2, 1.0 * (2.2)), 1.2, 7.7, -72.15))))
       {
        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
         }
        else
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
         }
       }
     }
     case 79:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     ;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     default:
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       1;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8733.2559)), bool(false)))))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 subgroupBarrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))), 1.0, length(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, determinant(mat2(0.0, 1.0, log(1.0), 0.0)), 1.0, 1.0, 0.0, 0.0)))) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
