#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0))), clamp(1, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) + 0), 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), (bool(bvec4(true, true, true, false))) || false)))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), true, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), true, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false, true)))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false)))))), false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))), true, false, true)))), true)), true, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), _GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), _GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) ^ 0), (_GLF_IDENTITY(((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), _GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), _GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) ^ 0)) >> 0)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))), false)))))))
          break;
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u, (0u) << 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))), max(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), ~ (~ (0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))) / 1u)), 0u | (~ (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), ~ (~ (0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))) / 1u)))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).y))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))))) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))))) && _GLF_IDENTITY(true, ! (! (true)))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))))) && _GLF_IDENTITY(true, ! (! (true)))), true, true)))))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)))))).x > injectionSwitch.y)))) || false)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 0.0, 0.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 0.0, 0.0)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(vec2(-267.450, -9.8))))).y, false, false, false))))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.1)), bool(false)))))))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3584.0488))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3584.0488)))))) || false)))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))) && true)), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
        break;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))) && true), true && (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 ^ (0))))), 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false || (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                }
               return;
              }
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (! (bool(bvec3(true, false, false)))))) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))))).x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), sqrt(1.0), 1.0, 0.0) : _GLF_FUZZED(mat3x2(70.69, -3762.2613, 9592.3828, 523.795, _GLF_IDENTITY(4495.9075, float(mat4x2(4495.9075, 0.0, 1.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, 1.0, abs(0.0), 0.0))), 4.8)))))).x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.9)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false)))) && true), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true), bvec3(bvec3(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true), bvec3(bvec3(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true))))), true)))), false), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))), true))), false), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))), true))), false), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))))), true, false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true))), bvec2(bvec2(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), true))), bvec2(bvec2(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))), true)), true)))))), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0)))), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), true, false)))), true, false)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec2(-65.77, -6.0) - 371.856)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           return;
          }
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_size * subgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), workgroup_base)), (workgroup_base) / 1u) + _GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : subgroup_base)), subgroup_base)) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false))), false, false, false))))))))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), uint(uvec4(_GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) | (0u ^ (subgroup_local_id))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)))) + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
  return;
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u ^ _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | ((buf[virtual_gid])))), 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.8) : injectionSwitch.x)) > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       return;
      }
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec4(! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true, true)))))) && true), bool(bool(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), ! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, false, true))))), ! (_GLF_IDENTITY(! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec4(! (bool(bvec3((false), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sqrt(0.0), 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sqrt(0.0), 1.0))), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), max(determinant(mat2(1.0, 0.0, 0.0, 1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0))))), mat2(mat3(mat2(injectionSwitch, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), max(vec3(1.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0))), vec3(0.0, sqrt(0.0), 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sqrt(0.0), 1.0))), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), max(determinant(mat2(1.0, 0.0, 0.0, 1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)))))))))).y)), true))), true, true, true)))))) && true), bool(bool(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))), true)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 1.0)))))).y))))
                continue;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false, true))))
                return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 + (_GLF_IDENTITY(0, (0) << 0)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) ^ 0, max((int(0)) ^ 0, (int(0)) ^ 0)))))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0), int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) ^ 0, ((int(0)) ^ 0) / 1)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))), max(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))), _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))))), _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)))))))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)), min((int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)), _GLF_IDENTITY((int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)), int(ivec2((int(0)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)), 0))))))))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0))))))) | 0), _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(43681) : 0))) >> 0))), int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), ((0)) | 0)), (~ (_GLF_IDENTITY((0), ((0)) | 0))) * 1)))))))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) + 0)), (int(0)) ^ 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) | (int(0))) : _GLF_FUZZED(-52537)))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)))), (int(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(29633) : 0, clamp(false ? _GLF_FUZZED(29633) : 0, false ? _GLF_FUZZED(29633) : 0, false ? _GLF_FUZZED(29633) : 0))))))) >> 0)), clamp(int(_GLF_IDENTITY(int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)))), (int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))) >> 0)), int(_GLF_IDENTITY(int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)))), (int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))) >> 0)), int(_GLF_IDENTITY(int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0)))), (int(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(29633) : 0))))) >> 0))))))))))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) - 0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) - 0)), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (0))), _GLF_IDENTITY((int(0)), ((int(0))) << 0) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), max((int(0)), (int(0)))) ^ _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), max((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) ^ 0)))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) ^ 0, clamp((int(0)) ^ 0, (int(0)) ^ 0, (int(0)) ^ 0)))))))))), 0, 0))) >> 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true)))))), false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(false, bool(bool(false))) || ((_GLF_WRAPPED_IF_TRUE(true)))), (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(false, bool(bool(false))) || ((_GLF_WRAPPED_IF_TRUE(true)))), bool(bvec3(true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(false, bool(bool(false))) || ((_GLF_WRAPPED_IF_TRUE(true)))), true, true)))) && true)))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), true))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true)), _GLF_IDENTITY(true, ! (! (true))), false))))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), true))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true)), _GLF_IDENTITY(true, ! (! (true))), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), true, false))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false), true)), true, false))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), true)), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, false), true)), true, false)))))), true, true))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), true, false))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)), true, false)))))), true, true))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, true && (true)))), false)), true, true))))))))))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec2(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(subgroup_local_id + 1 < (subgroup_size / 2))
        {
         atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 4 : _GLF_FUZZED(-25479))), 0), ~ (~ (ivec2(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 4 : _GLF_FUZZED(-25479))), 0))))), clamp(_GLF_IDENTITY(int(ivec2(4, 0)), (int(_GLF_IDENTITY(ivec2(4, 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(4, 0), (ivec2(4, 0)) ^ ivec2(0, 0)), ivec2(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) / 1))))) ^ (ivec2(4, 0)))))))) | 0), int(ivec2(4, 0)), int(ivec2(4, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), max(64, 64)), 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                return;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), false || (! (injectionSwitch.x < injectionSwitch.y))))))))))
            break;
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(72.20)), vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x))); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
              break;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, sqrt(1.0))), determinant(mat2(0.0, 1.0, 0.0, 0.0)) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, sqrt(1.0)))))) > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(1, (1) ^ 0))), min(_GLF_IDENTITY(~ (int(1)), (true ? ~ (int(1)) : _GLF_FUZZED(-31144))), ~ (int(1)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, max(1, 1))))), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), ((~ (int(1)))) | ((~ (int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (1 ^ 1) ^ (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) * abs(1.0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5634.7920, -8.7)) : injectionSwitch)).y), _GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)))).x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-6232), (_GLF_FUZZED(-6232)) - 0) : int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((true ? _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)) : _GLF_FUZZED(ivec4(-58660, _GLF_IDENTITY(70630, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (70630)), 98344, -8596)[1])), ((true ? _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)) : _GLF_FUZZED(ivec4(-58660, _GLF_IDENTITY(70630, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (70630)), 98344, -8596)[1]))) >> 0)))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(8017.2514), mix(float(_GLF_FUZZED(716.248)), float(true ? injectionSwitch.x : _GLF_FUZZED(8017.2514)), bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(8017.2514), mix(float(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8017.2514, (8017.2514) * 1.0)), (true ? _GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(8017.2514), (true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-5.0))) : _GLF_FUZZED(-6402.3117)))), float(_GLF_FUZZED(-5.2)), bool(false)))) - 0.0, 0.0 + (_GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(8017.2514), mix(float(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8017.2514, (8017.2514) * 1.0)), (true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-6402.3117)))), float(_GLF_FUZZED(-5.2)), bool(false)))) - 0.0, (true ? (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(8017.2514), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8017.2514, (8017.2514) * 1.0)), (_GLF_IDENTITY(true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-6402.3117), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-6402.3117) : _GLF_FUZZED(5.5)))))), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))), max(float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))), float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))))), bool(false)), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8017.2514, (8017.2514) * 1.0)), (_GLF_IDENTITY(true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-6402.3117), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-6402.3117) : _GLF_FUZZED(5.5)))))), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))), max(float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))), float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))))), bool(false)), (false ? _GLF_FUZZED(0.5) : mix(float(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8017.2514, (8017.2514) * 1.0)), (_GLF_IDENTITY(true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_IDENTITY(_GLF_FUZZED(-6402.3117), mix(float(_GLF_FUZZED(5.6)), float(_GLF_IDENTITY(_GLF_FUZZED(-6402.3117), _GLF_IDENTITY(float(vec2(_GLF_FUZZED(-6402.3117), 0.0)), (float(vec2(_GLF_FUZZED(-6402.3117), 0.0))) + 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? true ? true ? injectionSwitch.x : _GLF_FUZZED(8017.2514) : _GLF_FUZZED(-6402.3117) : _GLF_FUZZED(5.5)))))), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))), max(float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? -5.2 : _GLF_FUZZED(992.747))))), float(_GLF_FUZZED(_GLF_IDENTITY(-5.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.2 : _GLF_FUZZED(992.747))))))), bool(false))))) / 1.0))) - 0.0 : _GLF_FUZZED(4.4)))))))) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    break;
                   do
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED((- -40.00)), _GLF_FUZZED(-313.268)), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED((- -40.00)), _GLF_FUZZED(-313.268)), (vec2(_GLF_FUZZED((- -40.00)), _GLF_FUZZED(-313.268))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED((- -40.00)), _GLF_FUZZED(-313.268)), vec2(_GLF_FUZZED((- -40.00)), _GLF_FUZZED(-313.268)))), bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))).x > injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (! (true)))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 1, true)), bool(bvec2(bool(bvec2(_injected_loop_counter != 1, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bvec2(_injected_loop_counter != 1, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, ! (! (false))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-62092, clamp(-62092, -62092, _GLF_IDENTITY(-62092, 0 ^ (-62092))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_FUZZED(-62092)), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_FUZZED(-62092)), ((_GLF_FUZZED(-62092))) | ((_GLF_FUZZED(-62092)))), 0 | (~ (_GLF_FUZZED(-62092))))) * 1), 0 | (_GLF_IDENTITY(~ (_GLF_FUZZED(-62092)), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_FUZZED(-62092)), ((_GLF_FUZZED(-62092))) | ((_GLF_FUZZED(-62092)))), 0 | (~ (_GLF_FUZZED(-62092))))) * 1))))) : _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), ~ (~ (4))))), 64, 4);
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3901.4393)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))) || false));
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), int(int(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), bool(bvec2(_injected_loop_counter != _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), int(int(_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ~ (~ (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))))), true)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                      return;
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                return;
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_IDENTITY(true, bool(bvec3(true, false, false))), false, true))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
                {
                 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(62824) : _GLF_IDENTITY(int(8), (int(8)) + 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(7), int(7)), min((1 & 1) << _GLF_IDENTITY(int(7), int(7)), (1 & 1) << _GLF_IDENTITY(int(7), int(7)))), (1 & 1) << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(true, true && (true)) ? 0 : _GLF_FUZZED(56085)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           return;
          }
         else
          {
          }
        }
      }
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 subgroupBarrier();
 do
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) / 1) ^ 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), true, true))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), false), true, true)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), true, true))))))), (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), true, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -55315)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1.0, 91.39)))).x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-951.030) : injectionSwitch.y)))), (_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, true, false))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false) || (true))) && true), ! (_GLF_IDENTITY(! ((false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false) || (true))) && true)), (! ((false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false, true && ((_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))) || (true))) && true))) && true)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (! (bool(bvec2(false, true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (! (bool(bvec2(false, true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), (false) && _GLF_IDENTITY(true, false || (true)))))), true), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false) || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false) || (true))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))), (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true))))), true), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), ! (! (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), bool(bvec2(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), false)))))))), ((injectionSwitch.x < injectionSwitch.y)) || false))), true)))))))) || false)))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), bool(bvec3(false, false, false)))));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), (false ? _GLF_FUZZED(2926) : (0 | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
}
