#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), true), false, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), true), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), true), false, true)), true))), true, false)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true), false)), true))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), ((0 >> _GLF_IDENTITY(int(3), int(3)))) >> 0), (true ? _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), ((0 >> _GLF_IDENTITY(int(3), int(3)))) >> 0) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
    {
     do
      {
       return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0)))))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool(true && (_GLF_IDENTITY(false, false || (false)))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_IDENTITY(false, false || (false))))) && true))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(float(-22962)), _GLF_IDENTITY(((injectionSwitch))[1], mix(float(_GLF_IDENTITY(((injectionSwitch))[1], min(((injectionSwitch))[1], ((injectionSwitch))[1]))), float(_GLF_FUZZED(float((~ 170615u)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch)) : _GLF_FUZZED((-83.26 - vec2(-9.9, -3024.7439)))))[0], clamp(((injectionSwitch))[0], ((injectionSwitch))[0], ((injectionSwitch))[0])), _GLF_FUZZED(-671.947)), bvec2(true, false))) * exp(vec2(0.0, 0.0)), _GLF_IDENTITY(mix(vec2(((injectionSwitch) * exp(vec2(0.0, 0.0)))[0], ((injectionSwitch) * exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-20.58), _GLF_FUZZED(4935.2991)), bvec2(_GLF_IDENTITY(false, true && (false)), false)), (mix(vec2(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * exp(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))[0], ((injectionSwitch) * exp(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))[1]), vec2(_GLF_FUZZED(-20.58), _GLF_FUZZED(4935.2991)), bvec2(_GLF_IDENTITY(false, true && (false)), false))) + vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (true)))))) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), max(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))), 1u, ((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) / 1u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), _GLF_IDENTITY(max(uint(5u), uint(5u)), min(max(uint(5u), uint(5u)), max(uint(5u), uint(5u))))))))), ~ (~ (uint(uvec3(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), 1u, ((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(((subgroup_id) / subgroup_id)) : 5u)), _GLF_IDENTITY((_GLF_IDENTITY(5u, (5u) + 0u)), max((_GLF_IDENTITY(5u, (5u) + 0u)), _GLF_IDENTITY((_GLF_IDENTITY(5u, (5u) + 0u)), ((_GLF_IDENTITY(5u, (5u) + 0u))) - 0u))) - 0u), _GLF_IDENTITY(5u, ~ (~ (5u))))))) / _GLF_IDENTITY(1u, (1u) | 0u)))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), max(uint(_GLF_IDENTITY(5u, uint(_GLF_IDENTITY(uvec2(5u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(uvec2(5u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(5u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(5u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(5u))))))))))), ~ _GLF_IDENTITY((~ (subgroup_id)), max(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), 0u | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) >> _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) >> 0u, (_GLF_IDENTITY((subgroup_id) >> 0u, ((subgroup_id) >> 0u) ^ 0u)) | 0u), ((subgroup_id) >> 0u) * 1u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)))), min(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) >> 0u, (_GLF_IDENTITY((subgroup_id) >> 0u, ((subgroup_id) >> 0u) ^ 0u)) | 0u), ((subgroup_id) >> 0u) * 1u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) >> 0u, (_GLF_IDENTITY((subgroup_id) >> 0u, ((subgroup_id) >> 0u) ^ 0u)) | 0u), ((subgroup_id) >> 0u) * 1u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)))))), _GLF_IDENTITY(~ (~ ((~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))), max(_GLF_IDENTITY(~ (~ ((~ _GLF_IDENTITY((subgroup_id), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id)))))), (~ (~ ((~ (subgroup_id))))) * _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))))))), _GLF_IDENTITY(~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ~ (~ ((~ ((~ (subgroup_id))))))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ (_GLF_IDENTITY((~ (subgroup_id)), 1u * ((~ (subgroup_id)))))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (_GLF_IDENTITY(~ ((~ (subgroup_id))), uint(uvec3(~ ((~ (subgroup_id))), 0u, 0u)))))) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (~ ((~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u))))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (_GLF_IDENTITY(~ ((~ (subgroup_id))), (~ ((~ (subgroup_id)))) << 0u))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) | 0u))) : _GLF_FUZZED(subgroup_id)))))) - 0u)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)))))), _GLF_IDENTITY(~ (~ ((~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))), max(_GLF_IDENTITY(~ (~ ((~ _GLF_IDENTITY((subgroup_id), min(_GLF_IDENTITY((subgroup_id), ~ (_GLF_IDENTITY(~ ((subgroup_id)), max(~ ((subgroup_id)), ~ ((subgroup_id)))))), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (~ (~ ((~ (subgroup_id))))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))) : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id)) | (_GLF_IDENTITY(true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id), (false ? _GLF_FUZZED(subgroup_id) : true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id))), true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id), true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id))))), 0u | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))))) : _GLF_FUZZED(subgroup_id)))))))) - 0u)), (_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id)))))), clamp(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id)))))), _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id)))))), _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id))))))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) | 0u))) : _GLF_FUZZED(subgroup_id)))))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id))))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) | 0u))) : _GLF_FUZZED(subgroup_id)))))) - 0u), min(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id))))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) | 0u))) : _GLF_FUZZED(subgroup_id)))))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id))))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) | 0u))) : _GLF_FUZZED(subgroup_id)))))) - 0u), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), (true ? (~ ((~ (subgroup_id)))) : _GLF_FUZZED((subgroup_id & subgroup_id))))))) | (~ (~ ((~ (subgroup_id)))))) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (true ? _GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (_GLF_IDENTITY(~ (~ ((~ (subgroup_id)))), (~ (~ ((~ (subgroup_id))))) | (~ (~ ((~ (subgroup_id))))))) | (~ _GLF_IDENTITY((~ ((~ (subgroup_id)))), ((~ ((~ (subgroup_id))))) | 0u))) : _GLF_FUZZED(subgroup_id)))))) - 0u)) - 0u)))) >> 0u))))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), (true ? ~ _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u)) << 0u) : _GLF_FUZZED(94884u)))), (false ? _GLF_FUZZED(37911u) : (~ (subgroup_id)))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false) || false), false || (_GLF_IDENTITY(bool((false) || false), (bool((false) || false)) || false)))), ! (! (bool(_GLF_IDENTITY(bool((false) || false), false || (_GLF_IDENTITY(bool((false) || false), (bool((false) || false)) || false)))))))))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(69.13)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(69.13)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true)))))), true, true))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ((! (true))) || _GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, true, _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))))))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, (true) || false)), false))), true)))), (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))), true))))) || false)), (injectionSwitch.x > injectionSwitch.y))))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             do
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), determinant(_GLF_IDENTITY(mat4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, determinant(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, tan(0.0))))))) + 0.0)))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
          break;
         for(int _injected_loop_counter = ((0 & -32328) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(1), 1, 1), min(ivec3(int(1), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter - _injected_loop_counter, min(_injected_loop_counter - _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter - _injected_loop_counter, min(_injected_loop_counter - _injected_loop_counter, _injected_loop_counter - _injected_loop_counter)))))))))), 1), ivec3(int(1), 1, 1)))), int(int(int(_GLF_IDENTITY(ivec3(int(1), 1, 1), min(ivec3(int(1), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter)))))), 1), ivec3(int(1), 1, 1)))))))), 0 | (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(1), 1, 1), min(ivec3(int(1), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter - _injected_loop_counter, min(_injected_loop_counter - _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter - _injected_loop_counter, min(_injected_loop_counter - _injected_loop_counter, _injected_loop_counter - _injected_loop_counter)))))))))), 1), ivec3(int(1), 1, 1)))), int(int(int(_GLF_IDENTITY(ivec3(int(1), 1, 1), min(ivec3(int(1), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter)))))), 1), ivec3(int(1), 1, 1)))))))))), (int(_GLF_IDENTITY(1, (1) << 0))) << (0 | 0))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec4((injectionSwitch) * mat2(1.0), 0.0, 1.0))))) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))) && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), true && (! ((! (false))))))))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && (_GLF_IDENTITY(false, ! (! (false)))))))), true), true), bvec3(bvec4(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))), true), true), false)))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), true && (! ((! (false))))))))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && (_GLF_IDENTITY(false, ! (! (false)))))))), true), true), bvec3(bvec4(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))), true), true), false)))))))))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[0], _GLF_FUZZED(-7570.4908)), vec2(_GLF_FUZZED(57.23), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-31.02)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                return;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true))))
            {
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << (0 >> _GLF_IDENTITY(int(2), int(2))))) | (_GLF_IDENTITY(0, 0 | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true, true, true))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.w = workgroup_id;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])).y, float(mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(-79.99)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), sin(0.0), 0.0, 1.0)))), float(_GLF_IDENTITY(_GLF_FUZZED(-91.10), max(_GLF_IDENTITY(_GLF_FUZZED(-91.10), (_GLF_FUZZED(-91.10)) / _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-750.293 - -5.7))), float(1.0), bool(true)))))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-750.293 - -5.7))), float(1.0), bool(true)))))), 1.0, 0.0, 0.0), transpose(transpose(mat2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-750.293 - -5.7))), float(1.0), bool(true)))))), 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(_GLF_FUZZED(-91.10), (_GLF_IDENTITY(_GLF_FUZZED(-91.10), float(mat3x4(_GLF_FUZZED(-91.10), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))) * _GLF_ONE(1.0, injectionSwitch.y))))), bool(false)))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) / 1), min((0 | 0), (0 | 0))), (0 | 0), (0 | 0))), min(_GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) / 1), min((0 | 0), (0 | 0))), (0 | 0), (0 | 0))), _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) / 1), min((0 | 0), (0 | 0))), (0 | 0), (0 | 0))), clamp(_GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) / 1), min((0 | 0), (0 | 0))), (0 | 0), (0 | 0))), _GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) / 1), min((0 | 0), (0 | 0))), (0 | 0), (0 | 0))), _GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) / 1), min((0 | 0), (0 | 0))), (0 | 0), (0 | 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 ^ (1))), ~ (~ (_GLF_IDENTITY(0 ^ (1), (0 ^ _GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), ((1)) - _GLF_IDENTITY(0, clamp(0, 0, 0))))))) / 1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), clamp(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), max(_GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), (true ? vec3(0.0, sqrt(0.0), 1.0) : _GLF_FUZZED(vec3(-57.99, -7.5, -3.0)))), vec3(0.0, sqrt(0.0), 1.0))), _GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, sqrt(0.0), 1.0))), _GLF_IDENTITY(vec3(0.0, sqrt(0.0), 1.0), clamp(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, sqrt(0.0), 1.0))))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), mix(vec3(_GLF_FUZZED(-6.7), _GLF_FUZZED((-2.0 / -93.81)), _GLF_FUZZED(5.8)), vec3((vec3(0.0, 0.0, 1.0))[0], (vec3(0.0, 0.0, 1.0))[1], (vec3(0.0, 0.0, 1.0))[2]), bvec3(true, true, true)))), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0), mat4x3(mat4(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), dot(vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5331.2086)), float(0.0), bool(true))), sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0)))))))), mix(vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(-34.03)), vec2((vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0), mat4x3(mat4(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0)))))))))[0], (vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (vec3(0.0, 0.0, 1.0)))))), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0))))), (mat4(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (vec3(0.0, 0.0, 1.0)), mat3(1.0) * (mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (vec3(0.0, 0.0, 1.0)))))), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sqrt(0.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0)))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))[1]), bvec2(true, true)))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0))).x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0))).x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0))).x < injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0))).x < injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(99.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), false, false, false)))))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.w;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, false || (true))), bool(bvec2(true && (_GLF_IDENTITY(true, false || (true))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y))) && true)))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-856.954)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(((workgroup_base)), ((workgroup_base)))) | ((workgroup_base))) - 0u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0)) | 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, false, false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, false, false))), ! (! (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false, false))))))))))))))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(358.075)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 0.0)))), bool(true))) : _GLF_IDENTITY(_GLF_FUZZED(60.27), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(60.27), float(mat3x4(_GLF_FUZZED(60.27), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - abs(_GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), true, false, false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = (0 ^ (0 >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z, min(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z, GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z))) * 1u)) << 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(181505u, 192271u, 168576u, 165695u))))), max(~ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(181505u, 192271u, 168576u, 165695u))))), ~ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(181505u, 192271u, 168576u, 165695u))))))))).z)) + GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.y * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.y * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.x = read, (GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.x = read) - 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1))))) < subgroup_size, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), ~ (~ (~ (_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))))))) < subgroup_size) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), true)))))), (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), true))))))))), bvec3(bvec4(bvec3(bvec3(false, false, false)), true))))))) || false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (3)))), clamp((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (int(3)) - 0), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))), int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter))))))))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) && (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))), bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), max(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0)))))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), max(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0)))))), float(vec2(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), max(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0)))))), 1.0))), float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), max(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * abs(1.0))))))))) < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               else
                {
                }
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656))))), (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656)))), max(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656)))), (_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656)))), (_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-43.73, -427.656))))) / vec2(1.0, 1.0))))))) : _GLF_FUZZED(injectionSwitch))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true))), (_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true)))) - 0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))), clamp(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true))), (_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true)))) - 0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true))), (_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true)))) - 0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true))), (_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(3963.5632)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), exp(0.0), 0.0, 0.0, exp(_GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.66)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3606.7879)), float(1.0), bool(true)))), bool(true))), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), 1.0))), bool(true)))) - 0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))))))))), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y)) && true))))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
      }
    }
   int i = 0;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0))), (injectionSwitch.x) * 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40)))))), float(_GLF_FUZZED(76.94)), bool(false)))) * 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), min(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), _GLF_IDENTITY((false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), ((false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), (false ? _GLF_FUZZED(309.417) : _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), max(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))))) - 0.0)))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40)))))) * 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0)) - 0.0)), float(_GLF_FUZZED(3473.5404)), bool(false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (true ? false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) : _GLF_FUZZED(-817.943))))), min(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), (false ? _GLF_FUZZED(309.417) : _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, ((injectionSwitch.x) * 1.0) / 1.0)) + 0.0)) / 1.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40)))))) * 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0)) - 0.0)), float(_GLF_FUZZED(3473.5404)), bool(false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (true ? false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) : _GLF_FUZZED(-817.943))))), min(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), (false ? _GLF_FUZZED(309.417) : _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, ((injectionSwitch.x) * 1.0) / 1.0)) + 0.0)) / 1.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))))), false), bvec2(bvec4(bvec2((! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40)))))) * 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0)) - 0.0)), float(_GLF_FUZZED(3473.5404)), bool(false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (true ? false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) : _GLF_FUZZED(-817.943))))), min(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), (false ? _GLF_FUZZED(309.417) : _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, ((injectionSwitch.x) * 1.0) / 1.0)) + 0.0)) / 1.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2((! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40)))))) * 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0)) - 0.0)), float(_GLF_FUZZED(3473.5404)), bool(false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (true ? false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) : _GLF_FUZZED(-817.943))))), min(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), (false ? _GLF_FUZZED(309.417) : _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, ((injectionSwitch.x) * 1.0) / 1.0)) + 0.0)) / 1.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))))), false), bvec2(bvec4(bvec2((! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(fract(vec3(6768.1422, -692.992, -8.0)), vec3(0.9, 3441.1544, 17.40)))))) * 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(1.0), 0.0, 1.0, 1.0)))) - 0.0)) - 0.0)), float(_GLF_FUZZED(3473.5404)), bool(false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (true ? false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) : _GLF_FUZZED(-817.943))))), min(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))), (false ? _GLF_FUZZED(309.417) : _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), (false ? _GLF_FUZZED(-8961.6813) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, ((injectionSwitch.x) * 1.0) / 1.0)) + 0.0)) / 1.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, log(1.0))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, true))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))), false || (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (1 | (1 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.x, 4, 64, 4);
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), _GLF_IDENTITY(bool(false), (bool(false)) || false))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false))), (_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false)))) * 1.0), 1.0, 0.0, sqrt(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), sqrt(1.0), sqrt(0.0), 1.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))) * 1.0), injectionSwitch.y)), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false))), clamp(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false))), _GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false))), _GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-2933.6211)), bool(false)))))) * 1.0), 1.0, 0.0, _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), float(mat3x4(sqrt(0.0), 0.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), sqrt(1.0), sqrt(0.0), _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))) * 1.0), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), mix(vec2(_GLF_FUZZED(1.5), (vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))[1]), vec2((vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))[0], _GLF_FUZZED(6016.9572)), bvec2(true, false))) + (injectionSwitch)).y)))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & _GLF_IDENTITY(-58934, max(-58934, -58934))) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, false))) && true))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_WRAPPED_IF_TRUE(true)), true && (true && (_GLF_WRAPPED_IF_TRUE(true)))), bool(bvec2(true && (_GLF_WRAPPED_IF_TRUE(true)), true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (-9369 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(9.2))), injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0), 1.0))), vec2(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), injectionSwitch.y)) - 0.0), 0.0, 1.0))))).y))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(checker[virtual_gid], GLF_merged4_0_1_4_1_1_11_2_1_14_3_1_12readsubgroup_idworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) >> 0), 4)), 4, 4)), (4) | (4)), 64, 4);
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true))))), _GLF_IDENTITY(true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))), ! (! (_GLF_IDENTITY(true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))), ! (! (true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))), ! (! (_GLF_IDENTITY(true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))), ! (! (true && (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(sqrt(0.0))))))))))))))), true, true, false))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, bool(bvec2(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, bool(bvec2((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, true))), _GLF_IDENTITY(false, (false) || false))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0))))) && true, bool(bvec2(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, bool(_GLF_IDENTITY(bvec2((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, true, true))))))))) && true, true), bvec2(bvec2(bvec2((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, true, true))))))))) && true, true)))))), _GLF_IDENTITY(false, (false) || false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))) && true)))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.1)), bool(false))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.1)), bool(false)), mix(float(_GLF_FUZZED((9.6 / 2.2))), float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(1.1, (false ? _GLF_FUZZED(-5.1) : 1.1)))), bool(false))), bool(true)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false)))) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(17.45)), bool(false))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             return;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(false))), (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(false)))) - 0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(342.513)), bool(false))), 1.0))) + 0.0), tan(0.0))), _GLF_IDENTITY(vec2(0.0, 0.0) + (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0)))), (_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))) + (vec2(mat2x3(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, tan(0.0), cos(0.0), sqrt(sqrt(1.0)), 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))), tan(0.0))))) / abs(vec2(1.0, 1.0))))))).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), vec2(vec3(vec2(mat3x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), 1.0)))).y)))))))), false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), vec2(vec3(vec2(mat3x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), 1.0)))).y)))))))), false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, false)), (bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), vec2(vec3(vec2(mat3x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), 1.0)))).y)))))))), false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, false))) && true)))) || false));
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true)))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (true)))), bool(bool(bool(bool(_GLF_IDENTITY(true, false || (true))))))))), true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false, false, true))))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
}
