#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_27 {
 uvec4 _f0;
 mat2 _f1;
 mat4x3 _f2;
 vec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_26 {
 mat4x3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_25 {
 uint _f0;
 mat4x3 _f1;
 vec4 _f2;
 ivec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_28 {
 uint _f0;
 _GLF_struct_25 _f1;
 mat4 _f2;
 _GLF_struct_26 _f3;
 vec4 _f4;
 _GLF_struct_27 _f5;
} ;

struct _GLF_struct_23 {
 mat3 _f0;
} ;

struct _GLF_struct_24 {
 int _f0;
 _GLF_struct_23 _f1;
} ;

struct _GLF_struct_21 {
 mat3x2 _f0;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
} ;

struct _GLF_struct_19 {
 vec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_20 {
 uvec2 _f0;
 _GLF_struct_19 _f1;
 uvec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_29 {
 _GLF_struct_20 _f0;
 uvec4 _f1;
 uvec4 _f2;
 _GLF_struct_22 _f3;
 uvec4 _f4;
 _GLF_struct_24 _f5;
 uint virtual_gid;
 _GLF_struct_28 _f6;
} ;

struct _GLF_struct_16 {
 bvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_14 {
 mat2x4 _f0;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 int _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 uint workgroup_id;
 bool _f1;
 _GLF_struct_14 _f2;
} ;

struct _GLF_struct_18 {
 ivec3 _f0;
 mat4x3 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_17 _f3;
 int _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 bvec2 _f1;
 float _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_9 {
 uint _f0;
 mat3x2 _f1;
 mat3 _f2;
 mat3x4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 mat4x2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_6 {
 bvec4 _f0;
 bvec2 _f1;
 bvec3 _f2;
 bvec2 _f3;
 mat2x4 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 mat4x3 _f1;
 vec3 _f2;
 _GLF_struct_6 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 mat2 _f1;
 uvec3 _f2;
 mat2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 float _f1;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat2x3 _f1;
 mat2 _f2;
 mat4x3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 vec2 _f1;
 mat4 _f2;
 bvec2 _f3;
 mat3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_5 _f0;
 uint read;
 mat2x4 _f1;
 _GLF_struct_7 _f2;
 ivec2 _f3;
 _GLF_struct_11 _f4;
 mat3x2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(true && (! _GLF_IDENTITY((! (false)), false || ((! (false))))), false || (true && (! _GLF_IDENTITY((! (false)), false || ((! (false)))))))))) && true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), float(mat3x4(injectionSwitch.y, 0.0, sqrt(_GLF_IDENTITY(1.0, float(float(1.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))) - 0.0), (false ? _GLF_FUZZED((+ -6.2)) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) - 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) * mat2(1.0))).y, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)), clamp(float(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) * mat2(1.0))).y, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)), float(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) * mat2(1.0))).y, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)), float(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) * mat2(1.0))).y, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0))))) : _GLF_FUZZED(4.8)))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(0u | (gl_WorkGroupSize.x), max(0u | _GLF_IDENTITY((gl_WorkGroupSize.x), max((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x), (gl_WorkGroupSize.x))), 0u | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec3(bool(injectionSwitch.x > injectionSwitch.y), true, true)))))))))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(ivec3(1), mat4x3(1.0), _GLF_struct_15(_GLF_struct_13(ivec4(1), mat4x3(1.0), mat2x4(1.0), 1, bvec4(true)), gl_WorkGroupID.x, true, _GLF_struct_14(mat2x4(1.0))), _GLF_struct_17(_GLF_struct_16(bvec3(true), mat2(1.0))), 1, ivec2(1));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), (_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0)) + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(13.65)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(80.38, 473.151, -6233.0172, -3.5).s), _GLF_IDENTITY((injectionSwitch)[1], float(mat2((injectionSwitch)[1], _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0)))), 0.0)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-552.710)), bvec2(true, false))).y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 77093)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 77093)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-26807))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec2(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), true)))), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec2(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), true)))), true)), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec2(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), true)))), true)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)))), bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false)), true && (bool(bvec2((_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false)))))))))))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(injectionSwitch.y, injectionSwitch.y)))) && (true))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, 1 * (_GLF_IDENTITY(2, (2) * 1)))), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_18._f2.workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_WRAPPED_IF_FALSE(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(mat3(mat3x4(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0))), (mat3(mat3x4(mat3(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0)))) * mat3(1.0))))).y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), true))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 barrier();
                }
               do
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                       barrier();
                      }
                     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, (6) >> 0)))))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, (7) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) - 0) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_20(uvec2(1u), _GLF_struct_19(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0) / 1.0, (true ? (1.0) / 1.0 : _GLF_FUZZED(-3.5))), (false ? _GLF_FUZZED(6.8) : _GLF_IDENTITY((1.0) / 1.0, (true ? (1.0) / 1.0 : _GLF_FUZZED(-3.5))))))), ivec3(1)), uvec4(1u), uvec3(_GLF_IDENTITY(1u, (1u) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, 0u | (1u))), ~ (_GLF_IDENTITY(~ (uvec4(_GLF_IDENTITY(1u, 0u | (1u)))), min(~ (uvec4(_GLF_IDENTITY(1u, 0u | (1u)))), ~ (uvec4(_GLF_IDENTITY(1u, 0u | (1u)))))))), (uvec4(1u)) * uvec4(1u, 1u, 1u, 1u)), uvec4(1u), _GLF_struct_22(_GLF_struct_21(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), uvec4(1u), _GLF_struct_24(1, _GLF_struct_23(mat3(1.0))), workgroup_base + subgroup_base + subgroup_local_id, _GLF_struct_28(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))), clamp((_GLF_IDENTITY(1u, 0u ^ (1u))), (_GLF_IDENTITY(1u, 0u ^ (1u))), (_GLF_IDENTITY(1u, 0u ^ (1u)))))))), _GLF_struct_25(1u, mat4x3(1.0), vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(determinant(mat2(mat4(171.364, 3.7, 718.167, -8.0, -7372.5437, -4877.2969, -7.9, -3461.7404, 7.0, 9.1, -0.0, -4.6, 33.05, -92.09, -6.5, _GLF_IDENTITY(-47.20, mix(float(-47.20), float(_GLF_FUZZED(-8.2)), bool(false))))))) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2.4)))))), ivec2(1), true), mat4(1.0), _GLF_struct_26(mat4x3(1.0), bvec2(true)), vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2.8)))), _GLF_struct_27(uvec4(1u), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2576.0778) : 1.0)), 1.0)), 1.0)))), _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat2(1.0, 1.0, 0.0, 1.0)), sin(length(0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))), mat4x3(1.0), vec2(1.0), ivec3(1))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (subgroup_size)));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_5(_GLF_struct_0(mat2x4(1.0), vec2(1.0), mat4(1.0), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), mat3(1.0), vec2(1.0)), _GLF_struct_1(mat3x2(1.0), mat2x3(1.0), mat2(1.0), mat4x3(1.0), ivec2(1)), _GLF_struct_2(bvec4(true), 1.0), _GLF_struct_3(_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) * uvec2(1u, 1u))))), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(mat2(_GLF_IDENTITY(-63.12, (_GLF_IDENTITY(-63.12, max(-63.12, -63.12))) / 1.0), 6201.0141, -972.721, -759.014)) : mat2(1.0))), uvec3(1u), mat2(1.0), vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3529.2296)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.9) : 1.0))), bool(true))))), _GLF_struct_4(mat3(1.0)), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-36.13)), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(_GLF_IDENTITY(round(length(normalize(1.0))), (round(length(normalize(1.0)))) / 1.0), round(length(normalize(1.0))))), sin(sqrt(_GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), 0.0))))), 0.0, 0.0, 0.0, 1.0, 1.0), mat4x2(mat4(mat4x2(1.0, round(length(normalize(1.0))), sin(sqrt(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(626.906)), float(float(_GLF_IDENTITY(mat4x2(1.0, round(length(normalize(1.0))), sin(sqrt(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0), mat4x2(mat4(mat4x2(1.0, round(length(normalize(1.0))), sin(sqrt(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_29.virtual_gid], (buf[_GLF_struct_replacement_29.virtual_gid]) + 0u), 4, 64, 2), (atomicLoad(buf[_GLF_struct_replacement_29.virtual_gid], 4, 64, 2)) >> 0u), mat2x4(1.0), _GLF_struct_7(mat4x3(1.0), mat4x3(1.0), vec3(1.0), _GLF_struct_6(bvec4(true), _GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(true), false), bvec3(bvec4(bvec3(bvec2(true), false), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, false)))))))))), false), bvec3(bvec4(bvec3(bvec2(true), false), true))), true))))), bvec3(true), bvec2(true), mat2x4(1.0), mat4(1.0)), mat2x3(1.0)), ivec2(1), _GLF_struct_11(_GLF_struct_8(uvec3(1u)), _GLF_struct_9(1u, mat3x2(1.0), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(-0.9, 8054.0489, -7.5, 2.6, -6261.7911, -6.9, 3481.4923, -19.54, 11.27)) : mat3(1.0))), mat3x4(1.0), _GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(uvec3(uvec2(1u), 1u))), uvec2(1u)))), _GLF_struct_10(mat4(1.0), bvec2(true), 1.0, ivec2(1)), mat4x2(1.0), ivec4(1)), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * cos(0.0)), 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-971.692)), float(0.0), bool(true)))), 1.0)), _GLF_IDENTITY(clamp(float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(clamp(float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), float(mat3x4(clamp(float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 0.0)))) + 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) / 1.0, max((_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) / 1.0, (_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), max(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0))), (float(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), sqrt(0.0)))) / 1.0), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(0.0)))))), 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) / 1.0)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))) || false), true)), false || (bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))) || false), true))))), false, true)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) - 0), 1)), 1)), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter)))) >> 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter)))) >> 0), (true ? false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter)))) >> 0) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter)))) >> 0), max(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter)))) >> 0), false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter)))) >> 0))))))) - 0) < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) * 1, min((_GLF_IDENTITY(1, (1) - 0)) * 1, (_GLF_IDENTITY(1, (1) - 0)) * 1))), 1)), 1)), true)))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))), bool(bvec3(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))), false, true)))) || false) || false))), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true))) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, (false) || false))) || false)) || false))))), bool(bvec4((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))), false, true, true)))) || false), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(false, ! (! (false))), true)))) || false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 1) ^ 1, clamp((0 | 1) ^ 1, _GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, ((0 | 1) ^ 1) | ((0 | 1) ^ 1))) >> 0), (0 | 1) ^ 1)))); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(faceforward(-1.1, 6.7, 9.4)))) > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false || (_GLF_WRAPPED_IF_TRUE(true))))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) && true))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))), _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))), false, true, false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-86.26), _GLF_FUZZED(-4.7)), bvec2(false, false))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-82.22)), bool(false))) > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))), false, true, false))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))), false, true, _GLF_IDENTITY(false, false || (false))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7.4)), bool(false))) < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
      barrier();
    }
   for(int _injected_loop_counter = ((int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((false ? _GLF_FUZZED(69534) : int(5)), int(ivec2((false ? _GLF_FUZZED(69534) : int(5)), 1)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 ^ (int(1)))) - 0), max(int(1), int(1)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(uint(1), uint(1))), 4, 64, 4);
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) < injectionSwitch.y)))))))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) < injectionSwitch.y)))))))))), false, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) < injectionSwitch.y)))))))))), false, true), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)), (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))) || false))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(207.042)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), 0.0, 1.0))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true, true)), false))))), bvec3(bvec3(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mix(vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(84.62)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, tan(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, tan(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0)))))), injectionSwitch)).y), float(_GLF_FUZZED(520.255)), bool(false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false), (_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false)) && true), false, true))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y))))))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (! (false)))))), ! (! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (! (false))))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-54365)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / 1), 2, 2)))), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / (1 | 1)) > 0, false || _GLF_IDENTITY((_injected_loop_counter > 0), true && ((_injected_loop_counter > 0)))))))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) >> 0)))), int(0))) + (0 ^ _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0, 0 ^ (0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 + (int(_GLF_IDENTITY(0, (0) >> 0)))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), clamp(int(0), int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(1, min(1, 1)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 subgroupBarrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), injectionSwitch.y)))))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.7) : injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y))))) | (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[_GLF_struct_replacement_29.virtual_gid], _GLF_struct_replacement_12.read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), min(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4)))))) ^ 0), (4) - 0));
  }
}
