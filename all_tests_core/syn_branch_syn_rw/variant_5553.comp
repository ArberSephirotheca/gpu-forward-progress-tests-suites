#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), _GLF_IDENTITY(false || (bool(bvec4(_GLF_DEAD(false), false, true, true))), (false || (bool(bvec4(_GLF_DEAD(false), false, true, true)))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5719.6105) : injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true), bvec2(bvec2(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.1) : injectionSwitch.x)))) > injectionSwitch.y)), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((1.0 + -910.101)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-78.89)), bvec2(true, false))), 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(1.0)), _GLF_IDENTITY(mat3(mat4x3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9628.7592)), vec2(_GLF_FUZZED(761.696), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), mix(vec2(_GLF_FUZZED((1.0 + -910.101)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-78.89)), bvec2(true, false))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.8)), float(1.0), bool(true)))), float(_GLF_FUZZED(5946.9133)), bool(false))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(1.0)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat3(3051.1638, -6395.6426, -8.7, 1.8, 33.48, -7.8, -3.7, -791.307, -1.7), (_GLF_IDENTITY(mat3(3051.1638, -6395.6426, -8.7, 1.8, 33.48, -7.8, -3.7, -791.307, -1.7), transpose(transpose(mat3(3051.1638, -6395.6426, -8.7, 1.8, 33.48, -7.8, -3.7, -791.307, -1.7))))) * mat3(1.0))) : mat3(mat4x3(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((1.0 + -910.101)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-78.89)), bvec2(true, false))), 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sqrt(1.0))))))))).y)), _GLF_IDENTITY(false, (false) || false)), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     continue;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | (5))) >> 0)), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-520.228, 1.0 * (-520.228)))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1751.7146)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(bool(true), (bool(true)) && true))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(983.842))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-520.228, 1.0 * (-520.228)))), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1751.7146)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6851.0494))), 0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(mat3(float(mat4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1751.7146)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6851.0494))), 0.0, 0.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0), mat3(1.0) * (_GLF_IDENTITY(mat3(float(mat4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1751.7146)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6851.0494))), 0.0, 0.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0), (mat3(float(mat4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1751.7146)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6851.0494))), 0.0, 0.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), _GLF_IDENTITY(bool(true), (bool(true)) && true))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y : _GLF_FUZZED(983.842)))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))), false, true))))) ? gl_WorkGroupSize : _GLF_FUZZED(floatBitsToUint(vec3(9.6, -138.455, 8.9))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 1, 0, 0))) != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(5), int(5)), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, clamp(0 | 0, 0 | 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0) | 0, min(0 | 0, 0 | 0))))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), int(5)))), (true ? (0 | 0) << _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter))), 0, 0)))) | 0))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         else
          {
          }
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) - vec2(0.0, 0.0)), (injectionSwitch) * mat2(1.0)).y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) || false)))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(3834.6159) : injectionSwitch.y))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.6) : _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.0)), float(0.0), bool(true))), 0.0, 0.0))))) - 0.0), 0.0, 0.0)), injectionSwitch.x)), (true ? int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), injectionSwitch.x)) : _GLF_FUZZED(_GLF_IDENTITY(-78390, max(_GLF_IDENTITY(-78390, 0 | (-78390)), -78390))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (0 >> _GLF_IDENTITY(int(8), int(8))) ^ (5))), clamp(int(5), int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ 1, 0 ^ (0 ^ 1)))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.w = workgroup_id) >> 0u), 1u * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.w = _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), 0u + (_GLF_FUZZED(bitfieldReverse(workgroup_size)))), 0u, 0u)))), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), 0u + (_GLF_FUZZED(bitfieldReverse(workgroup_size)))), 0u, 0u)))), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), 0u + (_GLF_FUZZED(bitfieldReverse(workgroup_size)))), 0u, 0u))))) | ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(workgroup_size)), 0u + (_GLF_FUZZED(bitfieldReverse(workgroup_size)))), 0u, 0u))))))))) : GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.w = workgroup_id))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, false)))))) && true))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(false || (bool(bvec3(false, false, false))), (false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))))))) && true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false || (false))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(false || (false), true, true, false))))))))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))), _GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false || (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, true, false))))), false, false))), false || (false || _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, true, false))))), false, false))), (_GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, true, false))))), false, false))), bool(bvec2((bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, true, false))))), false, false))), true)))) && true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))))))))), true, false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)))))))))
  return;
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0)))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))), (int(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)))) / 1)) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec2(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(false, false || (false))))))) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, true))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id) | (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id))) << _GLF_IDENTITY(_GLF_IDENTITY((uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u))), (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id) : _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u)), (uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u)), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u)), (false ? _GLF_FUZZED(uvec4(99467u, 11341u, 34916u, 92439u)) : uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u))))) | (uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u))))))), (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id) : (uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u))))))), min(_GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), clamp(_GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)), clamp(_GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)), _GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)), _GLF_IDENTITY(_GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)), max(_GLF_IDENTITY(_GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)), (true ? _GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)) : _GLF_FUZZED(uvec4(60069u, 36978u, 51545u, 162766u)))), _GLF_FUZZED(uvec4(16528u, 184237u, 181099u, 144794u)))))) : (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))))), _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), clamp((uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), (uvec4(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), uint(uvec4(_GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), 1u, 0u, 0u))), _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))), 1u)), uint(uint(1u)))), uvec4(1u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), max(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), clamp((_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), max(uvec4(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 0u), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(max(subgroup_size, subgroup_id)) : _GLF_IDENTITY(0u, (0u) ^ 0u)))))) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), max(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), max(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) << 0u))))), uvec4(1u))))))), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uint(1u)))), uvec4(1u))))), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u)))))).w;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) << 0u)) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (true ? GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id)))) - uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, _GLF_IDENTITY((true ? GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, max(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id)))), min((true ? GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, max(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id)))), _GLF_IDENTITY((true ? GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, max(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id)))), ((true ? GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, max(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id))))) >> uvec4(0u, 0u, 0u, 0u)))))) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, (true ? GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id)))) - uvec4(0u, 0u, 0u, 0u)))).z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)) && true)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)) + subgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, 0u | (_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u), workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 0u, 1u)))))))))))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z), ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z)) >> (1u ^ 1u)) << 0u), (false ? _GLF_FUZZED(155894u) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z, 0u ^ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z)), GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z)))) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat4x2(6218.7586, 2.2, 7.0, -716.638, -2.7, 1.7, -17.44, _GLF_IDENTITY(61.28, float(mat3x4(_GLF_IDENTITY(61.28, float(mat2(61.28, 1.0, sin(0.0), 1.0))), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, 0.0, 1.0, abs(1.0), sin(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), mat3x4(mat4(mat3x4(1.0, 1.0, 0.0, 1.0, abs(1.0), sin(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))))), 1.0)), abs(1.0), cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))[0]) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat4x2(6218.7586, 2.2, 7.0, -716.638, -2.7, 1.7, -17.44, _GLF_IDENTITY(61.28, float(mat3x4(_GLF_IDENTITY(61.28, float(mat2(61.28, 1.0, sin(0.0), 1.0))), 1.0, 1.0, abs(1.0), cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))[0]) : injectionSwitch))) * mat2(1.0)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 & (-77423 * 88334)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false))))))))), false || (_GLF_DEAD(false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, true)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * 1.0, (true ? _GLF_IDENTITY((injectionSwitch.y) * 1.0, clamp((injectionSwitch.y) * 1.0, (injectionSwitch.y) * 1.0, (injectionSwitch.y) * 1.0)) : _GLF_FUZZED(6.9))))))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 2)), (~ (atomicLoad(buf[virtual_gid], 4, 64, 2))) << 0u)), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (atomicLoad(buf[virtual_gid], 4, 64, 2)), (~ (atomicLoad(buf[virtual_gid], 4, 64, 2))) << 0u)), (~ (_GLF_IDENTITY(~ (atomicLoad(buf[virtual_gid], 4, 64, 2)), (~ (atomicLoad(buf[virtual_gid], 4, 64, 2))) << 0u))) >> 0u), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[virtual_gid], 4, 64, 2)), (~ (atomicLoad(buf[virtual_gid], 4, 64, 2))) << 0u)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))), true && (bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))), ((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))), true && (bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && true) || false)), ! (! ((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), true && (bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), true && (bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), true && (bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))) || false)))) || false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-99.87), _GLF_FUZZED(8000.9695)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.y = read, (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.y = read) / 1u);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) + 0)))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[0], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[1], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[2], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[3])), (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(0u), _GLF_IDENTITY(uvec4(0u), max(uvec4(0u), uvec4(0u))))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id, uvec4(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[0], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[1], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[2], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id[3])))).z % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) >> 0), 1 * (_GLF_IDENTITY(0, _GLF_IDENTITY((0), 0 ^ (_GLF_IDENTITY((0), ~ (~ (_GLF_IDENTITY((0), 0 ^ ((0)))))))) >> 0))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x, clamp(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x, clamp(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x)), GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x))], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(32.83, -2.6)) : injectionSwitch)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, true)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(32.83, -2.6)) : injectionSwitch)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, true)))), true))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), false || (bool(bool(_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       break;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x], uint(1), 4, _GLF_IDENTITY(64, int(int(64))), 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (-38632 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), true && (! (false))), true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-0.2))), cos(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, tan(0.0)), (vec4(0.0, 1.0, 0.0, tan(0.0))) - vec4(0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0, exp(0.0), sqrt(0.0), 1.0)), (float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-0.2))), cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0)))), min(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0)))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0)))))), 1.0, 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6550.7753)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), sqrt(0.0), 1.0))) - 0.0)) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))
    return;
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), uint(uint(_GLF_FUZZED(num_workgroup)))), _GLF_FUZZED(num_workgroup))) : virtual_gid))], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.y, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false)))))))))) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! (false)), false || ((! (false)))), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY((! (false)), false || ((! (false)))), false, false)))))))))))))) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(0.4, -9.4)) : injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(0.4, -9.4)) : injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(0.4, -9.4)) : injectionSwitch)))[1]), vec2(_GLF_FUZZED(13.24), _GLF_FUZZED(-63.65)), bvec2(false, false))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, sqrt(1.0), 1.0, 1.0))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 1.0))) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 1.0))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 1.0))) > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
}
