#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid;
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.xy = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec4 GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread;
 uvec4 GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_4_1_1_11readvirtual_gid;
 GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.zw = GLF_merged2_0_1_4_1_1_11readvirtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy = GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.zw;
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-45696) : _GLF_IDENTITY(int(4), (int(4)) | (int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.xy = GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.xy.y = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.xy.x = num_workgroup;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.xy.y = workgroup_size;
 GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.w = GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.xy.y;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.w * workgroup_id;
 GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.xy.x = workgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.z = GLF_merged2_0_2_53_2_2_39GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_4_1_1_11readvirtual_gid.xy.x;
  }
 else
  {
  }
 uint virtual_gid = GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.z + GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.xy.y * subgroup_size + subgroup_local_id;
 GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.y = virtual_gid;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.z + GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.xy.y * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.z = next_virtual_gid;
 uint read = atomicLoad(buf[GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.y], 4, 64, 0);
 GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.w = read;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 37788)); _injected_loop_counter --)
  {
   GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.x = GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.w;
  }
 atomicStore(buf[GLF_merged3_0_2_49_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gidread.z], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(4), int(4))) & 34315)); _injected_loop_counter --)
      {
       atomicStore(checker[GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.y], GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.x, 4, 64, 4);
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     atomicStore(checker[GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.y], GLF_merged3_0_2_39_2_1_14_3_1_14GLF_merged2_0_1_4_1_1_11readvirtual_gidworkgroup_baseworkgroup_size.xy.x, 4, 64, 4);
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
