#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, abs(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch.y, abs(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), float(mat2(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, abs(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-70.12), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(75.39)), bvec2(true, false))).y, abs(determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), 1.0, 0.0, tan(0.0)))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false)))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))))))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(22994) : _GLF_IDENTITY(int(2), min(int(2), int(2))))), 0 ^ (_GLF_IDENTITY(int(2), min(int(2), int(2)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, false, true)), true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, false, true)))), true, true))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, false, true)), true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, false, true)))), true, true))))))))))
      return;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0)))))
      continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != 0, true, true), bvec3(bvec3(bvec3(_injected_loop_counter != 0, true, true))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != 0, true, true), bvec3(bvec3(bvec3(_injected_loop_counter != 0, true, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != 0, true, true), bvec3(bvec3(bvec3(_injected_loop_counter != 0, true, true)))))))), false, true))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            continue;
           return;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(int(4), int(4))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), (0 >> _GLF_IDENTITY(int(4), int(4))) | 0)), ((0 >> _GLF_IDENTITY(int(4), int(4)))) << 0), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-63264) : _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | 0)))))), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), min(_GLF_IDENTITY((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 0)))) | 0), (false ? _GLF_FUZZED(-2467) : _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 0)))) | 0))))) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))))) | ((0 >> _GLF_IDENTITY(int(4), int(4)))))))) << _GLF_IDENTITY(0, min(0, 0))), (0 >> _GLF_IDENTITY(int(4), int(4)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), ! (! (! (false))))))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), true, true, true))))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))), true), false), false))))))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(-290.685, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-290.685, 0.0 + _GLF_IDENTITY((-290.685), clamp(_GLF_IDENTITY((-290.685), (false ? _GLF_FUZZED(-710.726) : _GLF_IDENTITY((-290.685), max((-290.685), (-290.685))))), (-290.685), (-290.685)))), 0.0), clamp(vec2(_GLF_IDENTITY(-290.685, 0.0 + (-290.685)), 0.0), vec2(_GLF_IDENTITY(-290.685, 0.0 + (-290.685)), 0.0), vec2(_GLF_IDENTITY(-290.685, 0.0 + (-290.685)), 0.0)))))) : injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), (false || (_GLF_IDENTITY(false, (false) && true))) || false))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x)), (gl_WorkGroupID.x) | (gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5621.7202), _GLF_FUZZED(float(false))), bvec2(false, false))).y))))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)) >> (1 ^ 1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size)), (workgroup_base + subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u))) + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - 0u) : _GLF_FUZZED(subgroup_id), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (false ? _GLF_FUZZED(74622u) : workgroup_base)))) + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u)))) << (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) - 0u, _GLF_IDENTITY(0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), min(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))))) - 0u), min(0u | _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u), ~ (~ (((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u)))), 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u))))))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) + 0u)))), max(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (false ? _GLF_FUZZED(74622u) : workgroup_base)))) + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u)))) << (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) - 0u, _GLF_IDENTITY(0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), min(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))))) - 0u), min(0u | _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u), ~ (~ (((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u)))), 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u))))))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) + 0u)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (false ? _GLF_FUZZED(74622u) : workgroup_base)))) + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u)))) << (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u, 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) - 0u, _GLF_IDENTITY(0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), min(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))))) - 0u), min(0u | _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u), ~ (~ (((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u)))), 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u))))))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) + 0u))))))) + _GLF_IDENTITY(0u, 0u + (0u)))), max((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)) - 0u) : _GLF_FUZZED(subgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), ~ (~ (uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))) - 0u, 0u ^ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - _GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u), clamp(0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u), 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u), 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u))))))) : _GLF_FUZZED(subgroup_id)) + _GLF_IDENTITY(0u, _GLF_IDENTITY(0u + (0u), clamp(0u + (0u), _GLF_IDENTITY(0u + (0u), (true ? 0u + (0u) : _GLF_FUZZED(workgroup_size))), 0u + (0u)))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - 0u) : _GLF_FUZZED(subgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, 1u * (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size, ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * subgroup_size))))), (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) : _GLF_FUZZED(workgroup_id))) - 0u, 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, _GLF_IDENTITY(1u, (1u) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u)))), ~ (~ (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u | (~ (subgroup_id))))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), min(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))) | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size))) >> 0u) + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) - 0u, 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, _GLF_IDENTITY(1u, (1u) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) - 0u)))))))) : _GLF_FUZZED(subgroup_id)) + _GLF_IDENTITY(0u, 0u + (0u)))))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) ^ 0u))))))), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(0, int(int(0))) | 0) ^ (1)), 1))))))) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), _GLF_IDENTITY(((0u ^ 0u)) * 1u, (((0u ^ 0u)) * 1u) * 1u)), _GLF_IDENTITY((0u ^ 0u), clamp(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (0u ^ _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))), (0u ^ 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-991) : 1)), min(1, 1)), (subgroup_local_id + 1) | (_GLF_IDENTITY(0u ^ 0u, 0u | (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(0u ^ 0u, (true ? 0u ^ 0u : _GLF_FUZZED(num_workgroup)))) | (_GLF_IDENTITY(0u ^ 0u, 0u | (0u ^ 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), min((subgroup_local_id + 1) | (0u ^ 0u), _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), uint(uvec4((subgroup_local_id + 1) | (0u ^ 0u), 1u, 1u, 1u)))))))))), 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec2(~ (0u), 1u), (true ? uvec2(~ (0u), 1u) : _GLF_FUZZED(uvec2(52040u, 40270u))))))))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))))) + 1, _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) | (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)))), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 1u))) ^ 0u)))))), 1u, 1u, 1u)))), min(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))), 1u)), 1u * (uint(uvec4(0u, 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))), 1u))))) ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), min((subgroup_local_id + 1) | (0u ^ 0u), _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) | (0u ^ _GLF_IDENTITY(0u, (0u) / 1u)), 1u, 1u, 1u), clamp(uvec4((subgroup_local_id + 1) | (0u ^ _GLF_IDENTITY(0u, (0u) / 1u)), 1u, 1u, 1u), uvec4((subgroup_local_id + 1) | (0u ^ _GLF_IDENTITY(0u, (0u) / 1u)), 1u, 1u, 1u), uvec4((subgroup_local_id + 1) | (0u ^ _GLF_IDENTITY(0u, (0u) / 1u)), 1u, 1u, 1u)))))))))))), 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec2(~ (0u), 1u), (true ? uvec2(~ (0u), 1u) : _GLF_FUZZED(uvec2(52040u, 40270u))))))))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, 0u ^ (_GLF_IDENTITY((subgroup_local_id) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))))) + 1, _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))))), 1u, 1u, 1u)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) / 1), (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (subgroup_local_id + 1))) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), min((subgroup_local_id + 1) | (0u ^ 0u), _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), uint(uvec4((subgroup_local_id + 1) | (0u ^ 0u), 1u, 1u, 1u)))))), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), min((subgroup_local_id + 1) | (0u ^ 0u), _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), uint(uvec4((subgroup_local_id + 1) | (0u ^ 0u), 1u, 1u, 1u))))))) | (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), min((subgroup_local_id + 1) | (0u ^ 0u), _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), uint(uvec4((subgroup_local_id + 1) | (0u ^ 0u), 1u, 1u, 1u)))))))))))), 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec2(~ (0u), 1u), (true ? uvec2(~ (0u), 1u) : _GLF_FUZZED(uvec2(52040u, 40270u))))))))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, 0u ^ (_GLF_IDENTITY((subgroup_local_id) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, 0u ^ (_GLF_IDENTITY((subgroup_local_id) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u)))))) << 0u) + 1, _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) | (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)))), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))))), _GLF_IDENTITY(1u, (1u) | 0u), 1u, 1u)))))))) % subgroup_size), (_GLF_IDENTITY(true ? ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1) | (subgroup_local_id + 1))))), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (0 | 0) ^ (1)), 1))))))) | _GLF_IDENTITY((0u ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) * 1u), _GLF_IDENTITY((0u ^ 0u), clamp(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)) ^ 0u), (0u ^ 0u)))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (subgroup_local_id))) << 0u) + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u))) | 0u)))), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-71140) : 1)), (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u + (~ (0u))))))))), _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u + ((subgroup_local_id + 1)))) + 0u) | (0u ^ 0u)))))), 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) + 0u) + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << 0u), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), max((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (subgroup_local_id + 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)), (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u))) >> 0u))), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup), (true ? _GLF_IDENTITY(true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup), (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup)) | (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED((virtual_gid + packUnorm4x8(vec4(-8586.8965, -82.36, -556.930, 5672.1322)))))))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))))), 1u, 1u, 1u)))))) % subgroup_size) : _GLF_FUZZED(workgroup_size), min(true ? ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (0 | 0) ^ (1)), 1))))))) | _GLF_IDENTITY((0u ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) * 1u), _GLF_IDENTITY((0u ^ 0u), clamp(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (0u ^ 0u), (0u ^ 0u)))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (subgroup_local_id))) << 0u) + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))), (subgroup_local_id + 1))), (subgroup_local_id + 1), (subgroup_local_id + 1))) | (0u ^ 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u))) | 0u)))), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-71140) : 1)), (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ _GLF_IDENTITY(0u, (0u) | (0u)))))))), 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << 0u), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), max((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (subgroup_local_id + 1))) | (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)))), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY((subgroup_local_id + 1) | (0u ^ 0u), ~ (~ ((subgroup_local_id + 1) | (0u ^ 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))))), 1u, 1u, 1u)))))) % subgroup_size) : _GLF_FUZZED(workgroup_size), true ? ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (subgroup_local_id + 1), max((subgroup_local_id + 1) | (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1) | (subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_local_id + 1) | (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (0 | 0) ^ (1)), 1))))))) | _GLF_IDENTITY((0u ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) * _GLF_IDENTITY(1u, (false ? _GLF_FUZZED((++ subgroup_local_id)) : 1u))), _GLF_IDENTITY((0u ^ 0u), clamp(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (0u ^ 0u), (_GLF_IDENTITY(0u ^ 0u, 1u * (_GLF_IDENTITY(0u ^ 0u, (false ? _GLF_FUZZED(subgroup_id) : 0u ^ 0u)))))))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (subgroup_local_id))) << 0u) + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u))) | 0u)))), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-71140) : 1)), (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))))), 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << 0u), (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + _GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), max((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (subgroup_local_id + 1))) | (_GLF_IDENTITY(0u ^ 0u, 1u * (0u ^ 0u)))), min(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (0u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))), (subgroup_local_id + 1) | (0u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))), (subgroup_local_id + 1) | (0u ^ 0u))) ^ 0u), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (0u ^ 0u)))))), 1u, 1u, 1u)))))) % subgroup_size) : _GLF_FUZZED(workgroup_size)))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0), ~ (~ ((0)))) + 0, min(_GLF_IDENTITY(_GLF_IDENTITY((0), ~ (~ ((0)))) + 0, 0 + (_GLF_IDENTITY((0), ~ (~ ((0)))) + 0)), _GLF_IDENTITY((0), ~ (~ ((0)))) + 0))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (1 | (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) - 0)) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2)))), 1), (ivec2(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2)))), 1)) / ((ivec2(1, 1) << _GLF_IDENTITY(ivec2(0), ivec2(0))) >> _GLF_IDENTITY(ivec2(0), ivec2(0))))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), (_GLF_IDENTITY(int(2), (int(2)) / 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), min(_GLF_IDENTITY(int(2), (int(2)) / 1), _GLF_IDENTITY(int(2), (int(2)) / 1))), _GLF_IDENTITY(int(2), (int(2)) / 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0)))))), ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0))))))) | 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0)))))), ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0))))))) | 0))) && true); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))))))))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y) - 0.0, _GLF_IDENTITY(float(mat2((injectionSwitch.y) - 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0)), dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(5.8)), float(float(mat4(0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), bool(true)))), 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat2x3(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0))))), 0.0))), tan(0.0), _GLF_ONE(1.0, injectionSwitch.y))), mix(float(float(mat2((injectionSwitch.y) - 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0))), tan(0.0), _GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(6529.7395)), bool(false)))))))))), bool(bool((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y) - 0.0, _GLF_IDENTITY(float(mat2((injectionSwitch.y) - 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0)), dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(5.8)), float(float(mat4(0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), bool(true)))), 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat2x3(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0))))), 0.0))), tan(0.0), _GLF_ONE(1.0, injectionSwitch.y))), mix(float(float(mat2((injectionSwitch.y) - 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0))), tan(0.0), _GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(6529.7395)), bool(false))))))))))))) || false))));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (! (_GLF_IDENTITY(true, ! (! (true))))) || _GLF_IDENTITY(false, ! (! (false)))))), false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), ((int(3))) / 1))))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat3x4(injectionSwitch[1], 0.0, 0.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, exp(0.0), length(vec2(0.0, 0.0)), 0.0, 0.0))))).y))))))
              return;
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) + 0), (false ? _GLF_FUZZED(18175) : ~ _GLF_IDENTITY((4), 0 ^ ((4))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) + 0), (false ? _GLF_FUZZED(18175) : ~ _GLF_IDENTITY((4), 0 ^ ((4)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) + 0), (false ? _GLF_FUZZED(18175) : ~ _GLF_IDENTITY((4), 0 ^ ((4))))))))), 64, 4);
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(abs(vec2(0.0, 0.0)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bool(subgroup_local_id + 1 < subgroup_size))))
    {
     int i = 0;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-27151))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (_injected_loop_counter) + 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (_injected_loop_counter) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (_injected_loop_counter) + 0)) - 0))) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(checker[virtual_gid], read, 4, 64, 4);
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), max(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))) * (injectionSwitch.y), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.y), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), mix(float(_GLF_FUZZED(2.7)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), (dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6)))))) - 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, float(vec2(0.0, cos(0.0)))), 1.0))) * (injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.y), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), _GLF_IDENTITY((true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))), (true ? (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))) : _GLF_FUZZED((mat4x2(-5.3, -7518.9509, 0.6, 4.9, -4.8, 432.373, -6398.3581, -6397.4945) * vec4(-480.945, 5.7, -933.315, -6.6))))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.y), _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-1394.1348, -9.6))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (injectionSwitch.y))))))))))) && true)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3570.8230)))) - 0.0) > injectionSwitch.y))))
            break;
          }
         else
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) && (true))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)); _injected_loop_counter ++)
              {
               return;
              }
            }
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 >> _GLF_IDENTITY(int(6), int(6)))) < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))) || false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) / 1)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)) | 0))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && (_GLF_IDENTITY((false), true && ((false)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && (_GLF_IDENTITY((false), true && ((false))))))) || false))))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)) : _GLF_FUZZED(-6.7))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))) / 1.0), injectionSwitch.x)) < injectionSwitch.y)), true))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true && ((false)), false), bvec2(bvec4(bvec2(true && ((false)), false), true, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(true && ((false)), false), bvec2(bvec4(bvec2(true && ((false)), false), true, true))))))))))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true)))) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), false)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))));
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat2(1.0, 0.0, 1.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y))))
            break;
           break;
          }
         break;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
          {
           do
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(ivec3(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0)), ~ (~ (int(ivec3(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 0)))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0)), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-18214) : _injected_loop_counter)))) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             continue;
            }
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 else
  {
  }
}
