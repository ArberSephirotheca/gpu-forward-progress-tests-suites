#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 & _GLF_IDENTITY(26738, (26738) | (26738))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), tan(0.0), 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 0.0, determinant(mat2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2507.6980)), bool(false))), 1.0)), 0.0, 0.0, 1.0)), tan(0.0), 1.0, 1.0, 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / determinant(mat4(1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0))), injectionSwitch.y), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0)), (true ? float(mat4(injectionSwitch.x, 0.0, 0.0, determinant(mat2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2507.6980)), bool(false))), 1.0)), 0.0, 0.0, 1.0)), tan(0.0), 1.0, 1.0, 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / determinant(mat4(1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0))), injectionSwitch.y), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0)) : _GLF_FUZZED(-1.1)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(1.0), 1.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat4x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(1.0), 1.0, 0.0, 0.0)))))) - sin(vec2(0.0, 0.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(-9049.4502)), float(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))), bool(true))))), float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(-9049.4502)), float(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))), bool(true))))), float(mat4x2((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(-9049.4502)), float(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))), bool(true))))), 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 0.0))) / 1.0))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.5), _GLF_FUZZED(vec3(-68.61, 812.520, 2277.3362).b)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true, true))) && (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && (_GLF_DEAD(false)))), ! (! (bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && (_GLF_DEAD(false))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))) && (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0, ((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))) * _GLF_IDENTITY(dot(vec3(length(vec2(0.0, 0.0)), 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)), dot(vec3(length(vec2(0.0, 0.0)), 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)))))))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && (_GLF_DEAD(false)))), ! (! (bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), injectionSwitch.y))) + 0.0)) * 1.0)))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && (_GLF_DEAD(false)))))))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, true)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 93442)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), _GLF_IDENTITY(int(ivec3((0 | 0), 0, 1)), 0 ^ (int(ivec3((0 | 0), 0, 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) + vec2(0.0, 0.0)).x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(-2990.8123) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).y), true && ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-6.3)), bool(false))), injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), cos(0.0), 1.0, 0.0, 0.0))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) && true)))) && true)))))))))))), true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-70.64)), bool(false))), injectionSwitch[1])).x > injectionSwitch.y))))
      continue;
     break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size), clamp(~ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u)))))), ~ (workgroup_size), ~ (workgroup_size)))), ((_GLF_IDENTITY(~ (workgroup_size), clamp(~ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u)))))), ~ (workgroup_size), ~ (workgroup_size))))) * 1u))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        return;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * workgroup_id, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * workgroup_id, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-869.682)), bool(false))))), clamp(0.0, 0.0, 0.0)), 1.0))).x)) ^ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y), (35156u & 0u) + (uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y)))) * workgroup_id, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * workgroup_id, _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y, clamp(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y)) * workgroup_id))))));
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 uint subgroup_base = subgroup_size * subgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)))), (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size))))) | (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size))))))), _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, _GLF_IDENTITY(max(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size), (max(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)) + (uvec2(0u, 0u) | uvec2(0u, 0u)))), GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size), ~ (~ (clamp(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)))), (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size))))) | (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, min(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size))))))))), _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, _GLF_IDENTITY(max(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size), (max(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)) + (uvec2(0u, 0u) | uvec2(0u, _GLF_IDENTITY(0u, min(0u, 0u)))))), GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size))))).x + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_base, 0u ^ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_base))) + 0u) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) | (53427u & uint(_GLF_ZERO(0.0, injectionSwitch.x))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) / 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(90902) : 1))) << (0 >> _GLF_IDENTITY(int(1), int(1)))), false), bvec2(bvec2(bvec2(_injected_loop_counter < 1, false))))))); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          break;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))))).x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), clamp((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), _GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), (_GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), mix(float((false ? _GLF_FUZZED(4.9) : injectionSwitch.x)), float(_GLF_FUZZED(float(135808u))), bool(false)))) - 0.0), (false ? _GLF_FUZZED(4.9) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9333.3165)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(924.081, _GLF_IDENTITY(7.6, max(7.6, 7.6)))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0), (mat3x4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0)) * mat3(1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0), (mat3x4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0)) * mat3(1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1), (clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)) << 0)) << 0))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0), (mat3x4(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0)) * mat3(1.0))))) + 0.0)) - log(1.0)))))).x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), _GLF_IDENTITY(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), float(_GLF_IDENTITY(float(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)))), float(mat4x3(float(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x : _GLF_FUZZED(79.45)), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, false))))) ? injectionSwitch.x : _GLF_FUZZED(79.45)))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0))))))))))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(inversesqrt(5770.4834)))), _GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0)), clamp((false ? _GLF_IDENTITY(_GLF_FUZZED(4.9), min(_GLF_FUZZED(4.9), _GLF_FUZZED(4.9))) : injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), (_GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), mix(float(_GLF_FUZZED(5.2)), float((false ? _GLF_FUZZED(4.9) : injectionSwitch.x)), bool(true)))) / 1.0), (_GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), mix(float(_GLF_FUZZED(-65.79)), float((false ? _GLF_FUZZED(4.9) : injectionSwitch.x)), bool(true)))) - 0.0), (false ? _GLF_FUZZED(4.9) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), clamp((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(4.9), (true ? _GLF_FUZZED(4.9) : _GLF_FUZZED(7.2))) : injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.9), (true ? _GLF_FUZZED(4.9) : _GLF_FUZZED(7.2))) : injectionSwitch.x) / 1.0)), _GLF_IDENTITY((false ? _GLF_FUZZED(4.9) : injectionSwitch.x), ((false ? _GLF_FUZZED(4.9) : injectionSwitch.x)) - 0.0), (false ? _GLF_FUZZED(4.9) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))) * exp(0.0)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(924.081, 7.6)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(924.081, 7.6)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))))) / vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat3x4((false ? _GLF_FUZZED(vec2(924.081, 7.6)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))))) / vec2(1.0, 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0), mat3x4(mat4(mat3x4((false ? _GLF_FUZZED(vec2(924.081, 7.6)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))))) / vec2(1.0, 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0))))))))).x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(79.45), clamp(true ? injectionSwitch.x : _GLF_FUZZED(79.45), true ? injectionSwitch.x : _GLF_FUZZED(79.45), true ? injectionSwitch.x : _GLF_FUZZED(79.45)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0))) : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), clamp(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), _GLF_IDENTITY(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), min(_GLF_IDENTITY(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), float(mat4x3(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))))), clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))))), mix(float(_GLF_FUZZED(3429.4589)), float(_GLF_IDENTITY(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))), float(float(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45))))))), bool(true)))) * 1.0), float(_GLF_IDENTITY(float(clamp((_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(79.45), min(true ? injectionSwitch.x : _GLF_FUZZED(79.45), _GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(79.45), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95.73) : true ? injectionSwitch.x : _GLF_FUZZED(79.45)))))), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)))), float(mat4x3(float(clamp((true ? injectionSwitch.x : _GLF_FUZZED(79.45)), (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(79.45, float(vec3(79.45, determinant(mat4(0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0))), (_GLF_IDENTITY(_GLF_IDENTITY(79.45, float(vec3(79.45, determinant(mat4(0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0))), min(_GLF_IDENTITY(79.45, float(vec3(79.45, determinant(mat4(0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0))), _GLF_IDENTITY(79.45, float(vec3(79.45, determinant(mat4(0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0)))))) * 1.0))), (true ? injectionSwitch.x : _GLF_FUZZED(79.45)))), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6.2)), float(1.0), bool(true))), 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0))))))))))) > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(9658.3257))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(966.427), _GLF_FUZZED(2.1)), bvec2(false, false))).y)) && true))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5855.9983)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0))).x, mix(float(_GLF_FUZZED(-1520.4635)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0))).x), bool(true))) > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-849.597)), vec2(_GLF_FUZZED(-3.9), (injectionSwitch)[1]), bvec2(false, true)))) - tan(vec2(0.0, 0.0))).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 & 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size / 2, (subgroup_size / 2) ^ 0u), (subgroup_size / 2) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size / 2, (subgroup_size / 2) ^ 0u), (subgroup_size / 2) >> 0u))) | 0u), ((_GLF_IDENTITY(subgroup_size / 2, _GLF_IDENTITY((subgroup_size / 2), (_GLF_IDENTITY((subgroup_size / 2), max((subgroup_size / 2), (subgroup_size / 2)))) | 0u) + 0u))) >> 0u))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) - 0)), (int(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) - 0))) << 0), int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) / 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1), _injected_loop_counter)) != (0 | 0))) && true); _injected_loop_counter --)
        {
         return;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(5), int(5))) ^ 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(next_virtual_gid) : uint(1))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (1 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - 0), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) ^ (_GLF_IDENTITY(4, (4) / 1))), clamp(4, 4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) - (0 >> _GLF_IDENTITY(int(4), int(4))))) >> 0))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(0), int(0))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY((_GLF_DEAD(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false)) && true)) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY((_GLF_DEAD(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false)) && true)) && true))), false || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY((_GLF_DEAD(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false)) && true)) && true)))))), bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY((_GLF_DEAD(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false)) && true)) && true))), false || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) || false, (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false), (_GLF_IDENTITY((_GLF_DEAD(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3((_GLF_DEAD(false)) || false, true, true)))) || false)) && true)) && true)))))), false, true, true))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y))));
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(751.233) : injectionSwitch.y))))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
  }
}
