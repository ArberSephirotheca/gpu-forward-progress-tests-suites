#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) ^ 0)))) ^ 0, ~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))) ^ 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-95805) : 1))) | (_GLF_IDENTITY(1, (1) << 0))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_injected_loop_counter != 1, false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_injected_loop_counter != 1, false, true), true))))))), (bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) >> 0), 1), (ivec2(_GLF_IDENTITY(1, (1) >> 0), 1)) << ivec2(0, 0)))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 1, false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_injected_loop_counter != 1, false, true), true)))))))) && true))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(max(gl_NumWorkGroups.x, gl_NumWorkGroups.x), (max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x)), gl_NumWorkGroups.x)))) >> 0u));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0, 0.0, 0.0, length(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(float(6593)), clamp(_GLF_FUZZED(float(6593)), _GLF_FUZZED(float(6593)), _GLF_FUZZED(float(6593))))))), determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(0.0, 0.0, 0.0))))), float(vec3(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, 0.0, 0.0))), clamp(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6.5)), bool(false)))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, 0.0, 0.0))), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) - 0.0), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, 0.0, 0.0))), (dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)))) * 1.0), (false ? _GLF_FUZZED(4101.9516) : _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) - vec2(0.0, 0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0))), (dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0), (vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2034.1875)), float(0.0), bool(true))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)))) * 1.0))))), 1.0, 0.0))), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0))), abs(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(1.0))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(125.594, 5.1)) : injectionSwitch)).y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_size * subgroup_id, max(_GLF_IDENTITY(subgroup_size * subgroup_id, _GLF_IDENTITY((subgroup_size * subgroup_id), ((subgroup_size * subgroup_id)) | ((subgroup_size * _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size * subgroup_id, clamp(subgroup_size * subgroup_id, subgroup_size * subgroup_id, subgroup_size * subgroup_id)), (_GLF_IDENTITY(subgroup_size * subgroup_id, clamp(subgroup_size * _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_size * subgroup_id, subgroup_size * subgroup_id))) / 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) >> 0u, 0u + ((workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_id) : subgroup_base))) | (_GLF_IDENTITY(subgroup_base, uint(uvec3(subgroup_base, 1u, 1u)))))))) >> 0u))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(true))) ? workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)) % subgroup_size) : _GLF_FUZZED(workgroup_id)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))))), ! (! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))) || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), 1, 0)))))) > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((false ? _GLF_FUZZED(23255) : int(3)), max((false ? _GLF_FUZZED(23255) : int(3)), (false ? _GLF_FUZZED(23255) : int(3)))))))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat2x4(0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))), injectionSwitch.x))); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), ! (! (bool(! (false))))))))))))))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = (0 & -13245); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))), (! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))), bool(bool(! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))))))))) || false)))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))))))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.2, _GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))))))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-5.2, 31.70)))))))))), vec2(injectionSwitch[0], injectionSwitch[1])).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), min(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.2, _GLF_IDENTITY(_GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false)))), mix(float(_GLF_FUZZED(-73.58)), float(_GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false))))), bool(true))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(-5127.4509, 46.36)))))) : _GLF_FUZZED(vec2(-5.2, 31.70)))))))))), vec2(injectionSwitch[_GLF_IDENTITY(0, (0) + 0)], injectionSwitch[1])).y), false || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.2, _GLF_IDENTITY(_GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false)))), mix(float(_GLF_FUZZED(-73.58)), float(_GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false))))), bool(true))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-5.2, 31.70)))))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.2, _GLF_IDENTITY(_GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false)))), mix(float(_GLF_FUZZED(-73.58)), float(_GLF_IDENTITY(31.70, _GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), mix(float(_GLF_IDENTITY(float(vec4(31.70, 0.0, 0.0, 1.0)), min(float(vec4(31.70, 0.0, 0.0, 1.0)), float(vec4(31.70, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED((-5.2))), bool(false))))), bool(true))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-5.2, 31.70))))))))) + vec2(0.0, 0.0)))), vec2(injectionSwitch[_GLF_IDENTITY(0, (0) + 0)], injectionSwitch[1])).y))))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
                          barrier();
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.7)), bool(false))), 0.0, 1.0, 1.0, 1.0, 1.0, abs(sin(0.0)), 0.0)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))) || false)))))))
                            {
                             for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))) && true, false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))) && true))));
                      }
                     else
                      {
                      }
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), ((buf[virtual_gid]) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | ((buf[virtual_gid]) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))));
 if(subgroup_local_id + _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (1) - 0))))) < (subgroup_size / 2))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false)), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false)), false))))), true))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))).y))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(int(_GLF_IDENTITY(-8.4, max(-8.4, _GLF_IDENTITY(-8.4, _GLF_IDENTITY(float(mat4x2(-8.4, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(vec3(float(mat4x2(-8.4, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0)))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))) && true))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, _GLF_IDENTITY(2139.6205, float(mat4x3(_GLF_IDENTITY(2139.6205, min(_GLF_IDENTITY(2139.6205, (false ? _GLF_FUZZED(0.8) : 2139.6205)), 2139.6205)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), float(mat2x4(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))))), 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-1.2))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))), 0.0)), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3))))))))))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)) + (injectionSwitch.y), min(_GLF_IDENTITY(0.0, 1.0 * (0.0)) + (injectionSwitch.y), _GLF_IDENTITY(0.0, 1.0 * (0.0)) + (injectionSwitch.y)))))))) && true)))))))), true && ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(64.72)), vec2(_GLF_FUZZED(4157.6168), (injectionSwitch)[1]), bvec2(false, true))))).x), _GLF_ZERO(0.0, injectionSwitch.x))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), float(mat3(clamp(1.0, 1.0, 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0))))), 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(64.72)), vec2(_GLF_FUZZED(4157.6168), (injectionSwitch)[1]), bvec2(false, true))))).x), _GLF_ZERO(0.0, injectionSwitch.x))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), float(mat3(clamp(1.0, 1.0, 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0))))), 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(64.72)), vec2(_GLF_FUZZED(4157.6168), (injectionSwitch)[1]), bvec2(false, true))))).x), _GLF_ZERO(0.0, injectionSwitch.x))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), float(mat3(clamp(1.0, 1.0, 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0))))), 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))))))), false, false)), (bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(64.72)), vec2(_GLF_FUZZED(4157.6168), (injectionSwitch)[1]), bvec2(false, true))))).x), _GLF_ZERO(0.0, injectionSwitch.x))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), float(mat3(clamp(1.0, 1.0, 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0))))), 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (true ? mat4x3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x3(64.65, 57.41, -27.19, -2.5, 2139.6205, 1.2, -7423.2598, 50.80, -655.718, -69.52, 9.2, 8.3)))))))))))), false, false))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)) + (injectionSwitch.y), min(_GLF_IDENTITY(0.0, 1.0 * (0.0)) + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(0.0, 1.0 * (0.0)) + (injectionSwitch.y)))))))) && true)))))))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     subgroupBarrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 1))))))), ((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 1)))))))) << 0), clamp((0 >> _GLF_IDENTITY(int(4), int(4))), (0 >> _GLF_IDENTITY(int(4), int(4))), (0 >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
