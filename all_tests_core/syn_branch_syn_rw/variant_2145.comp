#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_30 {
 uint _f0;
} ;

struct _GLF_struct_29 {
 bvec4 _f0;
 bool _f1;
 float _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_31 {
 _GLF_struct_29 _f0;
 _GLF_struct_30 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_32 {
 ivec3 _f0;
 _GLF_struct_31 _f1;
 float _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_27 {
 vec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_25 {
 mat3x2 _f0;
 int _f1;
 vec4 _f2;
 ivec4 _f3;
 bvec2 _f4;
 uvec2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
 uvec3 _f1;
 uvec4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_23 {
 ivec3 _f0;
 mat2x3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_26 {
 _GLF_struct_23 _f0;
 vec2 _f1;
 _GLF_struct_24 _f2;
 mat2 _f3;
 _GLF_struct_25 _f4;
} ;

struct _GLF_struct_28 {
 _GLF_struct_26 _f0;
 uint subgroup_id;
 mat3x4 _f1;
 vec3 _f2;
 _GLF_struct_27 _f3;
} ;

struct _GLF_struct_21 {
 bvec3 _f0;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 vec2 _f1;
 ivec2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_18 {
 bvec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 bvec3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 vec4 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_19 _f3;
} ;

struct _GLF_struct_15 {
 mat3x2 _f0;
 mat4x3 _f1;
 mat2x3 _f2;
 float _f3;
 int _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_14 {
 ivec2 _f0;
} ;

struct _GLF_struct_22 {
 _GLF_struct_14 _f0;
 _GLF_struct_16 _f1;
 uint workgroup_id;
 bvec2 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_21 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 ivec3 _f1;
 ivec2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 mat2 _f1;
 uvec3 _f2;
 uint workgroup_base;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
 ivec3 _f1;
 uint _f2;
 int _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 uvec4 _f1;
 mat2x4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 ivec4 _f1;
 mat4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_4 {
 bool _f0;
 bvec4 _f1;
 ivec2 _f2;
 vec4 _f3;
 uvec3 _f4;
 vec2 _f5;
 int _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 mat4x3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 mat2 _f4;
 bool _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_12 _f2;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 vec2 _f1;
 mat2x3 _f2;
 mat4x2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 vec2 _f1;
 uvec3 _f2;
 mat3x4 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 int _f1;
 _GLF_struct_1 _f2;
 uvec2 _f3;
 float _f4;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 ivec4 _f1;
 ivec4 _f2;
 uint read;
 _GLF_struct_2 _f3;
 mat2x4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.9)), bool(false))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) + vec2(0.0, 0.0)).x), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y), true, false)), (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + _GLF_IDENTITY(-83.93, (-83.93) - 0.0)))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true, false))) && true)), true, false, false)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((_GLF_IDENTITY(-22.45 + -83.93, max(-22.45 + -83.93, -22.45 + -83.93))))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, tan(0.0), 0.0, 1.0, 0.0, tan(sin(0.0)), 1.0, 1.0)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-22.45 + -83.93))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), true, false)), (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-2.8)))), mix(float(_GLF_FUZZED((_GLF_IDENTITY(-22.45 + -83.93, mix(float(_GLF_IDENTITY(-22.45 + -83.93, (-22.45 + -83.93) + 0.0)), float(_GLF_FUZZED(-970.038)), bool(false)))))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), true, false))) && true)), _GLF_IDENTITY(true, (true) && true), false, false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, false, false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_26(_GLF_struct_23(ivec3(1), mat2x3(1.0), mat4(1.0)), vec2(1.0), _GLF_struct_24(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))), ~ (~ (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u)))))), uvec4(1u), mat3x4(1.0)), mat2(1.0), _GLF_struct_25(mat3x2(1.0), 1, vec4(1.0), ivec4(1), bvec2(true), uvec2(1u), mat4x2(1.0))), gl_SubgroupID, mat3x4(1.0), vec3(1.0), _GLF_struct_27(vec4(1.0), 1u));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false)))
          barrier();
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, tan(0.0)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), false || (_GLF_IDENTITY(bool(false), false || (bool(false)))))), ! (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(7007.1522), (_GLF_IDENTITY(_GLF_FUZZED(7007.1522), (true ? _GLF_FUZZED(7007.1522) : _GLF_FUZZED(-4.2)))) - 0.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(30.34)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 0.0, 1.0))))).x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 0.0 + (injectionSwitch.y))) * 1.0)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-63.86))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))) && true))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true))))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), int(ivec4(1 << _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)))), max((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), int(ivec4(1 << _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), int(ivec4(1 << _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), (int(3)) * 1) : _GLF_FUZZED(-94298)))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         break;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) << (0 | 0))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), false, true, false))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), true && (_GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_14(ivec2(1)), _GLF_struct_16(_GLF_struct_15(mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, ((1.0) + 0.0) + abs(sqrt(0.0))))), mat4x3(1.0), mat2x3(1.0), 1.0, 1), ivec2(1)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x, (gl_WorkGroupID.x) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))), uint(3u)))), bvec2(true), _GLF_struct_20(_GLF_struct_17(uvec3(1u), mat3x4(1.0), mat4x3(1.0), bvec3(true), ivec2(1)), vec4(1.0), _GLF_struct_18(bvec2(true), ivec3(1)), _GLF_struct_19(bvec3(true), vec2(1.0), ivec2(1), mat2x3(1.0))), _GLF_struct_21(bvec3(true)), mat3x2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(mat2x4(1.0), _GLF_struct_8(_GLF_struct_4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, true && (true)), false)))))), _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false)), bvec4(true), ivec2(1), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * cos(0.0), ((1.0) * cos(0.0)) / 1.0))), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))) ^ uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u))))), 0u, 0u)), 1u))), vec2(1.0), 1), mat4x3(1.0), _GLF_struct_5(mat4x2(1.0), ivec4(1), mat4(1.0), mat2x4(1.0)), _GLF_struct_6(mat3x2(1.0), mat3(1.0)), mat2(1.0), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true))))), (_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true)))))) && true)), _GLF_struct_7(bvec4(true), uvec4(1u), mat2x4(1.0), mat2x3(1.0))), _GLF_struct_12(vec3(1.0), ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY((1) << 0, ((1) << 0) + 0))) | (1))), 1u, 1, _GLF_struct_9(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5211.9657) : _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))), mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), uvec3(1u), _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) ^ 0u, min(_GLF_IDENTITY((workgroup_size) ^ 0u, uint(uvec4((workgroup_size) ^ 0u, 1u, 0u, 0u))), _GLF_IDENTITY((workgroup_size) ^ 0u, 0u ^ ((workgroup_size) ^ 0u))))) * _GLF_struct_replacement_22.workgroup_id), _GLF_struct_10(bvec4(true), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_FUZZED(-399.561), clamp(_GLF_IDENTITY(_GLF_FUZZED(-399.561), min(_GLF_FUZZED(-399.561), _GLF_FUZZED(-399.561))), _GLF_FUZZED(-399.561), _GLF_FUZZED(_GLF_IDENTITY(-399.561, (_GLF_IDENTITY(-399.561, _GLF_IDENTITY((false ? _GLF_FUZZED(distance(245.697, _GLF_IDENTITY(58.63, _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0))), 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(804.888))))), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0)))) : -399.561), clamp((false ? _GLF_FUZZED(distance(245.697, _GLF_IDENTITY(58.63, _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6.4)), bool(false))), 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED((-462.583)) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2942.1970)), float(0.0), bool(true))))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0)))) : -399.561), (false ? _GLF_FUZZED(distance(245.697, _GLF_IDENTITY(58.63, _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))) + 0.0)))) : -399.561), _GLF_IDENTITY((false ? _GLF_FUZZED(distance(_GLF_IDENTITY(245.697, max(245.697, 245.697)), _GLF_IDENTITY(58.63, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0), min(_GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0), float(vec2(_GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0), 0.0))))), _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0)))))) : -399.561), max((false ? _GLF_FUZZED(distance(245.697, _GLF_IDENTITY(58.63, _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0)))) : -399.561), _GLF_IDENTITY((false ? _GLF_FUZZED(distance(245.697, _GLF_IDENTITY(58.63, _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)))), _GLF_IDENTITY((float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), float(mat2x3((float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 1.0, sqrt(0.0), 0.0, sqrt(1.0)))) + 0.0)))) : -399.561), (false ? _GLF_FUZZED(-806.527) : (false ? _GLF_FUZZED(distance(245.697, _GLF_IDENTITY(58.63, _GLF_IDENTITY(float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat4x3(58.63, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))) + 0.0)))) : -399.561))))))))) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(22.32) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))))))) : 1.0)), 1.0, 1.0))), mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, abs(0.0) + (1.0)), 1.0))), mat4(1.0)), _GLF_struct_11(_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), ivec3(1), ivec2(1), bvec3(true))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_size * _GLF_struct_replacement_28.subgroup_id;
 uint virtual_gid = _GLF_struct_replacement_13._f2._f4.workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) || false))), true, false)))) || false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), injectionSwitch.y))))))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), ((false)) || false)), bool(bvec4((_GLF_IDENTITY((false), ((false)) || false)), false, false, false))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0)))))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-447.174)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-447.174)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-447.174)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)), ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0))) | 0u) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(66960) : 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1), _GLF_IDENTITY(((1)) ^ 0, (((1)) ^ 0) * 1)) : _GLF_FUZZED(12279))) - 0)) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) | (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279)) / 1))) - 0)) % subgroup_size))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base) ^ 0u, max(_GLF_IDENTITY((subgroup_base) ^ 0u, min((subgroup_base) ^ 0u, (subgroup_base) ^ 0u)), (subgroup_base) ^ 0u)), min((subgroup_base) ^ 0u, _GLF_IDENTITY((subgroup_base), ((subgroup_base)) ^ 0u) ^ 0u))) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) ? (1) : _GLF_FUZZED(12279))) - 0, (_GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0) * int(_GLF_ONE(1.0, injectionSwitch.y))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(_GLF_IDENTITY(12279, (12279) | _GLF_IDENTITY(0, (0) << 0))))) - 0)) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_IDENTITY(_GLF_FUZZED(12279), (true ? _GLF_FUZZED(12279) : _GLF_FUZZED(36008)))) / 1))) - 0)) % subgroup_size))), (_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), ((subgroup_base)) - 0u) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, max(1, 1)))), (int(int(_GLF_IDENTITY(1, max(1, 1))))) - 0)), _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))), (_GLF_IDENTITY((1), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true))) ? (1) : _GLF_FUZZED(12279)))) / _GLF_IDENTITY(1, (1) / (1 & 1))) - 0)) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.0), _GLF_FUZZED(4.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)), 1u * ((((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_IDENTITY(_GLF_FUZZED(12279), ~ (~ (_GLF_FUZZED(12279)))))) - 0), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(ivec2(1, (38274 & 0))))))))), 1, 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) / 1u)) % subgroup_size)) | (((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) ^ 0)) % subgroup_size)))))) ^ 0u), 1u)), uint(uvec2(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) || false))))) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) * 1), _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_IDENTITY(_GLF_FUZZED(12279), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), clamp(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279))))))), max(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), clamp(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), clamp(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), clamp(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))))))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), clamp(int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))), int(_GLF_IDENTITY(_GLF_FUZZED(12279), 0 ^ (_GLF_FUZZED(12279)))))))))))))) - 0)) % subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(bitfieldExtract(subgroup_local_id, -18800, 75570)) : _GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) ^ 0u, min((subgroup_base) ^ 0u, (subgroup_base) ^ 0u))) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279)), _GLF_IDENTITY(1, clamp(1, 1, 1)) * ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))))) - 0)) % subgroup_size))))), 1u * (_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0, max(_GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size)))))) ^ 0u), (_GLF_struct_replacement_13._f2._f4.workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size, 0u + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size) | ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size))))), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(12279))) - 0)) % subgroup_size) | 0u))) | (((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))) * _GLF_IDENTITY(1, max(1, 1))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(17.99, -40.17)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4999.2002), _GLF_FUZZED(2349.1746)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x > injectionSwitch.y)), true))))) ? (1) : _GLF_IDENTITY(_GLF_FUZZED(12279), ~ (~ (_GLF_FUZZED(12279)))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6798.0736), _GLF_FUZZED(-61.76)), bvec2(false, false))).y, mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6798.0736), _GLF_FUZZED(-61.76)), bvec2(false, false))).y), float(_GLF_FUZZED(-8.6)), bool(false))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) ? (1) : _GLF_FUZZED(12279), ~ (~ (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) ? (1) : _GLF_IDENTITY(_GLF_FUZZED(12279), max(_GLF_FUZZED(12279), _GLF_FUZZED(12279))))))) >> 0))) - 0)) % subgroup_size)))) ^ 0u), 1u)), (1u & 1u)))));
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1373.3444) : 1.0))), ivec4(1), ivec4(1), atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_struct_2(_GLF_struct_0(mat2x4(1.0), vec2(1.0), uvec3(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), mat3x4(1.0), mat4x2(1.0)), 1, _GLF_struct_1(vec3(1.0), vec2(1.0), mat2x3(1.0), mat4x2(1.0), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u, max(0u, 0u)) ^ (1u)))), uvec2(_GLF_IDENTITY(1u, ~ (~ (1u)))), 1.0), mat2x4(_GLF_IDENTITY(1.0, (1.0) * sqrt(1.0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((81366 << -57960)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, 1u * (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))))), uint(uint(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))))))) < (subgroup_size / 2))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(min(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(866.821)), bool(false)))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true), false))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || false)))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                }
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), false || (! (_GLF_IDENTITY(true, true && (true))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         barrier();
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), (bool(bvec4(true, true, false, true))) && true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           for(_GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(ivec3(1), _GLF_struct_31(_GLF_struct_29(bvec4(true), true, 1.0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) + 0)))))), _GLF_struct_30(1u), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(26.53)), float(1.0), bool(true))))), 1.0, bvec2(true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_32._f1._f0._injected_loop_counter != 0); _GLF_struct_replacement_32._f1._f0._injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (6))) | (_GLF_IDENTITY(6, (6) * 1)))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))), false || (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))), (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))) && true))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false), false, false))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))
                        return;
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (_GLF_IDENTITY(! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2(! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), false)))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, _GLF_IDENTITY((1 ^ 1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((1 ^ 1), (false ? _GLF_FUZZED(12070) : (1 ^ 1))))), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec4(int(0), (0 >> _GLF_IDENTITY(int(7), int(7))), 1, 0))), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0))))), (int(ivec3(1, (1 ^ 1), (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)), 0 ^ ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))))) | (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) ^ 0)))))) >> _GLF_IDENTITY(int(0), int(0)))))))) ^ 0), (0 << _GLF_IDENTITY(int(5), int(5))) | ((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0))))), (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))) | (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))))), min(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0))))), (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))) | (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0))))), (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))) | (int(ivec3(1, (1 ^ 1), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 1, 0))))) >> _GLF_IDENTITY(int(0), int(0)))))))))) ^ 0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false))))), (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))) && true)));
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1)) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9571.9646)), bool(false)))))) / 1.0) < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9571.9646)), bool(false)))))) / 1.0) < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0))))) > injectionSwitch.y)) || (bool(bvec2(_GLF_DEAD(false), false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), false || (! (bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - 0)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, sqrt(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 0.0))), 1.0, 0.0), mat2x4(mat3x4(mat2x4(injectionSwitch.x, sqrt(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 0.0))), 1.0, 0.0)))))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))) && true))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             barrier();
            }
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   subgroupBarrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(12.02)), bvec2(true, false)))) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(12.02)), bvec2(true, false)))) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))), bool(bvec2(! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(12.02)), bvec2(true, false)))) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), bool(bool(_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0))) > injectionSwitch.y)))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           continue;
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_3.read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
}
