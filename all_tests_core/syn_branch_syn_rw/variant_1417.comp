#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 vec4 _f0;
 mat3x4 _f1;
 bvec3 _f2;
 uint _f3;
 mat3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint workgroup_base;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size;
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(vec4(1.0), mat3x4(1.0), bvec3(true), 1u, mat3(1.0), uvec4(1u))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id);
 uint subgroup_base = GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y * GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z;
 uint virtual_gid = _GLF_struct_replacement_2.workgroup_base + subgroup_base + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 uint next_virtual_gid = _GLF_struct_replacement_2.workgroup_base + subgroup_base + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x = read;
 if((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x % 2) == 0)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   subgroupBarrier();
  }
 else
  {
  }
 atomicStore(checker[virtual_gid], GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x, 4, 64, 4);
}
