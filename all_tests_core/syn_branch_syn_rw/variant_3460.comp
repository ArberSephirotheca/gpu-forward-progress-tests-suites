#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) - 0)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(_GLF_IDENTITY(6, (6) | (6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), bool(bvec4(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), true, true, true)))) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.7)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0))) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0), mat2(mat2x4(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) | (1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((0 ^ 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 98.98)), (_GLF_FUZZED(vec2(-2.8, 98.98))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), max(injectionSwitch, injectionSwitch)).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.1)), bool(false)))))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, float(float(1.0))))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(0.0, abs(1.0) * (_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0))))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))))))))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y)))))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) || false)))))
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               do
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, bool(bool(false))))))))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true)))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec3(false, false, false))))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                  barrier();
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.2), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], float(mat2((injectionSwitch)[1], 0.0, 1.0, 1.0)))) / abs(1.0))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(36062))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, int(ivec2(0, ((0 | 0) | 0)))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
    barrier();
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, max(3, 3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)))), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) ^ 0), ~ (~ (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), (int(1)) | (int(1)))) ^ 0)))), (int(1)) / 1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(_GLF_IDENTITY(1, (1) | (1)))), clamp((int(1)), _GLF_IDENTITY((int(1)), 0 + ((int(_GLF_IDENTITY(1, (1) << 0))))), (int(1)))) / 1), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1)))), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (int(1)) / 1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), _GLF_IDENTITY((int(1)), 0 + ((int(1)))), (int(1)))) / 1), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), _GLF_IDENTITY((int(1)), clamp((int(1)), _GLF_IDENTITY((int(1)), 0 + (_GLF_IDENTITY((int(1)), min((int(1)), (int(1)))))), (int(1)))) / 1), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY((int(1)), min((_GLF_IDENTITY(int(1), 0 + (int(1)))), (int(1)))), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 0))), _GLF_IDENTITY((int(1)), 0 + ((int(1)))), (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-40187)))) | 0)))) / _GLF_IDENTITY(1, (1) / 1)), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) + 0)), (_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), _GLF_IDENTITY((int(1)), clamp((int(1)), _GLF_IDENTITY((int(1)), 0 + (_GLF_IDENTITY((int(1)), min((int(1)), (int(1)))))), (int(1)))) / 1), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY((int(1)), min((_GLF_IDENTITY(int(1), 0 + (int(1)))), (int(1)))), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 0))), _GLF_IDENTITY((int(1)), 0 + ((int(1)))), (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-40187)))) | 0)))) / _GLF_IDENTITY(1, (1) / 1)), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) + 0)), ((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), _GLF_IDENTITY((int(1)), clamp((int(1)), _GLF_IDENTITY((int(1)), 0 + (_GLF_IDENTITY((int(1)), min((int(1)), (int(1)))))), (int(1)))) / 1), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY((int(1)), min((_GLF_IDENTITY(int(1), 0 + (int(1)))), (int(1)))), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 0))), _GLF_IDENTITY((int(1)), 0 + ((int(1)))), (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-40187)))) | 0)))) / _GLF_IDENTITY(1, (1) / 1)), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) + 0))) | 0)) ^ 0))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (int(1)) / 1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), ((int(1))) << 0), _GLF_IDENTITY((int(1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0) + ((_GLF_IDENTITY(int(1), 0 + (int(1)))))), (int(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) | (1)))))) / 1), int(1))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (1 ^ 1) ^ (int(1))), _GLF_IDENTITY(int(1), int(ivec4(int(_GLF_IDENTITY(1, (1) << 0)), 0, 0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), int(5))))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))) + (_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-13415))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0) < injectionSwitch.y)), false)))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))), int(2))) >> _GLF_IDENTITY(int(2), int(2)), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))), int(2))) >> _GLF_IDENTITY(int(2), int(2)), 0), max(ivec2((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))), int(2))) >> _GLF_IDENTITY(int(2), int(2)), 0), _GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))), int(2))) >> _GLF_IDENTITY(int(2), int(2)), 0), (ivec2((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))), int(2))) >> _GLF_IDENTITY(int(2), int(2)), 0)) >> ivec2(0, 0)))))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(697.794)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.4)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))), bool(bool((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), false || ((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec2(bvec2((_GLF_DEAD(false)), false)))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true && (! (_GLF_DEAD(false))), bool(bool(true && (! (_GLF_DEAD(false)))))))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))) || false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))), false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))), false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)))))), ! (! (! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))), false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))), false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)))))), ! (! (! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))), false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)), ! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false))))) && true))) || false))), _GLF_IDENTITY(false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)))), _GLF_IDENTITY(bool(bvec3(false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)))), true, false)), (bool(bvec3(false || (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false)))), true, false))) || false))))))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || _GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false))), false || (! (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true))), true && (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_DEAD(false)))))) || false), false))))))))))))))))), true, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (true)))))) && (true)), true)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.9)), bool(false))))), 0.0))) * (injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) && true))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) || false)), ! (! (! (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))) || (false)) || false)))))))), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(false, (false) || false)), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (! (false || (false))))) && true)), false, false), false)))))))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), false, false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false)), false, false), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))))))), false, false)), true, true, false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))), false, false), false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (! (false || (false))))) && true)), false, false), false)))))))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))))))), false, false)), true, true, _GLF_IDENTITY(false, bool(bool(false))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))), false, false), false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (! (false || (false))))) && true)), false, false), false)))))))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), false)))))))), false, false)), true, true, _GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = ((_GLF_IDENTITY(1, ~ (~ (1))) & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! _GLF_IDENTITY((true), bool(bvec2(_GLF_IDENTITY((true), ! (! ((true)))), false))))), false || (bool(bool(! (true)))))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) : injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) : injectionSwitch)))).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)), false || (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), true)))))))
          {
          }
         else
          {
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, min(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_size * workgroup_id)), max(uint(uint(workgroup_size * workgroup_id)), uint(uint(workgroup_size * workgroup_id))))), _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_id, (workgroup_id) << (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), 0u | (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))))));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) - 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), false, false)), true && (bool(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), false, false)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), false || (bool(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)), vec2(0.0, 0.0) + (vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(mat3x2(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mix(vec4(_GLF_FUZZED(-3778.9342), (vec4(0.0, 1.0, 0.0, 0.0))[1], _GLF_FUZZED(-1.4), (vec4(0.0, 1.0, 0.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 0.0, 0.0))[0], _GLF_FUZZED(25.20), (vec4(0.0, 1.0, 0.0, 0.0))[2], _GLF_FUZZED(-7.7)), bvec4(true, false, true, false))), 0.0, 1.0)))))), _GLF_IDENTITY(0.0, float(mat3x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 0.0))))).y), false), bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false)))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))) || false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true))), _GLF_IDENTITY(true && (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true)))), (_GLF_IDENTITY(true && (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true)))), ! (! (true && (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true))), _GLF_IDENTITY(true && (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (false))), false, false, true)))), (_GLF_IDENTITY(true && (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))), false, false, true)))), ! (! (true && (bool(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0), (vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0)) * vec2(1.0, 1.0))), (float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0), (vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0)) * vec2(1.0, 1.0)))) - 0.0))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3260.1499), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((5.0 / -1.4))), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)) + 1), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_base)))))) : subgroup_local_id)) + 1)) + 0u)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)) + 1), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_base)))))) : subgroup_local_id)) + 1)) + 0u)))), 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))), (_GLF_IDENTITY(false, bool(bvec3(false, true, false))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 1u * (_GLF_FUZZED(subgroup_size))))), (_GLF_FUZZED(subgroup_size)) * 1u) : subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(subgroup_size)), max(~ (_GLF_FUZZED(subgroup_size)), ~ (_GLF_FUZZED(subgroup_size)))))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id)))) ^ 0u), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) ^ 0u)) | (uint(subgroup_local_id)))), uint(uvec3(uint(_GLF_IDENTITY(uint(subgroup_local_id), (_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) ^ 0u)) | (uint(subgroup_local_id)))), 1u, 0u)))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u)), max((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), 0u ^ ((subgroup_size) | (subgroup_size))))) : subgroup_local_id, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id) - 0u), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))), 1u * (~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))))))), (subgroup_size) | (subgroup_size))) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size)))) * 1u) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u), min(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u))))), max(uint(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u))))), uint(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u))))))))) * 1u), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id) * 1u), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u))))))) + 0u) | 0u)))) + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(subgroup_size)), max(~ (_GLF_FUZZED(subgroup_size)), ~ (_GLF_FUZZED(subgroup_size)))))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id)))) ^ 0u), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) ^ 0u)) | (uint(subgroup_local_id)))), uint(uvec3(uint(_GLF_IDENTITY(uint(subgroup_local_id), (_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) ^ 0u)) | (uint(subgroup_local_id)))), 1u, 0u)))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u)), max((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), 0u ^ ((subgroup_size) | (subgroup_size))))) : subgroup_local_id, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id) - 0u), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))), 1u * (~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))))))), (subgroup_size) | (subgroup_size))) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : subgroup_local_id)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size)))) * 1u) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u), min(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u))))), max(uint(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u))))), uint(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u)), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))), 0u ^ (0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) ^ 0u)) >> 0u) : subgroup_local_id)))) / 1u))))))))) * 1u), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), (0u | 0u) | ((subgroup_size))), (subgroup_size))))) : subgroup_local_id))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id) * 1u), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) : subgroup_local_id)))) / 1u)) * 1u))))))) + 0u) | 0u)))) + 1))))) % subgroup_size), 1u * (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size) / 1u))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)) + 1), max((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((false), false || ((false)))), bool(bvec3(false, true, false))) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u)))) : subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), bool(bvec3(false, true, false))) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u)))) | 0u)) : subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), bool(bvec3(false, true, false))) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u)))) : subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), false || (false)), bool(bvec3(false, true, false))) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u)))) : subgroup_local_id, 1u, (1u & 1u)))))))) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true))))))))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true))))))))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id) | (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false, true))))))))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), _GLF_IDENTITY(max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) | (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec2(_GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) << 0u), 1u)))))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u)), clamp(max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (true ? _GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id))) : _GLF_FUZZED(workgroup_id)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u)), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (false ? _GLF_FUZZED(subgroup_id) : max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))))), _GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(num_workgroup)))) - (0u & 18205u)))) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u)), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))) >> 0u))))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u) : subgroup_local_id, _GLF_IDENTITY(false, false || (false)) ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), 0u | ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id), ~ (~ (min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))) || (false)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u))))))))) + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), ((_GLF_IDENTITY(1, (1) << 0))) | (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), ((_GLF_IDENTITY(1, (1) << 0))) + (0 << _GLF_IDENTITY(int(5), int(5))))))) * 1) - 0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id) << 0u), min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u | (_GLF_FUZZED(subgroup_size))))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))) << (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))) * 1u)) | 0u)))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id), (min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id)) | 0u))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), (((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))) | 0u) * 1u)) | 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(14705u) : subgroup_local_id)), 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(14705u) : subgroup_local_id)), 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u)))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(14705u) : subgroup_local_id)), 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u))))) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(14705u) : subgroup_local_id)), 1u, 0u))), min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), uint(uvec2(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) : subgroup_local_id))), max((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) * 1u)) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | 0u))))))) : subgroup_local_id))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))))), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, max(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, 0u | (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)), _GLF_IDENTITY(clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id), clamp(clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id), clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id), clamp(false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))))), false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u)))), (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u))))))), ~ (~ _GLF_IDENTITY(((subgroup_size)), (_GLF_IDENTITY(((subgroup_size)), 0u ^ (((subgroup_size))))) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))) + 0u)) : subgroup_local_id, uint(uvec3(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) : subgroup_local_id, 1u, 0u))))) / (0u ^ 1u)))), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) / _GLF_IDENTITY(1u, (1u) | (1u))) : subgroup_local_id, false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) * 1u)) | 0u))))))) + 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), ((_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, ~ (~ (0)))))) * 1) - 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), ((_GLF_IDENTITY(1, (1) << 0))) * 1) - 0)) >> 0)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) / 1u), _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))))))))) % subgroup_size)));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6.1) : injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6.1) : injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6.1) : injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6.1) : injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))))).x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(29072))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true))), false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true))), false, true), false)), false)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))), false || (bool(bvec2(false, true))))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec4(7.3, 1.3, 307.254, 2.1).y)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)))))) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(true)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(78.79)), bvec2(true, false)))), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec2(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), false, true, false))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), min(max(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), _GLF_IDENTITY(max(int(5), int(5)), (_GLF_IDENTITY(max(int(5), int(5)), (max(int(5), int(5))) / 1)) * _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(51.67)))))), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(51.67))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(51.67)))))), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(51.67))))))) | 0))))))), int(5))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0), min(_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0), ~ (~ (_GLF_IDENTITY(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0), (ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)) ^ ivec4(0, 0, 0, 0))))), ivec4((_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5)), (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))) - 0)), 0, 1, 0)))), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | 0)))) / 1), 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | 0)))) / 1)))))) >> 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), min(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), (_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5)))) >> 0)) ^ 0))), max(int(5), int(5))), int(5))), ~ (~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))))), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), max(int(5), int(5))), int(5)))))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(_GLF_IDENTITY(5, (5) | (5))))), _GLF_IDENTITY(0, (0) | 0), 1, 0))) >> 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), max(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter)))))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> _GLF_IDENTITY(0, ~ (~ (0))))), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), max(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter)))))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> _GLF_IDENTITY(0, ~ (~ (0))))), false, true, true)), (bool(bvec4(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), max(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter)))))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> _GLF_IDENTITY(0, ~ (~ (0))))), false, true, true))) && true)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (5) | (5))))), int(_GLF_IDENTITY(5, (5) - 0)))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) ^ 0), clamp(5, _GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) | (_GLF_IDENTITY(5, (5) ^ 0))), ~ (~ (5))), 5, 5)), 5))))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, 5)), (_GLF_IDENTITY(5, min(5, 5))) | (_GLF_IDENTITY(5, min(5, 5))))), int(5))), int(5))), 0, 1, 0))) >> 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, 5)), (_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, 5)), int(ivec4(_GLF_IDENTITY(5, min(5, 5)), 1, 1, 1)))) >> 0)), int(5))), int(5))), 0, 1, 0))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, 5)), ~ (~ (_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, 5), (true ? min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))))) : _GLF_FUZZED(_injected_loop_counter)))))))), int(5))), int(5))), 0, 1, 0))) >> 0)))))) / 1, 1 * (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)))))) / 1, (true ? (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)))))) / 1 : _GLF_FUZZED((- _injected_loop_counter)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5)), min(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), _GLF_IDENTITY((int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0, (_GLF_IDENTITY((int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0, ((int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0) | 0)) + 0))))))) / 1, (true ? (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)), int(int(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), _GLF_IDENTITY(int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))), 0, 1, 0)), (int(ivec4((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(_GLF_IDENTITY(5, min(5, 5))), int(5))), int(5))), 0, 1, 0))) >> 0)))))) / 1 : _GLF_FUZZED((- _injected_loop_counter)))))))))), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), false || (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(bool(bvec3((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), _GLF_IDENTITY(false, ! (! (false))), false))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (false))) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)) < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), _GLF_IDENTITY(min(~ (~ (subgroup_size)), ~ (~ (subgroup_size))), clamp(min(~ (~ (subgroup_size)), ~ (~ (subgroup_size))), min(~ (~ (subgroup_size)), ~ (~ (subgroup_size))), min(~ (~ (subgroup_size)), ~ (~ (subgroup_size))))))), bool(bvec4(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)) < _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
  {
   int i = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)))))) && true), true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true))) ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-84577))) : _GLF_FUZZED(-5229)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))) || _GLF_IDENTITY(false, (false) || false))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4694.4390) : 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) >> 0, ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) >> 0) + 0)))
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (false)))))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, max(4, 4)));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((0 & -58586), ((0 & -58586)) | ((0 & -58586))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) / 1)) >> 0)))), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-11.17)), bool(false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0))), (_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0)))) + 0)))) | (_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0))))))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0))))), (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0)))))) / vec2(1.0, 1.0))).x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bool(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), 0.0), (false ? _GLF_FUZZED(vec2(3.6, 79.08)) : vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), 0.0))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), bool(bvec4(bool(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true, true, true)))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (_GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (true && (_GLF_DEAD(false))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((0 | _GLF_IDENTITY((0 | 0), ~ (~ ((0 | 0))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), true && (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))) || _GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
            {
             for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))).y)), false || (_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / exp(0.0)), 1.0, 0.0))).y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))).y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0))).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) / 1.0) : _GLF_FUZZED(9117.6781))), 1.0, 0.0))).y))))) ^ 0)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != (((1 & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), (vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))) - vec2(0.0, 0.0))), injectionSwitch)))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, ! (! (false))), false)))));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((+ 90714) & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))) < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(float(_GLF_ONE(1.0, injectionSwitch.y))), mix(float(float(float(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(39.86), max(_GLF_FUZZED(39.86), _GLF_FUZZED(39.86)))), 1.0 * (float(_GLF_IDENTITY(_GLF_FUZZED(39.86), max(_GLF_FUZZED(39.86), _GLF_FUZZED(39.86)))))), bool(false)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), (float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(float(_GLF_ONE(1.0, injectionSwitch.y))), mix(float(float(float(_GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(39.86)), bool(false)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))) - 0.0)) < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (injectionSwitch.x > injectionSwitch.y))), true, true, false)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true, false)), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
              barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))));
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (-84992 * 97075))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) << (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(6216) : int(3)))))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
}
