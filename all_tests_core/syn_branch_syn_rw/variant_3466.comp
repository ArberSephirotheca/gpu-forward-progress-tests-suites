#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y) - abs(0.0)))))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) >> 0)) << 0), 3))), int(_GLF_IDENTITY(3, (3) + 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_injected_loop_counter) : int(1))), int(ivec4(int(1), 0, 0, (_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(int(5), int(5))))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) / uvec3(1u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), 1u)), 1u))), ((_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) / uvec3(1u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), 1u)), 1u)))) | ((_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) / uvec3(1u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), 1u)), 1u))))) * uvec3(1u, 1u, 1u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(159745u, 159853u, 119499u)), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_FUZZED(uvec3(159745u, 159853u, 119499u)), uvec3(uvec3(_GLF_FUZZED(uvec3(159745u, 159853u, 119499u))))))) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) / uvec3(1u, 1u, 1u)))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false))), ! (! (false)))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) && true))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-0.7, 11.24, 3860.0383, -0.3)))) * (injectionSwitch)).x > injectionSwitch.y, false))) && true)))) && true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))))), bool(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))))), false)))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) + 0) : _GLF_FUZZED(_GLF_IDENTITY(-58586, clamp(_GLF_IDENTITY(-58586, (-58586) ^ 0), -58586, -58586))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) * mat2(1.0)), _GLF_FUZZED(injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(vec2(1.0, 1.0)) * (injectionSwitch)))))) / vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(int(4), int(4)))) << 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2210.4060)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-549.873)), float(1.0), bool(true))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_size * subgroup_id;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_base) : subgroup_base))) | 0u), _GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 0u, 0u, 0u))))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))), min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) | 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) | 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) | 0u)), 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) | 0u)))))))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(packSnorm2x16(vec2(281.550, -307.702)))))))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | _GLF_IDENTITY((uvec2(subgroup_base, 1u)), ((uvec2(subgroup_base, 1u))) / uvec2(1u, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))), ~ (~ (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) | (_GLF_FUZZED(subgroup_base))) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))), clamp(_GLF_IDENTITY(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))), min(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))), uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))), uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))))))), false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(injectionSwitch[0], 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch[1])).x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))), max(max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))))))))))) * 1u, ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(_GLF_IDENTITY(subgroup_base, 0u + (subgroup_base)), _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))))), ((false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y : _GLF_FUZZED(1.6))))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))))) * 1u)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))), (uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base))))) >> (uvec2(0u, 0u) | uvec2(0u, 0u))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))))), uint(_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | 0u)), ((_GLF_IDENTITY(1u, (1u) | 0u))) - (1u ^ 1u))) | 0u))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), 1u)), (uint(uvec2(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), 1u))) | (uint(uvec2(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))))))), (_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, _GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))))))), (uint(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(uvec2(subgroup_base, 1u), _GLF_IDENTITY(uvec2(subgroup_base, 1u), min(uvec2(subgroup_base, 1u), uvec2(subgroup_base, 1u))))), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))))))) | (uint(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))))), (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))))))) << 0u))))) << 0u))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) | (_GLF_FUZZED(subgroup_base))) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | 0u))), max((~ (_GLF_IDENTITY(1u, (1u) | 0u))), (~ (_GLF_IDENTITY(1u, (1u) | 0u)))))) : _GLF_FUZZED(workgroup_base)))))), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))), uint(uvec4(max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u)))), 0u, 1u, 1u)))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) >> 0u)))))), uvec2(subgroup_base, 1u)))))) / 1u))))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.6) : _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) - uvec2(0u, 0u)))), uvec2(subgroup_base, 1u)))))) / 1u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_base, 1u), _GLF_IDENTITY(uvec2(uvec2(uvec2(subgroup_base, 1u))), clamp(uvec2(uvec2(uvec2(subgroup_base, 1u))), uvec2(uvec2(uvec2(subgroup_base, 1u))), uvec2(uvec2(uvec2(subgroup_base, 1u)))))), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))), 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (uint(uvec4(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))), 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))), 0u ^ (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))))))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, 1u)))))) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (_GLF_IDENTITY(uvec2(subgroup_base, 1u), min(uvec2(subgroup_base, 1u), uvec2(subgroup_base, 1u)))) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | (uvec2(subgroup_base, 1u))), uvec2(subgroup_base, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u + (~ (1u))))), _GLF_IDENTITY(1u, (1u) | (1u)), 1u)))))))) / 1u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, _GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | 0u, (_GLF_IDENTITY((1u) | 0u, ((1u) | 0u) << 0u)) * 1u))))) : _GLF_FUZZED(workgroup_base)))))), max(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))), (_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, 1u), max(_GLF_IDENTITY(uvec2(subgroup_base, 1u), (uvec2(subgroup_base, 1u)) | _GLF_IDENTITY((uvec2(subgroup_base, 1u)), ((uvec2(subgroup_base, 1u))) | ((uvec2(subgroup_base, 1u))))), uvec2(subgroup_base, 1u)))))) / 1u))))))))))) ^ 0u)))) - 0u)))))) * 1u) + 0u)) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), clamp(_GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), (uint(uvec2(subgroup_size, 0u))) << 0u), uint(uvec2(subgroup_size, 0u)), uint(uvec2(subgroup_size, 0u)))))), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec4(bool(bvec3(false, false, false)), true, false, true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, ~ (~ (4))))), _GLF_IDENTITY((4) | (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (0 | 0) + (~ (4)))))), (_GLF_IDENTITY((4) | (4), ((4) | (4)) / 1)) << 0)))), 64, _GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ _GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-51729))))), min(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(91639))), ~ (~ (2)))))), _GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, ~ (~ (2))), 1, 1), max(ivec3(_GLF_IDENTITY(2, ~ (~ (2))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, ~ (~ (2))), 1, 1), (ivec3(_GLF_IDENTITY(2, ~ (~ (2))), 1, 1)) << ivec3(0, 0, 0)))))))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (1) | (1)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), 0 | (int(2))))), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? ~ _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), min(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))))) : _GLF_FUZZED(11731))), min(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) + 0, min((int(2)) + 0, (int(2)) + 0)))))))) : _GLF_FUZZED(11731))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ _GLF_IDENTITY((int(2)), ((int(2))) | ((int(2)))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(0, max(0, 0)) | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))) : _GLF_FUZZED(11731))), (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (2))), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))) : _GLF_FUZZED(11731)))) >> 0)))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), ~ (~ (int(2))))) >> 0), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(_GLF_IDENTITY(2, (2) ^ 0))) + 0, ((int(_GLF_IDENTITY(2, (2) ^ 0))) + 0) >> 0)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) + 0)))))) : _GLF_FUZZED(_GLF_IDENTITY(11731, 1 * (11731))))))))) >> 0)) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(subgroup_local_id + 1 < (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) / 2))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) | 0u), 4, 64, 4);
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), (_GLF_IDENTITY(false || (! (false)), true && (false || (! (false))))) || false))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) && _GLF_IDENTITY(true, ! (! (true))))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) ^ 0)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, min(2, 2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 54029)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
