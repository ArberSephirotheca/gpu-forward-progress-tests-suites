#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), false, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), false, false))), true))))))), bool(bvec4(false, false, false, _GLF_IDENTITY(true, (true) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, min(0, 0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false)))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))))))))), _GLF_IDENTITY(bool(bvec2(bool(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))))))))), false)), (bool(bvec2(bool(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false), false))))))))))), false))) && true))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), true, false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false), false || (_GLF_IDENTITY(false, (false) && true)))), false, false, true)), bool(bvec3(bool(bvec4(! (_GLF_IDENTITY(false, (false) && true)), false, false, true)), true, true)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), true, false))))))))))), (_GLF_IDENTITY(false, (false) && true)) || false)))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = (0 | int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), clamp(min(0.0, 0.0), min(0.0, 0.0), min(0.0, 0.0)))), 0.0)), injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), gl_WorkGroupSize)))).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ _GLF_IDENTITY(0u, (0u) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)) ^ 0u, ((uint(0u)) ^ 0u) | 0u)), (_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)) ^ 0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((uint(0u)) ^ 0u, 1u), clamp(uvec2((uint(0u)) ^ 0u, 1u), uvec2((uint(0u)) ^ 0u, 1u), uvec2((uint(0u)) ^ 0u, 1u)))), (uint(_GLF_IDENTITY(uvec2((uint(0u)) ^ 0u, 1u), clamp(uvec2((uint(0u)) ^ 0u, 1u), uvec2((uint(0u)) ^ 0u, 1u), uvec2((uint(0u)) ^ 0u, 1u))))) >> 0u)))) ^ (0u | 0u)))))), _GLF_IDENTITY(max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ (92761u & 0u))) | 0u)), (uint(0u)) ^ _GLF_IDENTITY(0u, min(0u, 0u)))) ^ (0u | 0u)))))), (gl_WorkGroupID.x) << _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)), ~ (~ ((uint(0u))))) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))), ~ (_GLF_IDENTITY(~ ((0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)), ~ (~ ((uint(0u))))) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u))))))), (~ ((0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)), ~ (~ ((uint(0u))))) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))))) << 0u)))), ~ (~ (_GLF_IDENTITY(max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(_GLF_IDENTITY(0u, (0u) >> (0u | 0u)))) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u), 1u * ((_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))))), (gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(0u) : _GLF_FUZZED(num_workgroup)))) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (uint(0u)))) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((uint(0u)) ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (uint(0u)) ^ 0u))), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u))))) ^ 0u)))), ~ (_GLF_IDENTITY(~ (max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))), (gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ _GLF_IDENTITY(0u, (0u) - 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))), clamp((uint(0u)), (uint(0u)), (uint(0u)))) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))))), _GLF_IDENTITY(0u, min(0u, 0u)) | (~ (_GLF_IDENTITY(max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(_GLF_IDENTITY(0u, (0u) | (0u)))) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))), (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))) * uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))), (gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u))))))), (max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))), (gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))))) | (1u ^ (1u & 1u))), uint(uvec2(max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))), (gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u))))))), 1u))), max((gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u))))), (_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))) >> 0u)), (gl_WorkGroupID.x) << (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u), (_GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)) ^ (0u | 0u)))))))))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (subgroup_id) / 1u) * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) || false)))))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = subgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))), ! (! ((! (injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && true))))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.1)), bool(false)))) - sqrt(sqrt(0.0)))))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))), float(_GLF_IDENTITY(mat3x4(_GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, log(1.0), tan(0.0), 1.0, 0.0, 0.0), (_GLF_IDENTITY(mat3x4(_GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, log(1.0), tan(0.0), 1.0, 0.0, 0.0), (mat3x4(_GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, log(1.0), tan(0.0), 1.0, 0.0, 0.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(clamp(vec2(4.5, 28.54), injectionSwitch, vec2(2.8, 593.551))) : injectionSwitch)).x, clamp(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x, false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x, false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x, mix(float(_GLF_FUZZED(-537.922)), float(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x), bool(true))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x, mix(float(_GLF_FUZZED(-537.922)), float(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x), bool(true))), 1.0), (vec2(_GLF_IDENTITY(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x, mix(float(_GLF_FUZZED(-537.922)), float(false ? _GLF_FUZZED(determinant(mat2(-8304.3678, 9.2, -3.7, -7778.1753))) : injectionSwitch.x), bool(true))), 1.0)) * vec2(1.0, 1.0)))), false ? _GLF_FUZZED(determinant(mat2(-8304.3678, _GLF_IDENTITY(9.2, max(_GLF_IDENTITY(9.2, (9.2) / 1.0), 9.2)), -3.7, -7778.1753))) : injectionSwitch.x)))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.2) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))), mix(vec2(_GLF_FUZZED(-18.99), _GLF_IDENTITY(_GLF_FUZZED(29.23), (_GLF_FUZZED(29.23)) / 1.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 0.0, 1.0, exp(0.0), tan(0.0), 1.0, tan(0.0))), float(mat3x2(float(mat2x4(0.0, 1.0, 0.0, 1.0, exp(0.0), tan(0.0), 1.0, tan(0.0))), 1.0, 0.0, 1.0, 0.0, 0.0)))), 0.0)))))[1]), (vec2((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 0.0, 1.0, exp(0.0), tan(0.0), 1.0, tan(0.0))), float(mat3x2(float(mat2x4(0.0, 1.0, 0.0, 1.0, exp(0.0), tan(0.0), 1.0, tan(0.0))), 1.0, 0.0, 1.0, 0.0, 0.0)))), 0.0)))))[1])) - sqrt(vec2(0.0, 0.0))), bvec2(true, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6178.7911, 5.0)) : injectionSwitch)), min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))), sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))) - vec2(0.0, 0.0)))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(2311.5883), _GLF_FUZZED((- 9251.7427))), vec2((mat2(1.0) * (vec2(0.0, 0.0)))[0], (mat2(1.0) * (vec2(0.0, 0.0)))[1]), bvec2(true, true)))) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))))).x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), true && (_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, min(0, 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2652.8115, -89.17)))).x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))))))), false))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, min(0, 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2652.8115, -89.17)))).x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))))))), false)))))))), bool(bvec3(! ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, min(0, 0))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2652.8115, -89.17)))).x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))))))), false)))))))), true, true)))))) && true)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))) * mat2(1.0)).y)), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))) * mat2(1.0)).y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), max(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), max(virtual_gid, virtual_gid))], 4, _GLF_IDENTITY(64, (64) ^ 0), 2);
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (_GLF_WRAPPED_LOOP(false))))), true && ((! (_GLF_WRAPPED_LOOP(false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), true && ((! (_GLF_WRAPPED_LOOP(false))))), true), true, false)))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), true && ((! (_GLF_WRAPPED_LOOP(false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), true && ((! (_GLF_WRAPPED_LOOP(false))))), ! (! (_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), true && ((! (_GLF_WRAPPED_LOOP(false)))))))), true), true, false))))))))))));
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, bool(bool((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), true)))))) && true)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) - 0))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
       GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = read;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, max(0, 0)))), false || ((subgroup_local_id % 2) == 0)))
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
            {
             atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], uint(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), int(1))) | (_GLF_IDENTITY(1, min(1, 1))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(82554), min(true ? 4 : _GLF_FUZZED(82554), true ? 4 : _GLF_FUZZED(82554))))), 64, 4);
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false))))))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) && true, bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) && true, bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) && true, bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) && true, bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), false))))))))), false)))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), sqrt(0.0), 0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), sqrt(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(round(length(normalize(1.0))), (true ? round(length(normalize(1.0))) : _GLF_FUZZED(4287.0703))), 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true, true)))))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((((1 ^ 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(0, min(0, 0)) ^ (int(2)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), clamp(int(ivec2(int(2), 0)), int(ivec2(int(2), 0)), int(ivec2(int(2), 0)))))))), 0 ^ (_GLF_IDENTITY(int(2), int(2))))), ((((1 ^ 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(0, min(0, 0)) ^ (int(2)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), clamp(int(ivec2(int(2), 0)), int(ivec2(int(2), 0)), int(ivec2(int(2), 0)))))))), 0 ^ (_GLF_IDENTITY(int(2), int(2)))))) - 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7350.7189) : injectionSwitch.x))) / abs(1.0)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0))), float(_GLF_FUZZED(-9.8)), bool(false)))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0))), float(_GLF_FUZZED(-9.8)), bool(false)))), true)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8.1)), bool(false))) > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-30.28) : injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))))));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((((0 ^ 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1, int(ivec2((((0 ^ 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) | 0), int(2))) | (0 << _GLF_IDENTITY(int(8), int(8))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * cos(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(true, true && (true)) && (! (! (true))))) && (true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, true && (true)))), (! ((_GLF_IDENTITY(true, true && (true))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), injectionSwitch)).y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], _GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), ~ (~ (uint(1))))) ^ 0u), clamp(uint(1), uint(1), uint(1))), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), 4, 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, 0, 1), ivec3(0, 0, 0) + (ivec3(0, 0, 1)))), max(int(_GLF_IDENTITY(ivec3(0, 0, 1), ivec3(0, 0, 0) + (ivec3(0, 0, 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, 0, 1), ivec3(0, 0, 0) + (ivec3(0, 0, 1)))), (int(_GLF_IDENTITY(ivec3(0, 0, 1), ivec3(0, 0, 0) + (ivec3(0, 0, 1))))) << 0))))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false))))))));
  }
 subgroupBarrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z, _GLF_IDENTITY(4, (4) ^ 0), 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}
