#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    continue;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bool(false || (true)))))) || false), _GLF_IDENTITY(bool(bvec3(true, false, false)), bool(bvec4(bool(bvec3(true, _GLF_IDENTITY(false, bool(bvec2(false, true))), false)), false, true, true))))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7088.1566, 4.4)))).y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.0)), bool(false))) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) && true))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false, true), bvec3(bvec4(bvec3(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false, true), true))))))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true) || (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, false)))), (_GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))), bool(bvec3(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(818.275), _GLF_FUZZED(-6949.3974)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))));
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4548.4107)), float(injectionSwitch.y), bool(true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x = _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) : _GLF_FUZZED(packUnorm2x16(injectionSwitch)))), (GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x = _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) : _GLF_FUZZED(packUnorm2x16(injectionSwitch))))) - 0u);
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), 1u))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(false))
                break;
               GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.z = workgroup_size;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(bool(bvec2(! (! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))))), true)), (bool(bvec2(! (! (! (false))), true))) || false)))))));
            }
           while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))));
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec4(false || (_GLF_DEAD(false)), true, true, false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.z * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ (uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) ? _GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ _GLF_IDENTITY((uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(94066u) : (uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))))))) : _GLF_FUZZED(subgroup_id))))) << _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), ~ (~ ((0u)))))), 0u, 0u))), ~ (_GLF_IDENTITY(~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ (uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) ? _GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ _GLF_IDENTITY((uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(94066u) : (uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))))))) : _GLF_FUZZED(subgroup_id))))) << _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), ~ (~ ((0u)))))), 0u, 0u)))), (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ (uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) ? _GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ _GLF_IDENTITY((uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(94066u) : (uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))))))) : _GLF_FUZZED(subgroup_id))))) << _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), ~ (~ ((0u)))))), 0u, 0u))))) | (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ (uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) ? _GLF_IDENTITY(uint(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)), ~ (~ _GLF_IDENTITY((uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(94066u) : (uint(uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, ~ (_GLF_IDENTITY(~ (0u ^ 1u), (~ (0u ^ 1u)) | 0u)))), 0u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) << 0u)))))))))))) : _GLF_FUZZED(subgroup_id))))) << _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), ~ (~ ((0u)))))), 0u, 0u))))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u) + _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x, _GLF_IDENTITY(uint(uvec4(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x, 1u, 0u, (0u ^ uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u * (uint(uvec4(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x, 1u, 0u, (0u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), (workgroup_base + subgroup_base + GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x) / 1u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((! (! (injectionSwitch.x > injectionSwitch.y))), ((! (! (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((! (! (injectionSwitch.x > injectionSwitch.y))), ((! (! (injectionSwitch.x > injectionSwitch.y)))) && true), true, false)))))))))))))
  {
  }
 else
  {
   do
    {
     GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y = virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, uvec3(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), max((0), (0))))], GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) << 0)]))) << uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 1u)), ~ (~ (uint(uvec3(0u, 1u, 1u))))))) | (0u), ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)) | ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)))), (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 1u)), ~ (~ (uint(uvec3(0u, 1u, 1u))))))) | (0u), ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)) | ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)))), (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 1u)), ~ (~ (uint(uvec3(0u, 1u, 1u))))))) | (0u), ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)) | ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)))), (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 1u)), ~ (~ (uint(uvec3(0u, 1u, 1u))))))) | (0u), ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)) | ((_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u)))) | (0u)))), (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u))), 0u)), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))), 0u)).x + 1) % subgroup_size, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, uvec3(uvec4(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, 1u)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec3(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[0], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], min(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1])), GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[2]))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u))) | 0u))).x + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, uvec3(uvec4(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, 1u)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec3(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[0], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], min(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1])), GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[2]))) << uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, uvec3(uvec4(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, 1u)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec3(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[0], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], min(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1])), GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[2]))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, uvec3(uvec4(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size, 1u)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec3(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[0], _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], min(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1], GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[1])), GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size[2]))) << uvec3(0u, 0u, 0u)))).x + 1) ^ 0u)) % subgroup_size)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.x % 2) == 0)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 0))) != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / determinant(mat3(1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(594.072) : 1.0), (true ? _GLF_IDENTITY((false ? _GLF_FUZZED(594.072) : 1.0), mix(float((false ? _GLF_FUZZED(594.072) : 1.0)), float(_GLF_FUZZED(5576.8993)), bool(false))) : _GLF_FUZZED(-21.19)))), round(length(normalize(vec2(1.0, 1.0)))), 0.0, determinant(mat4(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5120.1523) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.3)), float(0.0), bool(true))), 0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                            continue;
                           continue;
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))))))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
                          break;
                         continue;
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED((-3985.6298))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          return;
         return;
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))) / vec2(1.0, 1.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8403.8624) : _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))))))) > injectionSwitch.y))))
              return;
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 0, 1, (1 & 1)))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, int(int(1)))), 4, 64, _GLF_IDENTITY(4, (4) | (4)));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false))))) && true) || false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false))))) && true) || false)))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false))))) && true) || false)))))), (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), true, false, false))))) && true) || false))))))) || false))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)) > injectionSwitch.y))));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(int(ivec2(~ (0), 0)), clamp(int(ivec2(~ (0), 0)), int(ivec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(-19201, clamp(-19201, -19201, -19201)) & 0) ^ (0))), 0)), int(ivec2(~ (0), 0))))), (0 | 0) + (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), _GLF_IDENTITY(int(ivec2(~ (0), 0)), clamp(int(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), max(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), (ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)) - ivec2(0, 0)), ivec2(~ _GLF_IDENTITY(_GLF_IDENTITY((0), (false ? _GLF_FUZZED(17991) : (0))), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)))), int(ivec2(~ (0), 0)), int(ivec2(~ (0), 0))))), min(_GLF_IDENTITY(~ (0), _GLF_IDENTITY(int(ivec2(~ (0), 0)), clamp(int(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), max(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), (ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)) - ivec2(0, 0)), ivec2(~ _GLF_IDENTITY(_GLF_IDENTITY((0), (false ? _GLF_FUZZED(17991) : (0))), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)))), int(ivec2(~ (0), 0)), int(ivec2(~ (0), 0))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (0), _GLF_IDENTITY(int(ivec2(~ (0), 0)), clamp(int(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), max(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), (ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)) - ivec2(0, 0)), ivec2(~ _GLF_IDENTITY(_GLF_IDENTITY((0), (false ? _GLF_FUZZED(17991) : (0))), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)))), int(ivec2(~ (0), 0)), int(ivec2(~ (0), 0))))), 0 ^ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY(int(ivec2(~ (0), 0)), clamp(int(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), max(_GLF_IDENTITY(ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0), (ivec2(~ _GLF_IDENTITY((0), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)) - ivec2(0, 0)), ivec2(~ _GLF_IDENTITY(_GLF_IDENTITY((0), (false ? _GLF_FUZZED(17991) : (0))), _GLF_IDENTITY(min((0), (0)), (false ? _GLF_FUZZED(_injected_loop_counter) : min((0), (0))))), 0)))), int(ivec2(~ (0), 0)), int(ivec2(~ (0), 0)))))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     subgroupBarrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec2(! (! (false)), true)), bool(bool(bool(bvec2(! (! (false)), true))))))) || false))))));
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))) || false));
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 10481)); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false))))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(667.471, -323.998)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y) - 0.0)))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(injectionSwitch.x < injectionSwitch.y)))))))) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, (false) && true) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, (false) && true) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))))))));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), _GLF_IDENTITY(true, false || (true)), true, false))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true))))), mix(float(_GLF_FUZZED(38.03)), float(_GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), bool(true)))), injectionSwitch.y)))), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), bool(bvec4(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), false, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y), mix(float(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)), float(_GLF_FUZZED(vec3(-5550.0272, 5.0, -90.16).z)), bool(false)))))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).y), max(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(_GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(45.44)), float(_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)))))))), ! (! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(_GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), clamp(abs(0.0) + (injectionSwitch.y), abs(0.0) + (injectionSwitch.y), abs(0.0) + (injectionSwitch.y)))), bool(true)))))), injectionSwitch.y)))), true, false))))))), bool(bvec4((! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(_GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), clamp(abs(0.0) + (injectionSwitch.y), abs(0.0) + (injectionSwitch.y), abs(0.0) + (injectionSwitch.y)))), bool(true)))))), injectionSwitch.y)))), true, false))))))), true, false, false))))))))))), ! (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(_GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), 0.0 + (abs(0.0) + (injectionSwitch.y))), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)))))), ! (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), vec2(0.0, 0.0) + (vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), abs(0.0), _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0))))) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(_GLF_IDENTITY(0.0, (0.0) - determinant(mat3(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0)))) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)))))), ! (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bool(false)))), (bool(_GLF_IDENTITY(false, bool(bool(false))))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-7749.9654), max(_GLF_FUZZED(-7749.9654), _GLF_IDENTITY(_GLF_FUZZED(-7749.9654), (_GLF_FUZZED(-7749.9654)) + 0.0)))), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), max(abs(0.0) + (injectionSwitch.y), _GLF_IDENTITY(abs(0.0) + (injectionSwitch.y), mix(float(_GLF_FUZZED(-7749.9654)), float(abs(0.0) + (injectionSwitch.y)), bool(true)))))), injectionSwitch.y)))), true, false)))))))))) && true)))))))))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && _GLF_IDENTITY(true, ! (! (true))), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) && _GLF_IDENTITY(true, ! (! (true)))) || false))))))))))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
                {
                 atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y, (GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size.y) >> 0u)) / 1u)], read, 4, 64, 4);
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
  }
 else
  {
  }
}
