#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), (true ? mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-1.8, 5519.7588, -6.4, 8.2, -14.93, -4.1, 0.1, -79.71)))))).y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-782.735), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.6)), bvec2(true, false))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_WorkGroupSize[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | (0))], gl_WorkGroupSize[1], gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), uvec3(_GLF_IDENTITY(uvec4(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), 1u), _GLF_IDENTITY((uvec4(uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), 1u)), ((uvec4(uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), 1u))) | (_GLF_IDENTITY((uvec4(uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), 1u)), min((uvec4(uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), 1u)), (uvec4(uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], clamp(gl_WorkGroupSize[1], gl_WorkGroupSize[1], gl_WorkGroupSize[1])), gl_WorkGroupSize[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | 0))))))]), 1u)))))) | uvec4(0u, 0u, 0u, 0u)))), max(uvec3(gl_WorkGroupSize[_GLF_IDENTITY(0, (0) >> 0)], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), (true ? _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), min(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) : _GLF_FUZZED(uvec3(95534u, 130894u, 23537u))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (gl_WorkGroupSize[0]) * (1u & 1u)), _GLF_IDENTITY(gl_WorkGroupSize[1], (gl_WorkGroupSize[1]) ^ 0u), gl_WorkGroupSize[2]), max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], uint(uvec3(gl_WorkGroupSize[0], 1u, 0u))), _GLF_IDENTITY(gl_WorkGroupSize[1], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupSize[1], uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize[1], uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u), (uvec4(gl_WorkGroupSize[1], uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)) ^ uvec4(0u, 0u, 0u, 0u)))) : _GLF_FUZZED(subgroup_id))), gl_WorkGroupSize[2]), (uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize[1], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupSize[1], uint(uvec4(gl_WorkGroupSize[1], uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u))) : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize[1], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupSize[1], uint(uvec4(gl_WorkGroupSize[1], uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u))) : _GLF_FUZZED(subgroup_id))), 0u | (_GLF_IDENTITY(gl_WorkGroupSize[1], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupSize[1], uint(uvec4(gl_WorkGroupSize[1], uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u))) : _GLF_FUZZED(subgroup_id)))))) / 1u), gl_WorkGroupSize[2])) << uvec3(0u, 0u, 0u)), max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))).x, 0u | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[_GLF_IDENTITY(2, (2) - 0)]), _GLF_IDENTITY(max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 0))))), 2, _GLF_IDENTITY(2, (2) * 1)))]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), uvec3(uvec3(_GLF_IDENTITY(max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), uvec3(0u, 0u, 0u) ^ (max(uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (true ? gl_WorkGroupSize[0] : _GLF_FUZZED(num_workgroup))), gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))))))).x)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) - uvec3(0u, 0u, 0u)) ^ uvec3(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u)), _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))).x));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) | 0u), 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) * (gl_WorkGroupID)))).x) >> 0u))) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u)) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) | 0u), 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) * (gl_WorkGroupID)))).x) >> 0u))) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u)) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) | 0u), 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) * (gl_WorkGroupID)))).x) >> 0u))) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u)) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) | 0u), 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) * (gl_WorkGroupID)))).x) >> 0u))) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u)) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) >> 0u)), ((_GLF_IDENTITY(1u, (1u) >> 0u))) ^ 0u) | 0u), 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u) * (gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u, 0u) | _GLF_IDENTITY((max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u)))) * (gl_WorkGroupID)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | ((max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u)))) * (gl_WorkGroupID))))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(1u, min(1u, 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), 0u ^ (_GLF_IDENTITY(1u, min(1u, 1u)))))))))) * (gl_WorkGroupID)))).x) >> 0u))), max((_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (0u)), 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))), ((max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))) >> uvec3(0u, 0u, 0u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), clamp(uvec3(uvec3(gl_WorkGroupID)), uvec3(uvec3(gl_WorkGroupID)), uvec3(uvec3(gl_WorkGroupID))))) / uvec3(1u, 1u, 1u)))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)), 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)), _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, 0u | (1u)), 1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), max(~ (1u), ~ (1u)))))) * (gl_WorkGroupID))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) * (gl_WorkGroupID)))).x) >> 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))))), _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupID), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupID), (uvec3(1u, 1u, 1u) * (gl_WorkGroupID)) >> uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupID), (uvec3(1u, 1u, 1u) * (gl_WorkGroupID)) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))))))))).x) >> 0u, ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID))), uvec3(0u, 0u, 0u) | (max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) + uvec3(0u, 0u, 0u)) * (gl_WorkGroupID))))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (uvec3(uvec3(_GLF_IDENTITY(max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupID), (uvec3(1u, 1u, 1u) * (gl_WorkGroupID)) / uvec3(1u, 1u, 1u)))), uvec3(0u, 0u, 0u) | (max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u)))) * (gl_WorkGroupID))))))))) : _GLF_FUZZED(uvec3(34403u, 45766u, 24820u)))))).x) >> 0u) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))) * (gl_WorkGroupID)))).x) >> 0u))))) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)), (true ? (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)) : _GLF_FUZZED((workgroup_size + uvec3(49832u, 61190u, 45272u))))) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, clamp((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)), (true ? (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)) : _GLF_FUZZED((workgroup_size + uvec3(49832u, 61190u, 45272u))))) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, clamp((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)), (true ? (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)) : _GLF_FUZZED((workgroup_size + uvec3(49832u, 61190u, 45272u))))) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, clamp((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), 1u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)), (true ? (uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) / 1u))))), 1u, 1u)) : _GLF_FUZZED((workgroup_size + uvec3(49832u, 61190u, 45272u))))) ^ uvec3(0u, 0u, 0u)) * (gl_WorkGroupID)))).x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) * (gl_WorkGroupID)))).x) >> 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))))).x) >> 0u))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, clamp((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), 1u) * (gl_WorkGroupID)))).x) >> 0u))))), 1u, 0u, 1u)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x) >> 0u))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) * uvec3(1u, 1u, 1u)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x, max(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x, _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)))).x))) >> 0u)));
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(176.273, 93.57)) : injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, 176.273)), max(_GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, 176.273)), max(_GLF_IDENTITY(176.273, max(176.273, 176.273)), _GLF_IDENTITY(176.273, max(176.273, 176.273)))), _GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, 176.273)), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, _GLF_IDENTITY(176.273, (176.273) / 1.0))), max(176.273, 176.273)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(176.273, max(176.273, 176.273)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) : _GLF_FUZZED(mat4(-6035.1812, 6481.8448, -170.759, -352.153, 438.215, -1.2, -40.29, 9.2, -5911.0220, 1430.3203, 9069.6563, -9.1, 5.0, -72.17, -771.883, -1651.0155)))))))), 93.57)) : injectionSwitch)).x > injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(176.273, 93.57)) : injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, 176.273)), max(_GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, 176.273)), max(_GLF_IDENTITY(176.273, max(176.273, 176.273)), _GLF_IDENTITY(176.273, max(176.273, 176.273)))), _GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, 176.273)), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(176.273, max(176.273, _GLF_IDENTITY(176.273, (176.273) / 1.0))), max(176.273, 176.273)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(176.273, max(176.273, 176.273)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) : _GLF_FUZZED(mat4(-6035.1812, 6481.8448, -170.759, -352.153, 438.215, -1.2, -40.29, 9.2, -5911.0220, 1430.3203, 9069.6563, -9.1, 5.0, -72.17, -771.883, -1651.0155)))))))), 93.57)) : injectionSwitch)).x > injectionSwitch.y))))), false, true, false))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0, 1.0, 0.0)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(14954) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec3(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(14954) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), true, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_IDENTITY(cos(sin(0.0)), max(_GLF_IDENTITY(cos(sin(0.0)), float(mat2x3(cos(sin(0.0)), 0.0, 1.0, 0.0, 1.0, 1.0))), cos(sin(0.0)))), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, cos(0.0)))))), (false ? _GLF_FUZZED(14954) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0, 1), min(ivec3(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0, 1), clamp(ivec3(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0, 1), ivec3(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0, 1), ivec3(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0, 1))))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(14954) : int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8531.4418)), float(0.0), bool(true))), injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))), true)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(24.48) : injectionSwitch.x)))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(14954) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(14954) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))), true))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))))))))));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED((mat2(-6085.9040, -294.655, -14.11, 76.27) * reflect(vec2(19.22, 46.25), vec2(80.42, 6441.7962)))))).x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bool(true)))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))), false || (false || (_GLF_IDENTITY(true, bool(bool(true)))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(step(vec4(-0.4, -84.41, 7.5, -9.0), vec4(-7.2, 72.84, 0.6, -0.5))) : vec4(injectionSwitch.y, 1.0, 0.0, 0.0)))))))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(workgroup_id, workgroup_id, workgroup_id), (clamp(workgroup_id, workgroup_id, workgroup_id)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(workgroup_id, workgroup_id, workgroup_id), (clamp(workgroup_id, workgroup_id, workgroup_id)) | 0u), clamp(_GLF_IDENTITY(clamp(workgroup_id, workgroup_id, workgroup_id), (clamp(workgroup_id, workgroup_id, workgroup_id)) | 0u), _GLF_IDENTITY(clamp(workgroup_id, workgroup_id, workgroup_id), (clamp(workgroup_id, workgroup_id, workgroup_id)) | 0u), _GLF_IDENTITY(clamp(workgroup_id, workgroup_id, workgroup_id), (clamp(workgroup_id, workgroup_id, workgroup_id)) | 0u)))) * 1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) & 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-663.192 - 3.1))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-663.192 - 3.1))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y))) || false)), bool(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), true))))))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-663.192 - 3.1))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-663.192 - 3.1))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y))) || false)), bool(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), true)))))))) || false)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ((true)) && true)), bool(bvec3(! (_GLF_IDENTITY((true), ((true)) && true)), true, true))))))), (injectionSwitch.x < injectionSwitch.y)), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))), true)), false))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(acosh(-55.94)) : injectionSwitch.y)))), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-133.525)) : injectionSwitch.y)))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-133.525)) : injectionSwitch.y)))), false, false), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-133.525)) : injectionSwitch.y)))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-133.525)) : injectionSwitch.y)))), false, false), false)))))))))), true))), false))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true))), false))))))), false))))))))) && (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ -1.9)), _GLF_FUZZED(60.48)), vec2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
            return;
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_base = subgroup_size * subgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13093))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1)))))))))) * 1)))))) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)) + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), uint(uint(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))), uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u)))))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), 1u, 1u), ~ (~ (uvec3((subgroup_local_id + 1), 1u, 1u)))))))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1))))))) | 0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(((subgroup_local_id + 1)) | 0u, clamp(((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u))))) % subgroup_size, uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size)), 1u))))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))) | (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)))))) + 1) % subgroup_size, ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u)))))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (true ? clamp(1, 1, 1) : _GLF_FUZZED(15439))))))) * 1)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (true ? clamp(1, 1, 1) : _GLF_FUZZED(15439))))))) * 1)))), (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (true ? clamp(1, 1, 1) : _GLF_FUZZED(15439))))))) * 1))))) | (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (true ? clamp(1, 1, 1) : _GLF_FUZZED(15439))))))) * 1))))))))) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 1u, (1u | 1u)), max(uvec4(subgroup_size, 0u, 1u, (1u | 1u)), _GLF_IDENTITY(uvec4(subgroup_size, 0u, 1u, (1u | 1u)), ~ (~ (uvec4(subgroup_size, 0u, 1u, (1u | 1u))))))))), uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), clamp(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), ivec2(_GLF_IDENTITY(1, max(1, 1)), 1)))), max(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), clamp(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), ivec2(_GLF_IDENTITY(1, max(1, 1)), 1)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), clamp(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), ivec2(_GLF_IDENTITY(1, max(1, 1)), 1), ivec2(_GLF_IDENTITY(1, max(1, 1)), 1)))))))) % subgroup_size, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), clamp((~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), 0 + ((~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ ((~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))))))))) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size, uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), 0u + (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 0u, 0u))))) % subgroup_size, 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u)))), _GLF_IDENTITY(1u, (1u) ^ 0u) * ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u + (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 0u, 0u))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)), 0u + (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 0u, 0u)))))) << 0u) % subgroup_size, 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) * 1u)))) % subgroup_size, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) * 1u)))) % subgroup_size, 1u)))), _GLF_IDENTITY(uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) * 1u)))) % subgroup_size, 1u)))), 1u)), min(uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) * 1u)))) % subgroup_size, 1u)))), 1u)), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) * 1u)))) % subgroup_size, 1u)))), 1u))))))))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u)))))))) << 0u)), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))) % subgroup_size, uint(_GLF_IDENTITY(uvec2((subgroup_local_id + 1) % subgroup_size, 1u), (uvec2((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (53634u & 0u) ^ (subgroup_size)), 1u)) | (_GLF_IDENTITY(uvec2((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1)))))))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u), (uvec2((subgroup_local_id + 1) % subgroup_size, 1u)) - uvec2(0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + 0u) + 1) % subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, _GLF_IDENTITY(1u, min(1u, 1u))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, _GLF_IDENTITY(1u, min(1u, 1u))), ~ (~ (uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) | (1u)))))))))), min(uvec2(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size) / 1u), _GLF_IDENTITY(1u, min(1u, 1u))), uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, _GLF_IDENTITY(1u, min(1u, 1u))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), ((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1))) | 0u) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u)))))))))));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(4, 0, 1)), (int(ivec3(4, 0, 1))) ^ 0)), _GLF_IDENTITY(4, (4) << 0), 4)), 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false, true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((true)))))) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(((0 ^ 0) | 0), _GLF_IDENTITY(int(int(((0 ^ 0) | 0))), 0 ^ (int(int(((0 ^ 0) | 0)))))) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < (_GLF_IDENTITY(subgroup_size / _GLF_IDENTITY(2, max(2, 2)), min(subgroup_size / _GLF_IDENTITY(2, max(2, 2)), subgroup_size / _GLF_IDENTITY(2, max(2, 2))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(1), 4, 64, 4);
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x, clamp(false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x, _GLF_IDENTITY(false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x, min(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), bool(bvec3(! (_GLF_IDENTITY(! (false), false || (! (false)))), true, false)))))))) || false) ? _GLF_IDENTITY(_GLF_FUZZED(-9963.3875), clamp(_GLF_FUZZED(-9963.3875), _GLF_IDENTITY(_GLF_FUZZED(-9963.3875), (_GLF_FUZZED(-9963.3875)) / 1.0), _GLF_IDENTITY(_GLF_FUZZED(-9963.3875), (_GLF_FUZZED(-9963.3875)) * 1.0))) : injectionSwitch.x, false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x)), false ? _GLF_FUZZED(-9963.3875) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / exp(vec2(0.0, 0.0)))).x))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x, clamp(false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x, _GLF_IDENTITY(false ? _GLF_FUZZED(-9963.3875) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), clamp(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), min(_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x, false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x)), false ? _GLF_FUZZED(-9963.3875) : injectionSwitch.x)))) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 0.0)))) * vec2(1.0, 1.0)).x, float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 0.0)))) * vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 0.0)))) * vec2(1.0, 1.0)).x) * 1.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(log(1.0)), 0.0, 1.0))), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)))) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)))) * vec2(1.0, 1.0)).x)))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.1)), bool(false)))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.2)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) / 1.0)))))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(((bvec3(false, true, true) == bvec3(true, true, true)) ? 9.6 : -6070.8979)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], _GLF_FUZZED(4.4)), bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(((bvec3(false, true, true) == bvec3(true, true, true)) ? 9.6 : -6070.8979)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], _GLF_FUZZED(4.4)), bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))).x > injectionSwitch.y), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(((bvec3(false, true, true) == bvec3(true, true, true)) ? 9.6 : -6070.8979)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], _GLF_FUZZED(4.4)), bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))).x > injectionSwitch.y), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(56.12)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) + vec2(_GLF_IDENTITY(0.0, float(mat3(0.0, sqrt(1.0), round(length(normalize(1.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 0.0)), mix(vec2(_GLF_FUZZED(((bvec3(false, true, true) == bvec3(true, true, true)) ? 9.6 : -6070.8979)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3((injectionSwitch) / vec2(1.0, 1.0), length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 0.0, 1.0, 1.0), transpose(transpose(mat4x3((injectionSwitch) / vec2(1.0, 1.0), length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 0.0, 1.0, 1.0))))))))[0], _GLF_FUZZED(4.4)), bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))).x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true), bvec3(bvec3(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true))))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true), bvec3(bvec3(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), true)))))))))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(mat2(vec2(vec2(injectionSwitch)), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)))))).y))))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(45.05)), vec2(_GLF_FUZZED(-66.57), (injectionSwitch)[1]), bvec2(false, true))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))) && true, false || (_GLF_IDENTITY((false), false || ((false))) && true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true))))))), ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true)))))), (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true)))))), (bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true))))))) || false)) || false)), true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true)))))), (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true)))))), (bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true))))))) || false)) || false)))))))) && true)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, ~ (~ (4))), 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))), vec2(0.0, 0.0) + (vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), false))), false))), true, false, false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), false))), false))), true, false, false))) || false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
              }
            }
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) * 1.0), 1.0, abs(0.0), 0.0, 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)))))))), false))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(324.869, -2268.1441).t), _GLF_FUZZED(6742.1243)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))), bool(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), false, false))))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         subgroupBarrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-75273))))), max(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-1466.8865, min(-1466.8865, _GLF_IDENTITY(-1466.8865, max(-1466.8865, -1466.8865)))), -4.5)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, _GLF_IDENTITY(float(mat4((injectionSwitch.x) / 1.0, log(1.0), 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, exp(0.0), 1.0, tan(0.0))), (_GLF_IDENTITY(float(mat4((injectionSwitch.x) / 1.0, log(1.0), 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, exp(0.0), 1.0, tan(0.0))), mix(float(_GLF_FUZZED(-30.98)), float(float(mat4((injectionSwitch.x) / 1.0, log(1.0), 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, exp(0.0), 1.0, tan(0.0)))), bool(true)))) + 0.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(876.339)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch))))))) / abs(vec2(1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], _GLF_FUZZED(9.2)), vec2(_GLF_FUZZED(8926.2355), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0)) + vec2(0.0, 0.0))))[1]), bvec2(false, true))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && true)) && true))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! ((_GLF_IDENTITY(true, true && (true)))))), false, true, true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false, true, true)))) && true))));
              }
             return;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           else
            {
             atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, (64) + 0), 4);
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) - 0, (_GLF_IDENTITY((int(0)) - 0, int(ivec3((int(0)) - 0, 0, 1)))) << 0))) | (int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec3(-2985.9859, -2.9, -0.6), vec3(-3397.3782, -7690.8673, -830.015))))) > injectionSwitch.y))));
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     return;
    }
  }
}
