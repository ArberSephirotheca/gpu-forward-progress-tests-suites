#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), true)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true)))))), false)), true))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true)))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, determinant(mat2(0.0, 0.0, 1.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) * _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) * _GLF_IDENTITY((injectionSwitch.x), max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), (injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(injectionSwitch[1]) : injectionSwitch.x)) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), determinant(mat2(1.0, 0.0, 1.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(1.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))) ? -13.69 : (-0.8)))), bvec2(true, false))).x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0)))) - 0.0)), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true)))), false, false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))) && true)) && true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (false ? _GLF_FUZZED(subgroup_size) : gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(workgroup_size) : gl_WorkGroupID.x))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) | _GLF_IDENTITY((workgroup_size), min((workgroup_size), (workgroup_size)))), workgroup_size)), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u, 1u)), (uint(uvec3(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u, 1u))) - 0u))), ((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)))) - _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) | (0u))))) << _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (uint(2u)) * 1u), uint(2u))), 0u + ((0u >> _GLF_IDENTITY(uint(2u), uint(2u))))))) | 0u) * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), false)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(81.64)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true), false))), false)), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), false)), true))))))), true))))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))) | _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))) | (0u << _GLF_IDENTITY(uint(6u), uint(6u))))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY((++ workgroup_id), ((++ workgroup_id)) >> 0u)) : workgroup_base)) + subgroup_base, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED((++ workgroup_id)) : workgroup_base)) + subgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY((++ workgroup_id), 0u ^ ((++ workgroup_id)))) : workgroup_base)) + subgroup_base)))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED(-72026) : 4, 0 ^ (false ? _GLF_FUZZED(-72026) : 4)))), 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, int(ivec3(2, 0, 1)))))) << 0));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(29802u) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(29802u) : subgroup_local_id))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 1u, 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(29802u) : subgroup_local_id)), 0u, 1u, 0u)))))) + 1, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((false ? _GLF_FUZZED(29802u) : subgroup_local_id), ((false ? _GLF_FUZZED(29802u) : subgroup_local_id)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(29802u) : subgroup_local_id), _GLF_IDENTITY(uint(uvec3((false ? _GLF_FUZZED(29802u) : subgroup_local_id), 0u, 0u)), min(uint(uvec3((false ? _GLF_FUZZED(29802u) : subgroup_local_id), 0u, 0u)), uint(uvec3(_GLF_IDENTITY((false ? _GLF_FUZZED(29802u) : subgroup_local_id), ((false ? _GLF_FUZZED(29802u) : subgroup_local_id)) >> 0u), 0u, 0u)))))))), 0u, 1u, 0u))) + 1, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(29802u) : subgroup_local_id)), 0u, 1u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u)))))))) + 1, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(29802u) : subgroup_local_id)), 0u, 1u, 0u))) + 1)) < (subgroup_size / 2), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < (subgroup_size / _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) | 0)), true && (subgroup_local_id + 1 < (subgroup_size / _GLF_IDENTITY(2, (2) | 0)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(next_virtual_gid))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), (true ? (0u) | (0u) : _GLF_IDENTITY(_GLF_FUZZED(packSnorm4x8(_GLF_IDENTITY(vec4(1889.2771, -4912.4347, 3.7, -61.58), (false ? _GLF_FUZZED(vec4(-6.9, -99.07, 248.775, -800.594)) : _GLF_IDENTITY(vec4(1889.2771, -4912.4347, 3.7, -61.58), max(vec4(1889.2771, -4912.4347, 3.7, -61.58), vec4(1889.2771, -4912.4347, 3.7, -61.58))))))), (_GLF_FUZZED(packSnorm4x8(_GLF_IDENTITY(vec4(1889.2771, -4912.4347, 3.7, -61.58), (false ? _GLF_FUZZED(vec4(-6.9, -99.07, 248.775, -800.594)) : _GLF_IDENTITY(vec4(1889.2771, -4912.4347, 3.7, -61.58), max(vec4(1889.2771, -4912.4347, 3.7, -61.58), vec4(1889.2771, -4912.4347, 3.7, -61.58)))))))) ^ 0u)))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u))))) + 1 < (subgroup_size / _GLF_IDENTITY(2, (false ? _GLF_FUZZED(-53163) : 2))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1 < (subgroup_size / _GLF_IDENTITY(2, _GLF_IDENTITY((2) | 0, min((2) | 0, (2) | 0)))), bool(bool(_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read))), (0u) | (0u)))))) | (subgroup_local_id)))) + _GLF_IDENTITY(1, ~ (~ (1))) < (subgroup_size / 2))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), clamp(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)))) < (subgroup_size / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), int(ivec4(_GLF_IDENTITY(2, (2) | 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2), true && (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / _GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), 2)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)))))))) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))) + 1 < (subgroup_size / 2))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), clamp(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), min(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), (1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)))) << 0u))), 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))) + 1 < (subgroup_size / 2)))))))))))))), ! (! (false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id))) << 0u), (subgroup_local_id) ^ 0u)) | (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1 < (subgroup_size / _GLF_IDENTITY(2, _GLF_IDENTITY((2) | _GLF_IDENTITY(0, (0) >> 0), min((2) | 0, (2) | 0)))), bool(bool(_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(read), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(read), 0u, 1u), uvec3(uvec4(uvec3(_GLF_FUZZED(read), 0u, 1u), 0u)))), max(uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(read), 0u, 1u), uvec3(uvec4(uvec3(_GLF_FUZZED(read), 0u, 1u), 0u)))), uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(read), 0u, 1u), uvec3(uvec4(uvec3(_GLF_FUZZED(read), 0u, 1u), 0u))))))))), (0u) | (0u)))))) | (subgroup_local_id)))) + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec2(_GLF_IDENTITY(~ (~ (1)), (true ? ~ (~ (1)) : _GLF_FUZZED(-92411))), 0)))) < (subgroup_size / 2))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), clamp(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), (false ? _GLF_FUZZED(-56021) : (_GLF_IDENTITY(1, (1) << 0)))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), 1 * ((_GLF_IDENTITY(1, (1) << 0)))), (_GLF_IDENTITY(1, (1) << 0)))) | (1))) / 1u), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)), subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1)))) < (subgroup_size / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), int(ivec4(_GLF_IDENTITY(2, (2) | 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2), true && (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u, (0u) | (0u))) | (_GLF_IDENTITY(0u, (0u) | (0u)))) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < _GLF_IDENTITY((subgroup_size / _GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), 2))), (true ? _GLF_IDENTITY((subgroup_size / _GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), 2))), ~ (~ ((subgroup_size / _GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), 2)))))) : _GLF_FUZZED(subgroup_id)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))) | (subgroup_local_id))))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | 0u))) | (subgroup_local_id)))))))) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))) + 1 < (subgroup_size / 2))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), clamp(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) - 0u)), ((_GLF_IDENTITY(0u, (0u) - 0u))) - (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(4u), uint(4u))))) | (subgroup_local_id))), min(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), uint(uvec4((0u) | (0u), 1u, 0u, 1u)))) | (subgroup_local_id))), _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), (1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) << 0u))), 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), (0u) | (0u)) | (subgroup_local_id))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))))))) + 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), 0u ^ ((0u))) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))))) + 1 < (subgroup_size / 2))))), ! (! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), clamp(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) - 0u)), ((_GLF_IDENTITY(0u, (0u) - 0u))) - (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(4u), uint(4u))))) | (subgroup_local_id))), min(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), uint(uvec4((0u) | (0u), 1u, 0u, 1u)))) | (subgroup_local_id))), _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), (1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)))))) << 0u))), 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))) + 1 < (subgroup_size / 2)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), (0u) | (0u)) | (subgroup_local_id))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))))))) + 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), 0u ^ ((0u))) | (0u)) | (subgroup_local_id))), uint(uint(1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id))))))))))) + 1 < (subgroup_size / 2)))))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), max(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1)))))), (1) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-30572)))), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1)))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) | (_GLF_IDENTITY(0, max(0, 0)))), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(2.0)), bool(false))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(7450.5890)), bool(false))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))) * ((_GLF_IDENTITY(1, (1) | 0)) | 0)), min(_GLF_IDENTITY(_GLF_IDENTITY((1) | 0, int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY(((1) | 0), (_GLF_IDENTITY(((1) | 0), (((1) | 0)) | 0)) << (0 >> _GLF_IDENTITY(int(6), int(6))))), (_GLF_IDENTITY((1) | 0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((1) | 0, 1 * ((1) | 0))))) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-35302) : 0))))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0))), ((_GLF_IDENTITY(0, (0) | (0)))) << _GLF_IDENTITY(0, ~ (~ (0)))))) >> 0)), _GLF_IDENTITY((1) | 0, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0))), 0, 1))) * ((1) | 0))))), int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) | 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1)))))))), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64), ((64)) / 1) | (64)), 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 ^ 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(-42229 & 0, ~ (~ (-42229 & 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(-42229 & 0, ~ (~ (-42229 & 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(-42229 & 0, ~ (~ (-42229 & 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))), false, true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(-42229 & 0, ~ (~ (-42229 & 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, min(3, 3)), 3)))) << 0)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(-42229 & 0, ~ (~ (-42229 & 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))), ! (! (_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(-42229 & 0, ~ (~ _GLF_IDENTITY((-42229 & 0), min((-42229 & 0), (-42229 & 0)))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))), (((_GLF_IDENTITY(-42229 & 0, ~ (~ _GLF_IDENTITY((-42229 & 0), min((-42229 & 0), (-42229 & 0)))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))) ^ 0))))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(-42229 & 0, ~ (~ (-42229 & 0)))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))), false, true))))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))), true, false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))) && true))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true) || _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))), ! (! ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bool((false)))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((injectionSwitch[0]), max((injectionSwitch[0]), (injectionSwitch[0]))) - 0.0), injectionSwitch[1])).x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(_GLF_IDENTITY(! ((false)), ! (! (! ((false))))), true)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))) || false, false || ((true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (! ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))))))) || false)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.0)), float(injectionSwitch.y), bool(true)))) + _GLF_IDENTITY(0.0, (0.0) * 1.0))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
     barrier();
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), (_GLF_IDENTITY(uint(1), (uint(1)) - 0u)) >> 0u), 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false))))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false, false))))), false)))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-846.607)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 | (0 | (0 | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), false, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), false, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 0.0, tan(length(vec3(0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, determinant(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0)), determinant(mat2(sin(0.0), 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), sqrt(0.0), 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x4(-710.026, -8.7, 236.148, 577.433, 96.64, 881.664, 6.2, 7.1, 3.4, -25.74, -344.219, -44.92)) : mat3x4(1.0, 0.0, tan(length(vec3(0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, determinant(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0)), determinant(mat2(sin(0.0), 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), sqrt(0.0), 0.0, 0.0, 0.0))))), injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), false, false, true)))))) && true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(42819))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     subgroupBarrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) && true))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1781.8362), _GLF_FUZZED(-872.869)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-37.89) : injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 & 17755); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, true)))) || false)) && true); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.6), _GLF_FUZZED(8684.8965)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), bool(bvec4(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
