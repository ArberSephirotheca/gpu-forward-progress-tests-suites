#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true)))), (bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true))))) && true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ~ (~ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(int(0)))), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), false, true)))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * 1.0, min((injectionSwitch.y) * 1.0, _GLF_IDENTITY((injectionSwitch.y) * 1.0, ((injectionSwitch.y) * 1.0) * 1.0)))))))) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(true, true && (true))), true, true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) || (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(true, true && (true))), true, true)), bool(bool(bool(bvec3((_GLF_IDENTITY(true, true && (true))), true, true))))))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_IDENTITY(false, false || (false)), true))) && true), true, true))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(84617u))), bool(false))), (false ? _GLF_FUZZED(distance(vec3(-7643.0095, -0.9, 8.4), vec3(13.45, 5.2, _GLF_IDENTITY(1.9, min(_GLF_IDENTITY(1.9, mix(float(1.9), float(_GLF_FUZZED(5223.7781)), bool(false))), 1.9))))) : injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true))) || false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), true), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((2.3))), _GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y))), bool(true))))))))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)) && true, bool(bvec4((_GLF_DEAD(false)) && true, true, false, false)))), false || (! (_GLF_IDENTITY((_GLF_DEAD(false)) && true, bool(bvec4((_GLF_DEAD(false)) && true, true, false, false)))))))), _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec3((_GLF_DEAD(false)) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, sqrt(0.0)))).y)), false)), false, false, true)), true && (bool(bvec4(bool(bvec3((_GLF_DEAD(false)) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(pow(16.84, _GLF_IDENTITY(5.9, min(5.9, 5.9))), min(pow(16.84, _GLF_IDENTITY(5.9, min(5.9, 5.9))), pow(16.84, _GLF_IDENTITY(5.9, min(5.9, 5.9)))))))), injectionSwitch.y, injectionSwitch.y)))), false)), false, false, true)))))))) && _GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.8)), bool(false)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-73.19))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false)))))));
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(false, true), true)), true))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(step((-4.8 + vec2(-19.52, 5.9)), vec2(-50.59, 43.65))))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y)))) || false), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false), true, true, true)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y)))) || false), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false), true, true, true)))), true, true))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.4) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base.x = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), true && (false))) || false)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.2)), bool(false))), injectionSwitch.x)))), _GLF_IDENTITY((false ? _GLF_FUZZED(-62.58) : injectionSwitch.x), max((false ? _GLF_FUZZED(-62.58) : injectionSwitch.x), (false ? _GLF_FUZZED(-62.58) : injectionSwitch.x)))) > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.y = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base, min(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base, GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base))))) | (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
        barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-58.04), _GLF_FUZZED(-700.705)), bvec2(false, false))))).x > injectionSwitch.y, true)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))) && true))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x)), (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 0u | (uint(1u))))) ^ (uint(uint(gl_WorkGroupID.x)))));
 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), float(mat3x4(float(float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-69027)))]))) / vec2(1.0, 1.0)).y, (injectionSwitch.x < injectionSwitch.y) && true))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(51.73)), bool(false))))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), max(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, 1.0, 0.0, 1.0))))) > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))), (~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id) << uvec4(0u, 0u, 0u, 0u))))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id, (false ? _GLF_FUZZED(uvec4(56043u, 58255u, 10298u, 103102u)) : GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id) ^ uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), clamp(_GLF_IDENTITY(uint(uint(0u)), min(uint(uint(0u)), uint(uint(0u)))), uint(uint(0u)), uint(uint(0u))))))))).w * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || false))) && (false))), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base.y = subgroup_base;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))))), false, true)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), mat2(1.0) * (vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))))))).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), mat2(1.0) * (vec2(mat3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 0.0, 1.0))), 0.0, length(0.0), 0.0, 0.0, 1.0))))))).y, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0), mat3(mat3x4(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))))), mat2(1.0) * (vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))))))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), mat2(1.0) * (vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))))))).y))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY(0, (0) | (0)) | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z = GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base.y, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z = GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base.y) / 1u);
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, false)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, false)), false, true, false))))))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ((_GLF_IDENTITY(false, (false) || false)) || false) && true)), (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ((_GLF_IDENTITY(false, (false) || false)) || false) && true))) && true)))), (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false)))), false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ((_GLF_IDENTITY(false, (false) || false)) || false) && true)), (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ((_GLF_IDENTITY(false, (false) || false)) || false) && true))) && true)))), (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false)))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ((_GLF_IDENTITY(false, (false) || false)) || false) && true)), (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ((_GLF_IDENTITY(false, (false) || false)) || false) && true))) && true)))), (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false)))), false, false))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y = virtual_gid;
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(35544))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z, (_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z, uint(uvec2(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z, (true ? workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.z : _GLF_FUZZED(workgroup_id))), 0u)))) << 0u) + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) - 0u)) >> 0u), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, 0u + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), uint(uvec4((subgroup_local_id + 1), 0u, 1u, 0u))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) >> 0u))), clamp((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, (subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (_GLF_IDENTITY(1, (1) | 0)))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x), min(~ ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x), ~ ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))))) + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x)))))))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, 0u + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) >> 0u), min(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id[0], GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id[1], GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id[2])).x, ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) >> 0u), _GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) >> 0u))), _GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x) >> 0u))))), clamp((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, max(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, (true ? GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x : _GLF_FUZZED(atomicXor(subgroup_size, subgroup_base)))))), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : (subgroup_local_id + 1)))) ^ 0u) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), 1)), clamp(1, 1, 1))) | (_GLF_IDENTITY(1, (1) | 0)))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x), min(~ (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, 1u, 1u), (uvec3((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x, 1u, 1u)) | uvec3(0u, 0u, 0u))))), ~ ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x))))))))))) / 1u), clamp(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, 1 * (1)), 1), max(ivec2(_GLF_IDENTITY(1, 1 * (1)), 1), ivec2(_GLF_IDENTITY(1, 1 * (1)), 1)))))) ^ (-66997 & 0))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), (subgroup_local_id + 1))) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x), (_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x), (((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x)) ^ 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x)));
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (false))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), clamp(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))))) && true)))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-263.856)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true))), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)))), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, _GLF_IDENTITY(max(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id), uvec3(uvec4(max(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id), 0u)))).y], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), true, true, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))), true && (! (_GLF_IDENTITY(false, bool(bool(false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.4), _GLF_FUZZED(29.72)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (vec2(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.4), _GLF_FUZZED(29.72)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) / abs(vec2(1.0, 1.0)))).x > injectionSwitch.y)), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(713.379, -7.5)))), injectionSwitch)).y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.9)), bvec2(_GLF_IDENTITY(true, (true) && true), false))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           barrier();
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 & 1) ^ 0, ~ (~ (_GLF_IDENTITY((1 & 1) ^ 0, max((1 & 1) ^ 0, (1 & 1) ^ 0))))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, length(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, sqrt(1.0), abs(0.0), 1.0, 1.0)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false), bvec2(bvec3(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false), true)))))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))));
 if((_GLF_IDENTITY(subgroup_local_id % 2, clamp(subgroup_local_id % 2, subgroup_local_id % 2, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) >> 0u), 0u ^ (subgroup_local_id % 2))))) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), ! (! (_GLF_IDENTITY(bool(bvec2((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), ! (! (bool(bvec2((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))), true, true, true))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false))), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), false || (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false))), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), false || (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false))), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), false || (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false))), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), false || (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false))), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), false || (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))) && true))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).y) || false)))))), true, false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(53.67), _GLF_FUZZED(vec2(-3.7, -81.90).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(53.67), _GLF_FUZZED(vec2(-3.7, -81.90).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(53.67), _GLF_FUZZED(vec2(-3.7, -81.90).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(vec2(9.3, -3.1)))).y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(53.67), _GLF_FUZZED(vec2(-3.7, -81.90).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(53.67), _GLF_FUZZED(vec2(-3.7, -81.90).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(vec2(9.3, -3.1)))).y))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x) - 0u), (true ? GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x : _GLF_FUZZED(_GLF_IDENTITY(read, 0u | (read))))), GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x))], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-32.08)), vec2(_GLF_FUZZED(-1.0), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))))), min(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0)))))))).y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))), (false ? _GLF_FUZZED(vec2(339.556, -4.0)) : vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0))))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0)))))))).y, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), log(1.0), 0.0, 0.0, sqrt(1.0), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0), mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0)))))).y, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), log(1.0), 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), 1.0 * (_GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))))), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_11next_virtual_gidnum_workgroupsubgroup_basesubgroup_id.x], uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(26147)), ((true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(26147))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(2), int(2))) ^ (0))))))), 4, _GLF_IDENTITY(64, (64) / 1), _GLF_IDENTITY(4, 0 | (4)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.0), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(clamp((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0))))))], (injectionSwitch)[0], (injectionSwitch)[0]), (_GLF_IDENTITY(clamp((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0))))))], (injectionSwitch)[0], (injectionSwitch)[0]), min(clamp((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0))))))], (injectionSwitch)[0], (injectionSwitch)[0]), clamp((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0))))))], (injectionSwitch)[0], (injectionSwitch)[0])))) / 1.0)), _GLF_FUZZED(6.1)), bvec2(true, false))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)))))));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (! (false))))))) && true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true)))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), _GLF_IDENTITY(vec2(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))), _GLF_IDENTITY((vec2(vec2(_GLF_IDENTITY(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), (vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))) / vec2(1.0, 1.0))))) * mat2(1.0), (true ? (vec2(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))))) * mat2(1.0) : _GLF_FUZZED(injectionSwitch))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-592.362))), _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2((injectionSwitch), 0.0, 0.0, 0.0, 0.0), (mat3x2((injectionSwitch), 0.0, 0.0, 0.0, 0.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-518.291)), float(0.0), bool(true)))))))[0], mix(float(_GLF_FUZZED(63.98)), float((injectionSwitch)[0]), bool(true))))))), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-2.7)), float(_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), _GLF_IDENTITY(vec2(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))), _GLF_IDENTITY(_GLF_IDENTITY((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))), min(_GLF_IDENTITY((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))), mix(vec2(_GLF_FUZZED(270.636), _GLF_FUZZED(3.4)), vec2(_GLF_IDENTITY(((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))))[0], (true ? ((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))))[0] : _GLF_FUZZED(-42.82))), ((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))))[1]), bvec2(true, true))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))), ((vec2(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), clamp(vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(_GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))), (vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)))) * mat2(1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0))))))))) / vec2(1.0, 1.0)))) * mat2(1.0), (true ? (vec2(vec2(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77))))) * mat2(1.0) : _GLF_FUZZED(injectionSwitch))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch)))[0], max(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(true ? (injectionSwitch)[0] : _GLF_FUZZED(-592.362), min(_GLF_IDENTITY(true ? (injectionSwitch)[0] : _GLF_FUZZED(-592.362), max(true ? (injectionSwitch)[0] : _GLF_FUZZED(-592.362), true ? (injectionSwitch)[0] : _GLF_FUZZED(-592.362))), true ? _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))))[0] : _GLF_FUZZED(-592.362))))), _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2((injectionSwitch), 0.0, 0.0, 0.0, 0.0), (mat3x2((injectionSwitch), 0.0, 0.0, 0.0, 0.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[0], mix(float(_GLF_FUZZED(63.98)), float(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(737.820) : (injectionSwitch)[0]))), bool(true))))))), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 1.0)))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), false || (bool(true))))), bool(bool(true))) && ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(64.77, mix(float(64.77), float(_GLF_FUZZED((-809.686 / -7756.9686))), bool(false))), max(_GLF_IDENTITY(_GLF_IDENTITY(64.77, mix(float(64.77), float(_GLF_FUZZED((-809.686 / -7756.9686))), bool(false))), (_GLF_IDENTITY(64.77, mix(float(64.77), float(_GLF_FUZZED((-809.686 / -7756.9686))), bool(false)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(64.77, mix(float(64.77), float(_GLF_FUZZED((-809.686 / -7756.9686))), bool(false))), (_GLF_IDENTITY(64.77, mix(float(64.77), float(_GLF_FUZZED((-809.686 / -7756.9686))), bool(false)))) / 1.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0))) ^ 0)], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(-7.2), (vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0))) ^ 0)], (injectionSwitch)[1]))[1]), vec2((vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))[_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0))), min((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0))), _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0))), ~ (~ ((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0)))))))) ^ 0)], (injectionSwitch)[1]))[0], _GLF_FUZZED(96.08)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), true, false, false)), false || (bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), true, false, false)))))))))), false, false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (false ? _GLF_FUZZED(normalize(vec2(1.3, 3794.6606))) : _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(-384.030), (vec2((injectionSwitch)[0], (injectionSwitch)[1]))[1]), vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], _GLF_FUZZED(9.5)), bvec2(true, false)))) - vec2(0.0, 0.0)))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bool(true))) && ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y))))), false)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), false, true, false))) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-871.961), _GLF_FUZZED(64.77)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y))))))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(38878) : min(0, 0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, (false) || false)))), (! (false)) && true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         subgroupBarrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), false))))) || _GLF_IDENTITY(false, true && (false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), bool(bvec2(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), true)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)))) || false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (false))))))) || false), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (false))))))) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(249.205)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(radians(-3.3))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y, min(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y, GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y))], read, 4, 64, 4);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_injected_loop_counter))))) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), _injected_loop_counter)) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, bool(bool(false)))) || false)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), ! (! (bool(bvec3((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false))), true, true)))))), false, true, false))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x2(injectionSwitch[1], 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))).y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), clamp(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0))))) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 1.0, 1.0), (mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0)), 1.0, 1.0)) * mat4(1.0)))).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              barrier();
             barrier();
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))) || false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
