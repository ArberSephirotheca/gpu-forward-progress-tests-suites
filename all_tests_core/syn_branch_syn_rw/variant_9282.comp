#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4 _f0;
 mat3 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 vec3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 vec2 _f1;
 ivec2 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 ivec3 _f1;
 uint _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_12 {
 uint workgroup_size;
 mat3x4 _f0;
 mat2x3 _f1;
 vec4 _f2;
 mat2 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_9 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 mat4 _f1;
 bool _f2;
 mat3 _f3;
 float _f4;
 vec3 _f5;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 uint subgroup_id;
 mat2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))), true), true, true)), true, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(23085))) : _GLF_FUZZED(-33789)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-75.20) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))), ! (_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))))))))), (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))) || false))), ! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))))))) || false))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), ! (! (false)))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(mat3x2(1.0), uvec3(1u)), mat3(1.0), _GLF_struct_1(mat4x2(1.0), mat4(1.0), true, mat3(1.0), 1.0, vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-205.708)), float(1.0), bool(true))), sqrt(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), min(float(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-205.708)), float(1.0), bool(true))), sqrt(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), float(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-205.708)), float(1.0), bool(true))), sqrt(1.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))))), 1.0)), min(1.0, 1.0)), 0.0, _GLF_IDENTITY(cos(0.0), mix(float(cos(0.0)), float(_GLF_FUZZED(float(61325))), bool(false))), 1.0, exp(0.0), 0.0, 1.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), abs(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(float(0.0))) + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), mix(float(_GLF_FUZZED(82.80)), _GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), transpose(transpose(mat4x3(1.0, 0.0, cos(0.0), 1.0, exp(0.0), 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0, abs(0.0)))))), (float(_GLF_IDENTITY(mat4x3(1.0, 0.0, _GLF_IDENTITY(cos(0.0), mix(float(cos(0.0)), float(_GLF_FUZZED(float(61325))), bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))), 1.0, exp(0.0), 0.0, 1.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) * 1.0, ((0.0) * 1.0) / abs(1.0)))) / 1.0), abs(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(82.80, (true ? 82.80 : _GLF_FUZZED(5.1))))), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), transpose(transpose(mat4x3(1.0, 0.0, cos(0.0), 1.0, exp(0.0), 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0)), clamp(abs(0.0), abs(0.0), abs(0.0))), abs(0.0))))))))) / 1.0), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-407.758), max(_GLF_FUZZED(-407.758), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-407.758), mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))), (false ? _GLF_FUZZED(log(ceil(-499.253))) : _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))))), float(_GLF_FUZZED(-407.758)), bool(true))), clamp(_GLF_IDENTITY(_GLF_FUZZED(-407.758), mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), max(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(-407.758)), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-407.758), (_GLF_FUZZED(-407.758)) / 1.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6))), 0.0 + (clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))))), float(_GLF_FUZZED(-407.758)), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-407.758), mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), max(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), (float(_GLF_FUZZED(2.6))) * 1.0)) / 1.0), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(-407.758)), bool(true))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-407.758, max(-407.758, _GLF_IDENTITY(-407.758, 0.0 + (-407.758))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(float(_GLF_FUZZED(2.6)), clamp(float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(2.6)))), float(_GLF_FUZZED(-407.758)), bool(true)))), float(_GLF_FUZZED(28.04)), bool(false)))))))), float(float(_GLF_IDENTITY(mat4x3(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), (true ? cos(0.0) : _GLF_FUZZED(tan(9541.8168)))), max(_GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), cos(0.0))), 1.0, exp(0.0), 0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5589.5396)), bool(false))), 0.0, abs(0.0)), transpose(transpose(mat4x3(1.0, 0.0, _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), cos(0.0), cos(0.0))), 1.0, exp(0.0), 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0, abs(0.0))))))), bool(true)))))), bvec3(true)), gl_SubgroupID, mat2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))))) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0), min(_GLF_IDENTITY(max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0), (false ? _GLF_FUZZED(3.0) : max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0))), _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0)), (float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))) * 1.0)), 0.0), 1.0 * (max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0)))))), _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(23.15))), 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))).x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0)), length(0.0) + (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))).x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))).x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), 1.0, 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))).x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 0.0)))))).x > injectionSwitch.y)))))))))), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1542.2191)), bool(false))), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1542.2191)), bool(false))), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, abs(0.0), sqrt(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1542.2191)), bool(false))), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))))))))))))) && true))), ! (! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, tan(0.0) + (injectionSwitch.x)) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), (_GLF_IDENTITY(abs(0.0), (abs(0.0)) * 1.0)) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0), (vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0)) + vec2(0.0, 0.0))), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, abs(0.0), 0.0, 0.0))), sqrt(0.0), 1.0, 0.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))).x > injectionSwitch.y)))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))), bool(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))), false, true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2864.0543))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.8) : injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, sqrt(0.0), sqrt(1.0)))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * _GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), (true ? (gl_NumWorkGroups) : _GLF_FUZZED(uvec3(155290u, 42497u, 88802u))))) + uvec3(0u, 0u, 0u))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec2(bool(bvec3(false, true, false)), false))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec2(bool(bvec3(false, true, false)), false))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.5)), bool(false)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_WorkGroupSize.x, mat3x4(1.0), mat2x3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat3(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(81.76)), bool(false))), 1.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, (1.0) - 0.0)))), vec4(1.0), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)), _GLF_struct_6(_GLF_struct_4(bvec3(true), ivec3(1), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))) << _GLF_IDENTITY(0u, (0u) << 0u)), mat2x3(1.0)), _GLF_struct_5(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (1u) - (0u | 0u)), 0u)))) << 0u, 0u | (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uvec2(1u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_local_id))))))) << 0u, ((_GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))) << 0u) << 0u))))))), _GLF_struct_9(mat2x4(1.0), vec2(1.0), ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | 0)) << 0), 1, _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (0 << _GLF_IDENTITY(int(6), int(6))) | (clamp(1, 1, 1))))))), _GLF_struct_7(bvec4(true), vec3(1.0), mat4(1.0)), _GLF_struct_8(bvec4(true), vec2(1.0)), mat2x3(1.0)), _GLF_struct_11(_GLF_struct_10(mat4(1.0), mat3(1.0), ivec4(1), mat4x3(1.0), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), clamp(_GLF_IDENTITY(0.0 + (1.0), max(0.0 + (1.0), _GLF_IDENTITY(0.0 + (1.0), mix(float(_GLF_FUZZED(-2976.3304)), float(0.0 + (1.0)), bool(true))))), 0.0 + (1.0), 0.0 + (1.0))))), bvec4(true))));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), false || (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) << uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) | ((~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u))))))) / uvec3(1u, 1u, 1u))) ^ uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_WorkGroupID), min(_GLF_IDENTITY(uvec3(gl_WorkGroupID), clamp(uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID), _GLF_IDENTITY(uvec3(gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (uvec3(gl_WorkGroupID))))), _GLF_IDENTITY(uvec3(gl_WorkGroupID), clamp(uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID))))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(gl_WorkGroupID), min(_GLF_IDENTITY(uvec3(gl_WorkGroupID), clamp(uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID), _GLF_IDENTITY(uvec3(gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ (uvec3(gl_WorkGroupID))))), _GLF_IDENTITY(uvec3(gl_WorkGroupID), clamp(uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID))))))))), max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) << uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u))))))).x) / 1u);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5098.1641, 575.170)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.5) : injectionSwitch.x))), float(_GLF_FUZZED(8.6)), bool(_GLF_IDENTITY(false, false || (false))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.5) : injectionSwitch.x))), float(_GLF_FUZZED(8.6)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))) > injectionSwitch.y)) && true))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_12.workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 0u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.8) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1426.4171)), bool(false)))))))
    barrier();
  }
 uint subgroup_base = _GLF_struct_replacement_3.subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u)) * 1u));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2835.7960)))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(true, bool(bvec2(true, true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) + 0u), 4, 64, _GLF_IDENTITY(2, clamp(2, 2, 2)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_IDENTITY(true, false || (true)), false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(((false ? 3.3 : 37.87) - vec4(-9.2, -9.3, 6.4, -9.8).x)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4310.8801)), bvec2(true, false))).y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))))), bool(bvec3(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))), min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))), _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))))))), bool(bvec2(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, _GLF_IDENTITY(sqrt(0.0), max(_GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), sqrt(0.0))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), exp(0.0)))))), true))), false, false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0)))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))))))), bool(bvec3(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), clamp(min(1.0, 1.0), min(1.0, 1.0), min(1.0, 1.0)))), exp(0.0)))))), bool(bvec2(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0)))))), _GLF_IDENTITY(true, ! (! (true)))))), false, false))), false), true)))))), false || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))) * (injectionSwitch)), injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(injectionSwitch[0], injectionSwitch[1])))).y)))))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || false)), (! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))) && true, ((! (_GLF_IDENTITY(_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))))) || false), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))))) || false), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))))) || false), false, false), false)), false)))))))) && true) || false)))))))) && _GLF_IDENTITY(true, true && (true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, (1 & 1), 1), (ivec3(0, (1 & 1), 1)) / ivec3(1, 1, 1))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.1) : injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(2.2), (_GLF_IDENTITY(_GLF_FUZZED(2.2), (_GLF_IDENTITY(_GLF_FUZZED(2.2), clamp(_GLF_FUZZED(2.2), _GLF_FUZZED(2.2), _GLF_FUZZED(2.2)))) * 1.0)) * 1.0))))) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), ! (! (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(false || (_GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)))))))), true, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (false || _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - sin(0.0)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - sin(0.0))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - sin(0.0)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - sin(0.0))))) && true)))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - sin(0.0)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * 1.0) * (injectionSwitch.y))) - _GLF_IDENTITY(sin(0.0), (sin(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(float(0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0))))) / 1.0))) && true)))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-29.89)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8.5) : 1.0)))) * _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(4.4)), float((injectionSwitch.y)), bool(true))), float(mat4((injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, log(1.0), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, log(1.0), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))))) - sin(0.0))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && true)), true))), true, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)).x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))))), true)))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))), false || ((_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))) && true))), bool(bool(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6511.1958) : injectionSwitch.y)), injectionSwitch.y))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, log(1.0), exp(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, tan(0.0), 0.0, 0.0))).y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && true))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-37.42)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(127.871)), bool(false)))) * 1.0))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && ((! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-13.39)), bool(false)))) - 0.0))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, true))))) && true)))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), false)))))))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555))), min(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555))), 0 | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))))))) << 0)), int(_GLF_IDENTITY(ivec3(clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(-39555)), ((true ? 1 : _GLF_FUZZED(-39555))) | 0))) << 0), (false ? _GLF_FUZZED(-69056) : _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))) << 0), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))) << 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))) << 0)))))), 1, 1), (ivec3(_GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))) << 0, ~ (~ ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))) << 0))))), 0 ^ (clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-39555)))) << 0)))), 1, 1)) + ivec3(0, _GLF_IDENTITY(0, int(ivec2(0, 0))), 0)))))), 4, 64, _GLF_IDENTITY(4, int(ivec4(4, 0, 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (3)))) / 1)), int(_GLF_IDENTITY(_GLF_IDENTITY(3, max(3, 3)), int(ivec3(_GLF_IDENTITY(3, max(3, 3)), 0, 1))))), clamp((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 | (1))), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), 0 | (min(64, 64)))), 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(8865.3605, -2.3)))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(8865.3605, -2.3)))).y, true, false, true))), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, (true) || false) ? injectionSwitch : _GLF_FUZZED(vec2(8865.3605, -2.3)))).y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4909.3493)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(8.1), (vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0)))[1]), vec2((vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0)))[0], _GLF_FUZZED(-2.3)), bvec2(true, false)))).x > injectionSwitch.y)), true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-16.46)), bvec2(true, false))).y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
  barrier();
 do
  {
   subgroupBarrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid))) + 0u), 1u * (virtual_gid))))))], read, 4, 64, 4);
}
