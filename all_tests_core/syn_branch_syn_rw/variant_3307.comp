#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true)))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true))))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, float(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0, min(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) | 0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, _GLF_IDENTITY(int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0)), 1)), ~ (~ (int(_GLF_IDENTITY(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1), max(_GLF_IDENTITY(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1), clamp(_GLF_IDENTITY(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1), (ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1)) | (ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1))), ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1), ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1))), ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, 1)))))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(815.610)), bool(false)))))))))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 1u))), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u)), 0u, 0u)).x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(1u * (gl_WorkGroupID.x), (false ? _GLF_FUZZED(uvec2(37115u, 70039u).y) : 1u * (gl_WorkGroupID.x))))), (uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(1u * (gl_WorkGroupID.x), (false ? _GLF_FUZZED(uvec2(37115u, 70039u).y) : 1u * (gl_WorkGroupID.x)))))) >> (0u | 0u)), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x))))), ((uint(gl_WorkGroupID.x))) * 1u))), uint(gl_WorkGroupID.x))))), 0u)), (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x)))), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-4768.7514, 605.004, 1202.9597, -4213.2034))) : uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))))), 0u)), min(uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x)))), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-4768.7514, 605.004, 1202.9597, -4213.2034))) : uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))))), 0u)), uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x)))), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-4768.7514, 605.004, 1202.9597, -4213.2034))) : uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))))), 0u))))) | (143418u & 0u))), min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, (0u) | 0u))), 0u)).x, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x)))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x))))))) - 0u)), 0u)), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x))))))), 0u))) | (143418u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ _GLF_IDENTITY((~ (uint(gl_WorkGroupID.x))), ((~ (uint(gl_WorkGroupID.x)))) >> 0u)), uint(gl_WorkGroupID.x))))), 0u)), (true ? uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ _GLF_IDENTITY((~ (uint(gl_WorkGroupID.x))), ((~ (uint(gl_WorkGroupID.x)))) >> 0u)), uint(gl_WorkGroupID.x))))), 0u)) : _GLF_FUZZED((subgroup_size)))), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)).x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))), 0u))) | (_GLF_IDENTITY(143418u, (143418u) / 1u) & 0u))), (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (true ? _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) : _GLF_FUZZED(uvec3(93940u, 148292u, 77087u))))).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), min(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(0u | (gl_WorkGroupID.x), max(0u | (gl_WorkGroupID.x), _GLF_IDENTITY(0u | (gl_WorkGroupID.x), (0u | (gl_WorkGroupID.x)) | 0u)))))))) >> 0u))), 0u + ((~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), min(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(0u | (gl_WorkGroupID.x), max(0u | (gl_WorkGroupID.x), _GLF_IDENTITY(0u | (gl_WorkGroupID.x), (0u | (gl_WorkGroupID.x)) | 0u)))))))) >> 0u)))))), uint(gl_WorkGroupID.x))))), 0u)), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)))), uint(gl_WorkGroupID.x))))), 0u))) | (143418u & 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (true ? _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u) : _GLF_FUZZED((subgroup_size --)))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x))))), 0u)), (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x))))), (true ? _GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x))), uint(uvec4(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x))), 1u, 0u, 0u))))) : _GLF_FUZZED(num_workgroup))), 0u))) | (_GLF_IDENTITY(143418u & 0u, 0u ^ (143418u & 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 1u))), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u)), 0u, 0u)).x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(1u * (gl_WorkGroupID.x), (false ? _GLF_FUZZED(uvec2(37115u, 70039u).y) : 1u * (gl_WorkGroupID.x))))), (uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(1u * (gl_WorkGroupID.x), (false ? _GLF_FUZZED(uvec2(37115u, 70039u).y) : 1u * (gl_WorkGroupID.x)))))) >> (0u | 0u)), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x))))), ((uint(gl_WorkGroupID.x))) * 1u))), uint(gl_WorkGroupID.x))))), 0u)), (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x)))), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-4768.7514, 605.004, 1202.9597, -4213.2034))) : uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))))), 0u)), min(uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x)))), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-4768.7514, 605.004, 1202.9597, -4213.2034))) : uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))))), 0u)), uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x)))), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-4768.7514, 605.004, 1202.9597, -4213.2034))) : uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))))), 0u))))) | (143418u & 0u))), min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, (0u) | 0u))), 0u)).x, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x)))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(gl_WorkGroupID.x), 0u), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, _GLF_IDENTITY(1u, max(1u, 1u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u), ~ (~ (uvec2(uint(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x), 0u)))))), (uvec2(uint(gl_WorkGroupID.x), 0u)) / uvec2(1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(gl_WorkGroupID.x))))))) - 0u)), 0u)), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x))))))), 0u))) | (143418u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ _GLF_IDENTITY((~ (uint(gl_WorkGroupID.x))), ((~ (uint(gl_WorkGroupID.x)))) >> 0u)), uint(gl_WorkGroupID.x))))), 0u)), (true ? uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ _GLF_IDENTITY((~ (uint(gl_WorkGroupID.x))), ((~ (uint(gl_WorkGroupID.x)))) >> 0u)), uint(gl_WorkGroupID.x))))), 0u)) : _GLF_FUZZED((subgroup_size)))), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)).x), min(uint(gl_WorkGroupID.x), uint(gl_WorkGroupID.x))))), 0u))) | (_GLF_IDENTITY(143418u, (143418u) / 1u) & 0u))), (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (true ? _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) : _GLF_FUZZED(uvec3(93940u, 148292u, 77087u))))).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), min(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(0u | (gl_WorkGroupID.x), max(0u | (gl_WorkGroupID.x), _GLF_IDENTITY(0u | (gl_WorkGroupID.x), (0u | (gl_WorkGroupID.x)) | 0u)))))))) >> 0u))), 0u + ((~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), min(uint(_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), uint(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(0u | (gl_WorkGroupID.x), max(0u | (gl_WorkGroupID.x), _GLF_IDENTITY(0u | (gl_WorkGroupID.x), (0u | (gl_WorkGroupID.x)) | 0u)))))))) >> 0u)))))), uint(gl_WorkGroupID.x))))), 0u)), (uint(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)))), uint(gl_WorkGroupID.x))))), 0u))) | (143418u & 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (true ? _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u) : _GLF_FUZZED((subgroup_size --)))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(_GLF_IDENTITY(uint(gl_WorkGroupID.x), ~ (~ (uint(gl_WorkGroupID.x)))), uint(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x))))), 0u)), (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x))))), (true ? _GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x))), uint(uvec4(_GLF_IDENTITY(uint(gl_WorkGroupID.x), min(uint(gl_WorkGroupID.x), uint(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x))), 1u, 0u, 0u))))) : _GLF_FUZZED(num_workgroup))), 0u))) | (_GLF_IDENTITY(143418u & 0u, 0u ^ (143418u & 0u)))))))))) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, min(0, 0)), 1, 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(-2.6) : injectionSwitch.y), tan(0.0) + ((false ? _GLF_FUZZED(-2.6) : injectionSwitch.y))))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(-2.6) : injectionSwitch.y), tan(0.0) + ((false ? _GLF_FUZZED(-2.6) : injectionSwitch.y))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, 1u * (workgroup_base + subgroup_base + subgroup_local_id))) << 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec3(-49.31, -2153.5982, -1516.8790), vec3(931.512, -3591.1098, -13.09)))))) * 1.0)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(false))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(asin(-1.9)))) < injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(asin(-1.9)))) < injectionSwitch.y))))) || false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter --)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             barrier();
            }
           return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) * 1u, ((((subgroup_local_id + 1) % subgroup_size)) * 1u) / 1u)), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1)))) | ((subgroup_local_id + 1))) % subgroup_size)) * 1u, (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(true, ! (! (true))) ? (((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id))) * 1u) / 1u)) : _GLF_FUZZED(workgroup_id)));
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) << 0u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), min(_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0), (0 | 0))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), max(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), max(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) - 0u), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u)) * 1u))))) >> _GLF_IDENTITY(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((2u), ((2u)) << 0u), (~ _GLF_IDENTITY((2u), ~ (_GLF_IDENTITY(~ ((2u)), (~ ((2u))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(next_virtual_gid))))), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u))), max(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((2u), ((2u)) << 0u), (~ _GLF_IDENTITY((2u), ~ (_GLF_IDENTITY(~ ((2u)), (~ ((2u))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(next_virtual_gid))))), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((2u), ((2u)) << 0u), (~ _GLF_IDENTITY((2u), ~ (_GLF_IDENTITY(~ ((2u)), (~ ((2u))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(next_virtual_gid))))), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u)))))), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u)) << 0u))) >> ((0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), (false ? _GLF_FUZZED(bitfieldInsert((subgroup_base >> read), subgroup_id, 9365, 36053)) : _GLF_IDENTITY(_GLF_IDENTITY(~ (2u), max(~ (2u), ~ (2u))), (_GLF_IDENTITY(~ (2u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(~ (2u), 1u, 0u, 1u), min(uvec4(~ (2u), 1u, 0u, 1u), uvec4(~ (2u), 1u, 0u, 1u)))), ~ (~ (uint(_GLF_IDENTITY(uvec4(~ (2u), 1u, 0u, 1u), min(uvec4(~ (2u), 1u, 0u, 1u), uvec4(~ (2u), 1u, 0u, 1u))))))))) ^ 0u))), uint(uvec3(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), 0u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), uint(uvec3(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), 0u, 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), uint(uvec3(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), 0u, 1u)))))))))) << _GLF_IDENTITY(uint(6u), uint(6u))))) + 0u) % 2), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), max(_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), max(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) - 0u), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u)) * 1u))))) >> _GLF_IDENTITY(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((2u), ((2u)) << 0u), (~ _GLF_IDENTITY((2u), ~ (_GLF_IDENTITY(~ ((2u)), (~ ((2u))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(next_virtual_gid))))), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u))), max(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((2u), ((2u)) << 0u), (~ _GLF_IDENTITY((2u), ~ (_GLF_IDENTITY(~ ((2u)), (~ ((2u))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(next_virtual_gid))))), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((2u), ((2u)) << 0u), (~ _GLF_IDENTITY((2u), ~ (_GLF_IDENTITY(~ ((2u)), (~ ((2u))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(next_virtual_gid))))), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u)))))))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u)))))), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u)) << 0u))) >> ((0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), (false ? _GLF_FUZZED(bitfieldInsert((subgroup_base >> read), subgroup_id, 9365, 36053)) : _GLF_IDENTITY(_GLF_IDENTITY(~ (2u), max(~ (2u), ~ (2u))), (_GLF_IDENTITY(~ (2u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(~ (2u), 1u, 0u, 1u), min(uvec4(~ (2u), 1u, 0u, 1u), uvec4(~ (2u), 1u, 0u, 1u)))), ~ (~ (uint(_GLF_IDENTITY(uvec4(~ (2u), 1u, 0u, 1u), min(uvec4(~ (2u), 1u, 0u, 1u), uvec4(~ (2u), 1u, 0u, 1u))))))))) ^ 0u))), uint(uvec3(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), 0u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), uint(uvec3(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), 0u, 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), uint(uvec3(_GLF_IDENTITY(~ (2u), (~ (2u)) ^ 0u), 0u, 1u)))))))))) << _GLF_IDENTITY(uint(6u), uint(6u))))) + 0u) % 2)) << 0u) == _GLF_IDENTITY(0, ~ (~ (0))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ! (! ((false)))))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) | (64)), 4);
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
          barrier();
         return;
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((91.20 - 5.2)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(317.316)), bool(false))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         else
          {
          }
         for(int _injected_loop_counter = ((62313) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) | 0)))) * 1) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))), false, true, false))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 ^ (64)))), 4);
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.5))) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))), (~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))) * 1))))
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, log(1.0), cos(0.0)), mat4x3(mat4x3(mat4x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, log(1.0), cos(0.0))))))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 1)), (_GLF_IDENTITY(int(ivec2(int(2), 1)), (int(ivec2(int(2), 1))) >> 0)) << 0)), _GLF_IDENTITY(int(2), _GLF_IDENTITY((_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1)))), ((_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1))))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1)))), min((_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1)))), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1))))))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))))), true && (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, ~ (~ (0)))), ((1 ^ _GLF_IDENTITY(0, ~ (~ (0))))) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true), false)))))))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8846.1905) : injectionSwitch.x))) + sin(0.0)) > injectionSwitch.y))) || false))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) - 0)))) | 0)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))))[1])))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.9)), float(injectionSwitch.y), bool(true)))))))
    barrier();
  }
 for(int _injected_loop_counter = ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-22047) : int(0)))) | (int(0)))), max(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(1, 1, 1)))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) - (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, (3) >> 0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) - 0) > _GLF_IDENTITY(0, (0) ^ 0)); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), true && (_GLF_IDENTITY(true && (_GLF_DEAD(false)), true && (true && (_GLF_DEAD(false))))))))
        break;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0), _GLF_IDENTITY(mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), (true ? mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat2x4(-0.1, -299.738, -338.142, -49.63, -97.95, 636.099, -372.011, 1087.7509))))))).y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) || false))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4)))) | ((1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, 0 + (4)))))))))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-34.99), (_GLF_FUZZED(-34.99)) - 0.0)), bool(false))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((64), (_GLF_IDENTITY((64), clamp((64), _GLF_IDENTITY((64), int(ivec3((64), 1, 1))), (64)))) + 0), min((64), (64))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), (64) | (64)))), 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
}
