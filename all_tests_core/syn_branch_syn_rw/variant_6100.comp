#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat4 _f0;
 bool _f1;
 bvec2 _f2;
 bvec4 _f3;
 vec2 _f4;
 ivec4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size;
 ivec2 _f1;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 ivec2 _f1;
 bvec2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 ivec4 _f1;
 mat2 _f2;
 mat3x4 _f3;
 int _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 _GLF_struct_1 _f1;
 vec3 _f2;
 _GLF_struct_3 _f3;
 bvec2 _f4;
 _GLF_struct_5 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_6 _GLF_struct_replacement_6;
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x = subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.x * _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y + 1) % _GLF_IDENTITY(_GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z, (true ? _GLF_IDENTITY(_GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z, min(_GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z, _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z)) : _GLF_FUZZED((+ _GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.z)))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((_GLF_struct_replacement_6._f5.GLF_merged3_0_1_11_1_1_17_2_1_13subgroup_idsubgroup_local_idsubgroup_size.y % 2) == 0)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
