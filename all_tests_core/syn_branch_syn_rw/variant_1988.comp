#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))) + 0.0)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.9))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, _GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(-1.4)), bool(false))), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1438.0360)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, 0.0)), mix(float(float(vec2(0.0, 0.0))), float(_GLF_FUZZED(-1.8)), bool(false))))) / 1.0))))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0)) / 1.0) : _GLF_FUZZED(5.1))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))) && true)), true)), bool(bvec2(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0, clamp((_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, abs(0.0), 0.0, 0.0)))) / 1.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.7)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))), true)), false)))), false, true, true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-3.1), (true ? injectionSwitch.x : _GLF_FUZZED(-3.1)) / 1.0))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec4(int(3), 0, 1, 0)))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(402.022)), bvec2(true, false))), injectionSwitch)), injectionSwitch), _GLF_IDENTITY((max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(402.022)), bvec2(true, false))), injectionSwitch)), injectionSwitch)) / abs(vec2(1.0, 1.0)), ((max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.3), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(76.88), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(1.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))[0], _GLF_FUZZED(402.022)), bvec2(true, false))), injectionSwitch)), injectionSwitch)) / abs(vec2(1.0, 1.0))) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-41.38)), _GLF_FUZZED(vec4(-0.2, 846.174, -1.4, 964.158).sqq.t)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))).y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))))) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(171429u))))) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_size * subgroup_id, (subgroup_size * subgroup_id) | 0u);
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))), (~ (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid]))) / _GLF_IDENTITY(((1u | 1u) & 1u), (((1u | 1u) & 1u)) | (_GLF_IDENTITY(((1u | 1u) & 1u), 0u | (((1u | 1u) & 1u)))))))) * 1u)))) + 0u), _GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), (~ (0u)) / 1u)) | (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))) | ((uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), uvec2(1u, 1u) * (~ (~ (uvec2((buf[virtual_gid]), 1u)))))))))))) << 0u), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), min((_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))), (false ? _GLF_FUZZED(uvec2(72556u, 126945u)) : _GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1u, 0u))), _GLF_IDENTITY(0u, max(0u, 0u))), min(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))))), 1u))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u)), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))), 0u), min(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), ~ (~ (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) | (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))))))), 1u, 0u), clamp(uvec3(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(0u, 0u) ^ (uvec2((buf[virtual_gid]), 1u))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))) - uvec2(0u, 0u))), 1u, 0u), uvec3(uint(_GLF_IDENTITY(uvec2((buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u), (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)) | (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), (~ (~ (uvec2((buf[virtual_gid]), 1u)))) | uvec2(0u, _GLF_IDENTITY(0u, 0u | (0u)))))))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u))) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (_GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), clamp(~ (uvec2((buf[virtual_gid]), 1u)), _GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), max(~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u)))), _GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), clamp(~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u))))))))))), 1u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))), (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ _GLF_IDENTITY((~ (uvec2((buf[virtual_gid]), 1u))), clamp((~ (uvec2((buf[virtual_gid]), 1u))), _GLF_IDENTITY((~ (uvec2((buf[virtual_gid]), 1u))), (false ? _GLF_FUZZED(uvec2(170321u, 69136u)) : (~ (uvec2((buf[virtual_gid]), 1u))))), (~ (uvec2((buf[virtual_gid]), 1u))))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)), (true ? _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)) : _GLF_FUZZED(subgroup_size)))))) | (uvec4(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) >> 0u))), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))))))))), 0u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), (~ (~ (uvec2((buf[virtual_gid]), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u))))) | uvec2(0u, 0u)))))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((_GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))), (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (buf[virtual_gid]) : _GLF_FUZZED(subgroup_size))), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u))))) | (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u))) * 1u), 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), _GLF_IDENTITY((uint(6u)), ~ (~ ((uint(6u))))) << 0u)))))))))), 0u)))))))))) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))), (~ (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid]))) / _GLF_IDENTITY(((1u | 1u) & 1u), (((1u | 1u) & 1u)) | (_GLF_IDENTITY(((1u | 1u) & 1u), 0u | (((1u | 1u) & 1u)))))))) * 1u)))) + 0u), _GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), (~ (0u)) / 1u)) | (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))) | ((uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), uvec2(1u, 1u) * (~ (~ (uvec2((buf[virtual_gid]), 1u)))))))))))) << 0u), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), min((_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))), (false ? _GLF_FUZZED(uvec2(72556u, 126945u)) : _GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1u, 0u))), _GLF_IDENTITY(0u, max(0u, 0u))), min(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))))), 1u))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u)), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))), 0u), min(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), ~ (~ (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) | (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))))))), 1u, 0u), clamp(uvec3(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(0u, 0u) ^ (uvec2((buf[virtual_gid]), 1u))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))) - uvec2(0u, 0u))), 1u, 0u), uvec3(uint(_GLF_IDENTITY(uvec2((buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u), (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)) | (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), (~ (~ (uvec2((buf[virtual_gid]), 1u)))) | uvec2(0u, _GLF_IDENTITY(0u, 0u | (0u)))))))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u))) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (_GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), clamp(~ (uvec2((buf[virtual_gid]), 1u)), _GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), max(~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u)))), _GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), clamp(~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u))))))))))), 1u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))), (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ _GLF_IDENTITY((~ (uvec2((buf[virtual_gid]), 1u))), clamp((~ (uvec2((buf[virtual_gid]), 1u))), _GLF_IDENTITY((~ (uvec2((buf[virtual_gid]), 1u))), (false ? _GLF_FUZZED(uvec2(170321u, 69136u)) : (~ (uvec2((buf[virtual_gid]), 1u))))), (~ (uvec2((buf[virtual_gid]), 1u))))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)), (true ? _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)) : _GLF_FUZZED(subgroup_size)))))) | (uvec4(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) >> 0u))), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))))))))), 0u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), (~ (~ (uvec2((buf[virtual_gid]), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u))))) | uvec2(0u, 0u)))))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((_GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))), (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (buf[virtual_gid]) : _GLF_FUZZED(subgroup_size))), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u))))) | (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u))) * 1u), 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), _GLF_IDENTITY((uint(6u)), ~ (~ ((uint(6u))))) << 0u)))))))))), 0u)))))))))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))), (~ (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid]))) / _GLF_IDENTITY(((1u | 1u) & 1u), (((1u | 1u) & 1u)) | (_GLF_IDENTITY(((1u | 1u) & 1u), 0u | (((1u | 1u) & 1u)))))))) * 1u)))) + 0u), _GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), (~ (0u)) / 1u)) | (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))) | ((uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), uvec2(1u, 1u) * (~ (~ (uvec2((buf[virtual_gid]), 1u)))))))))))) << 0u), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), min((_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))), (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))), (false ? _GLF_FUZZED(uvec2(72556u, 126945u)) : _GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1u, 0u))), _GLF_IDENTITY(0u, max(0u, 0u))), min(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((_GLF_IDENTITY(buf[virtual_gid], ~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))))), 1u))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u)), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))), 0u), min(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), ~ (~ (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) | (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), 0u ^ ((buf[virtual_gid]))), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))))))), 1u, 0u), clamp(uvec3(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(0u, 0u) ^ (uvec2((buf[virtual_gid]), 1u))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))) - uvec2(0u, 0u))), 1u, 0u), uvec3(uint(_GLF_IDENTITY(uvec2((buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u))))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u), (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)) | (uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), (~ (~ (uvec2((buf[virtual_gid]), 1u)))) | uvec2(0u, _GLF_IDENTITY(0u, 0u | (0u)))))))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u))) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (_GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), clamp(~ (uvec2((buf[virtual_gid]), 1u)), _GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), max(~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u)))), _GLF_IDENTITY(~ (uvec2((buf[virtual_gid]), 1u)), clamp(~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u)), ~ (uvec2((buf[virtual_gid]), 1u))))))))))), 1u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))), (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ _GLF_IDENTITY((~ (uvec2((buf[virtual_gid]), 1u))), clamp((~ (uvec2((buf[virtual_gid]), 1u))), _GLF_IDENTITY((~ (uvec2((buf[virtual_gid]), 1u))), (false ? _GLF_FUZZED(uvec2(170321u, 69136u)) : (~ (uvec2((buf[virtual_gid]), 1u))))), (~ (uvec2((buf[virtual_gid]), 1u))))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)), (true ? _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)) : _GLF_FUZZED(subgroup_size)))))) | (uvec4(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), (uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u)))))))) >> 0u))), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))))))))), 0u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), _GLF_IDENTITY(~ (~ (uvec2((buf[virtual_gid]), 1u))), (~ (~ (uvec2((buf[virtual_gid]), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u))))) | uvec2(0u, 0u)))))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((_GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u)))), (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((buf[virtual_gid]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (buf[virtual_gid]) : _GLF_FUZZED(subgroup_size))), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), 1u, 0u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) << 0u))))) | (uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ (_GLF_IDENTITY(uvec2((buf[virtual_gid]), 1u), ~ (~ (uvec2((buf[virtual_gid]), 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u))) * 1u), 0u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), _GLF_IDENTITY((uint(6u)), ~ (~ ((uint(6u))))) << 0u)))))))))), 0u)))))))))) << 0u))), 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, bool(bvec4((false) && true, true, false, true)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.8)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(float(false))), bool(false)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(subgroup_local_id + 1 < _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) | (uvec2(subgroup_size, 0u))))), _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_size)) / 2), max(_GLF_IDENTITY((subgroup_size / 2), 0u ^ ((_GLF_IDENTITY(subgroup_size / 2, max(subgroup_size / 2, subgroup_size / 2))))), _GLF_IDENTITY((subgroup_size / 2), (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) : (subgroup_size / 2))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       switch(_GLF_IDENTITY(_GLF_SWITCH(0), (_GLF_SWITCH(0)) - 0))
        {
         case 67:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         for(int _injected_loop_counter = (63162 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             next_virtual_gid;
            }
           else
            {
            }
          }
         case 0:
         case 47:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))) && true))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           return;
          }
         case 12:
         case 45:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
          return;
         case 35:
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 << _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             return;
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (68936 & 0)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               return;
              }
            }
           else
            {
            }
          }
         case 44:
         case 62:
         case 57:
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         case 41:
         if(_GLF_DEAD(false))
          return;
         case 34:
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (true ? 4 : _GLF_FUZZED(83047))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
                return;
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         case 53:
         ;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               return;
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) * 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (12 & 0)); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-26.18) : injectionSwitch.y))) - 0.0), injectionSwitch.y))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              barrier();
             continue;
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             return;
            }
          }
         default:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.9), _GLF_FUZZED(-4464.0083)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))).y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           return;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           continue;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * exp(0.0)) > injectionSwitch.y))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))) && true))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (false)))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.3)), bool(false))) : _GLF_FUZZED(-1.5))) > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       break;
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         return;
                        }
                      }
                     else
                      {
                      }
                     1;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       break;
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true))))), false))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false), true))))), false))), false)), true))))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    continue;
                   return;
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-47022) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(12097) : int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false)))))))
      break;
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))), false || (bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true))))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))), false || (bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true))))))))))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 | 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
}
