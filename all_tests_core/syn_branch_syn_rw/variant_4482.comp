#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 vec2 _f0;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 uint subgroup_id;
 _GLF_struct_1 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))));
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))) || _GLF_IDENTITY(false, false || (false)))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
    }
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(ivec4(1), gl_SubgroupID, _GLF_struct_1(ivec2(1), _GLF_struct_0(vec2(1.0))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)).y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, false))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || false))))
        return;
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], 0u | (gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], 0u | (gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x))), ~ (~ (uint(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], 0u | (gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x)))))), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], 0u | (gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x))), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize[1], 0u | (gl_WorkGroupSize[1])), gl_WorkGroupSize[2])).x))))) : _GLF_FUZZED(subgroup_size)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) / 1u), (true ? workgroup_size * workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) >> 0u), clamp(_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) - 0u), ~ (workgroup_size), _GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) | (~ (workgroup_size))))))))));
 uint subgroup_base = subgroup_size * _GLF_struct_replacement_2.subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-532.992)), vec2(_GLF_FUZZED(9.5), (injectionSwitch)[1]), bvec2(false, true))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y : _GLF_FUZZED(_GLF_IDENTITY(9.4, (9.4) / 1.0))))))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(0u ^ (subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_base), (_GLF_IDENTITY((subgroup_base), (true ? _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)), (_GLF_IDENTITY(((subgroup_base)), uint(uvec2(((subgroup_base)), 0u)))) - 0u) | ((subgroup_base))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u))))) >> 0u), (_GLF_IDENTITY(0u ^ (subgroup_base), uint(uint(0u ^ (subgroup_base))))) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_base), ~ (~ (_GLF_IDENTITY(0u ^ (subgroup_base), clamp(0u ^ (subgroup_base), _GLF_IDENTITY(0u ^ (subgroup_base), (0u ^ (subgroup_base)) - 0u), 0u ^ (subgroup_base)))))), (_GLF_IDENTITY(0u ^ (subgroup_base), uint(uint(0u ^ (subgroup_base))))) >> 0u))) / 1u) >> 0u)), _GLF_IDENTITY(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base), ~ (~ ((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)))))), max((_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base), ~ (~ ((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)))))), (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base), ~ (~ ((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)))))))), _GLF_IDENTITY((0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : subgroup_base)), min(subgroup_base, subgroup_base))))) | (workgroup_base + subgroup_base)))) + 0u, max(_GLF_IDENTITY((0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base)))), min((0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base)))), (0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base)))))) + 0u, _GLF_IDENTITY((0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), ((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)))))) | (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), min((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, 0u ^ (workgroup_base + subgroup_base)))))) + 0u, max((0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), ((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(8u), uint(8u)))) | (workgroup_base + subgroup_base)))) + 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base))), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base))), min(0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base))), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base)))))) | (0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base)), (false ? _GLF_FUZZED(149725u) : _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(workgroup_id))), subgroup_base))))))))), (true ? _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base))), 0u ^ (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), min((workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))) | (workgroup_base + subgroup_base))), ~ (~ (0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (workgroup_base + subgroup_base)))))))) : _GLF_FUZZED(subgroup_base)))) + 0u)))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) + 0u) % subgroup_size);
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uint(buf[virtual_gid]), (_GLF_IDENTITY(uint(buf[virtual_gid]), (uint(buf[virtual_gid])) / 1u)) | (uint(buf[virtual_gid]))))), 4, 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false)))))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(subgroup_local_id + 1 < (subgroup_size / 2))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))), false, false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), false, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), true), false, true)), false, false)))))), _GLF_IDENTITY(bool(bvec3(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(875.486) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0)), (vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0))) / vec2(1.0, 1.0))).y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), false, false)))))), true, true)), (_GLF_IDENTITY(bool(bvec3(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(875.486) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0)), (vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0))) / vec2(1.0, 1.0))).y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), false, false)))))), true, true)), bool(bvec2(bool(bvec3(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(875.486) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0)), (vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0))) / vec2(1.0, 1.0))).y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), false, false)))))), true, true)), false)))) || false)), true)), (bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true), false, true)), false, false)))))), bool(bvec3(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true), false, true)), false))), _GLF_IDENTITY(false, false || (false)), false)))))), true, true))), true))) && true)))), (bool(bvec2(_GLF_DEAD(false), true))) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, true && (true)))), true)), (bool(bvec2(_GLF_DEAD(false), true))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) && true)), bool(bvec4(! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) && true)), false, true, false)))))) && true)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                continue;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))), ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, bool(bvec2(false, true))), false))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (64)))) | (64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (64) * 1), _GLF_IDENTITY(64, (64) | (64)), 64)), (_GLF_IDENTITY(64, ~ (~ (64)))) | (64))) - 0)) << 0), 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4x2(777.615, 1.0, 5989.4506, 68.07, -5507.6096, 0.1, -5.1, -119.942)) : mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0)))))))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, log(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))))).y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y)) / 1.0)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))))), clamp(_GLF_IDENTITY(((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 0.0)), _GLF_IDENTITY((vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 0.0))) * mat2(1.0), min((vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 0.0))) * mat2(1.0), (vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 0.0))) * mat2(1.0)))))).y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))))), _GLF_IDENTITY((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3)))))) - (-66129 & 0), max(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))), (true ? (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))) : _GLF_FUZZED(-51145))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))), (true ? _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))) : _GLF_FUZZED((_injected_loop_counter))))))), 0 | (_GLF_IDENTITY(((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))), (true ? (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))) : _GLF_FUZZED(-51145))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))), (true ? _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))) : _GLF_FUZZED((_injected_loop_counter))))))), (((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))), (true ? (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))) : _GLF_FUZZED(-51145))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))), (true ? _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))) : _GLF_FUZZED((_injected_loop_counter)))))))) | (((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))), (true ? (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> _GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(3), max(int(3), int(3))))) : _GLF_FUZZED(-51145))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))), (true ? _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))) : _GLF_FUZZED((_injected_loop_counter))))))))))) - (-66129 & 0), ~ (~ ((_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))))), 0 | (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3))))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), int(3)))))) - 0)))) - (_GLF_IDENTITY(-66129, ~ (~ (-66129))) & 0)))), _GLF_IDENTITY((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))), (_GLF_IDENTITY((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))), min((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))), _GLF_IDENTITY((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))), ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3))))))) | ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3))))))))))) | (_GLF_IDENTITY((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))), max((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) | 0), int(3), int(3)))))))))) - (-66129 & 0)))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) / 1, 0 ^ ((int(3)) / 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ((int(3))) >> 0) | 0), int(3), int(3))))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3), _GLF_IDENTITY(int(3), 0 + (int(3)))))))))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false))))) ? _GLF_FUZZED(-8.0) : injectionSwitch.x)))))), mix(float(_GLF_FUZZED(float(164981u))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.0) : injectionSwitch.x))))))), bool(true))) > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(mat4x3(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), 1.0, cos(0.0), 0.0, cos(0.0), 0.0, sin(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5101.5378)), bool(false))), _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(4.8))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(-5.4, -33.41, -35.77, -299.594, -2.5, -8.0)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 0.0))))))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))), false, false))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(36.94)), vec2(_GLF_FUZZED((-7.0 / 759.035)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y))))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true && ((_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false)))) || false)))), true))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / round(length(normalize(1.0))))) | ((int(2)))) | (int(2))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2))))))), ! (! (_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 ^ (int(2))), _GLF_IDENTITY(clamp(int(2), int(2), int(2)), max(clamp(int(_GLF_IDENTITY(2, (2) ^ 0)), int(2), int(2)), clamp(int(2), int(2), int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2))))))))))), (_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2)))))) || false), true, true, false)), false || (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) + 0)))), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | (int(2))))), (_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((int(2)))) | _GLF_IDENTITY((int(2)), max(_GLF_IDENTITY((int(2)), ((int(2))) ^ 0), (int(2)))))))) || false), true, true, false)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       subgroupBarrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)) && true)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) >> 0u)) - _GLF_IDENTITY(0u, min(0u, 0u))), 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) >> 0))), 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) - sin(vec2(0.0, 0.0)))).y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(39104) : _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(39104) : _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(39104) : _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))) : _GLF_FUZZED(_injected_loop_counter)))) << 0)) << 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
}
