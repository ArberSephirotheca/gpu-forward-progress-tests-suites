#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(8614.7871) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8022.4422, (false ? _GLF_FUZZED(9.0) : -8022.4422)))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8022.4422, (true ? -8022.4422 : _GLF_FUZZED(36.92))))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))) : _GLF_FUZZED(314.986)))))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), (vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))) - vec2(0.0, 0.0))), injectionSwitch), (true ? min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch) : _GLF_FUZZED(injectionSwitch)))).x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-126.427))), injectionSwitch.x)), int(ivec3(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, (0 | 0))))) >> 0))), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))), true))))))))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u) | (gl_NumWorkGroups)).x, uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), true, false, false)), (bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), true, false, false))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), _GLF_IDENTITY(1u, max(1u, 1u)), 0u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))), clamp((_GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u)))))), 1u * ((_GLF_IDENTITY(uint(2u), uint(2u))))))) >> 0u)) | 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), clamp(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, clamp((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u)))))))), (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))), clamp((_GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u)))))), 1u * ((_GLF_IDENTITY(uint(2u), uint(2u))))))) >> 0u)) | 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), clamp(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, clamp((_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u))))) * _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u + (1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), 0u + (uint(2u))), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u))))))))) | (_GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (2u) - 0u)), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))), clamp((_GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, min(_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(subgroup_local_id))), 2u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u))))))), _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u)))))))), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))), ((_GLF_IDENTITY(uint(2u), uint(2u)))) | (0u | 0u)))))) >> 0u)) | 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), max(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(2u)), uint(uvec2(uint(uint(2u)), 0u)))), 0u + (uint(_GLF_IDENTITY(uint(uint(2u)), uint(uvec2(uint(uint(2u)), 0u))))))))) * 1u, clamp((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u)))))))), (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))), clamp((_GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u)))))), 1u * ((_GLF_IDENTITY(uint(2u), uint(2u))))))) >> 0u)) | 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(2u, max(2u, 2u)))))), clamp(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, clamp((_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u, (_GLF_IDENTITY(uint(2u), uint(2u))) * 1u))))))))) + 0u)))), (uvec4(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), _GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(max(1u, 1u), 0u | (max(1u, 1u)))), (~ (_GLF_IDENTITY(max(1u, 1u), 0u | (max(1u, 1u))))) | (~ (_GLF_IDENTITY(max(1u, 1u), 0u | (max(1u, 1u))))))))), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) | 0u)), ~ (~ ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2u, clamp(2u, _GLF_IDENTITY(2u, uint(_GLF_IDENTITY(uvec3(2u, 1u, 1u), (true ? uvec3(2u, 1u, 1u) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(151801u, 103159u, 155166u)), (true ? _GLF_FUZZED(uvec3(151801u, 103159u, 155166u)) : _GLF_FUZZED(uvec3(137486u, 30727u, 119731u)))))))), 2u)), (2u) ^ 0u)), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) | 0u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u)))))) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(uvec2(min(subgroup_local_id, subgroup_local_id), 1u)))), (subgroup_local_id) >> 0u);
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, subgroup_base, subgroup_base), min(clamp(subgroup_base, subgroup_base, subgroup_base), clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) << 0u), 0u | (subgroup_local_id)) + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) - (_GLF_IDENTITY(535u, uint(uvec3(535u, 1u, 1u))) & 0u)) | (subgroup_size)));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - (31394u & 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - (31394u & 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) - (31394u & 0u)), 0u, 1u))), _GLF_IDENTITY(1u, (1u) - (31394u & 0u)), _GLF_IDENTITY(1u, (1u) - (31394u & 0u)))), 1u)), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(uint(uvec4(buf[virtual_gid], 1u, 1u, 1u)), (uint(uvec4(buf[virtual_gid], 1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))) / 1u)), (false ? _GLF_FUZZED(workgroup_size) : 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(buf[virtual_gid], 1u, 1u, 1u)), _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u))) - 0u)), min((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), 0u + (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))))) >> 0u), 1u, 1u, 1u))), _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u))), ((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u)))) >> 0u)))) * 1u) / 1u)), ~ (~ ((_GLF_IDENTITY(uint(uvec4(buf[virtual_gid], 1u, 1u, 1u)), _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u))) - 0u)), min((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), 0u + (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))))) >> 0u), 1u, 1u, 1u))), _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u))), ((uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) >> 0u), 1u, 1u, 1u)))) >> 0u)))) * 1u) / 1u))))))))), 4, 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY((subgroup_local_id % 2), ~ (~ ((subgroup_local_id % _GLF_IDENTITY(2, (2) + 0))))) == 0)
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec2((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 return;
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false)))))));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) && true))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), false, false))))))));
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | (0 << _GLF_IDENTITY(int(4), int(4)))))), ((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) ^ 0)))), ((_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) ^ 0))))) >> 0) | (0 << _GLF_IDENTITY(int(4), int(4))))))) ^ 0)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))), 0 | (_GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))))), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5))))) | (_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))))) : _GLF_FUZZED(-32463)))) ^ 0), 0 ^ (int(int(5)))))) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), 0, 0)), max(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))), 0 | (_GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))))), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5))))) | (_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))))) : _GLF_FUZZED(-32463)))) ^ 0), 0 ^ (int(int(5)))))) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), 0, 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))), 0 | (_GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))))), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))), (_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5))))) | (_GLF_IDENTITY(int(int(5)), max(int(int(5)), int(int(5)))))) : _GLF_FUZZED(-32463)))) ^ 0), 0 ^ (int(int(5)))))) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), 0, 0)))), clamp(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5))), ~ (~ (_GLF_IDENTITY((5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5))), clamp((5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5))), _GLF_IDENTITY((5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5))), ((5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5)))) - 0), (5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5)))))))))))), 0, 0), min(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), _GLF_IDENTITY(5, (5) | (5)), 5))))))), 0, 0), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, 1 * (5)), (false ? _GLF_FUZZED((-67468 & _injected_loop_counter)) : _GLF_IDENTITY(5, 1 * (5)))), 5, 5))))))), 0, 0)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY(clamp(5, 5, 5), min(_GLF_IDENTITY(clamp(5, 5, 5), min(clamp(5, 5, 5), clamp(5, 5, 5))), clamp(5, 5, 5))))))))), _GLF_IDENTITY(0, (0) / 1), 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - _GLF_IDENTITY(0, min(0, 0))), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) + 0), 5))))))), 0, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), ((int(5))) ^ 0)) - 0), ~ (~ ((int(5))))) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY(clamp(5, _GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 5)), 5), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(_GLF_IDENTITY(5, max(5, 5)), 5, 5) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), (ivec3(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)) | (_GLF_IDENTITY(ivec3(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), (false ? _GLF_FUZZED(ivec3(5663, -25950, 33288)) : ivec3(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))))))))))))), ((_GLF_IDENTITY(1, int(ivec3(1, 1, 1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (1 | 1))), _GLF_IDENTITY(0 ^ (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), 1 * (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) - 0)))))))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (1 | 1)))), (_GLF_IDENTITY(false ? _GLF_FUZZED((~ _injected_loop_counter)) : 0 ^ (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)))))) >> _GLF_IDENTITY(int(3), int(3))), (1 | 1)))), (false ? _GLF_FUZZED(_GLF_IDENTITY((~ _injected_loop_counter), ((~ _injected_loop_counter)) | ((~ _injected_loop_counter)))) : 0 ^ (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, 5, 5)), max(_GLF_IDENTITY(5, clamp(5, 5, 5)), _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, 5, 5)), (_GLF_IDENTITY(5, clamp(5, 5, 5))) << _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) << 0))), max(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))), (1 | 1))))) >> 0)))), ~ (~ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ~ (~ ((int(5))))) - _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) / 1))))), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), min(_GLF_IDENTITY((int(5)), ((int(5))) | 0), (int(5))))) | 0) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY(clamp(5, 5, 5), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(5, 5, 5) : _GLF_FUZZED(_injected_loop_counter))))))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) << 0), int(_GLF_IDENTITY(3, (3) >> _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) ^ 0)))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) ^ 0)))), (1 | 1))), _GLF_IDENTITY(0 ^ (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(ivec3(int(5), 1, 1)))) << (0 << _GLF_IDENTITY(int(8), int(8))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), 1 * (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (1 | 1)))), (_GLF_IDENTITY(false ? _GLF_FUZZED((~ _injected_loop_counter)) : 0 ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) * (1 | 1))), (0 | (0 | 0)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) * (1 | 1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) ^ 0)) << 0), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)), (1 | 1))), (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) * (1 | 1))), (0 | (0 | 0)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), (int(5)) | _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), (_GLF_IDENTITY(((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))), (false ? _GLF_FUZZED(atomicOr(_injected_loop_counter, _injected_loop_counter)) : ((int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))))) >> 0) * (1 | 1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(max(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3))), (max(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (3) << 0), _GLF_IDENTITY(3, 1 * (3)), 3))), int(3)))) * 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)), (1 | 1)))) >> 0)), (false ? _GLF_FUZZED((~ _injected_loop_counter)) : 0 ^ (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) - 0))), 5)))) - _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) - 0)), (int(5)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), ~ (~ (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), ~ (~ (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), ~ (~ (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), ~ (~ (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))), ~ (~ (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))))))))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))))), 1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))), (1 | 1))))) >> 0)))))))))), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (int(5))), (1 ^ (1 ^ 0)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), (int(5)) | (int(5))))))), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) * 1), 1))), ((1)) >> (-67032 & 0))) * _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), min(~ (5), ~ (5)))))) + _GLF_IDENTITY(0, ~ (~ (0))), max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) / 1, ((int(4)) / 1) / 1))))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, _GLF_IDENTITY(~ (~ (5)), (~ (~ (5))) / 1))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (int(4)) / 1)))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ _GLF_IDENTITY((5), ((5)) * 1)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 0 + ((_GLF_IDENTITY(5, ~ (~ (5)))))) : _GLF_FUZZED(_injected_loop_counter))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY(max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0), (max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)) | 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)))), min(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + _GLF_IDENTITY(0, (0) | 0), max((_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ (5)), max((~ (5)), (~ (5)))))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) ^ 0), max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + _GLF_IDENTITY(0, int(ivec3(0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1))))))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))))) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), min((_GLF_IDENTITY(5, ~ (~ (5)))), _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))))))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) - 0))))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))))) ^ 0)), max((_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), min((_GLF_IDENTITY(5, ~ (~ (5)))), _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))))))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) - 0))))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), min((_GLF_IDENTITY(5, ~ (~ (5)))), _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))))))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) - 0))))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))))) ^ 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), min((_GLF_IDENTITY(5, ~ (~ (5)))), _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))))))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) - 0))))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))))) ^ 0)), max((_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), min((_GLF_IDENTITY(5, ~ (~ (5)))), _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))))))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) - 0))))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))))) ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max(_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), min((_GLF_IDENTITY(5, ~ (~ (5)))), _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))), 1 * ((_GLF_IDENTITY(5, ~ (~ (5)))))))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), _GLF_IDENTITY(int(4), (int(4)) / 1)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, _GLF_IDENTITY((_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) - 0))))) + 0, max((_GLF_IDENTITY(5, ~ (~ (5)))) + 0, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0))))) << 0)))), ((int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)))) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))))) ^ 0)))))))))))), _GLF_IDENTITY(int(5), 1 * (int(5))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, max(5, 5))) | (5)))) - 0), _GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), ~ (~ (~ (int(5)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (int(5)))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | (5)), 5, _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) / 1), 5)), max(_GLF_IDENTITY(5, max(5, 5)), 5)))), max(_GLF_IDENTITY(5, _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, (5) | (5)), 5, _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) / 1), 5)), max(_GLF_IDENTITY(5, max(5, 5)), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 1, 1), ivec3(0, 0, 0) ^ (ivec3(5, 1, 1)))))))), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(5, (5) | (5)), 5, _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) / 1), 5)), max(_GLF_IDENTITY(5, max(5, 5)), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(5, 1, 1), ivec3(0, 0, 0) ^ (ivec3(5, 1, 1)))))))), (clamp(_GLF_IDENTITY(5, (5) | (5)), 5, _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) / 1), 5)), max(_GLF_IDENTITY(5, max(5, 5)), _GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(5, 1, 1), ivec3(0, 0, 0) ^ (ivec3(5, 1, 1)))), (int(_GLF_IDENTITY(ivec3(5, 1, 1), ivec3(0, 0, 0) ^ (ivec3(5, 1, 1))))) | (int(_GLF_IDENTITY(ivec3(5, 1, 1), ivec3(0, 0, 0) ^ (ivec3(5, 1, 1))))))))))) / 1))))), _GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | (5)), 5, _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, (5) / 1), 5)), max(_GLF_IDENTITY(5, max(5, 5)), 5)))))), (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))))))), true && (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), (~ (_GLF_IDENTITY(5, 1 * (5)))) / 1), ~ (_GLF_IDENTITY(5, 1 * (5))))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), (~ (_GLF_IDENTITY(5, 1 * (5)))) / 1), ~ (_GLF_IDENTITY(5, 1 * (5))))))), 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), min(ivec3(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), (~ (_GLF_IDENTITY(5, 1 * (5)))) / 1), ~ (_GLF_IDENTITY(5, 1 * (5))))))), 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), ivec3(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 1 * (5))), (~ (_GLF_IDENTITY(5, 1 * (5)))) / 1), ~ (_GLF_IDENTITY(5, 1 * (5))))))), 1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)))))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))) >> 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), _GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(_GLF_IDENTITY(5, (0 | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) * (5)), clamp(5, 5, 5)))))), _GLF_IDENTITY(0 + (_GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec2(5, 1)))) >> 0)))))) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) >> (0 | 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 + (_GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) >> (0 | _GLF_IDENTITY(0, (0) | 0))))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), _GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), 0 + ((5))) | (_GLF_IDENTITY(_GLF_IDENTITY(5, (0 | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) * (5)), clamp(5, 5, 5)))))), _GLF_IDENTITY(0 + (_GLF_IDENTITY(_GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) >> (0 | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ~ (~ ((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))))), ((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) >> (0 | 0)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) - 0) + (_GLF_IDENTITY((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5)))))), ((int(5)) | (int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, clamp(5, 5, 5))))))) >> (0 | 0))))))))) >> (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))))))))); _injected_loop_counter ++)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             break;
                            }
                           if(_GLF_DEAD(false))
                            break;
                           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (true ? _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(4, 0, 0)), int(_GLF_IDENTITY(int(int(ivec3(4, 0, 0))), min(int(int(ivec3(4, 0, 0))), int(int(ivec3(4, 0, 0))))))))) * 1)) | _GLF_IDENTITY((4), ((4)) << 0)))) : _GLF_FUZZED(abs(_injected_loop_counter))))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (true ? _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(4, 0, 0)), int(_GLF_IDENTITY(int(int(ivec3(4, 0, 0))), min(int(int(ivec3(4, 0, 0))), int(int(ivec3(4, 0, 0))))))))) * 1)) | _GLF_IDENTITY((4), ((4)) << 0)))) : _GLF_FUZZED(abs(_injected_loop_counter)))))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                               break;
                              }
                             if(_GLF_DEAD(false))
                              break;
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), bool(bool(! (_injected_loop_counter != 1))))))); _injected_loop_counter ++)
                {
                 return;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))) && (_GLF_DEAD(false))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ (0 ^ 1)) | (1 & 1))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false))))))
      {
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | 0)) | ((4))) >> 0), 4, 4)));
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(~ (~ ((0))), (~ (~ ((_GLF_IDENTITY(0, max(0, 0)))))) / 1)) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & 1), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(uvec3(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u + (0u)), 0u)))))], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
