#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_26 {
 bvec3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_25 {
 ivec2 _f0;
} ;

struct _GLF_struct_27 {
 uvec2 _f0;
 mat3x4 _f1;
 ivec4 _f2;
 vec2 _f3;
 ivec3 _f4;
 _GLF_struct_25 _f5;
 _GLF_struct_26 _f6;
 uint workgroup_id;
} ;

struct _GLF_struct_28 {
 _GLF_struct_27 _f0;
} ;

struct _GLF_struct_23 {
 mat3x2 _f0;
 ivec2 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_21 {
 bool _f0;
 vec4 _f1;
 mat4x2 _f2;
 mat4x3 _f3;
 vec3 _f4;
 mat4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_20 {
 vec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_19 {
 float _f0;
 mat2 _f1;
 mat3x4 _f2;
 bvec3 _f3;
 uvec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_18 {
 int _f0;
 mat3 _f1;
 float _f2;
 mat2x3 _f3;
 uvec2 _f4;
 bvec2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_22 {
 _GLF_struct_18 _f0;
 mat4x3 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_24 {
 mat4 _f0;
 mat3 _f1;
 uint subgroup_local_id;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 uint _f1;
 ivec3 _f2;
 uvec3 _f3;
 bvec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 vec2 _f1;
 mat4x2 _f2;
 float _f3;
 uvec4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_13 {
 int _f0;
 mat3x4 _f1;
 vec3 _f2;
 ivec4 _f3;
 mat2x3 _f4;
 ivec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_12 {
 uint _f0;
 bool _f1;
 mat3x2 _f2;
 bvec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 mat3x4 _f1;
 bool _f2;
 ivec4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
} ;

struct _GLF_struct_9 {
 uint _f0;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
} ;

struct _GLF_struct_7 {
 int _f0;
 bvec2 _f1;
 vec4 _f2;
 ivec2 _f3;
 mat4x2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_6 {
 float _f0;
 mat3x2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 mat2x4 _f1;
 uvec2 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 mat3 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_4 {
 bool _f0;
 uint virtual_gid;
 mat2x4 _f1;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 mat3x4 _f1;
 bool _f2;
 ivec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
 int _f3;
} ;

struct _GLF_struct_0 {
 uint _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 mat2x4 _f3;
 _GLF_struct_2 _f4;
 ivec4 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_10 _f2;
 vec2 _f3;
 _GLF_struct_16 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))))), bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)) || false))))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, false || (false)), true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))))) && (bool(bvec3(false, false, true))))), (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))))) && (bool(bvec3(false, false, true))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))))) && (bool(bvec3(false, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2((_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))))) && (bool(bvec3(false, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))))))))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false))), true, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(mat4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 1.0, 1.0, 1.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(mat3(387.178, 36.26, -7125.1293, 2.3, 6591.2774, 694.860, 2.4, -2.6, 305.005)) : mat3(1.0))), gl_SubgroupInvocationID, _GLF_struct_22(_GLF_struct_18(1, mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), clamp(_GLF_IDENTITY((1.0), (_GLF_IDENTITY((1.0), max((1.0), (1.0)))) / 1.0), (1.0), _GLF_IDENTITY((1.0), (_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) / 1.0)), max((1.0), (_GLF_IDENTITY(1.0, exp(0.0) * (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))), 1.0)))))))) + sqrt(0.0)))) * 1.0), 1.0) : _GLF_FUZZED(-5.2))))), 1.0, mat2x3(1.0), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) / (uvec2(1u, 1u) & uvec2(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u + (1u))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(1u, 0u + (1u))), ~ (~ ((_GLF_IDENTITY(1u, 0u + (1u))))))))) | (1u))))), bvec2(true), vec3(1.0)), mat4x3(_GLF_IDENTITY(1.0, 0.0 + (1.0))), _GLF_struct_19(1.0, mat2(1.0), mat3x4(1.0), bvec3(true), uvec3(1u), mat4(1.0)), _GLF_struct_20(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0)))), min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(exp(vec3(0.0, 0.0, 0.0)), mix(vec3(_GLF_FUZZED(14.93), _GLF_FUZZED((3.6)), _GLF_FUZZED((- 6329.7427))), vec3((exp(vec3(0.0, 0.0, 0.0)))[0], _GLF_IDENTITY((exp(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8790.7298)), bool(false))))))[1], ((exp(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8790.7298)), bool(false))))))[1]) - _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))) - 0.0))), (exp(vec3(0.0, 0.0, 0.0)))[2]), bvec3(true, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))))))) * (vec3(1.0))))), bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false)))))))), _GLF_struct_21(_GLF_IDENTITY(true, ! (! (true))), vec4(1.0), mat4x2(1.0), mat4x3(1.0), vec3(1.0), mat4(1.0), uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(packUnorm2x16(injectionSwitch)) : 1u))))), _GLF_struct_23(mat3x2(1.0), ivec2(1), mat3x2(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = _GLF_struct_replacement_24.subgroup_local_id;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))))))));
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) > (_GLF_IDENTITY(0 | 0, (true ? _GLF_IDENTITY(0 | 0, max(_GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) | 0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) | 0, (0 | 0) | (0 | 0)))) : _GLF_FUZZED(ivec2(49504, -49945).s))))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-49.98) : float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0)))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.0))), injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4808.5307, -5774.5642)))).x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, ~ (~ (0)))], injectionSwitch[1])).y))))), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), true, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true))))))), ! (! ((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true))))))))))))) || false))))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))), _GLF_IDENTITY((bool(_GLF_DEAD(false))), ((bool(_GLF_DEAD(false)))) || _GLF_IDENTITY(false, true && (false))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false, true))))), false || (bool(bvec3(false, true, true)))))) || false))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))) || false))), ! (! _GLF_IDENTITY(((bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)))), (_GLF_IDENTITY(((bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))))))) && true)))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)) || false), true && (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), true, true), false)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), true, true), false))))))))), (bool(bvec2(_GLF_DEAD(false), false))) && true)) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))
            barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) - 0.0)))))
  {
  }
 else
  {
   GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true)), _GLF_IDENTITY(false || (bool(bvec2(bool(bool(false)), true))), (false || (bool(bvec2(bool(bool(false)), true)))) || false)))), bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true)), _GLF_IDENTITY(false || (bool(bvec2(bool(bool(false)), true))), (false || (bool(bvec2(bool(bool(false)), true)))) || false)))), bool(bool(false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(determinant(mat2(-6.6, 80.11, -7076.4924, -18.60))), (false ? _GLF_FUZZED(degrees(-3.7)) : _GLF_FUZZED(determinant(mat2(-6.6, 80.11, -7076.4924, -18.60))))))) > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_27(uvec2(1u), mat3x4(1.0), ivec4(1), vec2(1.0), ivec3(1), _GLF_struct_25(ivec2(1)), _GLF_struct_26(bvec3(true), _GLF_IDENTITY(ivec4(1), ivec4(_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(98619))), 0, 0, 0) | _GLF_IDENTITY((ivec4(1)), ((ivec4(1))) | ivec4(0, 0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(_GLF_IDENTITY(42246u, clamp(42246u, 42246u, 42246u))) : _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) | (1u))))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(42246u) : 1u))))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(42246u) : 1u))))).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (false ? _GLF_FUZZED(42246u) : 1u))))).x, uint(uint(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(42246u) : 1u))))).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))))), uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(42246u) : 1u))))).x, 0u ^ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(42246u) : 1u))))).x))))));
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) * 1.0), injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)))))), float(_GLF_FUZZED(-1257.6920)), bool(false))))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), false || (! (false)))), false || (bool(_GLF_IDENTITY(! (false), false || (! (false)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), false || (! (false)))), false || (bool(_GLF_IDENTITY(! (false), false || (! (false)))))))))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), false || (! (false)))), false || (bool(_GLF_IDENTITY(! (false), false || (! (false))))))))))))))), (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_28._f0.workgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_28._f0.workgroup_id, min(_GLF_struct_replacement_28._f0.workgroup_id, _GLF_struct_replacement_28._f0.workgroup_id))) >> 0u), (true ? _GLF_struct_replacement_28._f0.workgroup_id : _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool((false))))), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && (false)), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(false, true && (false)), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool((false))))), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && (false)), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(false, true && (false)), true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))), false))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))) + determinant(mat4(sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0))))))), true, true)), bool(bvec4(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))) + determinant(mat4(sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0))))))), true, true)), true, true, true)))) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))), false, true)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))) && _GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true), false, true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = _GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))) - 0u);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_3(bvec3(true), _GLF_struct_0(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ((1u)) * 1u), _GLF_IDENTITY((1u), uint(uvec2((1u), 0u))), _GLF_IDENTITY((1u), ~ (~ ((1u)))))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).x))), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false)))), _GLF_struct_1(uvec2(1u), mat3x2(1.0), mat2x3(1.0), 1), mat2x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))))), _GLF_struct_2(mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.7) : 1.0))), mat3x4(1.0), true, ivec2(1), mat4x2(1.0)), ivec4(1), vec2(1.0)), _GLF_struct_5(ivec4(1), _GLF_struct_4(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, false || (true))))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_id * subgroup_size, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_id * subgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_id * subgroup_size, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_id * subgroup_size, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_id * subgroup_size)))) + _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)), mat2x4(1.0))), _GLF_struct_10(_GLF_struct_6(1.0, mat3x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-0.6) : 1.0))), ivec2(1)), mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), min(1.0 * (1.0), 1.0 * (1.0))))), uvec2(1u), _GLF_struct_7(1, bvec2(_GLF_IDENTITY(true, ! (! (true)))), vec4(1.0), ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? 1 : _GLF_FUZZED(-98573))), 1), min(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? 1 : _GLF_FUZZED(-98573))), 1), int(ivec2(min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? 1 : _GLF_FUZZED(-98573))), 1), 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? 1 : _GLF_FUZZED(-98573))), 1))))), mat4x2(1.0), mat2x4(1.0)), _GLF_struct_8(mat4(1.0)), mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-341.090, mix(float(_GLF_FUZZED(-2813.1381)), float(_GLF_IDENTITY(-341.090, 1.0 * (_GLF_IDENTITY(-341.090, (-341.090) + 0.0)))), bool(true))), clamp(-341.090, _GLF_IDENTITY(_GLF_IDENTITY(-341.090, (true ? -341.090 : _GLF_FUZZED(5.1))), 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(-338.590)), bool(false))) + (-341.090)), -341.090))) - log(1.0))))) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-345.818)), float(1.0), bool(true)))), float(_GLF_FUZZED(3.7)), bool(false))), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))) + (vec3(abs(0.0), 1.0, sin(0.0)))), _GLF_IDENTITY(vec3(0.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0), max(vec3(0.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0), vec3(0.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0))))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), _GLF_IDENTITY(dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), clamp(_GLF_IDENTITY(dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), (dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))) - 0.0), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), float(mat3((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-345.818)), float(1.0), bool(true)))), float(_GLF_FUZZED(3.7)), bool(false))), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))) + (vec3(abs(0.0), 1.0, sin(0.0)))), _GLF_IDENTITY(vec3(0.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0), max(vec3(0.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0), vec3(0.0, cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), min(mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0))))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), _GLF_IDENTITY(dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), clamp(_GLF_IDENTITY(dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), (dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))) - 0.0), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), 1.0, sqrt(0.0), cos(0.0), 0.0, 0.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, 1.0, sqrt(0.0), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0))), (mat3x4(1.0, 1.0, 1.0, sqrt(0.0), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)))) * mat3(1.0))))))))), min((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, _GLF_IDENTITY(0.0 + (-341.090), min(0.0 + (-341.090), 0.0 + (-341.090)))), _GLF_IDENTITY(-341.090, max(_GLF_IDENTITY(-341.090, max(-341.090, -341.090)), -341.090)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)))), _GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090))))))) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7))), min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))) + 0.0))))), mix(float(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.6)), bool(false))), _GLF_IDENTITY(0.0, (0.0) / 1.0)))) * 1.0))), dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), (vec3(abs(0.0), 1.0, sin(0.0))) + vec3(0.0, 0.0, 0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, _GLF_IDENTITY(cos(0.0), float(mat3x4(_GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0))), 0.0)), dot(_GLF_IDENTITY(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), min(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)))), _GLF_IDENTITY(vec3(0.0, cos(0.0), 0.0), min(_GLF_IDENTITY(vec3(0.0, cos(0.0), 0.0), max(vec3(0.0, cos(0.0), 0.0), _GLF_IDENTITY(vec3(0.0, cos(0.0), 0.0), vec3(mat3x2(vec3(0.0, cos(0.0), 0.0), 1.0, 1.0, 0.0))))), vec3(0.0, cos(0.0), 0.0))))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 1.0))), 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(-394.319)), bool(false))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0 + (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, _GLF_IDENTITY(0.0 + (-341.090), min(0.0 + (-341.090), 0.0 + (-341.090)))), _GLF_IDENTITY(-341.090, max(_GLF_IDENTITY(-341.090, max(-341.090, -341.090)), -341.090)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)))), _GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(1.0) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090))))))) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7))), min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))) + 0.0))))), mix(float(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.6)), bool(false))), _GLF_IDENTITY(0.0, (0.0) / 1.0)))) * 1.0))), dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), (vec3(abs(0.0), 1.0, sin(0.0))) + vec3(0.0, 0.0, 0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, _GLF_IDENTITY(cos(0.0), float(mat3x4(_GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0))), 0.0)), dot(_GLF_IDENTITY(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), min(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)))), _GLF_IDENTITY(vec3(0.0, cos(0.0), 0.0), min(_GLF_IDENTITY(vec3(0.0, cos(0.0), 0.0), max(vec3(0.0, cos(0.0), 0.0), _GLF_IDENTITY(vec3(0.0, cos(0.0), 0.0), vec3(mat3x2(vec3(0.0, cos(0.0), 0.0), 1.0, 1.0, 0.0))))), vec3(0.0, cos(0.0), 0.0))))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 1.0))), 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(-394.319)), bool(false))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-341.090, clamp(_GLF_IDENTITY(-341.090, max(-341.090, -341.090)), _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090)), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))) * (_GLF_IDENTITY(-341.090, clamp(-341.090, _GLF_IDENTITY(-341.090, 0.0 + (-341.090)), -341.090))))) : _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3.1), clamp(_GLF_FUZZED(3.1), _GLF_IDENTITY(_GLF_FUZZED(3.1), min(_GLF_FUZZED(3.1), _GLF_FUZZED(3.1))), _GLF_IDENTITY(_GLF_FUZZED(3.1), (true ? _GLF_FUZZED(3.1) : _GLF_FUZZED(567.601)))))), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED((90.26 - 4925.3286)))), sin(0.0)), vec3(0.0, cos(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3666.2140)))) - 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0))), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), clamp(max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3.1), clamp(_GLF_FUZZED(3.1), _GLF_IDENTITY(_GLF_FUZZED(3.1), min(_GLF_FUZZED(3.1), _GLF_FUZZED(3.1))), _GLF_IDENTITY(_GLF_FUZZED(3.1), (true ? _GLF_FUZZED(3.1) : _GLF_FUZZED(567.601)))))), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED((90.26 - 4925.3286)))), sin(0.0)), vec3(0.0, cos(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3666.2140)))) - 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0))), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3.1), clamp(_GLF_FUZZED(3.1), _GLF_IDENTITY(_GLF_FUZZED(3.1), min(_GLF_FUZZED(3.1), _GLF_FUZZED(3.1))), _GLF_IDENTITY(_GLF_FUZZED(3.1), (true ? _GLF_FUZZED(3.1) : _GLF_FUZZED(567.601)))))), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED((90.26 - 4925.3286)))), sin(0.0)), vec3(0.0, cos(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3666.2140)))) - 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0))), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.7)))) - _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 0.0) + (vec3(abs(0.0), 1.0, sin(0.0)))), vec3(0.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3.1), clamp(_GLF_FUZZED(3.1), _GLF_IDENTITY(_GLF_FUZZED(3.1), min(_GLF_FUZZED(3.1), _GLF_FUZZED(3.1))), _GLF_IDENTITY(_GLF_FUZZED(3.1), (true ? _GLF_FUZZED(3.1) : _GLF_FUZZED(567.601)))))), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), float(mat4x3(float(mat4x3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(abs(0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED((90.26 - 4925.3286)))), sin(0.0)), vec3(0.0, cos(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3666.2140)))) - 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0))), dot(vec3(abs(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, sin(0.0)), vec3(0.0, cos(0.0), 0.0))), 1.0, 0.0, tan(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, log(1.0))), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))))))), _GLF_struct_9(1u)), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-38.38)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(-38.38)), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))))) / round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 1.0), (clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-38.38)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(-38.38)), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))))) / round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 1.0)) / 1.0))), _GLF_struct_16(_GLF_struct_11(ivec2(1), mat3x4(1.0), true, ivec4(1), mat4x3(1.0)), _GLF_struct_12(1u, true, mat3x2(1.0), bvec4(true), true), _GLF_struct_13(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-40644) : 1)), mat3x4(1.0), vec3(1.0), ivec4(1), mat2x3(1.0), ivec4(1), vec3(1.0)), _GLF_struct_14(mat2(1.0), vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), mat4x2(1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), (_GLF_IDENTITY(max((1.0), (1.0)), (true ? max(_GLF_IDENTITY((1.0), min((1.0), _GLF_IDENTITY((1.0), _GLF_IDENTITY(((1.0)), (((1.0))) / 1.0) * 1.0))), (1.0)) : _GLF_FUZZED(-554.966)))) / 1.0)) * 1.0), uvec4(1u), mat3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), _GLF_struct_15(mat2x3(1.0), 1u, _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, min(1, 1))), (true ? ivec3(1) : _GLF_FUZZED((-95887 ^ ivec3(_GLF_IDENTITY(77371, (77371) + 0), -61851, 65241))))), uvec3(1u), bvec2(true), mat4x3(1.0))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(7), int(7))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || ((false)))) || false)))))), (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8496.4206) : injectionSwitch.x))) / 1.0) < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), clamp(float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y))))));
                  }
                }
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
         barrier();
        }
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)), (bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(37.16) : injectionSwitch.y)), (injectionSwitch.x < injectionSwitch.y) && true))) || false)))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true)))))))
            {
             GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = _GLF_struct_replacement_17._f1._f1.virtual_gid;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7985.4664)), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, 0 | (0)))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(7, 7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))))) + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, clamp(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, (false ? _GLF_FUZZED((uvec3(180626u, 10441u, 108931u) + 22920u)[0]) : GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)), _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) : GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))) - (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), injectionSwitch.y)), _GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), uvec2(0u, 0u))))) | (_GLF_IDENTITY(uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), max(uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (uvec2(uvec2(_GLF_IDENTITY(uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), max(uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))) << uvec2(0u, 0u))))))).x, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) / uvec2(1u, 1u)).x)) + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(((53818 - _GLF_IDENTITY(-65246, min(-65246, -65246))) & 0), clamp(((53818 - -65246) & 0), ((_GLF_IDENTITY(53818, (53818) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) - -65246) & _GLF_IDENTITY(0, int(ivec4(0, 1, 1, (1 & 1))))), ((53818 - -65246) & 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(true, false || (true)), true))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(int(6), int(6)))))) | 0) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) | (_injected_loop_counter)), (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 | 1), (_GLF_IDENTITY((1 | 1), min(_GLF_IDENTITY((1 | 1), 0 | ((_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(true, (true) || false) ? 1 | 1 : _GLF_FUZZED(_injected_loop_counter)))))), (1 | 1)))) | ((1 | 1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) << 0)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
          {
          }
         else
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u)], uint(1), 4, 64, _GLF_IDENTITY(4, (4) / 1));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 & 69332); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 & _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(7869)))) ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))) && true))), false)))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))
        {
         barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), clamp((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), 0 + ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), clamp((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), 0 + ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), clamp((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), 0 + ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), clamp((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), 0 + ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED((~ _injected_loop_counter)) : _injected_loop_counter)) != _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, max(0, 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) ^ 0u) + 1 < subgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + _GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, log(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, log(1.0)))))))))), true && (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, log(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, log(1.0)))))))))), true && (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)), (bool(bvec3(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, log(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, log(1.0)))))))))), true && (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true))) && true)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))))) ? _GLF_IDENTITY(_GLF_FUZZED(-6631), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-6631), (_GLF_FUZZED(-6631)) >> 0), clamp(_GLF_IDENTITY(_GLF_FUZZED(-6631), (_GLF_FUZZED(-6631)) >> 0), _GLF_IDENTITY(_GLF_FUZZED(-6631), (_GLF_FUZZED(-6631)) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-6631), (_GLF_FUZZED(-6631)) >> 0), min(_GLF_IDENTITY(_GLF_FUZZED(-6631), (_GLF_FUZZED(-6631)) >> 0), _GLF_IDENTITY(_GLF_FUZZED(-6631), (_GLF_FUZZED(-6631)) >> 0))))), 0, 1))) : 1)) < subgroup_size), true && ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-6631) : _GLF_IDENTITY(1, max(1, 1)))) < subgroup_size))) || false))
      {
       int i = 0;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.7)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-9.9 / -9666.0399))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(true)))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(51.63)), float(0.0), bool(true)))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(281.045)), bvec2(true, false))), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), min(vec2(mat4(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), vec2(mat4(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) + (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), 1, 1))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))) + uvec2(0u, 0u)).x, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, 0u)), (uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, 0u))) | (uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, 0u))))))))], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), clamp(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, (4) | 0))));
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ ((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, clamp(1, 1, 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, clamp(1, 1, 1))) | 0))), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), 0 | (~ (1)))) * 1))))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(0 | (int(1)), _GLF_IDENTITY(int(ivec3(0 | (_GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), max(int(1), int(1))))))), 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-47294) : 1)))), 1 * (int(_GLF_IDENTITY(ivec3(0 | (int(1)), 1, 1), ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(0 | (int(1)), 1, 1), ivec3(ivec4(ivec3(0 | (int(1)), 1, 1), 1))))))))), (true ? _GLF_IDENTITY(0 | (int(1)), _GLF_IDENTITY(int(ivec3(0 | (int(1)), 1, 1)), 1 * (int(ivec3(0 | (_GLF_IDENTITY(int(1), max(int(1), int(1)))), 1, 1))))) : _GLF_FUZZED(_injected_loop_counter)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> (0 << _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(int(1), int(1))) | 0)))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(54.00)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++))) + 0))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 1, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != 1, false), bvec2(bvec4(bvec2(_injected_loop_counter != 1, false), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != 1, false), bvec2(bvec4(bvec2(_injected_loop_counter != 1, false), true, false))), false), true)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)), min(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)))), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) + uvec2(0u, 0u)))).x)))], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * (0 ^ 1)), _GLF_IDENTITY((4) + _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-52788) : _GLF_IDENTITY(0, (0) / 1))), ((4) + _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(-52788, max(-52788, -52788))) : _GLF_IDENTITY(0, (0) / 1)))) << (_GLF_IDENTITY(0 | 0, (0 | 0) + 0)))), _GLF_IDENTITY(64, (64) | 0), 4);
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
}
