#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(num_workgroup, min(num_workgroup, num_workgroup)), (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.y = num_workgroup) - 0u);
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))) + (injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w = workgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7.5) : injectionSwitch.y)), injectionSwitch.y))))))
      {
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_base = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z * subgroup_id;
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(1u * (subgroup_base), 0u ^ (1u * (subgroup_base)))))), _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (subgroup_base)))) + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(48846) : _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++))))))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x = next_virtual_gid) | 0u);
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y)))))))))), (bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))) + (injectionSwitch)) / vec2(1.0, 1.0))))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(vec2(8.6, -647.934).g), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(0.8)), bvec2(true, false))) + (injectionSwitch)))).x > injectionSwitch.y)))), ! (! (bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(vec2(8.6, -647.934).g), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(0.8)), bvec2(true, false))) + (injectionSwitch)))).x > injectionSwitch.y)))))))))))))) || false))))) || false), true, true))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), true, false))))))) || false))))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << (0 ^ 0)), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), min(_injected_loop_counter, _injected_loop_counter)))) != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-79851))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) >> 0), 0, 1))), min(_GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) >> 0), 0, 1))), _GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) >> 0), 0, 1)))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) * _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) ^ 0))) << 0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), clamp((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), ((_GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (int(3)), 0 ^ (0 ^ (int(3)))), 0 ^ (int(3))))))) / 1), (_GLF_IDENTITY(int(3), 0 ^ (int(3))))))), int(3))) & 1, max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3))) & _GLF_IDENTITY(1, max(1, 1)), min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(3), (0 ^ 0), 0)), (false ? _GLF_FUZZED(74973) : int(ivec3(int(3), (0 ^ 0), 0)))), int(ivec4(int(ivec3(int(3), (0 ^ 0), 0)), 1, 0, 1))))) ^ 0))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(3))) & 1))), true && _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), 0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(3), int(3)))), ~ (~ (~ ((1 << _GLF_IDENTITY(int(3), int(3))))))))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, max(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))))))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))))))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))))))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)))), ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), 0, 0, 0)))) - 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_injected_loop_counter != (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (3) | (3)))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1, max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3))))))), (true ? _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3))))))) : _GLF_FUZZED(_injected_loop_counter)))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), 0 + (int(3))), 0))), (_GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)))) - 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1))))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), clamp((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | ivec2(0, 0))), min(int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | ivec2(0, 0))), int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | ivec2(0, 0))))))), 0 ^ (0 ^ _GLF_IDENTITY((int(3)), 0 ^ ((int(3)))))), 0 ^ (int(3))))))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(int(3), 0 ^ (int(3)))), (true ? (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) : _GLF_FUZZED(_injected_loop_counter)))))), int(3))) & 1, max(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), 0 | (_GLF_IDENTITY(~ (int(3)), 0 | (~ (int(3)))))))))) >> _GLF_IDENTITY(int(3), int(3))), 0 + (((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), 0 | (_GLF_IDENTITY(~ (int(3)), 0 | (~ (int(3)))))))))) >> _GLF_IDENTITY(int(3), int(3))))) & _GLF_IDENTITY(1, max(1, 1)), min((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(3), (0 ^ 0), 0)), (false ? _GLF_FUZZED(74973) : int(ivec3(int(3), (0 ^ 0), 0)))), int(ivec4(int(ivec3(int(3), (0 ^ 0), 0)), 1, 0, 1))))) ^ 0))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3)))))), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3)))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3))))))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3)))))), (true ? 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3)))))) : _GLF_FUZZED(_injected_loop_counter))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3)))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), 0 | ((_GLF_IDENTITY(int(3), int(3))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), int(3))) & 1))), true && _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), 0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(3), int(3)))), ~ (~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (true ? _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-9907)))))))))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(ivec4(3, 1, 1, 1)))) | (3))) << 0)), int(3))), min((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(ivec4(3, 1, 1, 1)))) | (3))) << 0)), int(3))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(ivec4(3, 1, 1, 1)))) | (3))) << 0)), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), (int(3)) - (0 & 92781))), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))))))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * _GLF_IDENTITY((int(3)), 0 | ((int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 ^ (3))))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))))))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (_GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1)))) / 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))))))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)))), ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), 0, 0, 0)))) - 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_injected_loop_counter != (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (3) | (3)))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1, max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3))))))), (true ? _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3))), (max(_GLF_IDENTITY(~ (int(3)), (~ (int(3))) ^ 0), ~ (int(3)))) | 0))))) : _GLF_FUZZED(_injected_loop_counter)))) & 1, min(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1, ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), 0 + (int(3))), 0))), (_GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), 0 | (_GLF_FUZZED(_injected_loop_counter))))), 0)))) - 0), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) && true))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(subgroup_local_id + 1 < (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base), uvec4(0u, 0u, 0u, 0u) | ((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base))) / uvec4(1u, 1u, 1u, 1u)).z / 2))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x], uint(1), 4, 64, 4);
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1646.9612), _GLF_FUZZED((false ? -96.81 : 248.034))), bvec2(false, false))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((_GLF_IDENTITY(vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64), _GLF_IDENTITY(vec4(mat2x4(vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0)), min(vec4(mat2x4(vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0)), vec4(mat2x4(vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0)))))).z)), bvec2(true, false))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, _GLF_IDENTITY(-4228.9162, 0.0 + (-4228.9162)), _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(_GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))), max(_GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))), _GLF_IDENTITY(_GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))), max(_GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))), _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false)))) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(-4228.9162, clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false))).y, float(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(30.32, -1.0, _GLF_IDENTITY(_GLF_IDENTITY(-4228.9162, (-4228.9162) - 0.0), clamp(-4228.9162, -4228.9162, _GLF_IDENTITY(-4228.9162, (true ? -4228.9162 : _GLF_FUZZED(-146.791))))), 980.939) + vec4(-498.248, -30.73, 4323.6498, 55.64)).z)), bvec2(true, false))).y, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(-733.371)))))))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base))), (uvec4(0u, 0u, 0u, 0u) & uvec4(179290u, 2551u, 123608u, 198399u)) ^ (uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base)))))).x], _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (_GLF_IDENTITY((uint(1)) | (uint(1)), 0u | ((uint(1)) | (uint(1))))) - 0u)), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(false, bool(bool(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), min((0 ^ 0), (0 ^ 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || _GLF_IDENTITY(false, bool(bool(false))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), clamp((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), (1.0) - _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, sqrt(1.0))))))), injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), clamp((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), (1.0) - _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, sqrt(1.0))))))), injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) | (_injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))) && true))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))) && true))))))))) && true))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (~ (0))) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), clamp(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))), _GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))))) != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), 1 * _GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY((~ (int(4))), max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (_GLF_IDENTITY(~ (int(4)), clamp(~ (int(4)), _GLF_IDENTITY(~ (int(4)), ~ (~ (~ (int(4))))), _GLF_IDENTITY(~ (int(4)), (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))) * 1)))))), (~ (int(4)))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 0))), int(ivec2(_GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 0))), 0)))) << (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) - (0 << _GLF_IDENTITY(int(4), int(4))))) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))))), (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) | ((~ (int(_GLF_IDENTITY(4, 0 ^ (4)))))))))), min(_GLF_IDENTITY(~ (int(4)), 1 * _GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY((~ (int(4))), max((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), (_GLF_IDENTITY(~ (int(4)), int(ivec4(~ (int(4)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)))) << 0)))), (~ (int(4))) | (~ (int(4)))), (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(4, int(int(4))))), _GLF_IDENTITY((~ (int(4))) | (~ (int(4))), ((~ (int(4))) | (~ (int(4)))) >> 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), (int(4)))), _GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) - 0) >> 0), (~ (int(4))) | (~ (int(4))))))), (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), int(int(~ (4))))))), min(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 0 ^ (4))), int(int(~ (4))))))), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), int(int(~ (4)))))))))))))) | (_GLF_IDENTITY((~ (int(4))), ((_GLF_IDENTITY(~ (int(4)), 0 | (_GLF_IDENTITY(~ (int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ _GLF_IDENTITY((int(4)), ~ (_GLF_IDENTITY(~ ((int(4))), 1 * (~ ((int(4))))))))))))) | ((~ (int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), 1 * (int(4))))), max(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), 1 * (int(4))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), 1 * (int(4))))), (_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), 1 * (int(4)))))) | (_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), 1 * (int(4)))))))))), 1 * _GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), ~ (~ ((~ (int(4)))))), max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (int(4)))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(int(4), (int(4)) - 0))), ((~ (int(4)))) | ((~ (int(4)))))))), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((int(4)), int(_GLF_IDENTITY(ivec4((int(4)), 0, 1, 1), ~ (~ (ivec4((int(4)), 0, 1, 1)))))), 1 * _GLF_IDENTITY((~ _GLF_IDENTITY((int(_GLF_IDENTITY(4, (4) << 0))), int(ivec4(_GLF_IDENTITY((int(4)), max((int(4)), (int(4)))), 0, 1, 1)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 1 * (int(4)))) >> 0))), max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (int(4)))))) | (_GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(((~ (int(4)))), max(((~ (int(4)))), ((~ (int(4)))))) | ((~ (int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), 0 | (~ (int(4)))), 1 * _GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), ((int(4))) - 0)), _GLF_IDENTITY(max((_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY((~ (int(4))) | (~ (int(4))), max((~ (int(4))) | (~ (int(4))), (~ (int(4))) | (~ (int(4))))))), (~ (int(4)))), 0 | (_GLF_IDENTITY(max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (_GLF_IDENTITY(~ (int(4)), (_GLF_IDENTITY(~ (int(4)), max(~ (int(4)), ~ (int(4))))) | 0)))), (~ (int(4)))), clamp(max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (int(4)))), max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | _GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) | 0))), (~ (int(4)))), max((_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY((~ (int(4))), clamp(_GLF_IDENTITY((~ (int(4))), max((~ (int(4))), _GLF_IDENTITY((~ (int(4))), 0 + ((~ (int(4))))))), (~ (int(4))), _GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))) | (~ (int(4))))), (~ _GLF_IDENTITY((int(4)), min((int(4)), (int(4)))))))))))) | (_GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(int(4), int(ivec2(_GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 0))), 1)))))), (((~ (_GLF_IDENTITY(int(4), int(ivec2(_GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 0))), 1))))))) >> 0) | ((~ (int(4)))))))), int(int(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 1 * (4))) >> 0))), 1 * _GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY((_GLF_IDENTITY((~ (int(4))), max((_GLF_IDENTITY(~ (int(4)), (~ _GLF_IDENTITY((int(4)), int(int(_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) / 1), 4))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) / 1), 4))) : _GLF_FUZZED(ivec2(-19437, -64827).x)))), int(ivec4(_GLF_IDENTITY((int(4)), ((int(4))) ^ 0), 1, 1, 1))))))) | (~ (int(4))))), (~ (int(4)))))), int(ivec4((_GLF_IDENTITY((~ (int(4))), max((_GLF_IDENTITY(~ (int(4)), (~ _GLF_IDENTITY((int(4)), int(int(_GLF_IDENTITY((int(4)), int(ivec4(_GLF_IDENTITY((int(4)), _GLF_IDENTITY(((int(4))), (((int(4)))) | 0) ^ 0), 1, 1, 1))))))) | (~ (int(4))))), (~ (int(4)))))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))), ((~ (int(4)))) | ((~ (int(_GLF_IDENTITY(4, (4) | ((0 ^ 0) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))))))))))))))), _GLF_IDENTITY(~ (int(4)), 1 * _GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY((_GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), ((int(4))) | 0)), max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4))))), (~ (int(4)))))), ~ (~ ((_GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), _GLF_IDENTITY(((int(4))), clamp(((int(4))), ((int(4))), _GLF_IDENTITY(((int(4))), 0 ^ (((int(4))))))) | 0)), max((_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(int(4)))), clamp(int(_GLF_IDENTITY(4, int(int(4)))), int(_GLF_IDENTITY(4, int(int(4)))), int(_GLF_IDENTITY(4, int(int(4)))))))))), (~ (int(_GLF_IDENTITY(4, 0 | (4))))))))))) | (_GLF_IDENTITY((~ (int(4))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) ^ 0)) / 1), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) ^ 0)) / 1)) << 0)))) | ((~ (int(4))))))))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) || false))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true, false, true))), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(377.746)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), bool(bvec4(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))) * abs(1.0)), injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5914.5032, -88.98)))), 1.0, tan(log(1.0)))), mix(vec2((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5914.5032, -88.98)))), 1.0, tan(log(1.0)))))[0], _GLF_FUZZED(7.8)), vec2(_GLF_FUZZED(2886.6732), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5914.5032, -88.98)))), 1.0, tan(log(1.0)))))[1]), bvec2(false, true)))).y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))) * abs(1.0)), injectionSwitch.y)))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -5.3)), _GLF_FUZZED(vec4(7423.6859, 39.66, -10.29, 211.260).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.6), _GLF_FUZZED(-6570.5809)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))).y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.8) : injectionSwitch.y)), injectionSwitch.y))) / 1.0)))) * abs(1.0)), injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-74.85), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ 8.4))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false))))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-74.85), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ 8.4))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), _GLF_IDENTITY(false, false || (false))))).x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), true))))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), false)))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), ! (! (bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 1 * (1)))), max(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 1 * (1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(91.63) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_IDENTITY(vec3((false ? _GLF_FUZZED(91.63) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), determinant(mat4(1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, exp(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0), (_GLF_IDENTITY(vec3((false ? _GLF_FUZZED(91.63) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), determinant(mat4(1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, exp(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0), max(vec3((false ? _GLF_FUZZED(91.63) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), determinant(mat4(1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, exp(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0), vec3((false ? _GLF_FUZZED(91.63) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), determinant(mat4(1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, exp(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0)))) * vec3(1.0, 1.0, 1.0))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
}
