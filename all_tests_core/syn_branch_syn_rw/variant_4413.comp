#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter), (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter)) | (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)).y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 1.0), (true ? vec3(injectionSwitch.y, 1.0, 1.0) : _GLF_FUZZED(step(vec3(0.0, 591.363, 6536.5093), vec3(348.497, -3.2, 1.6)))))))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 1.0), (true ? vec3(injectionSwitch.y, 1.0, 1.0) : _GLF_FUZZED(step(vec3(0.0, 591.363, 6536.5093), vec3(348.497, -3.2, 1.6)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), _GLF_IDENTITY(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))), uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), _GLF_IDENTITY(max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u)), (max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u))) | (max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u))))))))), (true ? _GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(1u, 1u, 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))), (true ? (_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))) : _GLF_FUZZED(uvec4(196616u, 19147u, 8140u, 66569u))))) / (uvec4(1u, 1u, 1u, 1u) ^ uvec4(0u, 0u, 0u, 0u)))))), uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), _GLF_IDENTITY(max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u)), (max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 0u), ~ (~ (uvec3(0u, 1u, 0u)))))))), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (_GLF_IDENTITY(0u | 0u, 1u * (0u | 0u)))), 0u, 1u))) | (max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u))))))))) : _GLF_FUZZED(subgroup_size))))) / 1u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(packSnorm4x8(pow(vec4(6.6, 5268.0086, 953.052, 759.471), vec4(18.85, 9.8, -3794.4994, -3.2)))) : _GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(uint(uvec2(false ? _GLF_FUZZED(packSnorm4x8(pow(vec4(6.6, 5268.0086, 953.052, 759.471), vec4(18.85, 9.8, -3794.4994, -3.2)))) : _GLF_IDENTITY(0u, max(0u, 0u)), 0u)), (uint(uvec2(false ? _GLF_FUZZED(packSnorm4x8(pow(vec4(6.6, 5268.0086, 953.052, 759.471), vec4(18.85, 9.8, -3794.4994, -3.2)))) : _GLF_IDENTITY(0u, max(0u, 0u)), 0u))) / 1u)))), 1u))), min(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, _GLF_IDENTITY(0u, 0u | (0u)), 1u))), uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))))), (uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) - 0u), 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))), uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), _GLF_IDENTITY(max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u)), clamp(max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u)), max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u)), max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u))))))))))) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))))))), max(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))))))), _GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))))))), (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), 1u * (uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))))))))))) - 0u)))))), (uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u, 1u), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(1u, 1u, 1u, 1u))) * (_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), (uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)) / uvec4(1u, 1u, 1u, 1u)), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))), uint(uint(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY((0u | 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((0u | 0u), 0u ^ ((0u | 0u))), ((0u | 0u)) + 0u)))), 0u, 1u), max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (_GLF_IDENTITY(0u | _GLF_IDENTITY(0u, 0u + (0u)), (_GLF_IDENTITY(0u | 0u, (true ? 0u | 0u : _GLF_FUZZED(subgroup_id)))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 0u)))))))), 0u, 1u), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u))))))))) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)))))), (uint(_GLF_IDENTITY(uint(uint(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))), min(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)), 1u), (uvec4(gl_NumWorkGroups.x, 1u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)), 1u)) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), clamp(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u), (uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u)) >> uvec4(0u, 0u, 0u, 0u)), uvec4(gl_NumWorkGroups.x, 1u, 0u, 1u))))))), uint(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u | (1u))) >> (0u | 0u)), 0u, 1u), max(uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (1u))) >> (0u | _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) * 1u)) | (1u))), uvec4(gl_NumWorkGroups.x, _GLF_IDENTITY(1u, (1u) >> (0u | 0u)), 0u, 1u))))))))) / 1u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec4(gl_NumWorkGroups.x, 0u, 1u, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(asin(4.1)) : injectionSwitch.x))) - 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec3(uvec4(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(asin(4.1)) : injectionSwitch.x))) - 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1u))).x) - 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_ZERO(0.0, injectionSwitch.x))).x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x) - 0u), (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x) - _GLF_IDENTITY(0u, (0u) * 1u))) << 0u))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x, gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) && true)), true && (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(! (true)), ! (! (bool(! (true)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), false || (! (! (! (false))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 & -88680), 0 ^ ((0 & -88680))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(0, 0))))), _GLF_IDENTITY(0 | (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(0)))), ~ (~ (0 | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) + 0)))), int(0)))))))))), ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(int(0), int(0)))))))) | ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), (_GLF_IDENTITY(0 | (int(0)), (0 | (int(0))) | 0)) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(int(0), int(0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(int(0), int(0))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0))))) | 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(int(0), int(0))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | 0)), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(int(0), int(0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 | (~ (_GLF_IDENTITY(int(0), int(0)))))))))) >> 0))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), (subgroup_id * subgroup_size) << 0u)) >> 0u, max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), (subgroup_id * subgroup_size) << 0u)) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), (subgroup_id * subgroup_size) << 0u)) >> 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), _GLF_IDENTITY((subgroup_id * subgroup_size), ~ (~ ((subgroup_id * subgroup_size)))) << 0u)) >> _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 1u), (uvec2(0u, 1u)) * uvec2(1u, 1u)), ~ (~ (uvec2(0u, 1u)))))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), _GLF_IDENTITY((subgroup_id * subgroup_size), uint(uint((subgroup_id * subgroup_size)))) << 0u)) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u), (subgroup_id * subgroup_size) << 0u)) >> 0u))) | 0u)) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(num_workgroup)) : uvec2(subgroup_size, 0u))))), _GLF_IDENTITY(subgroup_size, (subgroup_size) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ((0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) | (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(0u), uint(0u))), min((0u >> _GLF_IDENTITY(uint(0u), uint(0u))), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))))))))) - 0u), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), (subgroup_local_id + 1) >> 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) - 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) + (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) + 0u) >> _GLF_IDENTITY(uint(0u), uint(0u))))))) - 0u), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) >> 0u)))))), (subgroup_size) - 0u)) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))) / 1u), 0u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) + (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), 0u + (uint(0u))), uint(0u))))))) - 0u), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) - _GLF_IDENTITY(0u, (0u) / 1u)))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(4), int(4))) | (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-6.4, (-6.4) / 1.0))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(0))), ((0 >> _GLF_IDENTITY(int(0), int(0)))) << 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (_GLF_IDENTITY(! ((_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), (! ((_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (_GLF_IDENTITY(! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) || false))), ! (! (_GLF_IDENTITY((_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! ((_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), (! ((_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) || false))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), true && (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), clamp((int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(bvec2(((false)), false)), ! (! (bool(bvec2(((false)), false)))))), (! ((false))) || false))) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(bvec2(((false)), false)), ! (! (bool(bvec2(((false)), false)))))), (! ((false))) || false))) && true)), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(bvec2(((false)), false)), ! (! (bool(bvec2(((false)), false)))))), (! ((false))) || false))) && true)))))) || false)))))
                  {
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))))))), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))) && (_GLF_WRAPPED_IF_FALSE(false))))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(23255) : int(3)))))); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), _GLF_IDENTITY(! (! (false || (false))), ! (_GLF_IDENTITY(! (! (! (false || (false)))), bool(bvec4(! (! (! (false || (false)))), false, true, false))))))) || false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-34.78 - -624.108))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(smoothstep(_GLF_IDENTITY(93.58, (false ? _GLF_FUZZED(1.2) : 93.58)), -0.1, -3.3)) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | 0)), int(4))), (0 << _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, max(4, 4)), 4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), 0 ^ (~ (64))))), max(64, 64)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), 0 ^ (~ (64))))), max(64, 64)))), 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.3))), injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   int i = 0;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & _GLF_IDENTITY(1, (1) * 1)), max((1 & 1), (1 & 1)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, true, false)))))))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2526.9973)), bool(false))))), injectionSwitch.x)), 0u | (uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2526.9973)), bool(false))))), injectionSwitch.x)))), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (17596u & 0u))) | 0u)))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec2(0, 1))), 0))))) << 0)), 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-56357))), 4))) | 0));
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
