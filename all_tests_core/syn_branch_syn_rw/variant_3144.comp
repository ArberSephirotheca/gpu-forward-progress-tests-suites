#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 float _f0;
 mat3x2 _f1;
 mat3x4 _f2;
 vec4 _f3;
 mat4 _f4;
 mat4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_7 {
 bool _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 int _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 uvec2 _f1;
 vec2 _f2;
 mat2x3 _f3;
 uvec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 vec3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 vec3 _f1;
 mat3x4 _f2;
 mat2x3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 bvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 uint virtual_gid;
 mat4x2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 vec2 _f1;
 _GLF_struct_7 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_5(_GLF_struct_0(bvec2(true), bvec4(true), mat2x3(1.0)), _GLF_struct_1(bvec4(true), vec3(1.0), mat3x4(1.0), mat2x3(1.0), ivec3(1)), _GLF_struct_2(mat2(1.0), uvec2(1u), mat4x3(1.0), vec3(1.0), mat3x4(1.0)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base + subgroup_local_id, mat4x2(1.0), _GLF_struct_3(ivec2(1), uvec2(1u), vec2(1.0), mat2x3(1.0), uvec2(1u), vec4(1.0)), _GLF_struct_4(uvec2(1u))), vec2(1.0), _GLF_struct_7(true, mat4x3(1.0), mat3x2(1.0), 1, _GLF_struct_6(1.0, mat3x2(1.0), mat3x4(1.0), vec4(1.0), mat4(1.0), mat4(1.0), mat4x3(1.0))));
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = _GLF_struct_replacement_8._f0.virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(checker[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], read, 4, 64, 4);
}
