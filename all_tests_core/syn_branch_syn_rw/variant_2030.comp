#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.y = num_workgroup;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x) >> 0u)) << 0u);
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8306.1605)), bool(false))) > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), ! (! (bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w = workgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) / 1.0)))))
      {
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z;
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(subgroup_base, uint(uvec3(subgroup_base, 0u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z), min(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base, uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base) - 0u, ((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base) - 0u) << 0u)), 0u))) + (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z, min((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z, ~ (~ ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)))))))), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), ((GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z))) - 0u) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(34585))), 1)), 1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), true && (! (_injected_loop_counter > 0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), (ivec4(1, 0, 0, 0)) | ivec4(0, 0, 0, 0)))), _GLF_IDENTITY(1, (1) / 1)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(-20138), (_GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(-20138), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? true ? _injected_loop_counter ++ : _GLF_FUZZED(-20138) : _GLF_FUZZED(_injected_loop_counter)))) / 1))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x = next_virtual_gid;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), ~ (~ (uint(6u)))))) | (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))))], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.6) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat2x3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.6) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2x3(-7.5, 8997.6005, -8.6, 4.9, -6570.5809, -9810.9593)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED((158.957 - -62.09))), bool(false))), injectionSwitch[1])).y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))))), dot(vec2(1.0, 0.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))) + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))), bool(bool(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))))))))), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))) && true), false, false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), _GLF_IDENTITY((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), bool(_GLF_IDENTITY(bvec3((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), true, true), bvec3(bvec3(bvec3((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), true, true))))))), bool(bvec2(! (_GLF_IDENTITY((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), bool(_GLF_IDENTITY(bvec3((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), true, true), bvec3(bvec3(bvec3((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), true, true))))))), true))))) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), true))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true))), true))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, determinant(mat4(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, tan(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0), (_GLF_IDENTITY(vec3(injectionSwitch.y, determinant(mat4(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, tan(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0), max(vec3(injectionSwitch.y, determinant(mat4(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, tan(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0), vec3(injectionSwitch.y, determinant(mat4(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, tan(0.0), length(0.0), 0.0, 0.0, 1.0)), 1.0)))) / vec3(1.0, 1.0, 1.0)))))))))), false, false, false)), (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_IDENTITY(false, true && (false)), false))) && true))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true)), bool(bvec4(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9210.0349) : injectionSwitch.x)) > injectionSwitch.y)), false)), false, false)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9113.8257)))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, (true) && true)))), true, false)))))))), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, sqrt(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(0.0, 0.0, 0.0)), mix(float(float(vec3(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-33.07)), bool(false))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), (mat4x3(injectionSwitch.y, sqrt(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(6.0)))))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)), false)), false, false)))))), true, false)))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))), false)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1]))) / 1.0))).x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))), false))))))), false)), true)))), true))), true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))), true))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))), true))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(9.5) : injectionSwitch.x)) > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), true))), false))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))) > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), true))), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), true))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), true)))), true))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true, false))))), false, true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y) && true)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, false, false))), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true))))))))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))))))))) && true))))), true))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), false, true)))), _GLF_IDENTITY(false, (false) && true) || (true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), (_GLF_IDENTITY(true ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-79851), min(true ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-79851), true ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-79851)))))), (_GLF_IDENTITY(1, (1) * 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), (_GLF_IDENTITY(true ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-79851), min(true ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-79851), true ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-79851))))))) >> 0)) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(int(1), (int(1)) << 0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))), 0 ^ (max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, 0 | (3))))), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, 0 | (3))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, 0 | (3))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, 0 | (3)))) ^ 0)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, 0 | (3))), int(ivec4(false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(3, 0 | (3))), 1, 1, 1)))))))) + 0), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))), (0 << _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))), ~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3)))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, min((_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0, (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> 0))) | (int(3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 0 ^ (_GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) << 0)))), max(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))))))))) : _GLF_FUZZED(_injected_loop_counter))) >> _GLF_IDENTITY(int(3), int(3))) & 1)), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1), (_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) << 0), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1)) || false))), true && (true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | (ivec2(int(3), 1)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | (ivec2(int(3), 1)))), (int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | (ivec2(int(3), 1))))) >> 0), int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | (ivec2(int(3), 1)))), int(_GLF_IDENTITY(ivec2(int(3), 1), (ivec2(int(3), 1)) | (ivec2(int(3), 1))))))), int(3))) & _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1))))), (_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) << 0), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))) & 1)) || false)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) && true))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, false || ((subgroup_local_id % 2) == 0)))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x], uint(1), 4, 64, 4);
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(51.48)), float(injectionSwitch.y), bool(true)))))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 1, 1))) + (_GLF_IDENTITY(64, int(ivec4(64, 0, 1, 0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 1, 1))) + (_GLF_IDENTITY(64, int(ivec4(64, 0, 1, 0)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 1, 1))) + (_GLF_IDENTITY(64, int(ivec4(64, 0, 1, 0))))), int(ivec4(~ (_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 1, 1))) + (_GLF_IDENTITY(64, int(ivec4(64, 0, 1, 0))))), 0, 1, 0))))) : _GLF_FUZZED(962)))), 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false))), false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(6.5, -5790.1327))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, clamp(4, 4, 4))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), 0 | (0 << _GLF_IDENTITY(int(0), int(0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1 * (~ (int(4))), (1 * (~ (int(4)))) << 0), 0 | (1 * (~ (int(4))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))), clamp(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), (int(4)))), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), (int(4))))))), min(_GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), (int(4)))), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), (int(4))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), (int(4)))), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), (int(4))))))) : _GLF_FUZZED(_injected_loop_counter))), (~ _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), (int(4)))), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), (int(4)))))))))) * 1)))), _GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(int(int((~ (int(4))))), int(ivec2(_GLF_IDENTITY(int(int((~ (int(4))))), (int(int((~ (int(4)))))) | 0), 0))))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))), _GLF_IDENTITY(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(((~ (int(4)))), clamp(_GLF_IDENTITY(((~ (int(4)))), max(((~ (int(4)))), ((~ (int(4)))))), _GLF_IDENTITY(((~ (int(4)))), (((~ (int(4))))) | (((~ (int(4)))))), ((~ (int(4)))))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))), (clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))) / 1))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(ivec3(_GLF_IDENTITY(4, int(ivec2(4, 0))), 1, 1))), 4))))) | _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), ((int(4))) * 1)), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))), (_GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))) | (_GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))))))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(4, min(4, 4))))))) | _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY((_GLF_IDENTITY((~ (int(4))), 0 ^ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> 0)))), (_GLF_IDENTITY((_GLF_IDENTITY((~ (int(4))), 0 ^ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> 0)))), (false ? _GLF_FUZZED(int(-8.2)) : (_GLF_IDENTITY((~ (int(4))), 0 ^ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> 0))))))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))) * 1)))), _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), ((int(4))) << 0), (int(4))))), int(int((~ (int(4))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))), min(_GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))), _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), _GLF_IDENTITY((int(4)), ((int(4))) - 0), (int(4))))), int(int((~ (int(4))))))))), (_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(_GLF_IDENTITY(4, int(int(4)))))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) | (1 ^ 1))))), int(int((~ (int(4)))))))))) | (_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))), int(int(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))))))))), _GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), 0 | ((~ (int(4))))), clamp(_GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY((~ (int(4))), ~ (~ ((~ (int(4))))))) + 0), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))), min(_GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))), _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), _GLF_IDENTITY((int(4)), ((int(4))) - 0), (int(4))))), int(int((~ (int(4))))))))), (_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(_GLF_IDENTITY(4, int(int(4)))))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) | (1 ^ 1))))), int(int((~ (int(4)))))))))) | (_GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY((~ (int(4))), _GLF_IDENTITY(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))), int(int(clamp((~ (int(4))), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4)))))))))))))), _GLF_IDENTITY(~ (int(4)), (~ (int(_GLF_IDENTITY(4, min(4, 4))))) | _GLF_IDENTITY(_GLF_IDENTITY((~ (int(4))), 0 | ((~ (int(4))))), clamp(_GLF_IDENTITY((~ (int(4))), (_GLF_IDENTITY((~ (int(4))), ~ (~ ((~ (int(4))))))) + 0), _GLF_IDENTITY((~ (int(4))), ~ (~ (_GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) * 1)))), _GLF_IDENTITY((~ (int(4))), int(int((~ (int(4))))))))))))) - (0 << _GLF_IDENTITY(int(3), int(3)))) ^ 0), 0, 1, 1)))))), _GLF_IDENTITY(1 * _GLF_IDENTITY((~ (int(4))), ((~ (int(4)))) >> 0), 1 * (1 * (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), min((int(4)), _GLF_IDENTITY((int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) - 0)) / 1))), clamp((int(4)), _GLF_IDENTITY((int(4)), int(int((int(4))))), (int(4)))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((int(4)), min((int(4)), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 ^ ((int(4)))), int(int((int(4))))), (_GLF_IDENTITY(int(4), (int(4)) - 0)))))), 1), max(ivec2(_GLF_IDENTITY((int(4)), min((int(4)), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY((int(4)), int(int((int(4))))), (int(4)))))), 1), ivec2(_GLF_IDENTITY((int(4)), min((int(4)), _GLF_IDENTITY((int(4)), clamp((int(4)), _GLF_IDENTITY((int(4)), int(int((int(4))))), (int(4)))))), 1))))), ((int(_GLF_IDENTITY(4, (4) / 1)))) | _GLF_IDENTITY(_GLF_IDENTITY(((int(4))), (((int(4)))) + 0), (_GLF_IDENTITY(((int(4))), (((int(4)))) + 0)) | (_GLF_IDENTITY(((int(4))), (((int(4)))) + 0))))))))), (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | 0) * _GLF_IDENTITY((_GLF_IDENTITY(~ (int(4)), max(~ (int(4)), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> _GLF_IDENTITY(0, (0) - 0))))), clamp(~ (int(4)), ~ (int(4)), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(4)), ((int(4))) * 1), 0 ^ (_GLF_IDENTITY((int(4)), int(ivec4((int(4)), (-71649 & _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter --)))), 0 | (int(0)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter --)))), 0 | (int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter --)))), 0 | (int(0))))) ^ 0))))), 0, 0)))))))))), ((_GLF_IDENTITY(~ (int(4)), max(~ (int(4)), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> _GLF_IDENTITY(0, (0) - 0))))), clamp(~ (int(4)), ~ (int(4)), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(4)), ((int(4))) * 1), 0 ^ (_GLF_IDENTITY((int(4)), int(ivec4((int(4)), (-71649 & _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter --)))), 0 | (int(0)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter --)))), 0 | (int(0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter --)))), 0 | (int(0))))) ^ 0))))), 0, 0))))))))))) >> 0))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))) || false))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(95.89)), bool(false))), 1.0, 0.0, 0.0, 1.0)), min(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95.23) : _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)))), determinant(mat2(1.0, 0.0, 1.0, 1.0)), exp(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0))), 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.3) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-820.136) : 1.0))))), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), min(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-393.250))), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), exp(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0))), 0.0, 1.0)), vec2(0.0, 0.0) + (vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-393.250))), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), exp(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0))), 0.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))))))), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, (1.0) * 1.0)), 1.0)))), min(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((5.2 - 5.8))), _GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, abs(0.0), cos(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8403.6528) : 1.0)))))))), (true ? _GLF_IDENTITY(float(mat3x2(1.0, abs(0.0), cos(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), mix(float(float(mat3x2(1.0, abs(0.0), cos(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), float(_GLF_FUZZED(-1.3)), bool(false))) : _GLF_FUZZED(87.16)))), _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, log(1.0), 1.0, 1.0, 0.0, 0.0, log(1.0), length(vec2(0.0, 0.0)), 1.0), (mat3(1.0, log(1.0), 1.0, 1.0, 0.0, 0.0, log(1.0), length(vec2(0.0, 0.0)), 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0)), exp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 1.0, log(sqrt(1.0)), 1.0, 1.0, 1.0), mat4x2(mat4(mat4x2(0.0, 0.0, 1.0, 1.0, log(sqrt(1.0)), 1.0, 1.0, 1.0))))))), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0))), 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), clamp((injectionSwitch) / vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0))), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0)))), mat3x4(mat4(mat3x4(mat2x4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0))))))))))), 1.0), (injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0)))))).x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(-91.63))), min(0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), min(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), exp(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0))), 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mat2(1.0) * ((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat2(vec2(1.0, 1.0), 0.0, tan(0.0))))))))).x > injectionSwitch.y)))) && true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! _GLF_IDENTITY((! (! (_GLF_DEAD(false)))), true && ((! (! (_GLF_DEAD(false)))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) || false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) + sin(vec2(0.0, 0.0)))).y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 1u * (read)), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
   if(_GLF_DEAD(false))
    barrier();
  }
}
