#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            return;
           return;
          }
         return;
        }
       return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0 >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), (true ? (1 << _GLF_IDENTITY(int(2), int(2))) : _GLF_FUZZED(-54409)))) | ((1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.2)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (false))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool((false))))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          continue;
        }
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, false || ((_GLF_DEAD(false)) && true))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id)))), (false ? _GLF_FUZZED(uvec3(149552u, 69422u, 180124u)) : _GLF_IDENTITY((gl_WorkGroupID) | uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u), (uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), _GLF_IDENTITY((_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_size) : (0u)))) | (_GLF_IDENTITY((0u), max((0u), (0u)))), (_GLF_IDENTITY((_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_size) : (0u)))) | (_GLF_IDENTITY((0u), max((0u), (0u)))), ((_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_size) : (0u)))) | (_GLF_IDENTITY((0u), max((0u), (0u))))) / 1u)) ^ 0u)) | (0u)), 0u)) - uvec3(0u, 0u, 0u)) ^ (_GLF_IDENTITY((gl_WorkGroupID) | uvec3(0u, 0u, 0u), uvec3(uvec4((gl_WorkGroupID) | uvec3(0u, 0u, 0u), 1u))))))), ((gl_WorkGroupID) | uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) * 1u)))) | _GLF_IDENTITY(((gl_WorkGroupID) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY((((gl_WorkGroupID) | uvec3(0u, 0u, 0u))), (true ? (((gl_WorkGroupID) | uvec3(0u, 0u, 0u))) : _GLF_FUZZED(uvec3(107421u, 39971u, 37127u)))) | (((gl_WorkGroupID) | uvec3(0u, 0u, 0u)))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u), 0u)), 0u)), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(0u, 0u))) - uvec2(0u, 0u))))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), uvec2(0u, 0u) | (uvec2(subgroup_id * subgroup_size, 1u)))) << uvec2(0u, 0u)), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), min(uint(_GLF_IDENTITY(uvec2(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), min(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u))), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), max(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), clamp(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u)))) | (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), uint(uvec4(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), 0u, 0u, 0u)))))))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY((0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | _GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u)))), ((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), 0u))) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | _GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u))))) * 1u)), 0u))))))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), min(uint(_GLF_IDENTITY(uvec2(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), min(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u))), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), max(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), clamp(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u)))) | (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), uint(uvec4(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED((+ workgroup_id)) : subgroup_id * subgroup_size)), 1u)))) >> uvec2(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | 1u), 0u))))), 0u))), 0u, 0u, 0u)))))))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY((0u) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | _GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u)))), ((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), 0u))) | (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u | _GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u))))) * 1u)), 0u)))))))))) | (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), 1u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, min(1u, 1u)))))))) >> uvec2(0u, 0u))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (true ? uvec2(subgroup_id * subgroup_size, 1u) : _GLF_FUZZED(uvec2(126004u, 5179u)))), uvec2(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size))), 1u)))) >> uvec2(0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, 1u))), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size, 1u), max(uvec2(subgroup_id * subgroup_size, 1u), uvec2(subgroup_id * subgroup_size, 1u)))) >> uvec2(0u, 0u))) - uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), 1u)))) >> 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, ~ (~ (workgroup_base + subgroup_base + subgroup_local_id)));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), min(_GLF_IDENTITY(4, (4) * 1), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), 0 + _GLF_IDENTITY((_GLF_IDENTITY(4, (4) * 1)), ((_GLF_IDENTITY(4, (4) * 1))) >> 0)))))), 64, 2);
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((subgroup_local_id % 2) == 0)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      break;
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false), false)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool((_GLF_DEAD(false)))), bool(bvec2(bool(bool((_GLF_DEAD(false)))), true)))) || false))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     switch(_GLF_SWITCH(0))
      {
       case 96:
       uvec4(136928u, 136746u, 7991u, 67962u);
       case 3:
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, false || (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), cos(0.0) * ((injectionSwitch.x))) * exp(0.0)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(mat4 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[13], _GLF_SWITCH_0_2v; true; next_virtual_gid)
        {
        }
       case 0:
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, length(vec4(0.0, 0.0, 0.0, 0.0))))))), true, false, false))))))), true, true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec2((! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), true))), (! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, false)))))) && true))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       case 64:
       case 68:
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), false))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), false))), false)))))))))))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           break;
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                      return;
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), 1.0))) < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.8, 75.38)) : injectionSwitch)).x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2997.7557) : injectionSwitch.y)))))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(2997.7557) : injectionSwitch.y), 1.0 * ((false ? _GLF_FUZZED(2997.7557) : injectionSwitch.y)))))))) || false, bool(bvec2((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(2997.7557) : injectionSwitch.y), (false ? _GLF_FUZZED(vec4(41.82, -5.6, -771.951, -8.7).b) : _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))), true)))))) ? _GLF_FUZZED(2997.7557) : injectionSwitch.y), ((false ? _GLF_FUZZED(2997.7557) : injectionSwitch.y)) - 0.0)))))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), _GLF_IDENTITY(int(1), (int(1)) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(-36407))), 1))), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bvec2(bvec4(bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))), true, false)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), (false ? _GLF_FUZZED(vec2(-301.480, -4.8)) : injectionSwitch)), injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
              }
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), min(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), min(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), _GLF_IDENTITY(true && (bool(bvec3(true, true, false))), true && (true && (bool(bvec3(true, true, false)))))))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       case 6:
       case 29:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))))))))
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))))), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false)))))))
                  return;
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY((0 & -98373) ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(73652) : _GLF_IDENTITY(1, (1) >> 0))), clamp((0 & -98373) ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(73652) : 1)), _GLF_IDENTITY((0 & -98373) ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(73652) : 1)), (true ? (0 & -98373) ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(73652) : 1)) : _GLF_FUZZED(91319))), (0 & -98373) ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(73652) : 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, ~ (~ (0)))), (_GLF_IDENTITY(0, (0) ^ 0)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 62:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       case 94:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       case 34:
       case 10:
       case 50:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       break;
       case 12:
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         (ivec4(-1500, _GLF_IDENTITY(67633, min(_GLF_IDENTITY(67633, max(67633, _GLF_IDENTITY(_GLF_IDENTITY(67633, (false ? _GLF_FUZZED(62000) : 67633)), (67633) | 0))), 67633)), 33966, -29469) % ivec4(82365, 74980, 45101, 84985));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(true, ! (! (true))), false)))))))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       default:
       for(int _injected_loop_counter = (0 & 29186); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) && true)))) && true)))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2290.0873)), bool(false)))))))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       1;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), false || ((_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))) && true)), ! (! (! (false))))))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
}
