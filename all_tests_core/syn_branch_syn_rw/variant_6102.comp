#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(152.633)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((true))))))) || false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((0 & -55356), ((0 & -55356)) + 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) - 0, ((int(6)) - 0) | ((int(6)) - 0))), int(6))), (_GLF_IDENTITY((_GLF_IDENTITY((0 & -55356), ((0 & -55356)) + 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6))), 0 | ((_GLF_IDENTITY((0 & -55356), ((_GLF_IDENTITY(0 & -55356, (0 & -55356) + 0))) + 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)))))))))) | ((_GLF_IDENTITY((0 & -55356), ((0 & -55356)) + 0) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))), bool(bool(! (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))), bool(bool(! (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true && (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))), bool(bool(! (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))) && true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), true, false))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       return;
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((-49144 & 0), 0 | (_GLF_IDENTITY((-49144 & 0), min((-49144 & 0), _GLF_IDENTITY((-49144 & 0), ~ (~ ((-49144 & 0))))))))); _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), true && (bool(bvec4(_GLF_DEAD(false), true, false, false))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), true && (bool(bvec4(_GLF_DEAD(false), true, false, false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
        continue;
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec2(1.0, 1.0))), 0.0))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-0.9)))), (bool(injectionSwitch.x > injectionSwitch.y)) && true), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, bool(bvec2(true, true))))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec2(1.0, 1.0))), 0.0))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-0.9)))), (bool(injectionSwitch.x > injectionSwitch.y)) && true), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, bool(bvec2(true, true))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, max(_GLF_IDENTITY(0 | 0, _GLF_IDENTITY(~ (~ (0 | 0)), (~ (~ (0 | 0))) / 1)), _GLF_IDENTITY(0 | 0, ~ (~ (0 | 0)))))) ^ 0))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) | (0u | 0u))) / 1u) * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, (false ? _GLF_FUZZED(117392u) : (subgroup_id) / 1u))) ^ 0u)) * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false)), (bool(bvec2(_GLF_DEAD(false), false))) || false)))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) >> 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_base + subgroup_base, max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))), 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))), 0u)), (uint(uvec4(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))))), 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))), 0u))) / 1u)) + subgroup_base)))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u), max(_GLF_IDENTITY(uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u), max(uvec2(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) ^ 0u)), uint(6u)), 1u), uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u))), uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u)))), (uint(_GLF_IDENTITY(uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u), max(_GLF_IDENTITY(uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u), max(uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u), uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u))), uvec2(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 1u))))) + 0u))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))))))))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(7.2)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), 1.0, 0.0))) < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(91925))) + 0), 64, 2);
 if((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) >> 0))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 ^ (1))), _GLF_IDENTITY(4, (4) | (4)), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), (_injected_loop_counter) - 0) > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0), false, false, false))); _injected_loop_counter --)
      {
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false)))), (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0)))))) != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))) && true))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - (0 >> _GLF_IDENTITY(int(0), int(0)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, sqrt(1.0) * (injectionSwitch.x)) < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), int(ivec3(_GLF_IDENTITY((0 | 1), _GLF_IDENTITY(((0 | _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), _GLF_IDENTITY(((_GLF_IDENTITY((0 | _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), clamp((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0))))) / 1))), max(_GLF_IDENTITY(((_GLF_IDENTITY((0 | _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), clamp((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0))))) / 1))), clamp(((_GLF_IDENTITY((0 | _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), clamp((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0))))) / 1))), ((_GLF_IDENTITY((0 | _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), clamp((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0))))) / 1))), ((_GLF_IDENTITY((0 | _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), clamp((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0))))) / 1))))), ((_GLF_IDENTITY((0 | _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), clamp((_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0)), (_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0), (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0) : _GLF_FUZZED(86033)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) + 0)) << 0))))) / 1))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) | (0))) ^ 0), ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) - 0) : _GLF_FUZZED(-96047))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))) ^ 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))))))), _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) >> 0), min(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(int(8), (int(8)) >> 0)))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4.9) : 1.0))))))))), vec2(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     do
      {
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, min(_GLF_IDENTITY(_GLF_IDENTITY(read, min(read, read)), min(_GLF_IDENTITY(_GLF_IDENTITY(read, min(read, read)), ~ (~ (_GLF_IDENTITY(read, min(read, read))))), _GLF_IDENTITY(read, min(read, read)))), _GLF_IDENTITY(read, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(903.990) : _GLF_ZERO(0.0, injectionSwitch.x)))) | (read)))), 4, 64, 4);
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0)))))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1])).x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       continue;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, abs(1.0)), vec2(mat4x2(vec2(injectionSwitch.x, abs(1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0), 0.0, 1.0, 0.0)))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))) && true))) ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), _GLF_IDENTITY((true ? abs(1.0) : _GLF_FUZZED(-7.8)), mix(float(_GLF_FUZZED(1.3)), float((true ? abs(1.0) : _GLF_FUZZED(-7.8))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), true, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), true, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), true, true, false)))), false || (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(injectionSwitch.x, abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), _GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(4.9)), bool(false))), abs(1.0))), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(injectionSwitch.x, abs(1.0)))))))) > injectionSwitch.y)), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, abs(1.0))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(min(-854.450, 999.407)))), abs(1.0))), float(vec2(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-65.06)))) : _GLF_FUZZED(-7.8))))), (false ? _GLF_FUZZED(-6.0) : _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(1.0))), _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(-7.8))))))))), float(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), abs(1.0)))))))) > injectionSwitch.y)), true, true, false))))))))))))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | _GLF_IDENTITY((int(5)), ((int(5))) + 0)))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
}
