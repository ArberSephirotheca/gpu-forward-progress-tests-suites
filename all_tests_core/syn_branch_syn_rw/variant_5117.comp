#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH((0 | 0)))
    {
     case 40:
     do
      {
       while(false)
        {
         while((workgroup_id != workgroup_id))
          {
           ivec2((ivec4(16317, 21914, 45726, 21309) - ivec4(-55444, -45194, 34721, -652)));
           ivec2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
          }
        }
       uvec2(135380u, 94986u);
       mat2x4(-624.247, -952.706, -1766.1892, 77.23, -625.434, -6.4, -8040.5413, -4.2);
       for(mat4x2 _GLF_SWITCH_0_2v[5], _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v; false; (mat2x4(mat2(-0.2, -5.2, -7.3, -14.15)) - 434.413))
        {
         ivec3 _GLF_SWITCH_0_5v[88], _GLF_SWITCH_0_6v;
         {
          transpose(mat2x4(-56.75, 3385.8012, -0.6, -964.321, 5.4, 6.6, -900.922, 5923.9531));
          (uvec4(74138u, 187361u, 74331u, 68639u) ^ uvec4(106084u, 119751u, 127403u, 183977u));
          bvec3 _GLF_SWITCH_0_7v[85], _GLF_SWITCH_0_8v[79], _GLF_SWITCH_0_9v[81];
         }
        }
       ;
       ivec4(82933, -72720, -88394, -32281);
      }
     while(isnan(1.6));
     case 0:
     case 41:
     case 19:
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
