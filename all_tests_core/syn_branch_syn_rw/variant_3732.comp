#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) || false))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, true))), ! (! (! (bool(bvec3(true, false, true))))))))), false, true)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) || false))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, true))), ! (! (! (bool(bvec3(true, false, true))))))))), false, true))))))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), false, false, true)))))) || false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), false || (_GLF_DEAD(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - sqrt(0.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - sqrt(0.0)), min(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - sqrt(0.0)), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - sqrt(0.0)))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - sqrt(0.0)))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - sqrt(0.0)))).x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-508.462)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), gl_NumWorkGroups.x), (min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) + uvec3(0u, 0u, 0u)).x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x)) - 0u), _GLF_IDENTITY(0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (_GLF_IDENTITY(0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (true ? _GLF_IDENTITY(0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), max(0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), 0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))) : _GLF_FUZZED(subgroup_id)))) ^ 0u))), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), _GLF_IDENTITY(0u, ~ (~ (0u))) ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), 0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), max(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), 0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), 0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(_GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)) - 0u), min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), 0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), _GLF_IDENTITY(0u ^ _GLF_IDENTITY((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (_GLF_IDENTITY((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), ~ (~ ((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))) << 0u), (0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) + 0u))))) >> 0u, ((uint(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), _GLF_IDENTITY(0u ^ _GLF_IDENTITY((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (_GLF_IDENTITY((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), ~ (~ ((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))) << 0u), (0u ^ (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) + 0u))))) >> 0u) ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))))[2])).x, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bool(bool(bvec3(true, true, false)))))) ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x : _GLF_FUZZED((subgroup_id / (191809u ^ 122856u))))), _GLF_IDENTITY(min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(clamp(162617u, subgroup_id, subgroup_local_id))))) | (gl_NumWorkGroups.x))), 0u ^ _GLF_IDENTITY((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (true ? (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id)))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(false || (! (_GLF_DEAD(false))), ! (! (false || (! (_GLF_DEAD(false))))))))))) || false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (gl_WorkGroupSize[0]) - 0u), gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize))[2])).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))) * subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(~ (~ (subgroup_local_id)), 0u ^ (~ (~ (subgroup_local_id)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-0.7)), bool(false))), injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-0.7)), bool(false))), injectionSwitch.y)))))), true)), (bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(-0.7)), bool(false))), injectionSwitch.y)))))), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), false)))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), uint(uvec2(uint(1u), 1u)))), ~ (~ (_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))), uint(uvec2(uint(1u), 1u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), uint(uvec2(uint(1u), 1u)))), ~ (~ (_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), uint(uvec2(uint(1u), _GLF_IDENTITY(1u, (1u) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(uvec2(uint(1u), 1u)), (uint(uvec2(uint(1u), 1u))) - 0u)))))), max((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) / 1u)), _GLF_IDENTITY(uint(1u), uint(uvec2(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) - 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 1u))) >> (0u & 181169u))), 1u))))), _GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u))), _GLF_IDENTITY(uint(1u), uint(uvec2(uint(_GLF_IDENTITY(1u, (1u) / 1u)), 1u))))), ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), uint(uvec2(uint(1u), 1u)))))) / 1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))))) + _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ _GLF_IDENTITY((subgroup_local_id + 1), uint(uint((subgroup_local_id + 1))))))))) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))))) % subgroup_size)) >> (0u | 0u)), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ _GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uint((subgroup_local_id + 1)), (_GLF_IDENTITY(uint((subgroup_local_id + 1)), 0u ^ (_GLF_IDENTITY(uint((subgroup_local_id + 1)), (uint((subgroup_local_id + 1))) | 0u)))) * 1u)))))))) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))))) % subgroup_size)) >> (0u | 0u))) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ _GLF_IDENTITY((subgroup_local_id + 1), uint(uint((subgroup_local_id + 1))))))))) % subgroup_size), _GLF_IDENTITY((((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))))) % subgroup_size)) >> (0u | 0u), ~ (~ (_GLF_IDENTITY((((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))))) % subgroup_size)) >> (0u | 0u), ((((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))))) % subgroup_size)) >> (0u | 0u)) | ((((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))))) % subgroup_size)) >> (0u | 0u)))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((4) >> 0, (true ? (4) >> 0 : _GLF_FUZZED(76029)))), _GLF_IDENTITY(64, _GLF_IDENTITY((64) + 0, ((64) + 0) | 0)), 2);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u)))) / 1u) + 1 < (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) | (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))))))), (109936u & 0u) | (min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), _GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) * 1u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ (_GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), _GLF_IDENTITY(0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))), (0u | (0u & 98615u)) + (0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ ((min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))), _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))))))))) ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (109936u & 0u) | (min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), max((subgroup_size) | (subgroup_size), (subgroup_size) | (subgroup_size))))))), _GLF_IDENTITY((min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_FUZZED(subgroup_id))))), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ (_GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ ((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)) : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) >> (0u | 0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) | (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), (subgroup_size) | (subgroup_size)))))))))) ^ 0u)), ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec2(true, true))) ? subgroup_size : _GLF_FUZZED(subgroup_id)), clamp((_GLF_IDENTITY(true, bool(bvec2(true, true))) ? subgroup_size : _GLF_FUZZED(subgroup_id)), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? subgroup_size : _GLF_FUZZED(subgroup_id)), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? subgroup_size : _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size, subgroup_size))) | (subgroup_size))), (109936u & 0u) | (min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), _GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), _GLF_IDENTITY(0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))), (0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, ~ (~ (0u)))))), (subgroup_size) | (subgroup_size)))), ~ (~ (_GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), max(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), (subgroup_size) | (subgroup_size)))), ~ (~ ((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))))))))) ^ 0u))))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (109936u & 0u) | (min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (subgroup_size) | (subgroup_size))))), _GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ ((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size))))))), 0u ^ (_GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))), ~ (~ ((min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))) | (_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_id)), 0u + ((true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (subgroup_size) | (subgroup_size)))))))))))) ^ 0u)))), max(subgroup_size, subgroup_size)) / 2))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) + 0), 1)))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-62801))), 4, 4)), 64, 4);
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, 1.0, 1.0))))) > injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))), true && (true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false, true))))))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))) > injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)) && true))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true, false, true)))))))))), false || (true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))) > injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)) && true))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)) && true))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-851.047)), bool(false))) > injectionSwitch.y)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), false, true))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-149.474)))))) / 1.0) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), 1.0, 0.0))).x)) > injectionSwitch.y) && true)) && true))))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.8, 53.53)))).y), true && ((injectionSwitch.x > injectionSwitch.y)))), true, false, true)))))) && true)))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y))))), true))))))))))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, true))))))) && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(7125.2638))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-10.69) : injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), exp(0.0), cos(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 1.0, sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 0.0, tan(0.0), cos(0.0)), _GLF_IDENTITY(mat4(1.0) * (mat4(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), exp(0.0), cos(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 1.0, sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 0.0, tan(0.0), cos(0.0))), (true ? mat4(1.0) * (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), exp(0.0), cos(0.0), 1.0, _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / 1.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)))), 1.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0)), dot(vec2(1.0, abs(1.0)), vec2(0.0, 0.0))), 1.0, sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, determinant(mat2(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-61.82))), 0.0))), float(_GLF_FUZZED(5870.5223)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 0.0, 1.0), vec4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))), 0.0, tan(0.0), cos(0.0))) : _GLF_FUZZED(mat4(981.215, 9.6, -6.9, 8.9, -27.60, 50.83, -354.921, -6.7, 12.09, -5867.0021, 7.4, 58.41, 21.74, 23.35, 7118.7787, 3.0)))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(false, false || (false)) || ((false))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) || false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), false || _GLF_IDENTITY((bool((false))), bool(bool((bool((false))))))), bool(bvec3(bool((false)), false, false))))))) || false)))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true)))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))))), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! _GLF_IDENTITY((true), false || ((true))))))) || false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))[0], injectionSwitch[1])), injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))[0], injectionSwitch[1])), injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))))), injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * 1.0))) : _GLF_FUZZED(vec2(38.15, 0.1)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ~ (~ ((next_virtual_gid)))) << 0u), clamp(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) << 0u, ((next_virtual_gid) << 0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)))], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) | 0)))) | (64), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - 0), 64)), 64))) | (64), _GLF_IDENTITY(clamp((64) | (64), (64) | (64), (64) | (64)), max(clamp((64) | (64), (64) | (64), (64) | (64)), clamp((64) | (64), (64) | (64), (64) | (64)))))))), _GLF_IDENTITY(4, ~ (~ (4))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bvec2(_GLF_DEAD(false), false)))))))) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, _GLF_IDENTITY(~ (~ (read)), 1u * (~ (~ (read)))))) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(read, min(read, read))) - 0u, _GLF_IDENTITY(((_GLF_IDENTITY(read, min(read, read))) - 0u), (((_GLF_IDENTITY(read, min(read, read))) - 0u)) >> 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(read, min(read, read))) - 0u, ~ (~ ((_GLF_IDENTITY(read, min(read, read))) - 0u)))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
}
