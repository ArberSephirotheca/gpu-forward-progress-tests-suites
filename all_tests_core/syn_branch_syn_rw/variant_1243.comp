#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1))), _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-83798) : _GLF_IDENTITY(1, 0 | (1))))) / 1)), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) | (int(1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) | (int(8)))) >> ((0 << _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(8), (int(8)) | (0 >> _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 + (int(8))), int(_GLF_IDENTITY(ivec3(int(8), _GLF_IDENTITY(0, (0) / 1), 1), min(ivec3(int(8), 0, 1), ivec3(int(8), 0, 1))))), _GLF_IDENTITY(int(8), (int(8)) | (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(int(1), int(1))))), 1, 0)), max(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 + (int(8))), int(_GLF_IDENTITY(ivec3(int(8), _GLF_IDENTITY(0, (0) / 1), 1), min(ivec3(int(8), 0, 1), ivec3(int(8), 0, 1))))), _GLF_IDENTITY(int(8), (int(8)) | (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(int(1), int(1))))), 1, 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 + (int(8))), int(_GLF_IDENTITY(ivec3(int(8), _GLF_IDENTITY(0, (0) / 1), 1), min(ivec3(int(8), 0, 1), ivec3(int(8), 0, 1))))), _GLF_IDENTITY(int(8), (int(8)) | (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(int(1), int(1))))), 1, 0)))))) << 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? int(5) : _GLF_FUZZED(_GLF_IDENTITY(15387, (15387) | 0)))))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(86.05), _GLF_FUZZED(444.250)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(86.05), _GLF_FUZZED(444.250)), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-4.7)), float((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(686.487), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((- 94.24))), bvec2(true, false))))[0]), bool(true))), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-28.62), _GLF_FUZZED(-2.5)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0)) - vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-63.60)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(86.05), _GLF_FUZZED(444.250)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(_GLF_IDENTITY(1.0, sin(0.0) + (1.0)), 1.0)).y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(86.05), _GLF_FUZZED(_GLF_IDENTITY(444.250, mix(float(_GLF_FUZZED(-0.7)), float(_GLF_IDENTITY(444.250, mix(float(_GLF_FUZZED(-8.7)), float(444.250), bool(true)))), bool(true))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(_GLF_IDENTITY(1.0, sin(0.0) + (1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(86.05), _GLF_FUZZED(_GLF_IDENTITY(444.250, mix(float(_GLF_FUZZED(-0.7)), float(_GLF_IDENTITY(444.250, mix(float(_GLF_FUZZED(-8.7)), _GLF_IDENTITY(float(444.250), mix(float(float(444.250)), float(_GLF_FUZZED((-96.46 + 3.9))), bool(false))), bool(true)))), bool(true))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(_GLF_IDENTITY(1.0, sin(0.0) + (1.0)), 1.0))) - vec2(0.0, 0.0)).y) && true))))))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), (! (true)) || false))))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), (! (true)) || false))))))))), false, false))) || false))) || false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true))), true && (bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))))), false || (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true))), true && (bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true))))))))))), false, false)))) || false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))), true, false))))))))))), (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, false || (true)), false, false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false)), false || (bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false)))))) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, (true) && true), false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false)))) || false))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), false))) && true)))), false, false))), (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, true, false)))) && true)))), false, false), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))) || false)) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), true && (! (_GLF_IDENTITY(true, (true) || false)))))), false, false)), (bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false)))))) && true)))), false, false)))) || false))))), true, false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false), false)))))) || false)) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))))), true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false)))))))))), (bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false))))))))))) || false))) && true)))), false, false)))) || false))))), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false))), (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), _GLF_IDENTITY((bool(bvec4(false, true, false, false))), ! (_GLF_IDENTITY(! ((bool(bvec4(false, true, false, false)))), true && (! ((bool(bvec4(false, true, false, false)))))))) && true)))), false, false), false)))))) || false)) || false))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false)))))) && true)))), false, false)))) || false))))), true, false))))))))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat4(1.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, exp(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 1.0))) > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 ^ 1) | (_injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), mix(vec2(_GLF_FUZZED(9.7), _GLF_FUZZED(5660.4714)), vec2((vec2(vec2(injectionSwitch)))[0], (vec2(vec2(injectionSwitch)))[1]), bvec2(true, true)))).y, injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
        break;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | (1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), (_GLF_IDENTITY(~ (int(3)), ~ (~ (~ (int(3)))))) * 1))), int(3))) >> _GLF_IDENTITY(int(3), int(3))))))), true), false))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))))) / exp(vec2(0.0, 0.0))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))))) / exp(vec2(0.0, 0.0))).y)) && true))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))) && true, ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))), true)))))) && true))))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) * _GLF_IDENTITY(1, (1) | (1))), int(8)), (_GLF_IDENTITY(int(8), int(8))) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(8, (8) | (8)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_GLF_IDENTITY(8, (8) | (8)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(8, (8) | (8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(8), int(8)))), 0, 0))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, ! (! (false)))), true), bvec2(bvec4(bvec2(bool(false), true), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(bool(false), true), bvec2(bvec4(bvec2(bool(false), true), false, true))))))))))))
              barrier();
            }
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)).y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat3x2(3190.8327, 3.8, 12.22, 2767.2197, -7.3, 9575.2912)[1]) : injectionSwitch)).y))))))))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      continue;
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     do
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), false)))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0))) & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(0u + (uint(gl_WorkGroupSize.x)), uint(uvec3(0u + (uint(gl_WorkGroupSize.x)), 1u, 1u))))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) | (~ (gl_WorkGroupSize.x)))))) << 0u)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id)))), ((workgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id)))), 0u | ((_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id)))))), (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id)))), (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(workgroup_id)), clamp((true ? workgroup_size : _GLF_FUZZED(workgroup_id)), (true ? workgroup_size : _GLF_FUZZED(workgroup_id)), _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(workgroup_id)), min((true ? workgroup_size : _GLF_FUZZED(workgroup_id)), (true ? workgroup_size : _GLF_FUZZED(workgroup_id)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))))))))) | 0u)))) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), ! (! (! (false))))) && true))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0)) | (_GLF_IDENTITY(int(2), int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, (true) || false), false)))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), false, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), _GLF_IDENTITY(false, ! (! (false))), true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))) && true)))))) && true)), false, true, false)))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x, injectionSwitch.x)))) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), false, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), false, true, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (! (false))), true))))))))), false, true, false)))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, tan(0.0), 1.0, 1.0))))).x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))) && (true)), true && (_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))) && (true))))))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                break;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9699.1640), _GLF_FUZZED(-6.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))))))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(int(2), int(2), int(2)), max(clamp(int(2), int(2), int(2)), _GLF_IDENTITY(clamp(int(2), int(2), int(2)), min(clamp(int(2), int(2), int(2)), clamp(int(2), int(2), int(2))))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(7))), int(ivec3(((int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(6.8)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(int(2), int(2), int(2)), (clamp(int(2), int(2), int(2))) | (clamp(int(2), int(2), int(2))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(7))), 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (1 | 0), 0), (false ? _GLF_FUZZED(ivec3(93430, 47218, 87306)) : ivec3(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (1 | 0), 0))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, max(1, 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != ((0 ^ 0) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --), ~ (~ ((false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u) * subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, (0 | 0)))) < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, true))), (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : subgroup_base))) | (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) ^ 0u))) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (_GLF_IDENTITY((1) | (1), ((1) | (1)) << 0)) + (0 << _GLF_IDENTITY(int(5), int(5))))), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true, bool(bool(true))) ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) | (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_FUZZED(workgroup_base))))))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id, uint(_GLF_IDENTITY(uint(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id), uint(uvec3(_GLF_IDENTITY(uint(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id), clamp(uint(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id), uint(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id), uint(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id))), 0u, 0u))))))))) + 1), max(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true, bool(bool(true))) ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec3(false || (false), true, false)))) ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u ^ (num_workgroup))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(subgroup_id)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(subgroup_id)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id))) + 0u))) + 1), (false ? _GLF_FUZZED(69769u) : clamp(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true, bool(bool(true))) ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(subgroup_id)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id)))) + 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true, bool(bool(true))) ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u))), subgroup_id, subgroup_id)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))), _GLF_FUZZED(subgroup_id)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id)))) + 1), 1u * (clamp(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true, bool(bool(true))) ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), (_GLF_IDENTITY(0u ^ (subgroup_local_id), ~ (~ (0u ^ (subgroup_local_id))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) - 0u)), _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u)), (0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u))) / 1u)), _GLF_FUZZED(subgroup_id)))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) : subgroup_local_id)))) + 1))))))) ^ 0u)) % subgroup_size);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false))))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), ! (! (bool(bvec3(_GLF_DEAD(false), true, false)))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(2), int(2))) | (0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0)))) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) || false) || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (0 & 35518) | (_injected_loop_counter)) != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch)))))).x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ 0), clamp(_GLF_IDENTITY((0 ^ 0), ((_GLF_IDENTITY(0 ^ 0, 0 | (0 ^ 0)))) | 0), (0 ^ 0), _GLF_IDENTITY((0 ^ 0), min((0 ^ 0), (0 ^ 0)))))) ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))) && true))) ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0)), ((_GLF_IDENTITY(false ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0), (true ? false ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-0.1, 67.43, -9135.0041, -7799.4182)))))) * mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), _GLF_IDENTITY(vec4(mat3(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))) && true))) ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0)), ((_GLF_IDENTITY(false ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0), (true ? false ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-0.1, 67.43, -9135.0041, -7799.4182)))))) * mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, abs(0.0))), (false ? _GLF_FUZZED(pow(vec4(-7.4, 1406.0385, 7.8, 898.012), vec4(-54.62, 39.58, -79.88, -8.2))) : vec4(mat3(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))) && true))) ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0)), ((_GLF_IDENTITY(false ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0), (true ? false ? _GLF_FUZZED((vec4(-163.787, 8.8, 542.162, 967.496) * -33.95)) : vec4(injectionSwitch.y, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-0.1, 67.43, -9135.0041, -7799.4182)))))) * mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, abs(0.0))))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0))))), (injectionSwitch.y) + 0.0))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false)) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(min(subgroup_size, subgroup_size), 0u | (min(subgroup_size, subgroup_size))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(subgroup_size, subgroup_size), 0u | (min(subgroup_size, subgroup_size)))), min(~ (_GLF_IDENTITY(min(subgroup_size, subgroup_size), 0u | (min(subgroup_size, subgroup_size)))), ~ (_GLF_IDENTITY(min(subgroup_size, subgroup_size), 0u | (min(subgroup_size, subgroup_size))))))))))) / _GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(1, max(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), max((_GLF_IDENTITY(subgroup_size / 2, (subgroup_size / 2) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size / 2), max((subgroup_size / 2), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)) | (subgroup_size)) / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, 2)))), (2) + 0)), ((subgroup_size / 2)) - 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size / 2), max((subgroup_size / 2), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u), 0u ^ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)))) | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, 2)))), (2) + 0)), ((subgroup_size / 2)) - 0u))), uint(uvec2(_GLF_IDENTITY((subgroup_size / 2), max((subgroup_size / 2), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), uint(uint((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) * 1u)))) << 0u)) | (subgroup_size)) / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) / 1), 2)))), (2) + 0)), ((subgroup_size / 2)) - 0u))), 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size / 2), max((subgroup_size / 2), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)) >> 0u)) | (subgroup_size)) / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, 2)))), (2) + 0)), ((_GLF_IDENTITY(subgroup_size / 2, (subgroup_size / 2) << 0u))) - 0u))), max(_GLF_IDENTITY((subgroup_size / 2), max((_GLF_IDENTITY(subgroup_size / 2, ~ (~ (subgroup_size / 2)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)) | (subgroup_size), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)) | (subgroup_size), (true ? (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(subgroup_base)))))) / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, 2)))), (2) + 0)), ((subgroup_size / 2)) - 0u))), _GLF_IDENTITY((subgroup_size / 2), max((subgroup_size / 2), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) << 0u)) | (subgroup_size)) / _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, 2)))), (2) + 0)), ((subgroup_size / 2)) - 0u))))))))))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), bool(bool(_injected_loop_counter != (1 ^ 0))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       else
        {
        }
       barrier();
      }
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(33.71), _GLF_FUZZED(-261.763)), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(bool(bool(bvec4(false, false, false, false)))))), false)))))) : injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(vec2(2.8, 432.007)))).x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)), float(_GLF_FUZZED(-48.73)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - length(0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-9.5, -2.9))))).x)), ((_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-9.5, -2.9))))).x))) * round(length(normalize(vec3(1.0, 1.0, 1.0))))) - length(0.0)), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - length(0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), (true ? float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - length(0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) : _GLF_FUZZED(-6.9))))) - log(1.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, false || ((_GLF_IDENTITY(false, (false) || false)) && true)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.6) : injectionSwitch.y)), 0.0, abs(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))) : _GLF_FUZZED(0.2)))), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(float(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.6) : injectionSwitch.y)), 0.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))), (true ? _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (false ? _GLF_FUZZED(8.6) : injectionSwitch.y)), 0.0, abs(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))) : _GLF_FUZZED(0.2)))), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(float(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.6) : injectionSwitch.y)), 0.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) : _GLF_FUZZED(4.9)))), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.6) : injectionSwitch.y)), 0.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), float(float(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.6) : injectionSwitch.y)), 0.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))) + 0.0)))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   else
    {
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(241.847), _GLF_FUZZED(-284.899)), bvec2(false, false))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) + 0u, _GLF_IDENTITY(((_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), virtual_gid)), virtual_gid))) + 0u), 0u | (((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) + 0u))) ^ 0u))], read, 4, _GLF_IDENTITY(64, 1 * (64)), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true)))))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
