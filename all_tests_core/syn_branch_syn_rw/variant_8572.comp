#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, sin(tan(0.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(55.69), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-23.56)), bvec2(true, false))).y), ((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, sin(tan(0.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(55.69), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-23.56)), bvec2(true, false))).y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))) || false)))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = _GLF_IDENTITY(subgroup_id, (subgroup_id) | _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), min(_GLF_IDENTITY((true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u)))), max((true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), ~ (~ (~ (subgroup_id)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED((subgroup_id / subgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) | (uint(6u))))) ^ (_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), clamp(~ (subgroup_id), ~ (subgroup_id), ~ (subgroup_id))))))) / _GLF_IDENTITY(subgroup_id, (subgroup_id) - uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) * 1.0), injectionSwitch.x))))))) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(159121u) : subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(159121u) : subgroup_id)), _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(159121u) : subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(159121u) : subgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (false ? _GLF_FUZZED(159121u) : subgroup_id)), _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(159121u) : subgroup_id)))))))))))), (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u ^ (subgroup_id), _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u ^ (subgroup_id), (0u ^ (subgroup_id)) | (_GLF_IDENTITY(0u ^ (subgroup_id), (0u ^ (subgroup_id)) >> 0u))), 0u ^ (subgroup_id), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), (clamp(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), _GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(uvec2(14011u, 35947u).g))), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), min(0u ^ (subgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))) | (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))))), 0u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), min(0u ^ (subgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))) | (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))))), 0u))))), (_GLF_IDENTITY(0u ^ (subgroup_id), min(0u ^ (subgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))) | (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))))), 0u)))))) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(0u ^ (subgroup_id), min(0u ^ (subgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))) | (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (subgroup_id), 0u ^ (subgroup_id), 0u ^ (subgroup_id))))), 0u)))))))))) | (0u ^ (subgroup_id))), 0u ^ (subgroup_id), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u))), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), min(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))))))) >> 0u))) ^ 0u))) - 0u), (0u ^ (subgroup_id)) | 0u)))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), (0u) << 0u) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id)))) ^ 0u), 0u ^ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))))), max(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))), (_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u)))) | (_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u)))))))))), ((true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(subgroup_id)))) ^ 0u), 0u ^ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))))), max(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))))), _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))), (_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u)))) | (_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))))))))))) << 0u)), (_GLF_IDENTITY(true ? 1u * ((true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) : _GLF_FUZZED(178290u), 0u + (true ? 1u * ((true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))) : _GLF_FUZZED(178290u))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat4x2((injectionSwitch), 0.0, 0.0, 0.0, cos(0.0), cos(0.0), round(length(normalize(1.0)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4x2((injectionSwitch), 0.0, 0.0, 0.0, cos(0.0), cos(0.0), round(length(normalize(1.0)))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y) || false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y))))))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))).y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, true))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)) || false, (((false)) || false) || false))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))))), (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false)))))) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), false))), false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-978.719)), vec2(_GLF_FUZZED(376.666), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = num_workgroup;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(min(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(-84.11)), bool(false)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 1.0, determinant(mat4(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), tan(0.0), 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0)), mix(vec2((vec2(mat3(injectionSwitch, 0.0, 1.0, determinant(mat4(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), tan(0.0), 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(-272.808)), vec2(_GLF_FUZZED(-1585.8814), (vec2(mat3(injectionSwitch, 0.0, 1.0, determinant(mat4(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), tan(0.0), 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0)))[1]), bvec2(false, true)))).x)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), true, false)))))) && true), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), true, false)))))) && true)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch))) - vec2(0.0, 0.0)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(1.0), 0.0)))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, (_GLF_IDENTITY((1.0) - 0.0, mix(float((1.0) - 0.0), float(_GLF_FUZZED(6823.2281)), bool(false)))) * determinant(mat2(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))))) || false)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(-5.6), (_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(94.90), _GLF_FUZZED(-530.008)), vec2(_GLF_IDENTITY((vec2(injectionSwitch.y, abs(1.0)))[0], min((vec2(injectionSwitch.y, abs(1.0)))[0], (vec2(injectionSwitch.y, abs(1.0)))[0])), (vec2(injectionSwitch.y, abs(1.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[1]), vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), bvec2(true, false))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(-5.6), (_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(94.90), _GLF_FUZZED(-530.008)), vec2(_GLF_IDENTITY((vec2(injectionSwitch.y, abs(1.0)))[0], min((vec2(injectionSwitch.y, abs(1.0)))[0], (vec2(injectionSwitch.y, abs(1.0)))[0])), (vec2(injectionSwitch.y, abs(1.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[1]), vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), bvec2(true, false))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(-5.6), (_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(94.90), _GLF_FUZZED(-530.008)), vec2(_GLF_IDENTITY((vec2(injectionSwitch.y, abs(1.0)))[0], min((vec2(injectionSwitch.y, abs(1.0)))[0], (vec2(injectionSwitch.y, abs(1.0)))[0])), (vec2(injectionSwitch.y, abs(1.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[1]), vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), bvec2(true, false)))))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(-5.6), (_GLF_IDENTITY(vec2(injectionSwitch.y, abs(1.0)), mix(vec2(_GLF_FUZZED(94.90), _GLF_FUZZED(-530.008)), vec2(_GLF_IDENTITY((vec2(injectionSwitch.y, abs(1.0)))[0], min((vec2(injectionSwitch.y, abs(1.0)))[0], (vec2(injectionSwitch.y, abs(1.0)))[0])), (vec2(injectionSwitch.y, abs(1.0)))[1]), bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))))[1]), _GLF_IDENTITY(vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), (_GLF_IDENTITY(vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), clamp(vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), _GLF_IDENTITY(vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09)), vec2(0.0, 0.0) + (vec2((vec2(injectionSwitch.y, abs(1.0)))[0], _GLF_FUZZED(58.09))))))) * vec2(1.0, 1.0)), bvec2(_GLF_IDENTITY(true, (true) || false), false))))))) && true)))))))))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))), false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || false)) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 1.0))).y)))), false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(54.31)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))), false), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(54.31)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))), false), true, false))))), bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(54.31)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))), false), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(54.31)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))), false), true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))) || false), (injectionSwitch.x > injectionSwitch.y))), false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), max(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))) : _GLF_FUZZED(vec2(17.98, 1.0)))).y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)), false), bvec2(bvec4(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)), false), true, true))))))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-7.9), max(_GLF_FUZZED(-7.9), _GLF_IDENTITY(_GLF_FUZZED(-7.9), max(_GLF_FUZZED(-7.9), _GLF_FUZZED(-7.9)))))), vec2(_GLF_FUZZED(_GLF_IDENTITY(34.39, mix(float(_GLF_FUZZED(-17.84)), float(34.39), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))), max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)).w) ^ 0u), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w)) * subgroup_size, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)).w) ^ 0u), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w)) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)).w) ^ 0u), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w)) * subgroup_size, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)).w) ^ 0u), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w)) * subgroup_size, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)).w) ^ 0u), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w)) * subgroup_size))));
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), subgroup_local_id + 1))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 0u, 1u)))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(virtual_gid, 0u, 1u, 0u), min(uvec4(virtual_gid, 0u, 1u, 0u), uvec4(virtual_gid, _GLF_IDENTITY(0u, (0u) | 0u), 1u, 0u)))), (false ? _GLF_FUZZED(subgroup_id) : uint(_GLF_IDENTITY(uvec4(virtual_gid, 0u, 1u, 0u), min(uvec4(virtual_gid, 0u, 1u, 0u), uvec4(virtual_gid, 0u, 1u, 0u)))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false))) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))))
    return;
  }
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid), (~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid)) * 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid) / (0u | 1u)), ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid), (~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid)) * 1u)))) + 0u);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((37.05 * 375.375))), float(injectionSwitch.y), bool(true)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - log(vec2(1.0, 1.0))), injectionSwitch)).y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))), false, false))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), false || ((_GLF_IDENTITY(! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u), 4, 64, 2);
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = _GLF_IDENTITY(read, 0u | (read));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]), (_GLF_IDENTITY(false, bool(bvec3(false, false, false))) ? _GLF_FUZZED(4131.2424) : clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))))), min(injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), 0u | ((subgroup_local_id % 2))))) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true))))), false, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true))))), false, true)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true))))), false, true)))))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))) && true))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | (1))), max(uint(1), uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) ^ 0)) - 0))) << 0))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), 0 | (int(_GLF_IDENTITY(6, (6) >> 0)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), (int(6)) << 0)))))) / 1) + ((4))))))), _GLF_IDENTITY((_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY((false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))), ((0 << _GLF_IDENTITY(int(8), int(8))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))) | ((0 << _GLF_IDENTITY(int(8), int(8))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))))) << 0))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), ~ (~ (_GLF_IDENTITY(int(8), int(8)))))) | 0)) * 1)) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))) - 0)))) / 1) + ((4)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))) / 1) + ((4)))), ((false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ (0 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(6), (int(6)) << 0))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))) / 1) + ((4))))) << 0)) - 0))))) << 0, ((_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))) / 1) + ((4)))))), ~ (~ (~ (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))) / 1) + ((4)))))))))), 1 * (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY((4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) / 1)), int(8))) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) | 0))), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) - (0 | 0))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))) / 1) + ((4)))))), ~ (~ (~ (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(-74914) : ~ _GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | ((4))), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(_GLF_IDENTITY(6, 0 + (6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (6) >> (0 << _GLF_IDENTITY(int(7), int(7)))))) << 0)))))) / 1) + ((4))))))))))))) << 0) | 0)), 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(31666), (true ? _GLF_IDENTITY(4, (4) * 1) : _GLF_IDENTITY(_GLF_FUZZED(31666), (_GLF_FUZZED(31666)) << 0)) + 0))));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! (false))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), (! (! (false))) || false)))) && true))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true)))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, false)), false || (bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, false)))))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), true, false), bvec3(bvec4(bvec3((_GLF_DEAD(false)), true, false), true))))), ((_GLF_DEAD(false))) && true) || false)), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), true, false), bvec3(bvec4(bvec3((_GLF_DEAD(false)), true, false), true))))), ((_GLF_DEAD(false))) && true) || false)), bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), true, false), bvec3(bvec4(bvec3((_GLF_DEAD(false)), true, false), true))))), ((_GLF_DEAD(false))) && true) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], _GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(4, (4) << 0), 64, _GLF_IDENTITY(4, (4) | (48447 & 0)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), true && (false))))))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))), true && ((! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) && (false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) || false))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(98344u)), _GLF_FUZZED(6.4)), bvec2(false, false))).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8807.6937, 5.4)) : injectionSwitch)).y, float(mat2x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-9115.2464))))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED((-665.973 + -2.9)), min(_GLF_FUZZED((-665.973 + -2.9)), _GLF_IDENTITY(_GLF_FUZZED((-665.973 + -2.9)), float(mat3x4(_GLF_IDENTITY(_GLF_FUZZED((-665.973 + -2.9)), clamp(_GLF_FUZZED((-665.973 + -2.9)), _GLF_FUZZED((-665.973 + -2.9)), _GLF_FUZZED((-665.973 + -2.9)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))), float(injectionSwitch.y), bool(true)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, true), false)), true))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, false, true)))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
}
