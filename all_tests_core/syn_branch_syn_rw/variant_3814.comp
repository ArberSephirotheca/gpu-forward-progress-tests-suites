#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 vec2 _f0;
 vec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_5 {
 bool _f0;
 uvec2 _f1;
 _GLF_struct_4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 int _f1;
 mat3 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_6 {
 uint virtual_gid;
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 mat2 _f2;
 mat3 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED((float(_GLF_IDENTITY(74073, (74073) >> 0)) / -0.2))), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) / vec2(1.0, 1.0)), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), mix(vec2((_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) / vec2(1.0, 1.0)), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))))[0], (_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) / vec2(1.0, 1.0)), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))))[1]), vec2(_GLF_FUZZED(-5.9), _GLF_FUZZED(240.492)), bvec2(false, false)))))).x > injectionSwitch.y), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), true))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(false, (false) && true))), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(false, (false) && true))), true, false))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true))))))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), false || (! (! ((injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), false || (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec2(! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y)))))), false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), bool(bool(! (false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), ! (! (bool(false))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0) > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_size * subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, false, false)))), ! (! ((! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, false, false))))))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))))))) && true)), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, (true) || false) && (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true), true && (! (_GLF_DEAD(false))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))) && true)))))) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true && (! (_GLF_DEAD(false))), (true && (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))))) && true)))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), bool(bvec4((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), true, false)))), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true && (! (_GLF_DEAD(false))), bool(bool(true && (! (_GLF_DEAD(false))))))))))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true))))), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true && (! (_GLF_DEAD(false))), true && (true && (! (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))) && true)))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (bool(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))) && true))))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false)))), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true && (! (_GLF_DEAD(false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))) && true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))), bool(bvec2(! (_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))) && true))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(false)))))) || false)))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))), false || (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))), bool(bvec2(! (_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))) && true))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(false)))))) || false)))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))))))), true && ((! (bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) || false))) && (! (_GLF_DEAD(false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))) || false) && (! (_GLF_DEAD(false))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (! (_GLF_DEAD(false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))) && true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || (bool(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(false)))))) || false)))))) && true)))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_base + subgroup_local_id, _GLF_struct_2(_GLF_struct_0(uvec2(1u), 1, mat3(_GLF_IDENTITY(1.0, exp(0.0) * (1.0)))), _GLF_struct_1(bvec4(true)), mat2(1.0), uvec2(1u)), _GLF_struct_3(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), ivec4(0, 0, 0, 0) ^ _GLF_IDENTITY((ivec4(1)), min(_GLF_IDENTITY((ivec4(1)), clamp((ivec4(1)), (ivec4(1)), _GLF_IDENTITY((ivec4(1)), ((ivec4(1))) << ivec4(0, 0, 0, 0)))), (ivec4(1))))), true), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0)))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), mat3(1.0), _GLF_struct_5(true, _GLF_IDENTITY(uvec2(1u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec2(1u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) ^ (_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))))) : _GLF_FUZZED(uvec2(100644u, 110155u)))), _GLF_struct_4(vec2(1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, tan(abs(0.0)), 1.0, 1.0, 0.0, 0.0)), clamp(float(mat3x2(1.0, tan(abs(0.0)), 1.0, 1.0, 0.0, 0.0)), float(mat3x2(1.0, tan(abs(0.0)), 1.0, 1.0, 0.0, 0.0)), float(mat3x2(1.0, tan(abs(0.0)), 1.0, 1.0, 0.0, 0.0)))))), mat2(1.0)), bvec4(true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))), (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base)))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))), (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base)))) / 1u))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u))), uint(uvec4(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base))))), (true ? ~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base))))) : _GLF_FUZZED(num_workgroup)))) * 1u))), _GLF_IDENTITY(max(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u))), workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u)))), (max(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u))), workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u))))) | (max(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u))), workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base))))))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))))) | (subgroup_base)), max(subgroup_base, subgroup_base))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(subgroup_base, subgroup_base), min(max(subgroup_base, subgroup_base), max(subgroup_base, subgroup_base))))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))) | 0u)), (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))) * 1u))))))), 0u, 0u, 1u))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.1)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(51.38))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-4.7))))) < injectionSwitch.y)), true))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 uint read = atomicLoad(buf[_GLF_struct_replacement_6.virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < (subgroup_size / 2))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(reflect(vec2(7.5, -3.1), injectionSwitch), vec2(-7.8, 431.858), 1.8)) : _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-4.9, -530.315, -922.483, -3.8)) : mat2(1.0))) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, sin(0.0)))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) | (4)), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(9.5))), injectionSwitch[1])), injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.5)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))), ! (! (! (false)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (false), ! (! (! (false))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), false || (_GLF_IDENTITY((! (! (false))), ((! (! (false)))) || false))))), bool(bvec3(false || (_GLF_IDENTITY(! (false), ! (! (! (false))))), false, true))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(false || _GLF_IDENTITY(((! (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), ! (! (bool(bvec4(false, true, false, true))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (((! (false)))), bool(bvec2(_GLF_IDENTITY(! (((! (false)))), (! (((! (false))))) && true), false))), bool(bvec3(! (((! (false)))), false, true)))))), (bool(_GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (((! (false)))), bool(bvec3(! (((! (false)))), false, true))))))) && true))), (false || _GLF_IDENTITY(((! (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (((! (false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (((! (false)))), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(! (((! (false)))), false, true), bvec3(bvec3(bvec3(! (((! (false)))), false, true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(! (((! (false)))), false, true), bvec3(bvec3(bvec3(! (((! (false)))), false, true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(! (((! (false)))), false, true), bvec3(bvec3(bvec3(! (((! (false)))), false, true))))))))))))), bvec3(bvec4(bvec3(! (((! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))))), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true)))))))), (bool(_GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false)))) && true))), bool(bvec3(! (((_GLF_IDENTITY(! (false), true && (! (false)))))), false, true))))))) && true)))) && true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! _GLF_IDENTITY((false), ((false)) && true)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! _GLF_IDENTITY((false), ((false)) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! _GLF_IDENTITY((false), ((false)) && true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! _GLF_IDENTITY((false), ((false)) && true))))))))), true, false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))), (true ? _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(5.0) : max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))))) : _GLF_FUZZED(-1620.8330)))) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) * mat2(1.0))) / vec2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0)).x > injectionSwitch.y), false, false, true)))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9648.3848, -8262.7754)) : injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9648.3848, -8262.7754)) : injectionSwitch)).y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || ((false))))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false), false, true))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(769.003) : injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-586.898)), float(injectionSwitch.x), bool(true)))) / sqrt(1.0)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))) && true))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 0.0))), bool(bvec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, false, false))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(861.558)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-65.36)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(checker[_GLF_struct_replacement_6.virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) >> 0))), (_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) >> 0)))) / 1), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
}
