#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)))))))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)))))))), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)))))))), true), true, true))), true, false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) - 0u))), min(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) - 0u))), _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) - 0u))), max(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) - 0u))), _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) - 0u))), (workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) + (_GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u)))))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) - 0u)))) - 0u)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(115427u))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))), ((subgroup_base)) | ((subgroup_base)))) * 1u)))), 1u * (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), subgroup_base)))) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u)))), (~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))) | 0u)))))), (~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))), ((subgroup_base)) | ((subgroup_base)))) * 1u)))), 1u * (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 0u ^ ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u)), _GLF_IDENTITY(1u, (1u) + 0u) * ((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)), (((subgroup_base))) | 0u) | ((subgroup_base)))) * 1u)))), (~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))) | 0u))))))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base), (clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))))) * 1u, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_base))), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), max((subgroup_base), (subgroup_base))), ((subgroup_base)) | ((subgroup_base)))) * 1u)))), (true ? ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base))), 1u * (_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u)))) : _GLF_FUZZED((atomicLoad(workgroup_base, 82166, 37679, 14888) , subgroup_base)))), 1u * (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)), _GLF_IDENTITY(uint(uvec3(((subgroup_base)), (0u | 0u), (0u ^ 0u))), ~ _GLF_IDENTITY((~ (uint(uvec3(_GLF_IDENTITY(((subgroup_base)), (((subgroup_base))) - 0u), (0u | 0u), (0u ^ 0u))))), uint(uvec4((~ (uint(uvec3(_GLF_IDENTITY(((subgroup_base)), (((subgroup_base))) - 0u), (0u | 0u), (0u ^ 0u))))), 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) | ((subgroup_base)))) * 1u, _GLF_IDENTITY(1u * ((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), ~ (~ (((subgroup_base)) | ((subgroup_base))))))) * 1u), (_GLF_IDENTITY(1u * ((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), ~ (~ (((subgroup_base)) | ((subgroup_base))))))) * 1u), max(1u * ((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), ~ (~ (((subgroup_base)) | ((subgroup_base))))))) * 1u), 1u * ((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), ~ (~ (((subgroup_base)) | ((subgroup_base))))))) * 1u)))) << 0u)))), (~ (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))), ((_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u)))) / 1u))) | 0u)))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base)) << 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ~ (~ ((subgroup_base))))), max(((subgroup_base)), ((subgroup_base)))))) * 1u, (false ? _GLF_IDENTITY(_GLF_FUZZED(packSnorm2x16(vec2(4396.4970, -5519.2739))), _GLF_IDENTITY((_GLF_FUZZED(packSnorm2x16(vec2(4396.4970, -5519.2739)))) | 0u, ~ (~ (_GLF_IDENTITY((_GLF_FUZZED(packSnorm2x16(vec2(4396.4970, -5519.2739)))) | 0u, uint(uvec3((_GLF_FUZZED(packSnorm2x16(vec2(4396.4970, -5519.2739)))) | 0u, 0u, 0u))))))) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u) * 1u)) | 0u), ~ (~ ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u)))))))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ _GLF_IDENTITY((subgroup_base), clamp((subgroup_base), (subgroup_base), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), clamp((subgroup_base), (subgroup_base), (subgroup_base))), max((subgroup_base), _GLF_IDENTITY((subgroup_base), ((_GLF_IDENTITY(subgroup_base, 0u + (_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)))))) + 0u))))))))), subgroup_base)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), (((subgroup_base)) | ((subgroup_base))) | (((subgroup_base)) | ((subgroup_base)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), (((subgroup_base)) | ((subgroup_base))) | (((subgroup_base)) | ((subgroup_base)))), 0u, (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) - 0u))), 1u), (uvec4(_GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), (((subgroup_base)) | ((subgroup_base))) | (((subgroup_base)) | ((subgroup_base)))), 0u, (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) - 0u))), 1u)) | (uvec4(_GLF_IDENTITY(((subgroup_base)) | ((subgroup_base)), (((subgroup_base)) | ((subgroup_base))) | (((subgroup_base)) | ((subgroup_base)))), 0u, (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) - 0u))), 1u)))))) - 0u))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), (_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base)))) | (_GLF_IDENTITY((subgroup_base), clamp((subgroup_base), (subgroup_base), (subgroup_base)))))) * _GLF_IDENTITY(1u, min(1u, 1u))))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), min(false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base)), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base)), 1u * (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))))))), subgroup_base)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))), (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u)))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))), clamp((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base))), 0u ^ (_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base)), clamp(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base)), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))) | (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base)))), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), ((subgroup_base)) * uint(_GLF_ONE(1.0, injectionSwitch.y))), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u), max(((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u), ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base))), ((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base)))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), subgroup_base)))) * 1u)) << 0u), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED((+ 109780u)) : subgroup_base)), 0u ^ (subgroup_base)), subgroup_base)), subgroup_base)))))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)), (((subgroup_base))) | 0u) | ((subgroup_base)))) * 1u, 1u * ((_GLF_IDENTITY((subgroup_base), ((subgroup_base)) | (_GLF_IDENTITY((subgroup_base), ((subgroup_base)) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (~ (subgroup_base))))), _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))))))))))))) - 0u))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) || false)))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED((-23082 * -49344))))), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-57.67)), bool(false))), 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6.4)), bool(false))))), abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), mat3(1.0) * (_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, abs(1.0)), clamp(vec2(0.0, abs(1.0)), vec2(0.0, abs(1.0)), vec2(0.0, abs(1.0))))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), (false ? _GLF_FUZZED(mat3(-3.2, 332.086, 3171.2543, 56.47, -6.9, 8.9, 6.0, -9.0, -5556.8369)) : mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0))))), transpose(transpose(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(1.0)))), 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0)))))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-57.67)), bool(false))), 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6.4)), bool(false))))), abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), mat3(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), (false ? _GLF_FUZZED(mat3(-3.2, 332.086, 3171.2543, 56.47, -6.9, 8.9, 6.0, -9.0, -5556.8369)) : mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), (false ? _GLF_FUZZED(mat3(-3.2, 332.086, 3171.2543, 56.47, -6.9, 8.9, 6.0, -9.0, -5556.8369)) : mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0))))))), transpose(transpose(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(1.0)))), 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0)))))).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-57.67)), bool(false))), 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6.4)), bool(false))))), abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), mat3(1.0) * (_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), _GLF_IDENTITY((false ? _GLF_FUZZED(mat3(-3.2, 332.086, 3171.2543, 56.47, -6.9, 8.9, 6.0, -9.0, -5556.8369)) : mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0)), transpose(transpose((false ? _GLF_FUZZED(mat3(-3.2, 332.086, 3171.2543, 56.47, -6.9, 8.9, 6.0, -9.0, -5556.8369)) : mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0)))))))), transpose(transpose(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(1.0)))), 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0)))))).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), min(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, sqrt(sin(0.0)), 1.0, 1.0, sqrt(1.0))))))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.4)), vec2(_GLF_FUZZED(vec3(2940.8845, 2.1, 5.9).p), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(53.72) : 0.0))))))), 0.0), (false ? _GLF_FUZZED(mat3(-3.2, 332.086, 3171.2543, 56.47, -6.9, 8.9, 6.0, -9.0, -5556.8369)) : mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(vec4(-5.0, _GLF_IDENTITY(1230.3988, 1.0 * (_GLF_IDENTITY(1230.3988, clamp(_GLF_IDENTITY(1230.3988, (1230.3988) / 1.0), 1230.3988, 1230.3988)))), -5.6, 370.840).b))), 0.0)), 1.0), vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0))))), transpose(transpose(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(1.0))), max(dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(1.0))), dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, abs(1.0)))))), 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0)))))).y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), abs(1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(356.114))) - 0.0), 0.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), 0.0), transpose(transpose(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0)))))).y)))) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, true, true))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
