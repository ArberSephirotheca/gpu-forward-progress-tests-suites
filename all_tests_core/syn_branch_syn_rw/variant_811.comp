#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(max(gl_WorkGroupID, gl_WorkGroupID), (max(gl_WorkGroupID, gl_WorkGroupID)) >> uvec3(0u, 0u, 0u))).x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true))))), ! (! (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true))))), true && ((false) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))))))))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_size))) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size, max(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), (uint(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) | 0u)), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, 1u * (0u)))) ^ 1u) * (subgroup_id * subgroup_size))) << 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, 1u * (0u)))) ^ 1u) * (subgroup_id * subgroup_size))) << 0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, 1u * (0u)))) ^ 1u) * (subgroup_id * subgroup_size))) << 0u, ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, 1u * (0u)))) ^ 1u) * (subgroup_id * subgroup_size))) << 0u) << 0u))) : _GLF_FUZZED(subgroup_id))), ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (~ (~ (0u)))), ((~ (~ (~ (0u))))) | (_GLF_IDENTITY((~ (~ (~ (0u)))), uint(uvec3((~ (~ (~ (0u)))), 1u, 1u))))), (~ _GLF_IDENTITY((~ (~ (~ (0u)))), ((~ (~ (~ (0u))))) | (_GLF_IDENTITY((~ (~ (~ (0u)))), uint(uvec3((~ (~ (~ (0u)))), 1u, 1u)))))) ^ 0u))), _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, uint(uint(0u))))))) ^ 1u) * (subgroup_id * subgroup_size))) << 0u) | ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, 1u * (0u)))) ^ 1u) * (subgroup_id * subgroup_size))) << 0u))), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size))))) + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 1), (ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 1)) << ivec2(0, 0))), 0 + _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 1), (ivec2(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ~ (~ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))), 1)) << ivec2(0, 0)))), clamp((int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 1), (ivec2(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ~ (~ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))), 1)) << ivec2(0, 0)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 1), (ivec2(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ~ (~ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))), 1)) << ivec2(0, 0)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 1), (ivec2(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ~ (~ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))), 1)) << ivec2(0, 0))))))))) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((true ? 4 : _GLF_FUZZED(-28970)), _GLF_IDENTITY(clamp((true ? 4 : _GLF_FUZZED(-28970)), (true ? 4 : _GLF_FUZZED(-28970)), (true ? 4 : _GLF_FUZZED(-28970))), (clamp((true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-28970, 1 * (_GLF_IDENTITY(-28970, (false ? _GLF_FUZZED(bitfieldExtract(21827, -31732, -57051)) : -28970)))))), (true ? 4 : _GLF_FUZZED(-28970)), (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-28970), min(true ? 4 : _GLF_FUZZED(-28970), true ? 4 : _GLF_FUZZED(-28970)))))) * 1))), (4) | (4)), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-3.6, (-3.6) * 1.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))) - vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), mix(vec4(_GLF_FUZZED(165.356), (vec4(injectionSwitch.y, 1.0, 0.0, 1.0))[1], (vec4(injectionSwitch.y, 1.0, 0.0, 1.0))[2], (vec4(injectionSwitch.y, 1.0, 0.0, 1.0))[3]), vec4((vec4(injectionSwitch.y, 1.0, 0.0, 1.0))[0], _GLF_FUZZED(8.1), _GLF_FUZZED(7.5), _GLF_FUZZED(31.44)), bvec4(true, false, false, false))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))))), bool(true))))))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * abs(1.0))), vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y, 1.0, 0.0, 1.0)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))))))))), (bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(231.719) : _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), min((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, sin(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, 0.0, sqrt(round(length(normalize(vec2(1.0, 1.0)))))), (mat4x3(injectionSwitch, sin(0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, 0.0, sqrt(round(length(normalize(vec2(1.0, 1.0))))))) * mat4(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))), max(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))), float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))) * abs(1.0))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))))))))))) && true)))), false, _GLF_IDENTITY(true, false || (true))))), true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))) && (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec4(-2.6, 3.8, -4.1, -3842.2167)) : _GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), _GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), mix(float(_GLF_FUZZED(-3.6)), float(float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), bool(true))))))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))))), false, true))), true)))), (bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0))))))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0))))))), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))))))), true))) && true)))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false)) || false))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false)) || false))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false)) || false))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), false, true))))) || false)))))))), false))))))
      {
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15520))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 + (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, max(0, 0)) & 44806)); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0)), max(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0)), _GLF_IDENTITY(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0)), mix(float(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0))), float(_GLF_FUZZED(-852.393)), bool(false)))))), float(_GLF_FUZZED(3.2)), bool(false)))) && true))), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0)), max(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0)), _GLF_IDENTITY(float(mat2x3(float(injectionSwitch.y), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0)), mix(float(float(mat2x3(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), 1.0, sqrt(1.0), abs(0.0), 1.0, 0.0))), float(_GLF_FUZZED(-852.393)), bool(false)))))), float(_GLF_FUZZED(3.2)), bool(false)))) && true)))))))
                                      barrier();
                                     barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, _GLF_IDENTITY(false, (false) || false), false), false)))), false, true, false))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.0)), bool(false))), false, true, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, false))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, false))), true, false)))))))))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))), true), true)))))))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(vec2(-692.499, 6.5).y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))) && true))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0) < _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | 1), (_injected_loop_counter != (1 | 1)) || false)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false)))) && true); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y))), false))))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, tan(0.0))))), float(_GLF_FUZZED(-926.257)), bool(false)))))))))))))
          {
           switch(_GLF_SWITCH(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))))), max((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, (0) ^ 0)), _GLF_IDENTITY(int(0), (int(0)) / 1)))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, (0) ^ 0)), _GLF_IDENTITY(int(0), (int(0)) / 1)))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, (0) ^ 0)), _GLF_IDENTITY(int(0), (int(0)) / 1))))))), (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) >> 0))))))))))))
            {
             case 34:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             bvec2 _GLF_SWITCH_0_0v;
             case 88:
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec4((false), false, false, true)))) || false) || false)))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v; true; mat4x2((_GLF_IDENTITY(_GLF_IDENTITY(false ? mat4(-4.8, -2.1, 501.268, _GLF_IDENTITY(-6718.5038, (true ? -6718.5038 : _GLF_IDENTITY(_GLF_FUZZED(normalize(3.1)), min(_GLF_FUZZED(normalize(3.1)), _GLF_FUZZED(normalize(3.1)))))), -58.26, 283.634, _GLF_IDENTITY(3.2, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) ? 3.2 : _GLF_FUZZED(_GLF_IDENTITY(determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0)), min(_GLF_IDENTITY(determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0)), (determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0))) / 1.0), determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0))))))), 134.980, -56.84, -5304.7248, -43.52, -775.479, 6407.8967, _GLF_IDENTITY(-13.27, min(_GLF_IDENTITY(-13.27, mix(float(_GLF_FUZZED(-869.012)), float(_GLF_IDENTITY(-13.27, max(-13.27, -13.27))), bool(true))), -13.27)), -0.9, 1.6) : mat4(_GLF_IDENTITY(-1.1, min(-1.1, -1.1)), -45.23, -6314.0500, -3568.1648, -65.57, 554.238, 8845.0557, _GLF_IDENTITY(-0.9, min(_GLF_IDENTITY(-0.9, (-0.9) - 0.0), -0.9)), 9907.1812, -3142.9139, 6.9, 970.590, 79.01, 6.1, -1.9, -73.71), transpose(_GLF_IDENTITY(transpose(false ? mat4(-4.8, -2.1, 501.268, _GLF_IDENTITY(-6718.5038, (true ? -6718.5038 : _GLF_IDENTITY(_GLF_FUZZED(normalize(3.1)), min(_GLF_FUZZED(normalize(3.1)), _GLF_FUZZED(normalize(3.1)))))), -58.26, 283.634, _GLF_IDENTITY(3.2, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) ? 3.2 : _GLF_FUZZED(_GLF_IDENTITY(determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0)), min(_GLF_IDENTITY(determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0)), (determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0))) / 1.0), determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0))))))), 134.980, -56.84, -5304.7248, -43.52, -775.479, 6407.8967, _GLF_IDENTITY(-13.27, min(_GLF_IDENTITY(-13.27, mix(float(_GLF_FUZZED(-869.012)), float(_GLF_IDENTITY(-13.27, max(-13.27, -13.27))), bool(true))), -13.27)), -0.9, 1.6) : mat4(_GLF_IDENTITY(-1.1, min(-1.1, -1.1)), -45.23, -6314.0500, -3568.1648, -65.57, 554.238, 8845.0557, _GLF_IDENTITY(-0.9, min(_GLF_IDENTITY(-0.9, (-0.9) - 0.0), -0.9)), 9907.1812, -3142.9139, 6.9, 970.590, 79.01, 6.1, -1.9, -73.71)), (false ? _GLF_FUZZED(mat4(-92.37, -0.8, 4338.3510, 97.22, 431.402, -605.478, 7.1, 62.04, -7.3, -6.8, -2209.0698, 2129.3436, 5.4, -7017.1242, 6.1, 327.786)) : transpose(false ? mat4(-4.8, -2.1, 501.268, _GLF_IDENTITY(-6718.5038, (true ? -6718.5038 : _GLF_IDENTITY(_GLF_FUZZED(normalize(3.1)), min(_GLF_FUZZED(normalize(3.1)), _GLF_FUZZED(normalize(3.1)))))), -58.26, 283.634, _GLF_IDENTITY(3.2, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) ? 3.2 : _GLF_FUZZED(_GLF_IDENTITY(determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0)), min(_GLF_IDENTITY(determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0)), (determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0))) / 1.0), determinant(mat4(-70.88, 1.6, 115.820, -2.2, -90.63, 76.87, -24.93, 35.95, 1069.1185, 240.718, 952.721, 6.9, 2365.2399, 2091.9866, -55.24, -4.0))))))), 134.980, -56.84, -5304.7248, -43.52, -775.479, 6407.8967, _GLF_IDENTITY(-13.27, min(_GLF_IDENTITY(-13.27, mix(float(_GLF_FUZZED(-869.012)), float(_GLF_IDENTITY(-13.27, max(-13.27, -13.27))), bool(true))), -13.27)), -0.9, 1.6) : mat4(_GLF_IDENTITY(-1.1, min(-1.1, -1.1)), -45.23, -6314.0500, -3568.1648, -65.57, 554.238, 8845.0557, _GLF_IDENTITY(-0.9, min(_GLF_IDENTITY(-0.9, (-0.9) - 0.0), -0.9)), 9907.1812, -3142.9139, 6.9, 970.590, 79.01, 6.1, -1.9, -73.71)))))), (false ? mat4(-4.8, -2.1, 501.268, _GLF_IDENTITY(-6718.5038, (true ? -6718.5038 : _GLF_FUZZED(normalize(3.1)))), -58.26, 283.634, 3.2, 134.980, -56.84, -5304.7248, -43.52, -775.479, 6407.8967, -13.27, -0.9, _GLF_IDENTITY(1.6, min(_GLF_IDENTITY(1.6, min(1.6, _GLF_IDENTITY(1.6, (1.6) / 1.0))), _GLF_IDENTITY(1.6, clamp(_GLF_IDENTITY(1.6, (1.6) / 1.0), 1.6, _GLF_IDENTITY(1.6, _GLF_IDENTITY(float(mat2(1.6, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0)))), 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0))), 1.0)), (float(mat2(1.6, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0), (true ? vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0) : _GLF_FUZZED((true ? vec2(908.578, 4537.1910) : injectionSwitch))))), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0))), 1.0))) * 1.0))))))) : mat4(-1.1, -45.23, -6314.0500, -3568.1648, -65.57, _GLF_IDENTITY(554.238, 1.0 * (554.238)), 8845.0557, -0.9, 9907.1812, -3142.9139, 6.9, 970.590, 79.01, 6.1, -1.9, -73.71)) - mat4(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-6044.0407)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(-5.6))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     uvec4(191243u, 111214u, 165717u, 160147u);
                     for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 1, (_GLF_IDENTITY(0 ^ 1, int(ivec2(_GLF_IDENTITY(0 ^ 1, 0 | (0 ^ _GLF_IDENTITY(1, clamp(1, 1, 1)))), 1)))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))))
                          barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 barrier();
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)))))))));
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, 6))), int(6))), _GLF_IDENTITY(0, ~ (~ (0))) | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), (true ? (1 << _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(_injected_loop_counter))) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))))); _injected_loop_counter --)
                        {
                         _GLF_IDENTITY(_GLF_IDENTITY(bitfieldInsert(uvec4(150223u, 171795u, 29020u, 179877u), uvec4(119210u, 150778u, 76869u, _GLF_IDENTITY(75269u, 0u + (75269u))), atomicCompSwap(_GLF_SWITCH_0_2v, _GLF_SWITCH_0_1v, -75855), int(subgroup_id)), (bitfieldInsert(uvec4(150223u, 171795u, 29020u, 179877u), uvec4(_GLF_IDENTITY(119210u, (true ? _GLF_IDENTITY(119210u, max(119210u, 119210u)) : _GLF_FUZZED(read))), 150778u, 76869u, _GLF_IDENTITY(_GLF_IDENTITY(75269u, min(75269u, _GLF_IDENTITY(75269u, ~ _GLF_IDENTITY((~ (75269u)), uint(uint((~ (75269u)))))))), 0u + _GLF_IDENTITY((75269u), (false ? _GLF_FUZZED(atomicXor(workgroup_id, workgroup_id)) : (75269u))))), atomicCompSwap(_GLF_SWITCH_0_2v, _GLF_SWITCH_0_1v, _GLF_IDENTITY(-75855, (-75855) * 1)), int(subgroup_id))) - uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(bitfieldInsert(uvec4(150223u, 171795u, 29020u, 179877u), uvec4(119210u, _GLF_IDENTITY(150778u, min(150778u, 150778u)), 76869u, _GLF_IDENTITY(75269u, 0u + (75269u))), atomicCompSwap(_GLF_SWITCH_0_2v, _GLF_SWITCH_0_1v, -75855), int(subgroup_id)), (bitfieldInsert(uvec4(150223u, 171795u, 29020u, 179877u), uvec4(_GLF_IDENTITY(119210u, (true ? _GLF_IDENTITY(119210u, max(119210u, 119210u)) : _GLF_FUZZED(read))), 150778u, 76869u, _GLF_IDENTITY(_GLF_IDENTITY(75269u, min(75269u, _GLF_IDENTITY(75269u, ~ _GLF_IDENTITY((~ (75269u)), uint(uint((~ (75269u)))))))), 0u + _GLF_IDENTITY((75269u), (_GLF_IDENTITY(false ? _GLF_FUZZED(atomicXor(workgroup_id, workgroup_id)) : (75269u), (false ? _GLF_FUZZED(atomicXor(workgroup_id, workgroup_id)) : (75269u)) ^ 0u))))), atomicCompSwap(_GLF_SWITCH_0_2v, _GLF_SWITCH_0_1v, _GLF_IDENTITY(-75855, (-75855) * 1)), int(subgroup_id))) - uvec4(0u, 0u, 0u, 0u))));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     (_GLF_IDENTITY(_GLF_IDENTITY(mat2(mat4x2(47.45, -0.9, 7196.1542, -0.4, -9259.1927, -54.45, 1.1, 25.08)), mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) * (_GLF_IDENTITY(mat2(mat4x2(47.45, -0.9, 7196.1542, -0.4, -9259.1927, -54.45, _GLF_IDENTITY(1.1, max(1.1, 1.1)), 25.08)), transpose(transpose(mat2(mat4x2(47.45, -0.9, 7196.1542, -0.4, -9259.1927, -54.45, 1.1, 25.08))))))), (mat2(mat4x2(_GLF_IDENTITY(47.45, max(_GLF_IDENTITY(47.45, clamp(47.45, 47.45, 47.45)), 47.45)), _GLF_IDENTITY(-0.9, float(mat4x2(-0.9, abs(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-966.218)))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 7196.1542, -0.4, -9259.1927, -54.45, 1.1, 25.08))) * mat2(1.0)) / -6.5);
                     {
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                         {
                          if(_GLF_DEAD(false))
                           {
                            do
                             {
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                if(_GLF_DEAD(false))
                                 barrier();
                                if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                 barrier();
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                                 {
                                 }
                                else
                                 {
                                  barrier();
                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   barrier();
                                 }
                               }
                              else
                               {
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                           }
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           barrier();
                         }
                       }
                      if(_GLF_DEAD(false))
                       barrier();
                      if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))
                       {
                        do
                         {
                          barrier();
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      if(_GLF_DEAD(false))
                       {
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                         {
                          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.9)), float(injectionSwitch.y), bool(true)))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.9)), float(injectionSwitch.y), bool(true)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.9)), float(injectionSwitch.y), bool(true))))) && true)) || false))))
                           {
                           }
                          else
                           {
                            barrier();
                           }
                         }
                       }
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         barrier();
                        _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (true))), false), bvec2(bvec2(bvec2(true, false))));
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                           barrier();
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                           {
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               barrier();
                             }
                           }
                         }
                        barrier();
                        if(_GLF_DEAD(false))
                         barrier();
                       }
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                       }
                      else
                       {
                       }
                     }
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (true ? clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y) : _GLF_FUZZED(6735.8617))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             ivec2(45524, -25049);
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     {
                      for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                       }
                      do
                       {
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                           }
                          else
                           {
                            vec3(0.5, _GLF_IDENTITY(-433.593, (false ? _GLF_FUZZED(_GLF_IDENTITY(6.6, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.6, clamp(6.6, 6.6, 6.6)), sqrt(1.0), 0.0, 0.0, 0.0, sin(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)))), abs(tan(0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0)), (mat3x4(6.6, sqrt(1.0), 0.0, 0.0, 0.0, sin(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)))), abs(tan(0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) : -433.593)), -3.3);
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              if(_GLF_DEAD(false))
                               barrier();
                              if(_GLF_DEAD(false))
                               barrier();
                             }
                            else
                             {
                             }
                           }
                          if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                           barrier();
                         }
                        else
                         {
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                       {
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                         {
                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) * 1)); _injected_loop_counter --)
                           {
                            if(_GLF_DEAD(false))
                             {
                              if(_GLF_DEAD(false))
                               barrier();
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                barrier();
                               }
                             }
                           }
                         }
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          if(_GLF_WRAPPED_IF_FALSE(false))
                           {
                           }
                          else
                           {
                            barrier();
                           }
                         }
                        else
                         {
                         }
                       }
                      if(_GLF_DEAD(false))
                       barrier();
                      do
                       {
                        if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                         {
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                             {
                              do
                               {
                                do
                                 {
                                  barrier();
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                               }
                              while(_GLF_WRAPPED_LOOP(false));
                             }
                           }
                          else
                           {
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), false || (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false))))))), (injectionSwitch.x < injectionSwitch.y))))
                       {
                        mat2x4(-533.364, _GLF_IDENTITY(-3065.4511, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), max(float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), 1.0, 0.0)))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), max(float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), 1.0, 0.0)))), float(float(_GLF_IDENTITY(float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), max(float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), float(mat4x2(-3065.4511, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), 1.0, 0.0)))))))), float(_GLF_FUZZED(-0.9)), bool(false)))), _GLF_IDENTITY(20.43, (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), mix(float(_GLF_IDENTITY(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), (false ? _GLF_FUZZED(-2062.7457) : float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0))))), float(_GLF_FUZZED(-4607.6416)), bool(false))))))))), _GLF_IDENTITY(true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || false)), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-37.26)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), mix(float(_GLF_IDENTITY(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), tan(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat2x4(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), tan(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(-93.13)), float(float(_GLF_IDENTITY(mat2x4(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), tan(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat2x4(float(vec4((injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), exp(0.0))), 1.0)), tan(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)))))), bool(true))))), float(_GLF_FUZZED(-4607.6416)), bool(false))))))))), _GLF_IDENTITY(true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y))))), true && (true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || false)), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) ? _GLF_FUZZED(exp(-5.2)) : _GLF_IDENTITY(20.43, min(20.43, 20.43)))), _GLF_IDENTITY(6.8, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-7.7), (_GLF_IDENTITY(_GLF_FUZZED(-7.7), 0.0 + (_GLF_FUZZED(-7.7)))) / 1.0)), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(7450.3285) : float(_GLF_IDENTITY(_GLF_FUZZED(-7.7), (_GLF_IDENTITY(_GLF_FUZZED(-7.7), 0.0 + (_GLF_FUZZED(-7.7)))) / 1.0)))), float(6.8), bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))), -56.19, -8.1, _GLF_IDENTITY(2.5, max(2.5, 2.5)), _GLF_IDENTITY(6.3, mix(float(_GLF_FUZZED(31.62)), float(6.3), bool(true))));
                       }
                      else
                       {
                       }
                      uvec2(21083u, 39082u);
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       barrier();
                      if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec2(bool(bvec4(false, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), false))))) && true)))
                       barrier();
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(sign(_injected_loop_counter)))) < 1))) && true))); _injected_loop_counter ++)
                         {
                          for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(1, 1, 1)) | _GLF_IDENTITY(1, min(1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                           {
                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                             {
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_DEAD(false))
                                 {
                                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                                   {
                                    barrier();
                                   }
                                 }
                                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))) || false)))
                                 {
                                 }
                                else
                                 {
                                  barrier();
                                 }
                               }
                             }
                           }
                         }
                       }
                      else
                       {
                       }
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bool(bool(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))), ! (! (! (_GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bool(bool(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))))))))
                       {
                        mix(52.34, distance(_GLF_IDENTITY(_GLF_IDENTITY(vec2(-34.36, 6.2), (vec2(-34.36, 6.2)) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1.8))), min(0.0, 0.0)))), 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(vec2(-34.36, 6.2), vec2(1.0, 1.0) * (vec2(-34.36, 6.2))), vec2(-34.36, 6.2), vec2(-34.36, 6.2)), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-4.1, 957.809, -74.56, 188.373)) : mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-4.1, 957.809, -74.56, 188.373)) : mat2(1.0))))) * (clamp(_GLF_IDENTITY(vec2(-34.36, 6.2), vec2(1.0, 1.0) * _GLF_IDENTITY((vec2(-34.36, 6.2)), (_GLF_IDENTITY((vec2(-34.36, 6.2)), _GLF_IDENTITY(mat2(1.0) * ((vec2(-34.36, 6.2))), (mat2(1.0) * ((vec2(-34.36, 6.2)))) * mat2(1.0)))) / cos(vec2(0.0, 0.0)))), vec2(-34.36, 6.2), vec2(-34.36, 6.2))))), vec2(4.3, 7.2)), false);
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       {
                        do
                         {
                          barrier();
                         }
                        while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       }
                      vec2 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
                      do
                       {
                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                         {
                         }
                        else
                         {
                          if(_GLF_DEAD(false))
                           barrier();
                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))) && true)); _injected_loop_counter --)
                           {
                            mat3x2(mat4x3(2.3, 2.1, -4.8, 0.5, -4.8, -6.2, -1772.3627, _GLF_IDENTITY(5.6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5.6, mix(float(_GLF_FUZZED(-0.9)), float(_GLF_IDENTITY(5.6, float(mat4x3(5.6, sin(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(3972.2451) : 5.6)), (_GLF_IDENTITY(5.6, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(3972.2451) : 5.6, float(mat2x3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(3972.2451) : 5.6, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 0.0)))))) + length(vec4(0.0, 0.0, 0.0, 0.0))), 5.6, _GLF_IDENTITY(5.6, float(vec4(_GLF_IDENTITY(5.6, float(mat2x4(5.6, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(237.180)), float(0.0), bool(true))), 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), (false ? _GLF_FUZZED(-214.459) : float(mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))))), 0.0, 1.0))), 0.0, 0.0, 0.0))))), 68.75, -8.3, -6902.4021, 756.368));
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))));
                      int _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                      if(_GLF_DEAD(false))
                       barrier();
                      do
                       {
                        if(_GLF_DEAD(false))
                         barrier();
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), max(_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(sign(_GLF_SWITCH_0_1v)) : _GLF_IDENTITY((int(2)), 1 * ((int(2)))))), _GLF_IDENTITY((int(2)), 1 * ((int(2)))))) / 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) < 1); _injected_loop_counter ++)
                       {
                        do
                         {
                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                           {
                            uint(_GLF_SWITCH_0_6v);
                           }
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      bvec3 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
                     }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              barrier();
             case 0:
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             case 69:
             case 86:
             if(_GLF_DEAD(false))
              barrier();
             case 31:
             case 61:
             int i = 0;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             case 77:
             case 37:
             case 89:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))) && true))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             case 81:
             atomicStore(checker[virtual_gid], read, 4, 64, 4);
             break;
             case 76:
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-358.498)), bool(false))))).y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         (uvec3(21506u, 1150u, 184060u) , mat3x2(-0.5, 7201.1613, 0.8, 8.5, 3.5, 48.77));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   uvec3 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(391.039)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             case 46:
             if(_GLF_DEAD(false))
              barrier();
             vec3 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v;
             default:
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, max(0, 0))))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(1957.2311))) < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 1;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(1.4, -84.93)))).x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((7004 * 9622)) : _GLF_IDENTITY(2, min(2, 2)))), 1), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true) ? _GLF_FUZZED((_GLF_IDENTITY(7004, min(7004, 7004)) * 9622)) : 2)), 1)), (~ (ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((7004 * 9622)) : 2)), 1))) | (~ (ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((7004 * 9622)) : 2)), 1))))))), 0 ^ (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((7004 * 9622)) : _GLF_IDENTITY(2, min(2, 2)))), 1), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true) ? _GLF_FUZZED((_GLF_IDENTITY(7004, min(7004, 7004)) * 9622)) : 2)), 1)), (~ (ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((7004 * 9622)) : 2)), 1))) | (~ (ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((7004 * 9622)) : 2)), 1))))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2))))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 0) | 0), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 0) | 0), ! (! (_injected_loop_counter != ((1 ^ 0) | 0))))), (bool(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 0) | 0), ! (! (_injected_loop_counter != ((1 ^ 0) | 0)))))) && true)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
  }
}
