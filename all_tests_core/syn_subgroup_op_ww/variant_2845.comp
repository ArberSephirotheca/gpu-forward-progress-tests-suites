#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 vec2 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 ivec3 _f1;
 bool _f2;
} ;

struct _GLF_struct_1 {
 uint subgroup_local_id;
 uint _f0;
 bool _f1;
 vec3 _f2;
 bvec3 _f3;
 _GLF_struct_0 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_1(gl_SubgroupInvocationID, 1u, true, vec3(1.0), bvec3(true), _GLF_struct_0(mat3x4(1.0), ivec3(1), true)), _GLF_struct_3(_GLF_struct_2(vec2(1.0))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_4._f0.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, 0u))), subgroup_id)), subgroup_id)) * subgroup_size + _GLF_IDENTITY(((_GLF_struct_replacement_4._f0.subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_struct_replacement_4._f0.subgroup_local_id + 1, max(_GLF_struct_replacement_4._f0.subgroup_local_id + 1, _GLF_IDENTITY(_GLF_struct_replacement_4._f0.subgroup_local_id + 1, uint(uint(_GLF_struct_replacement_4._f0.subgroup_local_id + 1)))))) % subgroup_size), (((_GLF_struct_replacement_4._f0.subgroup_local_id + 1) % subgroup_size)) - 0u)) >> 0u);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_struct_replacement_4._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}
