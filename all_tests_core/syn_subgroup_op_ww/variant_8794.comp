#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) - (0u & 150477u)), 0u | (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) - (0u & 150477u))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5.3)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))), (true ? injectionSwitch.y : _GLF_FUZZED(-5.2)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), false, true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-11.84, -9.2)))))).y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   for(int _injected_loop_counter = (0 & -55848); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.y = num_workgroup, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(51800u) : num_workgroup))) / 1u);
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (gl_WorkGroupSize[0]) ^ (0u ^ 0u)), gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(36406) : 1))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter)))))
      {
       for(int _injected_loop_counter = (-72965 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))
      continue;
     GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w = workgroup_base;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec4((false) || false, true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (bool(_GLF_IDENTITY(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((false) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))), (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false)))) && true))) && true), true)))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z;
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u)))))) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), clamp(~ (((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(189742u) : subgroup_local_id)) + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), ~ (((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), ~ (((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ (((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_base)))) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), clamp(~ _GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), (_GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), uint(uvec2((((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), 1u)))) | ((((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)))), ~ (((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)), ~ (((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z))))))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(clamp(injectionSwitch, -4.0, -88.03)), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_FUZZED(clamp(injectionSwitch, -4.0, -88.03)), (_GLF_IDENTITY(_GLF_FUZZED(clamp(injectionSwitch, -4.0, -88.03)), (true ? _GLF_FUZZED(clamp(injectionSwitch, -4.0, -88.03)) : _GLF_FUZZED(injectionSwitch)))) * vec2(1.0, 1.0)))) : injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))));
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x = next_virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1296.1412) : injectionSwitch.x)), 1.0, 0.0, exp(0.0), abs(0.0), 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0)))) / 1.0) > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false), ((false)) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))), false || (false))))
    break;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), max(max(0.0, 0.0), max(0.0, 0.0)))), 0.0, 1.0, sqrt(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 0.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(8.8)), bool(false))), 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(0.1, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)), (false ? _GLF_FUZZED(-7.7) : mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_IDENTITY(_GLF_FUZZED(516.132), 1.0 * (_GLF_FUZZED(516.132)))), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)))))))), bool(false))), 0.0), (true ? max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(0.1, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)), (false ? _GLF_FUZZED(-7.7) : mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_IDENTITY(_GLF_FUZZED(516.132), 1.0 * (_GLF_FUZZED(516.132)))), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)))))))), bool(false))), mix(float(_GLF_FUZZED(-840.351)), float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(0.1, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)), (false ? _GLF_FUZZED(-7.7) : mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_IDENTITY(_GLF_FUZZED(516.132), 1.0 * (_GLF_FUZZED(516.132)))), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)))))))), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(0.1, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)), (false ? _GLF_FUZZED(-7.7) : mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_IDENTITY(_GLF_FUZZED(516.132), 1.0 * (_GLF_FUZZED(516.132)))), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)))))))), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(0.1, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)), (false ? _GLF_FUZZED(-7.7) : mix(float(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(516.132)), float(0.1), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x4(_GLF_IDENTITY(0.1, mix(float(_GLF_IDENTITY(_GLF_FUZZED(516.132), 1.0 * (_GLF_FUZZED(516.132)))), float(0.1), bool(true))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(5981.8548)), bool(false)))))))), bool(false)))))), bool(true))), 0.0) : _GLF_FUZZED(3063.3376)))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + sqrt(sqrt(0.0))))), 0.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), (vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)) / vec3(1.0, 1.0, 1.0))), (_GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), max(max(1.0, 1.0), max(1.0, 1.0)))), 1.0, 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), exp(vec3(0.0, 0.0, 0.0)) * (vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))) / vec3(1.0, 1.0, 1.0))), max(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))))), 1.0, 1.0), (vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), mix(float(_GLF_FUZZED(5.1)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), bool(true))), 1.0, 1.0)) / vec3(1.0, 1.0, 1.0)))))) / sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(normalize(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-80.92)), bool(false))), 1.0, 1.0)), mix(vec3((normalize(vec3(1.0, 1.0, 1.0)))[0], (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(4.7))) : _GLF_FUZZED(15.00))), 1.0)))[1], _GLF_FUZZED(37.28)), vec3(_GLF_FUZZED((+ -822.873)), _GLF_FUZZED(-46.33), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-95.62, min(-95.62, _GLF_IDENTITY(-95.62, 0.0 + (-95.62))))) : 1.0, min(false ? _GLF_FUZZED(-95.62) : 1.0, false ? _GLF_FUZZED(-95.62) : 1.0)))), 1.0)))[2]), bvec3(false, false, true))), mat3(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), clamp(normalize(vec3(1.0, 1.0, 1.0)), normalize(vec3(1.0, 1.0, 1.0)), normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY((true ? normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(smoothstep(23.03, -1.9, -432.202)) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) : _GLF_FUZZED(vec3(607.661, -4.5, 6.3))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (true ? normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(smoothstep(23.03, -1.9, -432.202)) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) : _GLF_FUZZED(vec3(607.661, -4.5, 6.3))) : _GLF_FUZZED(vec3(-2.7, 6400.4960, 0.0)))))))) - vec3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), max(float(mat3x2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, sqrt(0.0), 1.0)), float(mat3x2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, sqrt(0.0), 1.0))))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(87.17)), bool(false))), (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(87.17), (false ? _GLF_FUZZED(7280.3960) : _GLF_FUZZED(87.17)))), bool(false)))) / 1.0))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0))) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(25.32, 8.3, -9.3).x), _GLF_FUZZED(_GLF_IDENTITY(-3334.5843, min(-3334.5843, _GLF_IDENTITY(-3334.5843, (true ? -3334.5843 : _GLF_FUZZED(298.344))))))), bvec2(false, false)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2((injectionSwitch)), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)), 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0), 0.0, 0.0)), min(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), max(_GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), clamp(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)))), vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)))))))), clamp(vec2(_GLF_IDENTITY(vec2((injectionSwitch)), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), min(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)))))), vec2(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), min(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)))))), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0)), min(vec2(mat3x2(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(62.81), _GLF_FUZZED(30.19)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0, abs(1.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), vec2(mat3x2(vec2((injectionSwitch)), 1.0, abs(1.0), 0.0, 0.0))))))))))) * vec2(1.0, 1.0)).y, float(mat3(injectionSwitch.y, 1.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, determinant(mat3(1.0, cos(0.0), abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))), 0.0, 1.0, determinant(mat4(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 0.0, log(1.0), 1.0, 0.0), (mat3x2(0.0, 0.0, 0.0, log(1.0), 1.0, 0.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)) + (1.0)), sqrt(0.0), 0.0, 0.0, determinant(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6.6, 1.0 * (-6.6)))), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(61.90) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-476.129) : 1.0)))), float(mat3x2(1.0, 1.0, 0.0, sqrt(1.0), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false, (false) && true) || (bool(true))))), 0.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(0.1)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))), min(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))))), min(mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(0.1), mix(float(_GLF_FUZZED(-898.348)), float(_GLF_IDENTITY(_GLF_FUZZED(0.1), (_GLF_FUZZED(0.1)) / cos(0.0))), bool(true)))), bool(false)), mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(0.1)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec2(bool(false), false)), bool(bvec3(bool(bvec2(bool(false), false)), false, true))))), clamp(mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false)), mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false)), mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false)))), (_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false)), clamp(mix(_GLF_IDENTITY(float(0.0), (float(0.0)) / 1.0), float(_GLF_FUZZED(0.1)), bool(false)), mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false)), mix(float(0.0), float(_GLF_FUZZED(0.1)), bool(false))))) * 1.0)))), 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-508.380))), 0.0, 0.0)), 0.0)))), float(_GLF_FUZZED(_GLF_IDENTITY(-681.605, (-681.605) * exp(0.0)))), bool(false)), (mix(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 0.0))), max(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 0.0)))))), float(_GLF_FUZZED(_GLF_IDENTITY(-681.605, (-681.605) * exp(0.0)))), bool(false))) - 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 0.0 + (float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), 1.0, 0.0, 0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-7.6) : 1.0, float(float(false ? _GLF_FUZZED(-7.6) : 1.0))), mix(float(_GLF_FUZZED(-6.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-7.6) : 1.0, float(float(false ? _GLF_FUZZED(-7.6) : 1.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-7.6) : 1.0, float(float(false ? _GLF_FUZZED(-7.6) : 1.0)))) / 1.0)), bool(true))))) : _GLF_FUZZED(-0.6))))))), 0.0)))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) | 0u) << 0u) == 0)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), float(_GLF_IDENTITY(_GLF_FUZZED((-4.1 + -2.9)), mix(float(_GLF_FUZZED(-433.647)), float(_GLF_FUZZED((-4.1 + -2.9))), bool(true)))), bool(false)), _GLF_IDENTITY(max(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.4)), float(0.0), bool(true))) : _GLF_FUZZED(-5.7)))), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), (mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))) / 1.0), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), clamp(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))))), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))))), clamp(_GLF_IDENTITY(max(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.4)), float(0.0), bool(true))) : _GLF_FUZZED(-5.7)))), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), (mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))) / 1.0), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), clamp(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))))), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))))), (false ? _GLF_FUZZED(6.1) : max(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.4)), float(0.0), bool(true))) : _GLF_FUZZED(-5.7)))), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), (mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))) / 1.0), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), clamp(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))))), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))))))), max(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.4)), float(0.0), bool(true))) : _GLF_FUZZED(-5.7)))), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), (mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))) / 1.0), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), clamp(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))))), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))))), max(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.4)), float(0.0), bool(true))) : _GLF_FUZZED(-5.7)))), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), (mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))) / 1.0), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), clamp(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))), _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false))), float(_GLF_FUZZED(1118.4409)), bool(false))))), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)), mix(float(0.0), float(_GLF_FUZZED((-4.1 + -2.9))), bool(false)))))))))) / 1.0), injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(false, true, false, true)), false, false), bvec3(bvec4(bvec3(bool(bvec4(false, true, false, true)), false, false), false))))), (bool(bvec4(false, true, false, true))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))), false)))))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))) || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(asin(-3.6)))) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))), bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(asin(-3.6)))) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))), true)))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))) << 0) > _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) << 0), 0 | _GLF_IDENTITY((0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) - 0)))), ((0)) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-801) : 0)))), max(_GLF_IDENTITY((_GLF_IDENTITY((0), ((0)) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-801) : 0)))), max((_GLF_IDENTITY((0), ((0)) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-801) : 0)))), (_GLF_IDENTITY((0), ((0)) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-801) : 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) - 0)) ^ (0 | 0)), ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) + (0 >> _GLF_IDENTITY(int(6), int(6)))))) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-801) : 0)))))) | (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), float(mat2(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8143.6535)), float(_GLF_IDENTITY(1.0, float(mat2x4(1.0, _GLF_IDENTITY(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), bool(_GLF_IDENTITY(true, ! (! (true)))))))), _GLF_IDENTITY(float(mat4x2(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 1.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-4.2) : float(mat4x2(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 1.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(sqrt(0.0), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0), 1.0)), max(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(sqrt(0.0), min(sqrt(0.0), sqrt(0.0))), (sqrt(0.0)) * 1.0), 1.0)), float(vec2(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0), 1.0))))), 1.0, 0.0, 0.0))))), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0))), 0.0))))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), _GLF_IDENTITY(mat2x3(mat4x3(mat2x3(injectionSwitch.y, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], _GLF_FUZZED(5.2), _GLF_FUZZED(-5.0), (vec4(0.0, 0.0, 0.0, 1.0))[3]), vec4(_GLF_FUZZED(float(true)), (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(-38.04)), bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))), dot(vec4(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0))))))), 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0))), (mat2x3(mat4x3(mat2x3(injectionSwitch.y, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0)), (mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), clamp(vec4(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0)), (mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0)), (mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0)), (mat4(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat3x4(vec4(0.0, 0.0, 0.0, 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-479.317)), bool(false))), 1.0, abs(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))) - mat2x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)))))))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), false))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             break;
            }
           continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(_GLF_IDENTITY(7, 0 ^ (7))), int(7))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(7), min(int(7), int(7))), 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec3(_GLF_IDENTITY(int(7), min(int(7), int(7))), 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec3(43991, 25083, -45976))))))) | (_GLF_IDENTITY(int(7), min(int(7), int(7))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       subgroupAll(true);
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x], _GLF_IDENTITY(uint(2), (uint(2)) * 1u), 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, cos(0.0), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat3x4(0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), float(mat3(1.0, 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, tan(0.0), 0.0))), round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.4) : 1.0)), _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0)), mix(float(_GLF_IDENTITY(float(vec2(float(mat3x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8899.2115)), float(0.0), bool(true)))), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0)), mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(float(vec2(float(mat3x4(0.0, 1.0, cos(0.0), 0.0, 1.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7685.8422)), float(1.0), bool(true))))), 1.0)), 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0)), clamp(float(vec2(float(mat3x4(0.0, 1.0, cos(0.0), 0.0, 1.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7685.8422)), float(1.0), bool(true))))), 1.0)), 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0)), float(vec2(float(mat3x4(0.0, 1.0, cos(0.0), 0.0, 1.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7685.8422)), float(1.0), bool(true))))), 1.0)), 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0)), float(vec2(float(mat3x4(0.0, 1.0, cos(0.0), 0.0, 1.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7685.8422)), float(1.0), bool(true))))), 1.0)), 1.0, 1.0)))), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0))))), bool(true)))), float(_GLF_FUZZED(-2.1)), bool(false))))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), _GLF_IDENTITY(int(6), (int(6)) >> 0))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(ivec2(6749, -35787).g) : _GLF_IDENTITY(6, (6) << 0)))), (int(6)) >> 0))), 0 + ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), _GLF_IDENTITY(int(6), (int(6)) >> 0))))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), (int(_GLF_IDENTITY(6, (6) + ((0 << _GLF_IDENTITY(int(2), int(2))) ^ 0)))) >> 0))), _GLF_IDENTITY(min((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6), _GLF_IDENTITY(int(6), 0 + (int(6)))))) >> 0)))), int(ivec2(min((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0)))), 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true))) && true)))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(7506.1703), mix(float(_GLF_IDENTITY(true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(7506.1703), min(true ? _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(7506.1703), true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(7506.1703)))), float(_GLF_FUZZED(float(124850u))), bool(false)))))), float(_GLF_FUZZED(-655.514)), bool(false))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0), _GLF_IDENTITY((_injected_loop_counter ++) << _GLF_IDENTITY(0, (0) >> 0), 0 ^ (_GLF_IDENTITY((_injected_loop_counter ++) << 0, (_GLF_IDENTITY((_injected_loop_counter ++) << 0, ((_injected_loop_counter ++) << 0) << 0)) << 0)))), (false ? _GLF_FUZZED(69592) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0), ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))))))) >> 0))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(72.83, 45.51)) : injectionSwitch)).x > injectionSwitch.y, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(72.83, 45.51)) : injectionSwitch)).x > injectionSwitch.y, false))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-98.38, -84.91)))), injectionSwitch)).x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))) && (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))) && (false)))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))).y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
                break;
               if(_GLF_DEAD(false))
                continue;
               subgroupAll(false);
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-705.421)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-705.421)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-705.421)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true)))))))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))), ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))) || false) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))), true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), (injectionSwitch.x < injectionSwitch.y))) && true))))), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true)), (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)))))))))))))))))))))), false))))))))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), true))), false, true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5.1) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) + vec2(0.0, 0.0)).x < injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x], uint(2), 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-430.580)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-931.633)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), bool(true))) > injectionSwitch.y))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), true)))))))))
        return;
      }
    }
   for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, sqrt(1.0), abs(sqrt(0.0)), 0.0, 0.0, 1.0))).x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), false, false))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))))))))))
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))), true, true))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))), true, true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         return;
        }
      }
     break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))) || false)))
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 + (int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) + 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (1) / 1))) | 0), (_GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (1) / 1))) | 0)) >> (0 << _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(884.360)), vec2(_GLF_FUZZED(-1.0), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || false))))) / vec2(1.0, 1.0)).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (injectionSwitch)).y)))))))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
}
