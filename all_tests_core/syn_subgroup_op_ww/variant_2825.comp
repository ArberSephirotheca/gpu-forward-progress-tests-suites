#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))) && true)); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(vec2(7.6, -1.6)) : injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
            {
             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)) || false)); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true))), false, false, false)))) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false))))))), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(cos(0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(5.2) : 1.0, _GLF_IDENTITY(float(float(false ? _GLF_FUZZED(5.2) : 1.0)), (float(float(false ? _GLF_FUZZED(5.2) : 1.0))) - 0.0)))), 1.0)), injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), int(6)), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), _injected_loop_counter)) != (0 ^ 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) || false))));
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(4), 1, 1), ivec3(0, 0, 0) + (ivec3(int(4), 1, 1)))), (int(_GLF_IDENTITY(ivec3(int(4), 1, 1), _GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(int(4), 1, 1)), (ivec3(0, 0, 0) + (ivec3(int(4), 1, 1))) << ivec3(0, 0, 0))))) - 0)), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) >> 0))) | _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(4)))), clamp((_GLF_IDENTITY(int(4), min(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) | 0)), (_GLF_IDENTITY(int(4), min(int(4), int(4))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)) || false)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) & 1)); _injected_loop_counter ++)
      {
       atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
                {
                 for(int _injected_loop_counter = ((0 & -94499) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id)) | 0u) : _GLF_FUZZED((num_workgroup % num_workgroup)))))), min(_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) % _GLF_IDENTITY(2, (2) >> _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))))) * 1)), int(ivec2(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) * 1)), 0)))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) * 1)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, 0 ^ (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0)))), int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) * 1)), clamp(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, 0 ^ (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0)))), int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) * 1)), int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, 0 ^ (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0)))), int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) * 1)), int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, 0 ^ (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0)))), int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) * 1)))), 0)))))))) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (2)), (2) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id)) | _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))), max((0u << _GLF_IDENTITY(uint(8u), uint(8u))), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))), ((0u << _GLF_IDENTITY(uint(8u), uint(8u)))) >> 0u))), (false ? _GLF_FUZZED(subgroup_base) : (0u) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) : _GLF_FUZZED((num_workgroup % num_workgroup)))))), _GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), (min(subgroup_local_id, subgroup_local_id)) - 0u)) % _GLF_IDENTITY(2, (2) >> (_GLF_IDENTITY(0 ^ 0, int(ivec4(0 ^ _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-32900) : _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (false ? _GLF_FUZZED(subgroup_base) : true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id))))), 0u | (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(workgroup_base)))), min(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(workgroup_base))))))), 1u, 1u))), min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), min((~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) % _GLF_IDENTITY(2, (2) >> (0 ^ 0)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), uint(uvec2(_GLF_FUZZED(subgroup_id), 0u)))) / 1u)))) | 0u) : _GLF_FUZZED((num_workgroup % num_workgroup)))))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) - _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 0))))) >> (0 ^ 0)) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u))), _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))) % _GLF_IDENTITY(2, (2) >> _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(int(0)))))) | (0 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)), (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))) - 0)) | _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))), min((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))), ((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)))) >> 0))))))), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | _GLF_IDENTITY((0 ^ 0), 1 * ((0 ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)), (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))) - 0)) | (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ _GLF_IDENTITY(0, (0) | 0)))))))), ((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), max(0, 0)), (0 ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)) ^ 0, (0 ^ 0) | (0 ^ 0))) - 0)) | (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)))))))) / 1)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u)))), (true ? _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)) % _GLF_IDENTITY(2, (2) >> (0 ^ _GLF_IDENTITY(0, 0 + (0)))) : _GLF_FUZZED(subgroup_id)) | 0u) : _GLF_FUZZED((num_workgroup % num_workgroup)))))), 0u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, min(0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) << 0u))), (_GLF_IDENTITY(0u ^ 0u, min(0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) << 0u)))) - 0u))), subgroup_local_id, subgroup_local_id)), subgroup_local_id)) % _GLF_IDENTITY(2, _GLF_IDENTITY((2), min(_GLF_IDENTITY((2), ((2)) * 1), _GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))), (_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2)))) | (_GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))), min(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))))))))) >> _GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0))))) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 1u * (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))) % _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) >> (0 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (2) >> (0 ^ 0)))), (_GLF_IDENTITY(2, _GLF_IDENTITY((2) >> (0 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (2) >> (0 ^ 0))))) | (_GLF_IDENTITY(2, _GLF_IDENTITY((2) >> (0 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (2) >> (0 ^ 0)))))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) + 0u), (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), (_GLF_IDENTITY(2, (2) >> (0 ^ 0))) << 0), max(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), max(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), _GLF_IDENTITY(2, (2) >> (0 ^ 0))))) << 0))) : _GLF_FUZZED(subgroup_id)) | 0u) : _GLF_IDENTITY(_GLF_FUZZED((num_workgroup % num_workgroup)), 1u * _GLF_IDENTITY((_GLF_FUZZED((num_workgroup % num_workgroup))), 0u ^ (_GLF_IDENTITY((_GLF_FUZZED((num_workgroup % num_workgroup))), uint(uint((_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, _GLF_IDENTITY(num_workgroup, 0u | (num_workgroup)))), (num_workgroup) - 0u) % num_workgroup))))))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ 0u, min(0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) << 0u))), (_GLF_IDENTITY(0u ^ 0u, min(0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) << 0u)))) - 0u))), subgroup_local_id, subgroup_local_id)), subgroup_local_id)) % _GLF_IDENTITY(2, _GLF_IDENTITY((2), min(_GLF_IDENTITY((2), ((2)) * 1), _GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))), (_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2)))) | (_GLF_IDENTITY(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))), min(_GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(_injected_loop_counter) : (2))))))))) >> _GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0))))) : _GLF_FUZZED(subgroup_id), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 1u * (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))) % _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) >> (0 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (2) >> (0 ^ 0)))), (_GLF_IDENTITY(2, _GLF_IDENTITY((2) >> (0 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (2) >> (0 ^ 0))))) | (_GLF_IDENTITY(2, _GLF_IDENTITY((2) >> (0 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (2) >> (0 ^ 0)))))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) + 0u), (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), (_GLF_IDENTITY(2, (2) >> (0 ^ 0))) << 0), max(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), max(_GLF_IDENTITY(2, (2) >> (0 ^ 0)), _GLF_IDENTITY(2, (2) >> (0 ^ 0))))) << 0))) : _GLF_FUZZED(subgroup_id)) | 0u) : _GLF_IDENTITY(_GLF_FUZZED((num_workgroup % num_workgroup)), 1u * _GLF_IDENTITY((_GLF_FUZZED((num_workgroup % num_workgroup))), 0u ^ (_GLF_IDENTITY((_GLF_FUZZED((num_workgroup % num_workgroup))), uint(uint((_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, _GLF_IDENTITY(num_workgroup, 0u | (num_workgroup)))), (num_workgroup) - 0u) % num_workgroup)))))))))))) >> (0u | 0u)))), 0u, 0u, 1u)) | uvec4(0u, 0u, 0u, 0u))))) == 0)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(0, (0) << 0)))), int(0))) >> _GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, int(ivec4(_GLF_IDENTITY((0) << 0, int(ivec3((0) << 0, 1, 1))), 0, 1, (0 & 95489)))))), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED((_injected_loop_counter >> 1919)))))) >> _GLF_IDENTITY(int(0), int(0)), ~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 ^ 0)), (0) << 0)))), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(0, (0) << 0)))), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) ^ 0)))), int(_GLF_IDENTITY(0, min(0, 0)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(0, (0) << 0)))), int(0)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(0, (0) << 0)))), int(0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), min(int(_GLF_IDENTITY(0, (0) << 0)), int(_GLF_IDENTITY(0, (0) << 0)))), int(0)), 1, 1)))))) >> _GLF_IDENTITY(int(0), int(0)))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (0))))) << 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, ~ (~ (1))))))), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))) << 0))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             barrier();
                                            }
                                          }
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                  }
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (true ? int(int(3)) : _GLF_FUZZED(_injected_loop_counter))))))) >> _GLF_IDENTITY(int(3), int(3))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (true ? int(int(3)) : _GLF_FUZZED(_injected_loop_counter))))))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           do
                                            {
                                             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
                                              barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             do
                                              {
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
                                  }
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false)), (bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))) && true)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false)), (bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))) && true))))))), false)))));
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((1 | 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0 ^ (1), int(ivec4(_GLF_IDENTITY(0 ^ (1), (0 ^ (1)) << 0), 0, 1, 1))), 0)), (int(ivec2(_GLF_IDENTITY(0 ^ (1), int(ivec4(_GLF_IDENTITY(0 ^ (1), (0 ^ (1)) << 0), 0, 1, 1))), 0))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (false ? 81892 : 35917))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         subgroupAll(true);
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), ! (! _GLF_IDENTITY((! (bool(bool(false)))), false || ((! (bool(bool(false)))))))))))));
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))], uint(2), 4, 64, _GLF_IDENTITY(4, 0 + (4)));
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   subgroupAll(false);
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                          {
                           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), uint(uvec4(_GLF_IDENTITY(uint(2), min(uint(2), uint(_GLF_IDENTITY(2, 0 | (2))))), 1u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), 4, 64, 4);
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))));
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), false))))))))) && true)); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1), int(0)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)))))), false || ((false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)))))))), ! (! ((false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) || (injectionSwitch.x > injectionSwitch.y))))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) & 1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) & 1), clamp((_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), clamp(min(1, 1), min(1, 1), _GLF_IDENTITY(min(1, 1), (min(1, 1)) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))) & 1))), 1, (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)))), min(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), 0, 1, 1))))))))), min(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) & 1), clamp((_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_injected_loop_counter))), 1)) & 1), clamp((_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1))), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) & 1), clamp((_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1))))), 1, ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(597.858) : _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) & 1), clamp((_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1), (_GLF_IDENTITY(1, min(1, 1)) & 1))), 1, ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) : injectionSwitch)).y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + (0 >> _GLF_IDENTITY(int(4), int(4)))))
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_injected_loop_counter < 1, false))))))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                            }
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                    barrier();
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                        barrier();
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))))));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) / 1.0) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))), vec2(mat4x3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))))), length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0)))) * mat2(1.0), min((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_IDENTITY(_GLF_FUZZED(427.781), mix(float(_GLF_FUZZED(427.781)), float(_GLF_FUZZED(697.205)), bool(false))), (injectionSwitch)[1]), bvec2(false, true)))) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(165.316)), vec2(_GLF_FUZZED(427.781), (injectionSwitch)[1]), bvec2(false, true)))) * mat2(1.0)))).y))))));
                        }
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
