#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true, true, _GLF_IDENTITY(false, (false) && true))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true, true, _GLF_IDENTITY(false, (false) && true))))) || false)), bool(bvec3(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true, true, _GLF_IDENTITY(false, (false) && true))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), max(uvec4(gl_WorkGroupSize, 0u), uvec4(gl_WorkGroupSize, 0u))))))), _GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(_GLF_IDENTITY(uvec3(19580u, 170781u, 47898u), min(_GLF_IDENTITY(uvec3(19580u, 170781u, 47898u), (true ? uvec3(19580u, 170781u, 47898u) : _GLF_FUZZED((subgroup_local_id * uvec3(29668u, 40419u, 50188u))))), uvec3(19580u, 170781u, 47898u)))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(false, (false) || false) ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(13963u, 89939u, 121017u)), (_GLF_FUZZED(uvec3(13963u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, _GLF_IDENTITY((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u))), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(_GLF_IDENTITY(89939u, (89939u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, _GLF_IDENTITY((89939u) | 0u, max((89939u) | 0u, _GLF_IDENTITY((89939u) | 0u, uint(uvec2((89939u) | 0u, 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))))) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(89939u, _GLF_IDENTITY((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u))), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))), clamp(clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))), 0u ^ (clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))))), clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))))))) ^ 0u)), ((_GLF_IDENTITY(89939u, _GLF_IDENTITY((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u))), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))), clamp(clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))), 0u ^ (clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u)))))), clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))))))) ^ 0u))) / 1u) | (_GLF_IDENTITY(89939u, _GLF_IDENTITY((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (_GLF_IDENTITY(89939u, 0u | (89939u))) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), clamp((_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (_GLF_IDENTITY(89939u, (89939u) | (89939u))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (_GLF_IDENTITY(89939u, (89939u) / 1u)) | 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) / (1u | 0u)), (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))), (_GLF_IDENTITY(89939u, clamp(89939u, _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), clamp(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(89939u, (89939u) | 0u), max(_GLF_IDENTITY(89939u, (89939u) | 0u), _GLF_IDENTITY(89939u, (89939u) | 0u))))), 89939u))))) ^ 0u))), 121017u))) | (_GLF_IDENTITY(_GLF_FUZZED(uvec3(13963u, 89939u, _GLF_IDENTITY(121017u, max(_GLF_IDENTITY(121017u, ~ (~ (121017u))), 121017u)))), _GLF_IDENTITY((_GLF_FUZZED(uvec3(13963u, 89939u, 121017u))), clamp((_GLF_FUZZED(uvec3(13963u, _GLF_IDENTITY(89939u, _GLF_IDENTITY((_GLF_IDENTITY(89939u, (89939u) | (_GLF_IDENTITY(89939u, 0u ^ (89939u))))), ((_GLF_IDENTITY(89939u, (89939u) | (_GLF_IDENTITY(89939u, 0u ^ (89939u)))))) >> 0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 121017u))), (_GLF_FUZZED(uvec3(13963u, 89939u, 121017u))), (_GLF_FUZZED(uvec3(13963u, 89939u, 121017u))))) - uvec3(0u, 0u, 0u)))) : gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))) - 0u), (workgroup_size * workgroup_id) * _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u)))))), (((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(uint(0u), uint(0u))))))) + 0u));
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) - 0u, clamp(_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) - 0u, _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) - 0u, _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) - 0u)));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), min((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u), uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u), uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u), uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u))))), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u), uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u), uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))) << 0u) * 1u)))))))))))) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).x)) * 1.0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), 0u ^ ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), 0u ^ ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), 0u | (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), 0u ^ ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), 0u ^ ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), (_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))) + 0u)), min((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (_GLF_IDENTITY(1u, (1u) | (1u)))), (1u) ^ 0u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), subgroup_size)), subgroup_size)), (subgroup_size) * 1u))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), min(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), subgroup_size)), (subgroup_size) * 1u))), ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))) >> (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(virtual_gid) : uint(4u))), clamp(_GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(virtual_gid) : uint(4u))), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(virtual_gid) : uint(4u))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : uint(4u)), (false ? _GLF_FUZZED(subgroup_id) : (false ? _GLF_FUZZED(virtual_gid) : uint(4u)))))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid))))), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid)))))) * 1u)) ^ 0u), true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid))))), _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid))))), (true ? true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 0u)), uint(uvec2(uint(uvec3(subgroup_size, 0u, 0u)), 1u))))) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) * 1u))))), ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u)))))) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size))) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid))))) : _GLF_FUZZED(subgroup_local_id)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << (77393u & 0u)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), 0u + (_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), max((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), 0u ^ (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), 0u ^ (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))) * 1u))), (true ? (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))) : _GLF_FUZZED(subgroup_base))))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)) + 0u) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, _GLF_IDENTITY(0u | ((subgroup_size) * 1u), (0u | ((subgroup_size) * 1u)) | (0u | ((subgroup_size) * 1u)))))), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) * _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (1u))))) | ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) * 1u))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u, uint(uvec2(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), subgroup_size, subgroup_size)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(85306u))), (subgroup_size) * 1u))) | ((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), float(_GLF_FUZZED(-2740.2458)), bool(false)))))), max(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(15117) : 1)))) - 0u) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(85306u))), (subgroup_size) * 1u))) | ((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(85306u))), (subgroup_size) * 1u))) | ((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))))) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), _GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uint(~ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))))))))) - 0u) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(atomicLoad(subgroup_size, int(true), -56750, -18027)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(85306u))), (subgroup_size) * 1u))) | ((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))))) - 0u, 0u))))) / 1u)) | (((subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), min((_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), (_GLF_IDENTITY((uint(1)), (false ? _GLF_FUZZED(subgroup_size) : (uint(1))))) - 0u) * 1u), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if((subgroup_local_id % 2) == 0)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) || false))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! ((_GLF_IDENTITY(true, ! (! (true))))))) || false)))) || false))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_injected_loop_counter < 1))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true))))) && true), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true))))) && true))))
                {
                 do
                  {
                   barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * vec2(1.0, 1.0)))))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(false, true), true))))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))), false))), bvec2(bvec3(bvec2(false, true), true))))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) || false)))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, length(0.0)))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(bvec3((_GLF_WRAPPED_IF_TRUE(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3((_GLF_WRAPPED_IF_TRUE(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true) || false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))) || false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) | (int(4)))) >> 0))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) - 0))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED((- 2259.1109))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), (_GLF_DEAD(false)) || false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), min(int(int(4)), int(int(4)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), ~ (~ (int(4)))))) & 66292); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1))))) ^ 0)))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                {
                 barrier();
                }
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true))), true && (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), false || ((false))))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, max(64, 64)), 64, 64)), _GLF_IDENTITY(4, 0 ^ (4)));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))) && true)));
        }
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) || false) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, 0 | (1))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)), false || (bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)))))))
            barrier();
           subgroupAll(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false))))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
}
