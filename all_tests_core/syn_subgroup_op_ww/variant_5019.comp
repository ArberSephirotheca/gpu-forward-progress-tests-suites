#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uint virtual_gid;
 ivec3 _f0;
} ;

struct _GLF_struct_6 {
 uint workgroup_id;
 bool _f0;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 _GLF_struct_2 _f1;
 float _f2;
 ivec4 _f3;
 mat2x3 _f4;
 mat4x3 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_1 {
 bool _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_5 {
 uint subgroup_id;
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec4 GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))));
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(gl_SubgroupID, _GLF_struct_1(true, _GLF_struct_0(uvec3(1u), mat2x4(1.0), mat4x2(1.0))), _GLF_struct_4(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), round(length(normalize(1.0))) * (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, sqrt(1.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0), (_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0), (mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)) * mat4(1.0))) * mat4(1.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.3))), 0.0)), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.1)), bool(false)))))), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(3.1) : determinant(mat2(1.0, 0.0, 0.0, 1.0)))), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0), sqrt(0.0), 1.0))))) - _GLF_IDENTITY(determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), (determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))) / 1.0)), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0), (mat4x3(0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, cos(0.0), 0.0, 1.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(66.55) : float(_GLF_IDENTITY(mat4x3(0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0), (mat4x3(0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(5.7)))))) - 0.0), 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)), max(vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(tan(10.97)))), _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, abs(0.0), log(1.0), 0.0, 1.0, abs(1.0), 1.0, 0.0))), injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(84.84)), float(0.0), bool(true))), log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), 1.0 * (sqrt(0.0))), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)), float(mat2(float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0))))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)))), vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0), (mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(float(0.0))), 0.0)), 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), mix(float((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (true ? sqrt(0.0) : _GLF_FUZZED(-60.58))), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), float(_GLF_FUZZED(34.44)), bool(false)))) / round(length(normalize(vec2(1.0, 1.0)))))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))))), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)))))))), mix(float(float(_GLF_IDENTITY(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, sqrt(1.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(_GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5192.5940)), float(0.0), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (true ? _GLF_IDENTITY(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec4(8416.3404, -6.3, 723.920, -53.78)))), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-490.296)), float(_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0)))), bool(true))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))), min(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, tan(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0)))))), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)), min(_GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) + 0.0)))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), clamp((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, 1.0 * (1.0))), min((_GLF_IDENTITY(1.0, 1.0 * (1.0))), (_GLF_IDENTITY(1.0, 1.0 * (1.0))))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec2(1.0, sin(0.0)))), 0.0, 0.0)), max(vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(vec4(844.841, 6305.6925, 700.239, -0.7), vec4(3.5, 2.3, 993.405, 1.3))))), 0.0, sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))).x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), float(mat3x4(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))).x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), min(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))).x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))).x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(sqrt(1.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(sqrt(1.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0)))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x)))))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), mix(float(1.0 * (1.0)), float(_GLF_FUZZED(2.1)), bool(false))))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - sqrt(0.0))) / 1.0)), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2x4(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0)))))))), vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)), mix(vec4(_GLF_FUZZED(-174.171), (mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[1], (mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[2], _GLF_FUZZED(-7844.0405)), vec4((mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[0], _GLF_FUZZED(-409.591), _GLF_FUZZED(-8576.9934), (mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[3]), bvec4(true, false, false, true))))), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, sin(0.0), 1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), float(mat3x4((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)), mix(vec4(_GLF_FUZZED(-174.171), (mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[1], (mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[2], _GLF_FUZZED(-7844.0405)), vec4((mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[0], _GLF_FUZZED(-409.591), _GLF_FUZZED(-8576.9934), (mat4(1.0) * (vec4(0.0, 0.0, sqrt(0.0), 1.0)))[3]), bvec4(true, false, false, true))))), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, sin(0.0), 1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)), 0.0, determinant(mat3(0.0, abs(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0, sin(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, round(length(normalize(sqrt(vec3(1.0, 1.0, 1.0))))), 0.0)))), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(_GLF_IDENTITY(0.0, float(mat2(0.0, cos(0.0), 1.0, 0.0))), 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((false ? 12.78 : -1338.3121))))))), 0.0, determinant(mat2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 1.0, 1.0, tan(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, abs(1.0), 1.0, tan(0.0), abs(0.0), 1.0, 1.0, exp(0.0))))), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0)))), vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, _GLF_IDENTITY(log(1.0), (true ? _GLF_IDENTITY(log(1.0), (log(1.0)) - 0.0) : _GLF_FUZZED(-608.655))), 0.0, 0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), clamp(sqrt(0.0), sqrt(0.0), sqrt(0.0))), 1.0))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0)))) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.5)), bool(false)))), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 0.0 + (0.0)) : _GLF_FUZZED(4786.3351))), sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0)), dot(vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, sqrt(0.0), 1.0))))))))) - determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, 1.0 * (0.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0))), dot(vec2(0.0, 1.0), vec2(1.0, sin(0.0)))), 0.0, 0.0))))))))), float(_GLF_FUZZED(98.33)), bool(false))))))), _GLF_struct_2(mat3x4(1.0), mat3x4(1.0), uvec4(1u)), 1.0, ivec4(1), mat2x3(1.0), mat4x3(1.0), _GLF_struct_3(ivec3(1))));
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.x = subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((0 & -99040) & -84064); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup) ^ ((uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u))).xy, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup) ^ ((uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u))).xy) | (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup) ^ ((uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u))).xy)).x) : _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.x, (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.x) << 0u)));
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), false))))), true, true), _GLF_IDENTITY(false, true && (false)))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), false))), false))))), false))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7407.7216)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))));
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5800.2177) : injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), ((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))) - 0u) << 0u);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.w = num_workgroup;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.z = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.w;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_WorkGroupID.x, true);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * _GLF_struct_replacement_6.workgroup_id;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.y = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sqrt(0.0), 0.0, 0.0, abs(0.0), abs(1.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, exp(0.0), 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, sqrt(0.0), 0.0, 0.0, abs(0.0), _GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0), 0.0, 0.0, exp(0.0), 1.0))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-264.987, 9.3), (vec2(-264.987, 9.3)) * mat2(1.0))) : _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, sqrt(0.0), 0.0, 0.0, abs(0.0), abs(1.0), 0.0, 0.0, exp(0.0), 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, sqrt(0.0), 0.0, 0.0, _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(float(46264))), float(_GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(-88.84)), bool(false)))), bool(true))), abs(1.0), 0.0, 0.0, exp(0.0), 1.0))))), max(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, sqrt(0.0), 0.0, 0.0, abs(0.0), abs(1.0), 0.0, 0.0, exp(0.0), 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0), abs(1.0), 0.0, 0.0, exp(0.0), 1.0))))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, sqrt(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), 0.0, 0.0, abs(0.0), abs(1.0), 0.0, 0.0, exp(0.0), 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, sqrt(0.0), 0.0, 0.0, abs(0.0), abs(1.0), 0.0, 0.0, exp(0.0), 1.0)))))))))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy.y = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (true ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy.y = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy.y = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.y) >> 0u) : _GLF_FUZZED(GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.xy.x)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy.y + _GLF_struct_replacement_5.subgroup_id * GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w + subgroup_local_id, ivec3(1));
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy, (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy) - uvec2(0u, 0u)).y + _GLF_struct_replacement_5.subgroup_id * GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w + ((subgroup_local_id + 1) % GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
  barrier();
 GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.z = next_virtual_gid;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy.x = GLF_merged3_0_2_52_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenext_virtual_gidnum_workgroup.z;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       atomicStore(buf[_GLF_struct_replacement_7.virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(4, 4)));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-21548 & 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (ivec3(59032, -49469, -4063).r & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + log(1.0)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), bool(bvec2(! (false), false))))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
   if(subgroup_local_id + 1 < GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.w)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size, (((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) >> _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ uvec4(1u, 1u, 1u, 1u)) ^ (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size, (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size) | (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size)))).xy.x], _GLF_IDENTITY(uint(2), uint(uvec2(uint(2), 0u))), 4, 64, 4);
      }
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 0)), 1 * (int(ivec3(1, 1, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-3.9, 2717.8924, -8.1, 351.861).t)), vec2(_GLF_FUZZED(-9.9), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(atan(mat3x2(396.265, 6.5, 5.6, -421.722, 7994.8683, -0.4)[2], vec2(-8.0, -0.7))))).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), min(int(5), int(5))))))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(false);
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
     atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy, (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy, (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy, ~ (~ (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy)))) << uvec2(0u, 0u))) | (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_size.xy)).x], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 1 * (1))), clamp(~ (_GLF_IDENTITY(1, 1 * (1))), ~ (_GLF_IDENTITY(1, 1 * (1))), ~ (_GLF_IDENTITY(1, 1 * (1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         do
          {
           do
            {
             barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0)) + ((injectionSwitch.y) / 1.0)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     subgroupAll(true);
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (((_GLF_IDENTITY(1, _GLF_IDENTITY((1), (false ? _GLF_FUZZED(bitfieldInsert(48971, 78720, 72286, floatBitsToInt(223.859))) : _GLF_IDENTITY((1), max((1), (1))))) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), abs(vec2(1.0, 1.0)) * (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
