#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1 << _GLF_IDENTITY(int(0), int(0)), 1), ivec2(0, 0) + (ivec2(1 << _GLF_IDENTITY(int(0), int(0)), 1)))), min(int(_GLF_IDENTITY(ivec2(1 << _GLF_IDENTITY(int(0), int(0)), 1), ivec2(0, 0) + (ivec2(1 << _GLF_IDENTITY(int(0), int(0)), 1)))), int(_GLF_IDENTITY(ivec2(1 << _GLF_IDENTITY(int(0), int(0)), 1), ivec2(0, 0) + (ivec2(1 << _GLF_IDENTITY(int(0), int(0)), 1)))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 ^ _GLF_IDENTITY(1, ~ (~ (1)))), (0 >> _GLF_IDENTITY(int(8), int(8))) + ((1 ^ 1))) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) != (1 ^ 0)); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), false || (bool(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, true)), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), false || (bool(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(0.0))), tan(vec2(0.0, 0.0)) + (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(0.0)))))).y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) ^ 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bool((true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_GLF_IDENTITY((false ? -4891 : 18796), (_GLF_IDENTITY((false ? -4891 : 18796), clamp((false ? -4891 : 18796), (false ? -4891 : 18796), (false ? -4891 : 18796)))) | 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED((false ? -4891 : 18796))))) << (0 | (0 << _GLF_IDENTITY(int(6), int(6)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED((false ? -4891 : 18796))))) << (_GLF_IDENTITY(0 | (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(83302) : 0 | (0 << _GLF_IDENTITY(int(6), int(6)))))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED((false ? -4891 : 18796))))) << (0 | (0 << _GLF_IDENTITY(int(6), int(6)))))) : _GLF_FUZZED(29009)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED((false ? -4891 : 18796)))), (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_IDENTITY(_GLF_FUZZED((false ? -4891 : 18796)), (_GLF_IDENTITY(_GLF_FUZZED((false ? -4891 : 18796)), max(_GLF_FUZZED((false ? -4891 : 18796)), _GLF_FUZZED((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) ? -4891 : 18796))))) | (_GLF_FUZZED((false ? -4891 : 18796))))))) << (_GLF_IDENTITY(0 | (0 << _GLF_IDENTITY(int(6), int(6))), (0 | (0 << _GLF_IDENTITY(int(6), int(6)))) | (0 | (0 << _GLF_IDENTITY(int(6), int(6)))))))) + 0))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(3), int(3))) + (0))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_IDENTITY((subgroup_local_id % 2), (1u | 1u) * ((subgroup_local_id % 2))) == 0)
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && (_GLF_DEAD(false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)), mix(float(_GLF_FUZZED(6.7)), float(float(vec4(injectionSwitch.x, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0))), bool(true)))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))) << 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _injected_loop_counter)))) > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0))))).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0))))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0))))).y, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0))))).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0))))).y)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
                        barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                        barrier();
                       barrier();
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))
                    barrier();
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             subgroupAll(true);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
                            barrier();
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), false || (_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))) | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (2), clamp(~ (2), _GLF_IDENTITY(~ (2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (2), 0, 1, 0), (ivec4(~ (2), 0, 1, 0)) | (ivec4(~ (2), 0, 1, 0)))), (int(_GLF_IDENTITY(ivec4(~ (2), 0, 1, 0), (ivec4(~ (2), 0, 1, 0)) | (ivec4(~ (2), 0, 1, 0))))) | (int(_GLF_IDENTITY(ivec4(~ (2), 0, 1, 0), (ivec4(~ (2), 0, 1, 0)) | (ivec4(~ (2), 0, 1, 0))))))), ~ (2)))), ((~ (2))) ^ 0)))) - 0u), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) << 0), 0)) + (4)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(4, 0 + (4)))), ((~ (_GLF_IDENTITY(4, 0 + (4))))) | ((~ (_GLF_IDENTITY(4, 0 + (4))))))), clamp(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(4, 0 + (4)))), ((~ (_GLF_IDENTITY(4, 0 + (4))))) | ((~ (_GLF_IDENTITY(4, 0 + (4))))))), ~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(4, 0 + (4)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 + (4)), 0 + (_GLF_IDENTITY(4, 0 + (4))))))) | ((~ (_GLF_IDENTITY(4, 0 + (4))))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 0 + (4))), 1 * (~ (_GLF_IDENTITY(4, 0 + (4)))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(4, 0 + (4))), ((_GLF_IDENTITY(4, 0 + (4)))) ^ 0))) | ((~ (_GLF_IDENTITY(4, 0 + (4))))))))))))) | _GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(~ (~ (64)), (_GLF_IDENTITY(~ (~ (64)), min(~ (~ (64)), ~ (~ (64))))) >> _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY(0, (0) | (0)) | (64)), int(ivec2(_GLF_IDENTITY(64, (64) | (64)), 1))), _GLF_IDENTITY(4, max(4, 4)));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-7787.3573) : injectionSwitch.y))) - 0.0), injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             subgroupAll(false);
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), (_GLF_IDENTITY(vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), mix(vec2((vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)))[0], (vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)))[1]), vec2(_GLF_FUZZED(0.9), _GLF_FUZZED((+ -7.3))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) / cos(vec2(0.0, 0.0))), bvec2(false, false))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(_GLF_IDENTITY(9.1, min(_GLF_IDENTITY(9.1, mix(float(_GLF_FUZZED(-6.3)), float(_GLF_IDENTITY(9.1, (false ? _GLF_FUZZED(60.25) : 9.1))), bool(true))), 9.1)))), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-3509.1438), (true ? _GLF_FUZZED(-3509.1438) : _GLF_FUZZED(-4251.9891))), _GLF_FUZZED(9.1)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x)))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3509.1438), _GLF_FUZZED(9.1)), bvec2(false, false))).x)) > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) >> (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(int(1)))))), int(1))) ^ 1)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(tanh(vec2(-11.24, 4.3))) : _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(1.0, (1.0) - sqrt(0.0))))))).y, _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.25), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(0, 0 | (0))])), _GLF_FUZZED(2.0)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), 1.0, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0), (mat4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.25), (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(2.0)), (_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(2.0)), mix(vec2(_GLF_FUZZED(2354.7916), _GLF_FUZZED(1.8)), vec2((vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(2.0)))[0], (vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(2.0)))[1]), bvec2(true, true)))) - vec2(0.0, 0.0)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), clamp(_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), 0.0 + (_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)))), _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)))), 1.0, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(tanh(vec2(-11.24, 4.3))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.7), _GLF_FUZZED(9.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(1.0, (1.0) - sqrt(0.0))))))).y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) > injectionSwitch.y)))) || false), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(45178)))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), true && (bool(bvec2(_GLF_DEAD(false), true))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9139.2260)), bool(_GLF_IDENTITY(false, true && (false))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))));
    }
   else
    {
    }
  }
 else
  {
  }
}
