#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 1 * (1)))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) | 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(46524) : int(5))))))), (_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(46524) : int(5))))))), ! (! (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(46524) : int(5))))))))))) || false)); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false)))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), false || (_GLF_DEAD(false))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 1977.9706))), float(0.0), bool(true))), injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0)), (float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0))) * 1.0))) - log(sqrt(1.0))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), bool(bool(true))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, length(0.0) + (injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), false || (_injected_loop_counter != (1 ^ 0))), false, false, true)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) - log(vec2(1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))) && true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, true)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y)))), false || (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))))))))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) | (_GLF_IDENTITY(~ (int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ (int(1))))))))), min(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, abs(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))) - vec2(0.0, 0.0)).y, mix(float(_GLF_FUZZED(-991.349)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(true))))))))))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(968.129, 4.1)) : injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(vec2(968.129, 4.1)) : injectionSwitch, mat2(1.0) * (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(vec2(968.129, 4.1)) : injectionSwitch)))).x))) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y) * 1.0))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), true, true, true))))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, true))))))))))) && true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), true && (bool(true))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), false || (! (! ((injectionSwitch.x < injectionSwitch.y))))))))), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat4x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), 0.0, 1.0))))))), false))))), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.1)), vec2(_GLF_FUZZED(884.506), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)), (max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))) - 0u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)))) - 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << _GLF_IDENTITY(0u, (0u) / 1u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)))) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(uint(48398))))) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))))))) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), 0u, 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u + (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), (0u << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 1u))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (29161u & 0u)), _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ (0u | 0u))) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))) - 0u), 0u, 1u)) | (uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size))))) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), 0u, 1u))))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), 1u, 1u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, (subgroup_id * subgroup_size) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), 1u, 1u, 1u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))) + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 1u)), ~ (~ (uvec3(subgroup_size, 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 1u))))))), _GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) * 1u) << 0u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_local_id))) - 0u), 1u, 1u, 1u)))))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))) - 0u)), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u))) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - length(vec3(0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))), 1.0)), (float(vec2(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))), 1.0))) / 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0))), injectionSwitch)).y)), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(28.11) : injectionSwitch.y)), injectionSwitch.y)))), true)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(28.11) : injectionSwitch.y)), injectionSwitch.y)))), true)))))) || false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)))))), true))))), _GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), 1.0, 1.0)))))), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), 1.0, 1.0))))))) + vec2(0.0, 0.0))[0], (false ? _GLF_FUZZED(512.685) : _GLF_IDENTITY((injectionSwitch)[0], float(vec2((injectionSwitch)[0], exp(0.0)))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED((float(87180u) / 6.1)), _GLF_FUZZED(4.1)), bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, true && (injectionSwitch.x > injectionSwitch.y))))))))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), true && (! (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), log(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (mat3x4(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), log(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), min(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), log(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (mat3x4(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), log(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.1) : 0.0)), 0.0)), 0.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-728.345)), float(length(vec3(0.0, 0.0, 0.0))), bool(true))), log(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-63.74) : _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (mat3x4(injectionSwitch.x, length(vec3(0.0, 0.0, 0.0)), log(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), ! (! (_GLF_DEAD(false))))) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0)))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false))))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-74790 & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.56)), float(injectionSwitch.y), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.56)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.56)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.56)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.56)), float(injectionSwitch.y), bool(true)))))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.5) : injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), int(_GLF_IDENTITY(int((0 ^ 0)), 0 ^ (_GLF_IDENTITY(int((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (0), ~ (~ (1 * (0))))))) ^ 0)), (int((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (0), ~ (~ (1 * (0))))))) ^ 0))) << (0 & 50288)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) / 1))))) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) / 1))))) >> _GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) / 1))))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) / 1))))) >> _GLF_IDENTITY(int(4), int(4))) | 0))))) - 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), false, false, false))))
          continue;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ((injectionSwitch.x > injectionSwitch.y)) && true)) || false))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))).x)), (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))).x))) && true)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), float(vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), 1.0)))), (_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-3.3)), bool(false)))))), _GLF_IDENTITY(mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-3.3)), bool(false))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-3.3) : _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-3.3)), bool(false))))))))), (mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-3.3)), bool(_GLF_IDENTITY(false, false || (false)))))))))) + vec2(0.0, 0.0))) + vec2(0.0, 0.0), _GLF_IDENTITY(max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - abs(0.0))), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.1) : 0.0))))), (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - abs(0.0))), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.1) : 0.0))))), (injectionSwitch) + vec2(0.0, 0.0))), (_GLF_IDENTITY(mat2(1.0) * (max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - abs(0.0))), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.1) : 0.0))))), (injectionSwitch) + vec2(0.0, 0.0))), max(mat2(1.0) * (max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - abs(0.0))), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.1) : 0.0))))), (injectionSwitch) + vec2(0.0, 0.0))), mat2(1.0) * (max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - abs(0.0))), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.1) : 0.0))))), (injectionSwitch) + vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))))).x), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0))), (injectionSwitch) + vec2(0.0, 0.0)))).x)), float(_GLF_FUZZED(0.4)), bool(false))))) && true), bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(1.0)), vec2(0.0, 0.0), vec2(0.0, 0.0)))).x, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75)), float(_GLF_IDENTITY(mat2((_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75)), 0.0, 0.0, 0.0), (true ? mat2((_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75)), 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-4957.8910, 461.011, -369.407, 819.080))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(mat3(((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0))), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat4x2(_GLF_IDENTITY(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-9776.1587)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), tan(0.0), 0.0)))) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(5.6), _GLF_FUZZED(-5826.9899)), vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), bvec2(true, true))))))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat3x4((injectionSwitch) + vec2(0.0, 0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, sqrt(0.0), length(0.0), determinant(mat2(sqrt(0.0), 0.0, 1.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0))) : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(_GLF_IDENTITY(43.75, (43.75) + 0.0)))))))), int(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3(((injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0)))) / vec2(1.0, 1.0))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat3x4((injectionSwitch) + vec2(0.0, 0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75)))))), (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3(((injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0)))) / vec2(1.0, 1.0))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat3x4((injectionSwitch) + vec2(0.0, 0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75)))))), 1.0 * (_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3((_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), bool(true))))), tan(0.0), 0.0)))) / vec2(1.0, 1.0))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat3x4((injectionSwitch) + vec2(0.0, 0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))) ? 0.0 : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), (true ? _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))).x : _GLF_FUZZED(43.75))))))))) * _GLF_ONE(1.0, injectionSwitch.y))), clamp(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0)))), 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0)))) / vec2(1.0, 1.0))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat3x4((injectionSwitch) + vec2(0.0, 0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(radians(7988.9565)) : 1.0))))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0))), max(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3(((injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0)))) / vec2(1.0, 1.0))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8320.3487) : _GLF_IDENTITY(0.0, max(0.0, 0.0))))) * 1.0)), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(53.81), ((injectionSwitch) + vec2(0.0, 0.0))[1]), vec2(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0))[0], min(((injectionSwitch) + vec2(0.0, 0.0))[0], ((injectionSwitch) + vec2(0.0, 0.0))[0])), _GLF_FUZZED(-49.45)), bvec2(true, false))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), mix(vec2(_GLF_FUZZED(-4.9), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), (_GLF_IDENTITY(((injectionSwitch) + vec2(0.0, 0.0)), vec2(mat3(((injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0)))) / vec2(1.0, 1.0))[1], max(((injectionSwitch) + vec2(0.0, 0.0))[1], ((injectionSwitch) + vec2(0.0, 0.0))[1]))), vec2((_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat3x4((injectionSwitch) + vec2(0.0, 0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, abs(1.0)))))[0], _GLF_FUZZED(8.7)), bvec2(true, false))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(351.933))), 0.0)))).x : _GLF_FUZZED(43.75))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))))))))), 0, 0, 1))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))), (false ? _GLF_FUZZED(vec2(2594.4356, -5.3)) : (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(vec2(mat4x2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))), (false ? _GLF_FUZZED(vec2(2594.4356, -5.3)) : (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))), (false ? _GLF_FUZZED(vec2(2594.4356, -5.3)) : (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)))), injectionSwitch))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) * vec2(1.0, 1.0)))), injectionSwitch))))) + _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(mat2x3(vec2(0.0, 0.0), sqrt(1.0), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(vec2(2743.8840, 0.7)) : vec2(mat2x3(vec2(0.0, 0.0), sqrt(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0))))))).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec2(true, false)))), ((_GLF_IDENTITY(true, bool(bvec2(true, false))))) || false) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75), min(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)).x : _GLF_FUZZED(43.75))))))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(4.7)))), float((vec2(0.0, 0.0))[0]), bool(true))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), mix(float(float(_GLF_FUZZED(4.7))), float(_GLF_FUZZED((9.8 / -55.98))), bool(false))), float(_GLF_FUZZED(4.7)))), float((vec2(0.0, 0.0))[0]), bool(true))), _GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(0.2) : _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1.4))))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), sqrt(1.0)))), sqrt(0.0), 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3792.7780) : _GLF_IDENTITY(1.0, (1.0) * 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-15.68) : dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) - length(vec2(0.0, 0.0))), 1.0, 1.0, 1.0))), (mat3x2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(4.7)))), float(_GLF_IDENTITY((vec2(0.0, 0.0))[0], clamp(_GLF_IDENTITY((vec2(0.0, 0.0))[0], float(mat3((vec2(0.0, 0.0))[0], 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY((vec2(0.0, 0.0))[0], (false ? _GLF_FUZZED(atan(96.35, -938.015)) : (vec2(0.0, 0.0))[0])), (vec2(0.0, 0.0))[0]))), bool(true))), 0.0, sqrt(0.0), 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0)))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(vec2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(4.7)))), float((vec2(0.0, 0.0))[0]), bool(true))), 0.0, sqrt(0.0), 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, sin(0.0), abs(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(determinant(mat2(1.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(determinant(mat2(1.0, 0.0, 0.0, 1.0)), tan(0.0), 0.0, 1.0))), 0.0))), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0))), (mat3x2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(4.7)))), float((vec2(0.0, 0.0))[0]), bool(true))), 0.0, sqrt(0.0), 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0)))) - mat3x2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((3244.2981 * -8854.0436))), float(0.0), bool(true))), 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(4.7)))), float(_GLF_IDENTITY((vec2(0.0, 0.0)), (true ? (vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-308.141, 1.3))))[0]), bool(true))), 0.0, sqrt(0.0), 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-251.853) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), max(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), max(normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0)))), normalize(vec2(1.0, 1.0)))))), 1.0, 1.0, 1.0))), (mat3x2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.7)), min(float(_GLF_FUZZED(4.7)), float(_GLF_FUZZED(4.7)))), float((vec2(0.0, 0.0))[0]), bool(true))), 0.0, sqrt(0.0), 1.0, cos(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) / 1.0), 1.0, 1.0, 1.0)))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) * 1.0), 1.0)))), _GLF_FUZZED(648.831)), vec2(_GLF_FUZZED(-7.0), (vec2(0.0, 0.0))[1]), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x : _GLF_FUZZED(43.75)))))) >> 0)) / 1)) ^ 0), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(5.7, 575.986)))), injectionSwitch))) * cos(vec2(0.0, 0.0))).x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0))), injectionSwitch[1])).y)), true, false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, true, false))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), (bool(false)) && true)))))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)));
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), true, false, false))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true)))) || false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), false))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), false || ((! (false))))) && true), false || ((! (_GLF_IDENTITY(false, ! (! (false))))))))));
         break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0))), exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0))), injectionSwitch[1])).x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true))))), true))))) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(878.273), _GLF_FUZZED(-9127.5673)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), mix(vec2((vec2(injectionSwitch.y, 0.0))[0], (vec2(injectionSwitch.y, 0.0))[1]), vec2(_GLF_FUZZED(4969.6722), _GLF_FUZZED(7.8)), bvec2(false, false)))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-45.36)), vec2(_GLF_FUZZED(708.442), (injectionSwitch)[1]), bvec2(false, true))).y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(true, ! (! (true))) && (bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))))), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), true && (bool(_GLF_WRAPPED_IF_FALSE(false)))))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, 0 ^ (64)), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 + (_GLF_IDENTITY(int(3), max(int(3), int(3))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), max(int(3), int(3))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 1.0, 0.0)))) / vec2(1.0, 1.0)).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 1.0, 0.0)))) / vec2(1.0, 1.0)).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 1.0, 0.0)))) / vec2(1.0, 1.0)).y)))) && true)) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), ! (! (_GLF_IDENTITY(false, (false) || false))))))
            barrier();
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(3), int(3))), clamp(~ (1 << _GLF_IDENTITY(int(3), int(3))), ~ (1 << _GLF_IDENTITY(int(3), int(3))), ~ (1 << _GLF_IDENTITY(int(3), int(3)))))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, sqrt(0.0), 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 1.0), min(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), float(_GLF_FUZZED(-34.18)), bool(false))), injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(cosh(exp(7.4))) : 0.0)))), clamp(dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, log(_GLF_ONE(1.0, injectionSwitch.y)), sqrt(1.0), 1.0, abs(1.0), 0.0, 0.0, 1.0, abs(1.0))), (_GLF_IDENTITY(float(mat3(0.0, log(_GLF_ONE(1.0, injectionSwitch.y)), sqrt(1.0), 1.0, abs(1.0), 0.0, 0.0, 1.0, abs(1.0))), (float(mat3(0.0, log(_GLF_ONE(1.0, injectionSwitch.y)), sqrt(1.0), 1.0, abs(1.0), 0.0, 0.0, 1.0, abs(1.0)))) / 1.0)) * 1.0)))), dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, sqrt(0.0), 1.0, 0.0)), dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0), vec4(0.0, sqrt(0.0), 1.0, 0.0))))), exp(0.0), sqrt(1.0), 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))).x > injectionSwitch.y))) && true)))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, true, false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(3.4)), float(injectionSwitch.x), bool(true))))) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), bool(bool(_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-741.885, -2128.1608), clamp(vec2(-741.885, -2128.1608), vec2(-741.885, -2128.1608), _GLF_IDENTITY(vec2(-741.885, -2128.1608), _GLF_IDENTITY(mat2(1.0) * (vec2(-741.885, -2128.1608)), max(mat2(1.0) * (vec2(-741.885, -2128.1608)), mat2(1.0) * (vec2(-741.885, -2128.1608)))))))))).x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-741.885, _GLF_IDENTITY(-2128.1608, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), mat2(1.0) * (vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))), vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0)))))), (vec2(-741.885, _GLF_IDENTITY(-2128.1608, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), mat2(1.0) * (vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))), vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))))))) * vec2(1.0, 1.0))))).x < injectionSwitch.y, true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-741.885, -2128.1608)))).x < injectionSwitch.y, true, true, false)), true, true, false)))))))), (_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-741.885, -2128.1608), clamp(vec2(-741.885, -2128.1608), vec2(-741.885, -2128.1608), _GLF_IDENTITY(vec2(-741.885, -2128.1608), _GLF_IDENTITY(mat2(1.0) * (vec2(-741.885, -2128.1608)), max(mat2(1.0) * (vec2(-741.885, -2128.1608)), mat2(1.0) * (vec2(-741.885, -2128.1608)))))))))).x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-741.885, _GLF_IDENTITY(-2128.1608, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), mat2(1.0) * (vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))), vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0)))))), (vec2(-741.885, _GLF_IDENTITY(-2128.1608, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), mat2(1.0) * (vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))), vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))))))) * vec2(1.0, 1.0))))).x < injectionSwitch.y, true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-741.885, -2128.1608)))).x < injectionSwitch.y, true, true, false)), true, true, false)))))))), true && (bool(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-741.885, -2128.1608), clamp(vec2(-741.885, -2128.1608), vec2(-741.885, -2128.1608), _GLF_IDENTITY(vec2(-741.885, -2128.1608), _GLF_IDENTITY(mat2(1.0) * (vec2(-741.885, -2128.1608)), max(mat2(1.0) * (vec2(-741.885, -2128.1608)), mat2(1.0) * (vec2(-741.885, -2128.1608)))))))))).x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-741.885, _GLF_IDENTITY(-2128.1608, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), mat2(1.0) * (vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))), vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0)))))), (vec2(-741.885, _GLF_IDENTITY(-2128.1608, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0), mat2(1.0) * (vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, _GLF_IDENTITY(1.0, (1.0) + 0.0))), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))), vec2(_GLF_IDENTITY(-2128.1608, _GLF_IDENTITY(float(vec2(-2128.1608, 1.0)), clamp(float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0)), float(vec2(-2128.1608, 1.0))))), 1.0))))))) * vec2(1.0, 1.0))))).x < injectionSwitch.y, true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-741.885, -2128.1608)))).x < injectionSwitch.y, true, true, false)), true, true, false))))))))))) || false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), false))), false, false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
            barrier();
           return;
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (false) && true)) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acosh(4.8)) : injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), max(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), _GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), max(_GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))), _GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), 1, 1))))))))) | (1 ^ 1))) ^ 0), 4);
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, true && (true))))))
      continue;
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(44.00)), float(injectionSwitch.y), bool(true)))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(44.00)), float(injectionSwitch.y), bool(true))))))))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              barrier();
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(true, ! (! (true))), false)))), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.4)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(443.419)), float(injectionSwitch.x), bool(true)))), bool(true))) > injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY((bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)) > injectionSwitch.y)), false))), ((bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false)))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8430.0224)), vec2(_GLF_FUZZED(_GLF_IDENTITY((5798.4536 + float(-77080)), ((5798.4536 + float(-77080))) - _GLF_IDENTITY(0.0, (0.0) * 1.0))), _GLF_IDENTITY((injectionSwitch)[1], float(vec4(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / cos(vec2(0.0, 0.0)))[1], 1.0, 0.0, 1.0)))), bvec2(false, true))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8430.0224)), vec2(_GLF_FUZZED((5798.4536 + float(-77080))), _GLF_IDENTITY((injectionSwitch)[1], float(vec4((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1], 1.0, 0.0, 1.0)))), bvec2(false, true))).x > injectionSwitch.y) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8430.0224)), vec2(_GLF_FUZZED((5798.4536 + float(-77080))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1], float(vec4((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))))[1], 1.0, 0.0, 1.0)))), bvec2(false, true))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(8430.0224, _GLF_IDENTITY(clamp(8430.0224, 8430.0224, 8430.0224), max(_GLF_IDENTITY(clamp(8430.0224, 8430.0224, 8430.0224), (clamp(8430.0224, 8430.0224, 8430.0224)) - 0.0), clamp(8430.0224, 8430.0224, 8430.0224)))))), vec2(_GLF_FUZZED((5798.4536 + float(-77080))), _GLF_IDENTITY((injectionSwitch)[1], float(vec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])), clamp(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])), (_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1]))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])), clamp(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(2.7) : (injectionSwitch)[1])))))), 1.0, 0.0, 1.0)))), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))).x > injectionSwitch.y) && _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y)))), false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 + (int(2))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ -2546.4479))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat4x3((injectionSwitch)[1], 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), 1.0)), 1.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0)))), vec2(_GLF_FUZZED(0.3), _GLF_IDENTITY(_GLF_FUZZED(347.324), float(_GLF_IDENTITY(vec2(_GLF_FUZZED(347.324), 0.0), clamp(vec2(_GLF_FUZZED(347.324), 0.0), vec2(_GLF_FUZZED(347.324), 0.0), vec2(_GLF_FUZZED(347.324), 0.0)))))), bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false)))))).y)))) - vec2(0.0, 0.0)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec2(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
}
