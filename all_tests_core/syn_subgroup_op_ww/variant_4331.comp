#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (75497u & 0u) | (_GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) + uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) / uvec4(1u, 1u, 1u, 1u)), uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), mix(vec2(_GLF_FUZZED((-4.6)), (vec2(0.0, 0.0) + (injectionSwitch))[1]), vec2((vec2(0.0, 0.0) + (injectionSwitch))[0], _GLF_FUZZED(5.1)), bvec2(true, false)))).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0)) + _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))).y))) || false)) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))) ^ (0u & 100293u)), min(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), max(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)) | 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)) | 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)) | 0u))), _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u))), workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec4(workgroup_size * workgroup_id, 0u, 0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0)), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec4(workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), 0u, 0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0)))))), ((_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec4(workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), 0u, 0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0))))))) >> 0u))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) || false), false), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) || false), false), false, false)), true, false)))))), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) * 1.0)) * round(length(normalize(vec3(1.0, 1.0, 1.0))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) < injectionSwitch.y)) || false)))), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), bool(bvec3((! (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))) && true))) && true)), bool(bvec4(! (_GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), (! (! (injectionSwitch.x < injectionSwitch.y))) && true)), false, true, true))))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), bool(bvec3((! (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))) && true))) && true)), bool(bvec4(! (_GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), (! (! (injectionSwitch.x < injectionSwitch.y))) && true)), false, true, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), bool(bvec3((! (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))) && true))) && true)), bool(bvec4(! (_GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), (! (! (injectionSwitch.x < injectionSwitch.y))) && true)), false, true, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.34), _GLF_FUZZED(-7815.6167)), bvec2(false, false))).x < injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1746.2899), _GLF_FUZZED(39.65)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), false, true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(45.34), _GLF_FUZZED(-7815.6167)), bvec2(false, false))).x < injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1746.2899), _GLF_FUZZED(39.65)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), false, true))))), false, false))))), false, true), false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), (! (! (injectionSwitch.x < injectionSwitch.y))) || false))), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(pow(-964.158, 7855.5966)) : injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false)))))), true))))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), (! (! (injectionSwitch.x < injectionSwitch.y))) || false))), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(pow(-964.158, 7855.5966)) : injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false)))))), true))))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), (! (! (injectionSwitch.x < injectionSwitch.y))) || false))), false, true), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(pow(-964.158, 7855.5966)) : injectionSwitch.y)), ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true), false)))))), true)))))))))))))))))))), (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3x4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, exp(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 0.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, exp(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 0.0)))))), 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(injectionSwitch, injectionSwitch)) : 1.0)), 0.0, sqrt(1.0))))).y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, true)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) / 1.0) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(598.168), _GLF_FUZZED(-24.24)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 0.0, 0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(mat2x3(mat2x4(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 0.0, 0.0, 0.0, 1.0, 0.0))), (mat2x3(mat2x4(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 0.0, 0.0, 0.0, 1.0, 0.0)))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))) || false))))))))) || false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u);
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) >> 0u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) >> 0u, (_GLF_IDENTITY(0u, (0u) << 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (~ (3u)))), uint(3u)), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (~ (3u)))), uint(3u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(uint(uvec3(min(subgroup_local_id, subgroup_local_id), 1u, 0u)), 0u | (uint(uvec3(min(subgroup_local_id, subgroup_local_id), 1u, 0u))))))) >> 0u, min((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))))) >> 0u, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) >> 0u))))))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0) < _GLF_IDENTITY(1, min(1, 1))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))))))), (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) * 1))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(80002))) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ (1 ^ 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))) < _GLF_IDENTITY(1, min(1, 1))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), (true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(false))), float(1.0), bool(true))), injectionSwitch.y))) < _GLF_IDENTITY(1, min(1, 1))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2635.1579))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)) || false)) && true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (10301 & _GLF_IDENTITY(0, max(0, 0)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(round(0.2))))))))))
            continue;
          }
        }
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) + 0))), max(1, 1))) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bvec2(bool(bool(_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true))))) || false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))))) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) * 1)))), 1)), min(1, 1))))), (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))))) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) * 1)))), 1)), min(1, 1))))), (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))))) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) * 1)))), 1)), min(1, 1))))), (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))))) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) * 1)))), 1)), min(1, 1))))), (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) / 1))) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) / 1)), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) << 0))) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) / 1)), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) / 1)), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) ^ 0))) ^ 0)) / 1)), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) / 1)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), min((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), int(ivec2((_GLF_IDENTITY(1, (1) / 1)), 1)))) - 0))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) / 1, ~ (~ ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) / 1))))))), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), min((_GLF_IDENTITY(1, (1) / 1)), (_GLF_IDENTITY(1, (1) / 1)))) ^ 0)), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))), 0u ^ (_GLF_IDENTITY((uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ~ (~ ((_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), max(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))) + 0u)) << 0u)))))), min((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / _GLF_IDENTITY(1, ~ (~ (1))), ((1) / 1) - 0))) ^ 0)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))), (false ? _GLF_FUZZED(next_virtual_gid) : (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (1) / 1)) ^ 0)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) / 1) ^ 0)))), uint(uvec4((~ (uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) / 1) ^ 0)))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, 0 | (0)))), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) | 0)) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) ^ 0))))))))) - 0u, 0u ^ (((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))))) - 0u))))) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, min(1, 1)))) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) ^ 0))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), (_GLF_IDENTITY(1, (1) / 1)))))) ^ 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, max(_GLF_IDENTITY((1) / 1, ((1) / 1) ^ 0), (1) / 1)))) ^ 0) | (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) - 0))) ^ 0, min((_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> 0))) ^ 0, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) / 1)))))))))), ((uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) | (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, min((_GLF_IDENTITY(1, (1) / 1)) ^ 0, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, 0 | _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * ((1) / 1)))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), (false ? _GLF_FUZZED(11830) : _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) ^ 0))))) ^ 0, min(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) | 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1)) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))), min(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * ((1) / 1)))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), (false ? _GLF_FUZZED(11830) : _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) ^ 0))))) ^ 0, min(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) | 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1)) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * ((1) / 1)))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), (false ? _GLF_FUZZED(11830) : _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) ^ 0))))) ^ 0, min(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) | 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1)) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * ((1) / 1)))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), (false ? _GLF_FUZZED(11830) : _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1))) ^ 0))))) ^ 0, min(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) | 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1)) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))))))))))))) * 1u)))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (0 >> _GLF_IDENTITY(int(8), int(8))) + (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) << 0)))) ^ 0))), (true ? ~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(70678) : _GLF_IDENTITY((1) / 1, ((1) / 1) << 0))))) ^ 0), 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) >> 0)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) >> 0))))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) - 0) / 1)) ^ 0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)) + 0), int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - 0))), 1))) / 1)) ^ 0), 1))) : _GLF_FUZZED(-23510))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, ((1) / 1) / 1))) ^ 0))))) : _GLF_FUZZED(subgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), 0u + (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), max(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))) * 1u))), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, max((1) / 1, (1) / 1)))) ^ 0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) / 1))) / 1)) ^ 0))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, min((_GLF_IDENTITY(1, (1) / 1)) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, 0 + (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, min((_GLF_IDENTITY(1, (1) / 1)) ^ 0, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))))))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))), 1u * (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))))))))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), 1 * (_GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(1, (1) / 1)))) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | (_GLF_IDENTITY(1, (1) | (1)))))) ^ 0))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (1) / 1)) ^ 0)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))) + 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), max(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1)))) ^ 0)) ^ 0)), _GLF_IDENTITY((uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))), ((uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))) >> 0u) * 1u))), uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, clamp((_GLF_IDENTITY(1, (1) / 1)) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) ^ 0, ((_GLF_IDENTITY(1, (1) / 1)) ^ 0) * 1))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0))))))))))) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (1) / 1)) ^ 0)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(4), int(4))) | (0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(4), int(4))) | (0)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(4), int(4))) | (0)))), 0u ^ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(4), int(4))) | (0))))))) / 1u))))), ((~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(4), int(4))) | (0))))))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0)))))) << 0u))))), _GLF_IDENTITY(4, ~ (~ (4))), 64, 4);
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 0.0, _GLF_IDENTITY(cos(0.0), mix(float(_GLF_IDENTITY(cos(0.0), (cos(0.0)) - 0.0)), float(_GLF_FUZZED(-9.7)), bool(false))))), mix(vec2((vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), 0.0, cos(0.0))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5739.7271))), 0.0)), cos(0.0))), clamp(vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5739.7271))), 0.0)), cos(0.0))), vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5739.7271))), 0.0)), cos(0.0))), vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5739.7271))), 0.0)), cos(0.0))))))[1]), vec2(_GLF_FUZZED(-6850.9271), _GLF_FUZZED(7376.1201)), bvec2(false, false)))).y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2), (false ? _GLF_FUZZED(workgroup_id) : (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2))) == _GLF_IDENTITY(0, (0 & ivec2(75275, -81215).r) + (0)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2), (false ? _GLF_FUZZED(workgroup_id) : (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2))) == _GLF_IDENTITY(0, (_GLF_IDENTITY(0 & ivec2(75275, -81215).r, max(0 & ivec2(75275, -81215).r, 0 & ivec2(75275, -81215).r))) + (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-85064) : 0))) << 0)))) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupAll(true);
    }
   else
    {
    }
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)))), (_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid))) | 0u), _GLF_IDENTITY(next_virtual_gid, 0u ^ _GLF_IDENTITY((next_virtual_gid), 0u | ((next_virtual_gid))))))], uint(2), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > 0), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true), false, false))), true))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
}
