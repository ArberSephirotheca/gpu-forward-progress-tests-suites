#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(floatBitsToInt(-594.169)) : _GLF_IDENTITY(1, min(1, 1)))), 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(7, ~ (~ (7)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), (int(_GLF_IDENTITY(7, ~ (~ (7))))) | (int(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, (7) << 0))))))))), int(7), int(7)))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), false || (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(3982.4992, (3982.4992) + sin(0.0))) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) || false)))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y)))), (mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(_GLF_IDENTITY(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4(6822.5802, -5.2, -7785.8242, 7.3, -629.094, 312.861, -999.395, -3796.2855, 502.327, -4.3, 7041.6180, -6064.7855, -101.185, -9671.2203, -1619.5401, -2.7)) : mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y))))), float(_GLF_IDENTITY(mat4(determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), float(mat3(_GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(-377.020)), bool(false))), sqrt(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 0.0, log(1.0), sqrt(0.0), 0.0, sqrt(1.0), log(1.0), abs(0.0)))), _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 1.0, 1.0, 1.0, sqrt(0.0), tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(determinant(mat4(1.0, sqrt(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 1.0, 1.0, 1.0, sqrt(0.0), tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))) / mat2(1.0, 1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y)))), (mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (_GLF_IDENTITY(true, false || (true))))))))))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y))))) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, exp(0.0), 1.0))), 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y)))), (mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(-8821.2104)), bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_ONE(1.0, injectionSwitch.y))))) / mat2(1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0)), bool(true))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, exp(0.0), 1.0))), 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y)))), (mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(-8821.2104)), bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_ONE(1.0, injectionSwitch.y))))) / mat2(1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, exp(0.0), 1.0))), 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y)))), (mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(-8821.2104)), bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_ONE(1.0, injectionSwitch.y))))) / mat2(1.0, 1.0, 1.0, 1.0))) * mat2(1.0))) / mat2(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.3)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y)))), (mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8634.9805)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))) && true)))), 1.0, 1.0, determinant(mat4(1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y))))) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), (true ? mat2(1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2(3.3, -968.818, -50.76, 931.791))))))))))) < injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(ivec2(7, 1)))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && _GLF_IDENTITY(_GLF_IDENTITY(((false) && true), ! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), true, false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(((false) && true), ! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), true, false)))))), (_GLF_IDENTITY(((false) && true), ! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), true, false))))))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))) && true) && true)))))) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, log(1.0)))))) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(579.325)))) + 0.0) > injectionSwitch.y), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))), ! (! (bool(bool((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bvec4(! (! (true)), false, false, true))))))) && (! (_GLF_IDENTITY(false, (false) && true)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0)), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1689.7642))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(122313u))), float(1.0), bool(true))), 1.0)), float(mat4(1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, length(0.0), sin(0.0), 1.0, 1.0, 0.0))), 1.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(256.715, (256.715) / 1.0))), float(float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))), bool(_GLF_IDENTITY(true, (true) && true))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), (injectionSwitch.x) + 0.0) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(abs(vec2(1.0, 1.0))))), 1.0, 1.0, tan(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1360.8290)))), 1.0))).x, _GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED((vec3(21.33, -3626.1485, -0.0) / -1850.8714).b)), bool(false))) + 0.0) > injectionSwitch.y))))))) || false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec2(-3791.0756, 4192.9777).x)), _GLF_IDENTITY(bool(false), (bool(false)) && true)))))); _injected_loop_counter --)
            {
             do
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0))), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), true))) && true)), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), true))) && true))), false || (! (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), true))) && true))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)) && true)), true && (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))))), true && ((_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)) && true)), true && (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)), true && (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))))))), ((! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)), true && (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)))))))) || false)), true && (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), ~ (~ ((_injected_loop_counter) | (_injected_loop_counter))))) > 0)) && true)), true && _GLF_IDENTITY((true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))), ! (! (_GLF_IDENTITY((true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))), ! (! ((true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))))))))))), true && ((_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)) && true)), true && (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true, ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true, ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0)))) && true))))))))))))), ! (! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)), true && (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true))))))))))))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   for(int _injected_loop_counter = ((((1 & 1) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), (int(2)) | 0))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0), (_injected_loop_counter ++) >> 0))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4((injectionSwitch)[0], 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1, min((_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1), int(ivec2(~ ((_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1), 0)))) / 1))))))]), vec2(_GLF_FUZZED(_GLF_IDENTITY(2951.1937, (true ? 2951.1937 : _GLF_FUZZED(-13.92)))), _GLF_FUZZED(-28.30)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), false)))) - vec2(0.0, 0.0)).x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - sqrt(vec2(0.0, 0.0))).y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           do
                                            {
                                             do
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
                                                          {
                                                           do
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 1.0, log(1.0)))) : _GLF_FUZZED(vec2(-853.452, -4.5)))).x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) ? injectionSwitch : _GLF_FUZZED(vec2(-853.452, -4.5)))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)) ? injectionSwitch : _GLF_FUZZED(vec2(-853.452, -4.5)), min(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)) ? injectionSwitch : _GLF_FUZZED(vec2(-853.452, -4.5)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)) ? injectionSwitch : _GLF_FUZZED(vec2(-853.452, -4.5)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)) ? injectionSwitch : _GLF_FUZZED(vec2(-853.452, -4.5)))))))).x)), mix(float(_GLF_FUZZED(0.3)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((- 4.4)), _GLF_FUZZED(-1638.6581)), bvec2(false, false))) : _GLF_FUZZED(vec2(-853.452, -4.5)))).x), bool(true))) < injectionSwitch.y))))
                                                                {
                                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                                                  {
                                                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), int(int(int(3))))) + 0))), max(~ (_GLF_IDENTITY(int(3), int(3))), ~ (_GLF_IDENTITY(int(3), int(3)))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec3((true), false, false)), true && (bool(bvec3((true), false, false)))), false, false, false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < injectionSwitch.y), ! _GLF_IDENTITY(_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < injectionSwitch.y))), bool(bool(_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(_GLF_IDENTITY(false, (false) && true)))) < injectionSwitch.y))), ! (! ((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), false, false)))))) < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < injectionSwitch.y), false)), bool(bool(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < injectionSwitch.y), false)))))))))))))), true && (_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < injectionSwitch.y))), bool(bool(_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(_GLF_IDENTITY(false, (false) && true)))) < injectionSwitch.y))), ! (! ((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), false, false)))))) < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))), false)), bool(bool(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(acosh(-6833.9486))))), float(_GLF_FUZZED(3.1)), bool(false))) < injectionSwitch.y), false))))))))))))))))))))
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                                                                            {
                                                                            }
                                                                           else
                                                                            {
                                                                             do
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                {
                                                                                }
                                                                               else
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                  {
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                   do
                                                                                    {
                                                                                     do
                                                                                      {
                                                                                       do
                                                                                        {
                                                                                         return;
                                                                                        }
                                                                                       while(_GLF_WRAPPED_LOOP(false));
                                                                                      }
                                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                                    }
                                                                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                                                                                  }
                                                                                }
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(false));
                                                                            }
                                                                          }
                                                                        }
                                                                       else
                                                                        {
                                                                        }
                                                                      }
                                                                     else
                                                                      {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                               else
                                                                {
                                                                }
                                                              }
                                                            }
                                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true)))))) && true))));
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_id) : workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (_GLF_IDENTITY(0, (0) | (0))))) * 1) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) | (2)))))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
                {
                }
               else
                {
                 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) << 0)), 4, 64, 4);
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(subgroup_local_id + 1 < subgroup_size)
                  {
                   do
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(-8.5))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(-8.5))))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(-8.5))))), false, true))), (! (bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(-8.5))))), false, true)))) && true))))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(! (_GLF_IDENTITY(true, ! (! (true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), true)))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))) || false), false, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), ! (! (true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true)))))))))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) && true)))))))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) && true)))))))), true)), bvec2(bvec3(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) && true)))))))), true)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! (_GLF_IDENTITY((! (true)), true && ((! (true)))))) && true)))))))), true)), bvec2(bvec3(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) && true)))))))), true)), false)))))))), true, false)))))))), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))) || false, _GLF_IDENTITY(bool(bvec3((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(_GLF_IDENTITY(bool(bool(bvec3((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), bool(bvec4(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), true, false, true)))), (bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), bool(bvec4(bool((! (_GLF_IDENTITY(true, ! (! (true)))))), true, false, true))))) && true))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (bool(bool(bvec3((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), false, true, true))) || false)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bvec3(! (! _GLF_IDENTITY((true), bool(bvec2((true), true)))), false, false)), true && (bool(bvec3(! (! (true)), false, false))))))))))), bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))), (_GLF_IDENTITY(true, ! (! (true)))) || false)))))), true))))))
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                                  {
                                                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < (0 ^ 1)); _injected_loop_counter ++)
                                                        {
                                                         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 1u * (next_virtual_gid))], _GLF_IDENTITY(uint(2), _GLF_IDENTITY(max(uint(2), uint(2)), uint(uint(max(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) / 1u)) ^ 0u), uint(2)))))), 4, 64, 4);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), (injectionSwitch.x > injectionSwitch.y))));
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   do
                    {
                     subgroupAll(false);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-45215) : _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) / 1)) / 1)))))))) > ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(31057) : int(5))), int(5))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), clamp(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ (_GLF_FUZZED(_injected_loop_counter))))))))))) + 0)), (_GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), 0 | (_GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))) + 0)), min(clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) >> 0)), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + _GLF_IDENTITY(0, (0) - 0))), _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), clamp(~ (_injected_loop_counter), _GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), int(_GLF_IDENTITY(ivec2(~ (_injected_loop_counter), 0), ivec2(0, 0) + (ivec2(~ (_injected_loop_counter), 0))))), 0 ^ (~ (_injected_loop_counter))), ~ (_injected_loop_counter))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter)))) >> 0), ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (0 << _GLF_IDENTITY(int(6), int(6))) ^ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))))))))) + 0)), min(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), 0 ^ ((~ (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_injected_loop_counter)))))))) + 0)), _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) + 0)), (clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), min((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))), 0 ^ ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (false ? _GLF_FUZZED(16212) : _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), ~ (~ (~ (~ (_injected_loop_counter))))))))))) + 0))) ^ 0)))), max(~ (clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0))), ~ (clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1 * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), max(1 * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), _GLF_IDENTITY(1 * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), max(1 * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) + 0)))))))))) | (clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))) / 1), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + _GLF_IDENTITY(0, int(int(0)))))))) != 0, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | ((~ (_injected_loop_counter))))))), (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) + 0)))), ~ (~ ((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) | ((~ (_injected_loop_counter))))))), (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) + 0))))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (1 ^ 1))) + int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))), _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0)), int(_GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), 0 ^ (int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0), (70202 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (_injected_loop_counter) + 0))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), 0 ^ (int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0), (70202 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (_injected_loop_counter) + 0))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), 0 ^ (int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0), (70202 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (_injected_loop_counter) + 0)))))))) << 0)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), 0 ^ (int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0), (70202 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (_injected_loop_counter) + 0))))))), max(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), 0 ^ (int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0), (70202 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (_injected_loop_counter) + 0))))))), false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0))), 0 ^ (int(clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) + 0), (70202 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (_injected_loop_counter) + 0)))))))))))))))))) != 0, _GLF_IDENTITY(true, bool(bool(true))), false, false)), (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), 0 | ((_injected_loop_counter))) + 0))) != 0, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, false || (false)), false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(true, false, false, false))), true && (! (bool(bvec4(true, false, false, false))))))))))), false, false))) || false))); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) - 0.0) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(normalize(-82.95)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
                                      {
                                       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           do
                                            {
                                             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : next_virtual_gid))) | (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, max(8u, 8u))))))], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(4, 1, 1)), int(_GLF_IDENTITY(ivec3(int(ivec3(4, 1, 1)), 1, 1), ~ (~ (ivec3(int(ivec3(4, 1, 1)), 1, 1))))))), _GLF_IDENTITY(4, min(4, 4))))) * (_GLF_IDENTITY(1 & 1, 1 * (1 & 1)))), 64, 4);
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   do
                    {
                     subgroupAll(true);
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(float(injectionSwitch[0]), (false ? _GLF_FUZZED(430.235) : float(injectionSwitch[0]))))), injectionSwitch[1])).y))));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
}
