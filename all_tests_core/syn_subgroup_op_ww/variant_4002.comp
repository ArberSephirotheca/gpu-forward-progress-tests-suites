#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bool((false))))))), ((! (false))) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(58.84) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), (bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (bool(false)), ! (! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false)))))))))), bool(bool(bool(bool(_GLF_IDENTITY(! (bool(false)), ! (! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false)))))))))))))))))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), true, false))))))))))))) && true)), false, false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), ! (! (bool(bvec3(false, false, false))))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))) && true)), false, false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))) && true)), false, false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false)))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))) && true)), false, false)))))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), false))), true))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec3(bvec3(bvec3(false, false, false))))), false))), true))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (bool(bvec3(false, false, false))))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) + 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), bool(bvec3(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), true, false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))) | 0u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), max((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) | (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ ((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))))) * 1)))))) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) | (0 << _GLF_IDENTITY(int(4), int(4))))))), _GLF_IDENTITY(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), (0 ^ _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) >> 0)))) ^ (int(6)))))) | 0)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))) >> 0)), (0 ^ 0) ^ (int(6)))))) | 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6)))))) | 0)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))))) >> 0), 0 ^ (_GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))))) >> 0)))), (0 ^ 0) ^ (int(6)))))) | 0)))))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6)))))) | 0)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, cos(0.0), 0.0)), clamp(float(vec4(1.0, 1.0, cos(0.0), 0.0)), float(vec4(1.0, 1.0, cos(0.0), 0.0)), _GLF_IDENTITY(float(vec4(1.0, 1.0, cos(0.0), 0.0)), (float(vec4(1.0, 1.0, cos(0.0), 0.0))) - 0.0)))))), 0.0)))))))) >> 0)), (0 ^ 0) ^ _GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(-63956) : (int(6)))))))) | 0))))))))) << int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))))), injectionSwitch.x)))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), max((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), 0 ^ ((0 << _GLF_IDENTITY(int(4), int(4))))))), _GLF_IDENTITY(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6)))))) | 0)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(int(6), 0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6.7)), float(1.0), bool(true))), 1.0)), 0.0))))), clamp(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0))))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))) * 1), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))))))) >> 0)), (0 ^ 0) ^ (int(6)))))) | 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6)))))) | 0)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (vec4(injectionSwitch.y, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), 0.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(vec4(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (vec4(injectionSwitch.y, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), 0.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))) * 1.0))), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + sqrt(0.0)), sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))))) >> 0)), (0 ^ 0) ^ (int(6)))))) | 0)))))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1), ~ (~ (ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)))))), int(_GLF_ONE(1.0, injectionSwitch.y)))) * _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6))), min(_GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6))), (_GLF_IDENTITY(int(6), (0 ^ 0) ^ (int(6)))) >> 0)))))) | 0)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_IDENTITY(int(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(ivec2(_GLF_IDENTITY(int(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))), (int(int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) + 0), 1))))), _GLF_IDENTITY((int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))))) >> 0, (true ? (int(ivec3(int(6), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) + _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))))))) >> 0 : _GLF_FUZZED(75282))))), (0 ^ 0) ^ (int(6)))))) | 0))))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true)))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), ! (! (! (bool(bvec2(false, false)))))))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(_GLF_IDENTITY(-0.8, (_GLF_IDENTITY(-0.8, max(_GLF_IDENTITY(-0.8, max(-0.8, -0.8)), -0.8))) / 1.0))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)) || (false)), false))), ! (! (! (bool(bvec2(false, false))))))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-5.6), max(_GLF_FUZZED(-5.6), _GLF_FUZZED(-5.6)))), (true ? float(_GLF_FUZZED(-5.6)) : _GLF_IDENTITY(_GLF_FUZZED(-1.6), max(_GLF_FUZZED(-1.6), _GLF_FUZZED(-1.6))))), float(injectionSwitch.x), bool(true))), min(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-5.6)), (_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_FUZZED(-5.6), max(_GLF_FUZZED(-5.6), _GLF_IDENTITY(_GLF_FUZZED(-5.6), clamp(_GLF_IDENTITY(_GLF_FUZZED(-5.6), clamp(_GLF_FUZZED(-5.6), _GLF_FUZZED(-5.6), _GLF_FUZZED(-5.6))), _GLF_FUZZED(-5.6), _GLF_FUZZED(-5.6)))))) : _GLF_FUZZED(-1.6), min(true ? float(_GLF_FUZZED(-5.6)) : _GLF_FUZZED(-1.6), _GLF_IDENTITY(true ? float(_GLF_FUZZED(-5.6)) : _GLF_FUZZED(-1.6), float(_GLF_IDENTITY(vec3(true ? float(_GLF_FUZZED(-5.6)) : _GLF_FUZZED(-1.6), 0.0, 0.0), clamp(vec3(true ? float(_GLF_FUZZED(-5.6)) : _GLF_FUZZED(-1.6), 0.0, 0.0), vec3(true ? float(_GLF_FUZZED(-5.6)) : _GLF_FUZZED(-1.6), 0.0, 0.0), vec3(true ? float(_GLF_FUZZED(-5.6)) : _GLF_FUZZED(-1.6), 0.0, 0.0))))))))), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-5.6)), (true ? float(_GLF_FUZZED(_GLF_IDENTITY(-5.6, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(-5.6, (false ? _GLF_FUZZED(3.8) : -5.6)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), sin(0.0))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), sin(0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0 * (float(mat4(_GLF_IDENTITY(-5.6, (false ? _GLF_FUZZED(3.8) : -5.6)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), sin(0.0))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), sin(0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))))) : _GLF_FUZZED(-1.6))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true))) || false))))
          barrier();
         barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(int(64))), max(_GLF_IDENTITY(_GLF_IDENTITY(64, int(int(64))), min(_GLF_IDENTITY(64, int(int(64))), _GLF_IDENTITY(64, int(int(64))))), _GLF_IDENTITY(64, int(int(64))))), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))) && true), false, true)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
