#version 460
struct _GLF_struct_17 {
 int _f0;
 mat4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_18 {
 uvec4 _f0;
 uint _f1;
 uint virtual_gid;
 _GLF_struct_17 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_15 {
 vec3 _f0;
 vec4 _f1;
 bvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_14 {
 bvec3 _f0;
 int _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 mat3x2 _f1;
 vec2 _f2;
 _GLF_struct_14 _f3;
 vec4 _f4;
 mat2x4 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_13 {
 uint subgroup_local_id;
 float _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_12 {
 mat2x3 _f0;
 mat4x3 _f1;
 uint workgroup_size;
} ;

struct _GLF_struct_9 {
 uint _f0;
 bvec3 _f1;
 mat4 _f2;
 ivec3 _f3;
 uvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 bvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 uvec3 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
 ivec3 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 uint _f3;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 vec4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 ivec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat2x4 _f1;
 bvec2 _f2;
 mat4 _f3;
 uvec4 _f4;
 vec2 _f5;
 int _f6;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 vec3 _f1;
 mat4x2 _f2;
 float _f3;
 float _f4;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 bvec4 _f1;
 uint workgroup_base;
 ivec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 uvec2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_8 _f2;
 bvec2 _f3;
 _GLF_struct_10 _f4;
 bvec3 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(gl_SubgroupInvocationID, 1.0, uvec3(1u));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(mat2x3(1.0), mat4x3(1.0), gl_WorkGroupSize.x);
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_4(_GLF_struct_0(vec3(1.0)), bvec4(true), _GLF_struct_replacement_12.workgroup_size * workgroup_id, ivec2(1), _GLF_struct_1(mat3x2(1.0), vec3(1.0), mat4x2(1.0), 1.0, 1.0), _GLF_struct_2(uvec3(1u), mat2x4(1.0), bvec2(true), mat4(1.0), uvec4(1u), vec2(1.0), 1), uvec2(1u), _GLF_struct_3(ivec4(1), ivec3(1), ivec4(1))), _GLF_struct_5(vec4(1.0), mat2x4(1.0), bvec3(true), vec4(1.0), bvec3(true)), _GLF_struct_8(uvec3(1u), _GLF_struct_6(uvec3(1u), uvec3(1u), mat2x3(1.0), mat2x3(1.0), ivec3(1), uvec2(1u)), _GLF_struct_7(bvec2(true), ivec3(1)), 1u), bvec2(true), _GLF_struct_10(_GLF_struct_9(1u, bvec3(true), mat4(1.0), ivec3(1), uvec3(1u), vec2(1.0)), bvec3(true), uvec3(1u)), bvec3(true));
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_16(mat3(1.0), mat3x2(1.0), vec2(1.0), _GLF_struct_14(bvec3(true), 1, bvec3(true)), vec4(1.0), mat2x4(1.0), _GLF_struct_15(vec3(1.0), vec4(1.0), bvec2(true), vec3(1.0))), _GLF_struct_18(uvec4(1u), 1u, _GLF_struct_replacement_11._f0.workgroup_base + subgroup_base + _GLF_struct_replacement_13.subgroup_local_id, _GLF_struct_17(1, mat4(1.0), ivec4(1)), bvec2(true)));
 uint next_virtual_gid = _GLF_struct_replacement_11._f0.workgroup_base + subgroup_base + ((_GLF_struct_replacement_13.subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[_GLF_struct_replacement_19._f1.virtual_gid], uint(1), 4, 64, 4);
 if((_GLF_struct_replacement_13.subgroup_local_id % 2) == 0)
  {
   subgroupAll(true);
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}
