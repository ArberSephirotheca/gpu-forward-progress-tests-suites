#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 ivec4 _f0;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
 float _f1;
 ivec3 _f2;
 mat4x3 _f3;
 ivec2 _f4;
 bvec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 bvec3 _f1;
 mat2x3 _f2;
 bvec2 _f3;
 bvec4 _f4;
 vec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 mat2 _f1;
 vec4 _f2;
 mat3x2 _f3;
 int _f4;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
 ivec2 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 uint next_virtual_gid;
 bvec2 _f1;
 uvec2 _f2;
 _GLF_struct_20 _f3;
 bvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_13 {
 ivec3 _f0;
} ;

struct _GLF_struct_12 {
 mat4x3 _f0;
 mat2x3 _f1;
 mat3x4 _f2;
 mat3x4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 mat2x3 _f1;
 _GLF_struct_13 _f2;
 uint _f3;
 vec3 _f4;
} ;

struct _GLF_struct_15 {
 uint workgroup_id;
 mat2x4 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 vec3 _f1;
 int _f2;
 mat3 _f3;
 bvec3 _f4;
 mat3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 uint subgroup_local_id;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_11 {
 ivec3 _f0;
 _GLF_struct_10 _f1;
} ;

struct _GLF_struct_7 {
 uint workgroup_size;
 bool _f0;
} ;

struct _GLF_struct_6 {
 float _f0;
 bvec2 _f1;
 uint subgroup_size;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 bvec3 _f1;
 uint workgroup_base;
 float _f2;
 uvec4 _f3;
 mat3 _f4;
 int _f5;
 vec4 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 uint _f1;
 mat2x3 _f2;
 uvec3 _f3;
 uvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 bool _f1;
 mat2x3 _f2;
 vec2 _f3;
 mat3x2 _f4;
 bvec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_4 _f2;
 mat2x3 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), length(_GLF_ZERO(0.0, injectionSwitch.x))))), bvec2(true), gl_SubgroupSize);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(ivec3(1), _GLF_struct_10(_GLF_struct_8(vec2(1.0), vec3(1.0), 1, mat3(1.0), bvec3(true), mat3(1.0), mat4(1.0)), gl_SubgroupInvocationID, _GLF_struct_9(vec4(1.0))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x)));
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-38950) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(gl_WorkGroupSize.x, true);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, ~ _GLF_IDENTITY((~ (gl_WorkGroupID)), ((~ (gl_WorkGroupID))) - uvec3(0u, 0u, 0u))))).x, mat2x4(1.0), _GLF_struct_14(_GLF_struct_12(mat4x3(1.0), mat2x3(1.0), mat3x4(1.0), mat3x4(1.0), ivec2(1)), mat2x3(1.0), _GLF_struct_13(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(max(ivec3(1), ivec3(1)), (_GLF_IDENTITY(max(ivec3(1), ivec3(1)), (true ? max(ivec3(1), ivec3(1)) : _GLF_FUZZED(ivec3(98240, 41385, -79802))))) / ivec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1u, vec3(1.0)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(bvec2(true), _GLF_struct_2(mat4x3(1.0), _GLF_struct_0(uvec3(1u), true, mat2x3(1.0), vec2(1.0), mat3x2(1.0), bvec4(true), ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-39882) : 1)))), _GLF_struct_1(mat4x3(1.0), 1u, mat2x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u) | ((uvec3(1u)))), max(_GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))))) ^ uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u)))), ~ (~ (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u)))))))))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))), (true ? _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))) : _GLF_FUZZED((subgroup_id % uvec3(89093u, 803u, 191716u))))), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))))) ^ uvec3(0u, 0u, 0u)), uvec3(1u))), 0u), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))) ^ uvec3(0u, 0u, 0u)), uvec3(1u))), (false ? _GLF_FUZZED(uvec3(165184u, 134502u, 134600u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))) ^ uvec3(0u, 0u, 0u)), uvec3(1u))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))) ^ uvec3(0u, 0u, 0u)), uvec3(1u))))))), 0u), uvec4(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, 0u | (1u))), clamp(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u)), ((uvec3(1u))) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((uvec3(1u))), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) + (((uvec3(1u)))))) ^ uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(1u, (1u) - 0u)))), 0u), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(1u), clamp(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))) ^ uvec3(0u, 0u, 0u)), uvec3(1u))), 0u), (uvec4(_GLF_IDENTITY(uvec3(1u), clamp(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) | ((uvec3(1u)))) ^ uvec3(0u, 0u, 0u)), uvec3(1u))), 0u)) ^ (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(3u), uvec4(3u)))))))), uvec3(1u), 1.0)), _GLF_struct_4(_GLF_struct_3(vec2(1.0), bvec3(true), _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * _GLF_struct_replacement_15.workgroup_id, max(_GLF_struct_replacement_7.workgroup_size * _GLF_struct_replacement_15.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size, 0u | (_GLF_struct_replacement_7.workgroup_size)) * _GLF_IDENTITY(_GLF_struct_replacement_15.workgroup_id, (_GLF_struct_replacement_15.workgroup_id) + 0u))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(90.09))), 1.0)), uvec4(1u), _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1, vec4(1.0))), mat2x3(1.0));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + _GLF_struct_replacement_11._f1.subgroup_local_id, _GLF_IDENTITY(uint(uvec2(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + _GLF_struct_replacement_11._f1.subgroup_local_id, 0u)), (uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, 0u | (_GLF_struct_replacement_6.subgroup_size))) << 0u))), (_GLF_IDENTITY(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size, clamp(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size, _GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size, _GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size))) >> 0u)) << 0u) + _GLF_struct_replacement_11._f1.subgroup_local_id, 0u))) / 1u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_18(mat4x3(1.0), ivec2(1), _GLF_struct_16(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), mat2(1.0), vec4(1.0), mat3x2(1.0), 1), _GLF_struct_17(mat2(1.0), bvec3(_GLF_IDENTITY(true, ! (! (true)))), mat2x3(1.0), bvec2(true), bvec4(true), vec2(1.0), uvec4(1u))), _GLF_IDENTITY(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_struct_replacement_6.subgroup_size) >> 0u) + ((_GLF_struct_replacement_11._f1.subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size), clamp(_GLF_IDENTITY(_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + ((_GLF_struct_replacement_11._f1.subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size), (_GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + (_GLF_IDENTITY((_GLF_struct_replacement_11._f1.subgroup_local_id + 1), ((_GLF_struct_replacement_11._f1.subgroup_local_id + 1)) / 1u) % _GLF_struct_replacement_6.subgroup_size)) / 1u), _GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + ((_GLF_struct_replacement_11._f1.subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size), _GLF_struct_replacement_5._f2._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + ((_GLF_IDENTITY(_GLF_struct_replacement_11._f1.subgroup_local_id + 1, (true ? _GLF_IDENTITY(_GLF_struct_replacement_11._f1.subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(_GLF_struct_replacement_11._f1.subgroup_local_id + 1, 1u, 1u)), (true ? uint(uvec3(_GLF_struct_replacement_11._f1.subgroup_local_id + 1, 1u, 1u)) : _GLF_FUZZED(37874u)))) : _GLF_FUZZED(91982u)))) % _GLF_struct_replacement_6.subgroup_size))), bvec2(true), uvec2(1u), _GLF_struct_20(_GLF_struct_19(ivec4(1)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), ivec3(1), mat4x3(1.0), ivec2(1), bvec3(true), bvec3(true)), bvec3(true), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, determinant(mat2(_GLF_IDENTITY(determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), max(_GLF_IDENTITY(determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(1794.4877)), float(_GLF_IDENTITY(determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (true ? determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(70.34)))), bool(true))), _GLF_IDENTITY(determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), max(determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))), 1.0, 0.0, 1.0)), 1.0, 0.0)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y) + 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y) + 0.0), max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y) + 0.0)))) / 1.0)))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))), bool(bvec2(false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)))))))), bool(bool(_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), true)))))) && true)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)))))))), bool(bool(_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), true)))))) && true)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)))))))), bool(bool(_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), true)))))) && true)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false), false)))))))), bool(bool(_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true, false), true)))))) && true)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         return;
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(sin(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) + 0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0)))))).y))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), vec2(1.0, 1.0) * (_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), (false ? _GLF_FUZZED(vec2(-71.54, -373.615)) : (injectionSwitch) - vec2(0.0, 0.0)))))))).y))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), min(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), _GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) * 1))) : _GLF_FUZZED(_GLF_IDENTITY(36233, (36233) >> 0))))) | (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), max((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), (true ? (injectionSwitch) - vec2(0.0, 0.0) : _GLF_FUZZED((injectionSwitch * mat2(11.86, 439.359, 5432.1188, 301.458)))))))))).y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) * mat2(1.0)), max((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), (true ? (injectionSwitch) - vec2(0.0, 0.0) : _GLF_FUZZED((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)) * mat2(11.86, 439.359, 5432.1188, 301.458)))))))))).y)) / 1.0))))))), max((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), ((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], (false ? _GLF_FUZZED(2.9) : ((injectionSwitch))[0])), _GLF_FUZZED(-17.10)), vec2(_GLF_FUZZED(1.1), ((injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) - vec2(0.0, 0.0)))).y))) | ((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))), (int(_GLF_IDENTITY((int(4)) * int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)) + 0.0)), ((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), cos(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0), (mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), cos(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))) | ((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(fma(vec2(-7.2, 0.6), vec2(943.358, -2.4), injectionSwitch)))))).y)))))) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec3(~ (0), 1, 0))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) * int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat2x4(vec2(0.0, 0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0)))))).y)), min(_GLF_IDENTITY(_GLF_IDENTITY((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), int(int((int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))), 0 | ((int(4)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), ((0 ^ 0) >> _GLF_IDENTITY(int(6), int(6))) | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))))), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), mat2(1.0) * (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y))), max(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) / 1)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y))))) : _GLF_FUZZED(36233)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) << (1 ^ 1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) << (1 ^ 1)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) << (1 ^ 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))) << (1 ^ 1)))))))))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), ((int(4))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-80.01)), vec2(_GLF_FUZZED(142.283), _GLF_IDENTITY((injectionSwitch)[1], float(mat4x2((injectionSwitch)[1], 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), bool(bvec4(bool(bool((injectionSwitch.x < injectionSwitch.y))), false, true, false)))))) && true))))) - vec2(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(dot(vec4(-38.00, 5866.3470, -7096.1157, -90.24), vec4(-90.77, 482.948, 4.4, 1506.2605))))))))).y))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), 1 * (int(ivec2(0, 0))))) | ((int(4)))) * int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(78.18)), bvec2(true, false))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, (0 | 0) + (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))) : _GLF_FUZZED(36233)))) | (_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> 0))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> 0))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> 0)))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> 0))))))) | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) >> 0)))))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), max(uint(1), uint(1)))) | (uint(1))), 0u | (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), max(uint(1), uint(1)))) | (_GLF_IDENTITY(uint(1), uint(uvec3(uint(1), 1u, (1u ^ 1u)))))))), uint(1))), 4, 64, 4);
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.6))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false)))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_struct_replacement_11._f1.subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)) < _GLF_struct_replacement_6.subgroup_size)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 85166)); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, true, false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, true, false))) || false))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_21.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_21.next_virtual_gid, ~ (~ (_GLF_struct_replacement_21.next_virtual_gid)))) / 1u)], uint(2), 4, 64, 4);
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), 0.0, abs(0.0), 1.0), (mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(0.0)), float(0.0), bool(true))))), 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, abs(0.0), 1.0)) * mat3(1.0)))).x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = ((1 | 1) & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter ++)
        {
         do
          {
           atomicStore(buf[_GLF_struct_replacement_21.next_virtual_gid], uint(2), 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))) || _GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(false, (false) && true))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0)), clamp(_GLF_IDENTITY(float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0)), clamp(float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0)), float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0)), float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0)))), float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0)), float(mat2(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), max(float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(3.1, -0.1, 3.9, -62.73), vec4(22.93, -3129.8669, 6.4, -0.1))) : 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 0.0)))))), vec3(0.0, 0.0, 1.0)), 1.0, abs(0.0), 0.0))))), dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0)))), 1.0))), (injectionSwitch.x > injectionSwitch.y) || false)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false || (_GLF_IDENTITY(false, false || (false)))), ! (! (bool(false || (_GLF_IDENTITY(false, false || (false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false || (_GLF_IDENTITY(false, false || (false)))), ! (! (bool(false || (_GLF_IDENTITY(false, false || (false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(false || (_GLF_IDENTITY(false, false || (false)))), ! (! (bool(false || (_GLF_IDENTITY(false, false || (false)))))))), false, false, false)))))))))))))))))));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupAll(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true))))))))))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))) && true); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
