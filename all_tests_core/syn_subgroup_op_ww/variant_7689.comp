#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, abs(1.0), 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat3x4(injectionSwitch, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, abs(1.0), 1.0, 0.0)))))) - vec2(0.0, 0.0))))))[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_FUZZED(956.469), _GLF_FUZZED(-787.331)), bvec2(false, false))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), false, false)), false || (bool(bvec4(true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), false, false)))))))), injectionSwitch.x, injectionSwitch.x)) / 1.0)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-33.08, 769.936)) : injectionSwitch)).x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.5) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))), injectionSwitch.x, injectionSwitch.x)) / 1.0)) > injectionSwitch.y)))), (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), max(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x))), (clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true)), max(mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))))), injectionSwitch.x, injectionSwitch.x)) / 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-94.69)), vec2(_GLF_FUZZED(-3.3), (injectionSwitch)[1]), bvec2(false, true))).x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), float(_GLF_IDENTITY(mat3(float(_GLF_FUZZED(-3.5)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), mat3(1.0) * (_GLF_IDENTITY(mat3(float(_GLF_FUZZED(-3.5)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), (mat3(float(_GLF_FUZZED(-3.5)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))))), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) / 1.0)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, 1.0), (mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), float(mat3(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, 1.0), (mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, sqrt(1.0), 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0)))), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) / 1.0)))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.5) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))))), injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.5) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), min(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.5) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.5) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)))) + 0.0), (clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(round(-383.748)) : injectionSwitch.x)), injectionSwitch.x)) / 1.0)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y))), max((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y))))) * 1.0)))))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true))) && true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true))) && true, ((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true))) && true) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true))) && true, ((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true))) && true) && true))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false, false), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))))), true, true, true)))))))) && true))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, false, true))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), bvec2(bvec3(bvec2(false, true), true)))))))) || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(! (! (false)), (! (! _GLF_IDENTITY((false), bool(bvec2((false), false))))) || false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false || (bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true))))))), bool(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true))))))), true))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
      return;
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), clamp(min(gl_WorkGroupSize, gl_WorkGroupSize), min(gl_WorkGroupSize, gl_WorkGroupSize), min(gl_WorkGroupSize, gl_WorkGroupSize)))).x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x, _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)).x, _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5092.5714)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5092.5714)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) || false)), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) : _GLF_FUZZED(-616.748))), mix(float(_GLF_FUZZED(5092.5714)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.0)), bool(false)))) / 1.0)))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec2(24.66, 1.6) - injectionSwitch)))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)) : _GLF_FUZZED(injectionSwitch))))))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id : _GLF_FUZZED((subgroup_id)))) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))), bool(bvec3(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))), true, false))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) + 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << ((0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 0u + (4u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(8u), 0u + (uint(8u))))), uint(8u)))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << ((0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 0u + (4u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(8u), 0u + (uint(8u))))), uint(8u))))) | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << ((0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 0u + (4u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(8u), 0u + (uint(8u))))), uint(8u)))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) | (subgroup_local_id + 1)), (subgroup_local_id + 1) ^ 0u)) % subgroup_size) | _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))) | 0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u)))), uint(_GLF_IDENTITY(2u, max(_GLF_IDENTITY(2u, (2u) | (2u)), _GLF_IDENTITY(2u, (2u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0u)), (true ? uint(uvec3(((subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 0))), 0))) / (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))), 0 + ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))) >> _GLF_IDENTITY(int(6), int(6)))))), (~ (_GLF_IDENTITY(1, (1) >> 0))) ^ 0)))) % subgroup_size) | 0u, (0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(subgroup_id)))))), 0u)) : _GLF_FUZZED(workgroup_base))))))));
 atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (false ? _GLF_FUZZED(53484) : _GLF_IDENTITY(4, max(4, 4))))))) ^ (0 << _GLF_IDENTITY(int(5), int(5)))), 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) / 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ _GLF_IDENTITY((4), min((4), (4)))) / 1), clamp(_GLF_IDENTITY(~ (4), (~ (4)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) / _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 1 * (1)), 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) / 1), 0 | (_GLF_IDENTITY(~ (4), (~ (4)) / 1))))), (_GLF_IDENTITY(~ (4), _GLF_IDENTITY((~ _GLF_IDENTITY((4), 0 | ((4)))), min((~ _GLF_IDENTITY((4), 0 | ((4)))), _GLF_IDENTITY((~ _GLF_IDENTITY((4), 0 | ((4)))), max((_GLF_IDENTITY(~ _GLF_IDENTITY((4), 0 | ((4))), (true ? ~ _GLF_IDENTITY((4), 0 | ((4))) : _GLF_FUZZED(-23888)))), (~ _GLF_IDENTITY((4), 0 | ((4)))))))) / 1)) ^ 0), _GLF_IDENTITY(~ (4), (~ (4)) / 1))) : _GLF_FUZZED((_GLF_IDENTITY(-77847, (-77847) / 1) ^ -38636))))))) - 0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)) : _GLF_FUZZED(subgroup_id))))), min(uint(uint(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)) : _GLF_FUZZED(subgroup_id))))), uint(uint(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)) : _GLF_FUZZED(subgroup_id)))))))) + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1, _GLF_IDENTITY(min(subgroup_local_id + 1, subgroup_local_id + 1), (_GLF_IDENTITY(min(subgroup_local_id + 1, subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY(min(subgroup_local_id + 1, subgroup_local_id + 1), clamp(min(subgroup_local_id + 1, subgroup_local_id + 1), min(subgroup_local_id + 1, subgroup_local_id + 1), min(subgroup_local_id + 1, subgroup_local_id + 1))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))))) / 1u) ^ 0u) < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))))) >> 0u), _GLF_IDENTITY(1u * (subgroup_size), (_GLF_IDENTITY(1u * (subgroup_size), (1u * (subgroup_size)) - 0u)) / 1u)), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(subgroup_id) : subgroup_size)), subgroup_size)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))))) >> 0u), _GLF_IDENTITY(1u * (subgroup_size), (_GLF_IDENTITY(1u * (subgroup_size), (1u * (subgroup_size)) - 0u)) / 1u)), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(subgroup_id) : subgroup_size)), subgroup_size)), 0u, 1u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))))) >> 0u), _GLF_IDENTITY(1u * (subgroup_size), (_GLF_IDENTITY(1u * (subgroup_size), (1u * (subgroup_size)) - 0u)) / 1u)), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(subgroup_id) : subgroup_size)), subgroup_size)), 0u, 1u)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))) || false)))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, sqrt(1.0)))), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), _GLF_FUZZED(1.7)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), mix(vec2(_GLF_FUZZED((_GLF_IDENTITY(-90.88 / -663.483, mix(float(-90.88 / -663.483), float(_GLF_FUZZED(30.54)), bool(false))))), _GLF_FUZZED(-9655.9508)), vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (_GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[_GLF_IDENTITY(1, (1) | (1))]), max(vec2(_GLF_FUZZED(9.1), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[_GLF_IDENTITY(1, (1) | (1))]), vec2(_GLF_FUZZED(9.1), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[_GLF_IDENTITY(1, (1) | (1))]))))[1]), bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(true, true && (true))))), ! (! (bool(bool(! (_GLF_IDENTITY(true, true && (true)))))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), ~ (~ (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), int(ivec4(_GLF_IDENTITY((1), min((1), (1))), (0 | 0), 1, 1)))))))))]), mix(vec2(_GLF_FUZZED((-90.88 / -663.483)), _GLF_FUZZED(-9655.9508)), vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[1]), bvec2(true, true))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), mix(vec2(_GLF_FUZZED((_GLF_IDENTITY(-90.88, mix(float(_GLF_IDENTITY(-90.88, (true ? -90.88 : _GLF_FUZZED(-8.5)))), float(_GLF_FUZZED(-6783.0282)), bool(false))) / -663.483)), _GLF_FUZZED(-9655.9508)), vec2((vec2(_GLF_FUZZED(9.1), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-325.971, -4.1)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))[_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) << 0)))]))[0], (_GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), clamp(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | (1))]), mix(vec2(_GLF_FUZZED((-90.88 / -663.483)), _GLF_FUZZED(-9655.9508)), _GLF_IDENTITY(vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[1]), mix(vec2(_GLF_FUZZED(771.579), _GLF_FUZZED(float(-64954))), vec2((vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[1]))[0], (vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[1]))[1]), bvec2(_GLF_IDENTITY(true, bool(bool(true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(true, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), mix(vec2(_GLF_FUZZED((-90.88 / -663.483)), _GLF_FUZZED(-9655.9508)), vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[1]), bvec2(true, true))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), mix(vec2(_GLF_FUZZED((-90.88 / -663.483)), _GLF_FUZZED(-9655.9508)), vec2((vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[0], (vec2(_GLF_FUZZED(9.1), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]))[1]), bvec2(true, true))))), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), ! (! (! (true)))))), true && (! (true))))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.6), _GLF_IDENTITY(_GLF_FUZZED(-7.9), (_GLF_FUZZED(-7.9)) + length(0.0))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))).y)), true, true, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))), mat2(1.0) * (injectionSwitch)).y)), true, true, true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) + (4))) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), (min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)))), (int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))))) / 1)))))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))), (false ? _GLF_FUZZED(-4574) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4)))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) + (4))) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), (min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)))), (int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))))) / 1)))))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))), (false ? _GLF_FUZZED(-4574) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) + (4))) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), (min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)))), (int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))))) / 1)))))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))), (false ? _GLF_FUZZED(-4574) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4)))))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) + (4))) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), (min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)))), (int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))))) / 1)))))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))), (false ? _GLF_FUZZED(-4574) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))))))))) - 0), _GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) + (4))) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), (min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)))), (int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))))) / 1)))))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))), (false ? _GLF_FUZZED(-4574) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4)))))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) + (4))) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), (min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1)))), (int(int(min(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY(0, (0) / 1))))) / 1)))))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))), (false ? _GLF_FUZZED(-4574) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))))))))))))), (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | 0)), (_GLF_IDENTITY(0, int(ivec2(0, 0)))) - 0), _GLF_IDENTITY(0, (0) / _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (1) << 0))))))))))), (int(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | 0)), (_GLF_IDENTITY(0, int(ivec2(0, 0)))) - 0), _GLF_IDENTITY(0, (0) / _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (1) << 0)))))))))))) / 1), _GLF_IDENTITY(0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), (int(ivec4((4), 1, 1, 1))) | (int(ivec4((4), 1, 1, 1))))) | (4), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), (int(ivec4((4), 1, 1, 1))) | (int(ivec4((4), 1, 1, 1))))) | (4), (_GLF_IDENTITY((4), _GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), (int(ivec4((4), 1, 1, 1))) | (int(ivec4((4), 1, 1, 1))))) | (4)) | (_GLF_IDENTITY((4), _GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), (int(ivec4((4), 1, 1, 1))) | (int(ivec4((4), 1, 1, 1))))) | (4))), 1))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-4574), (_GLF_FUZZED(-4574)) | 0) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 1, 1, 1))) | (4))))))), (0 | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), 1 * ((4))), _GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), (int(ivec4((4), 1, 1, 1))) | (int(ivec4((4), 1, 1, 1))))) | (4))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-4574), (_GLF_FUZZED(_GLF_IDENTITY(-4574, clamp(-4574, -4574, _GLF_IDENTITY(-4574, (-4574) ^ 0))))) | 0) : int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | (4)), 4, 4))), _GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(ivec4((4), 1, 1, 1)), ~ (~ (int(ivec4((4), 1, 1, 1)))))))) | (4)))))))) >> 0)))) >> 0), _GLF_IDENTITY(64, (64) >> 0), 4);
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    barrier();
   subgroupAll(false);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(true, true)))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(true, true)))), true)), true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, false))))))), true))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(true, true)))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(true, true)))), true)), true))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, false))))))), true))))), bool(bvec4(! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, false))))))), true))))), false, true, true)))))))), bool(bvec4(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(true, true)))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(true, true && (true))))))), bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))) || false), true)))), true)), true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), ! (! (true && (true))))), false, false))))))), true)))))))))), bool(bvec2(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2(true, true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2(true, true)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2(true, true)))), false)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(true, true)))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), bool(bvec2(_GLF_IDENTITY(true, (true) || false), true)))), true)), true))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, true)))), true)))))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, false)))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, false)))), false, true)))))), true)))))))))), true))), false, true, true))))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(_GLF_DEAD(false), true, true, false))))))))) && true))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! ((false)))))))))) && true)) && true, ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), true))), false))))))), ! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! ((false)))))))))) && true)) && true))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! ((false)))))))))) && true)) && true, ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), true))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false, false, true))), true, false), true))), false)))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true), ! (! (! (! ((false)))))))))) && true)) && true)))) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))))))], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec2(bvec2(bvec2(true, false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec2(bvec2(bvec2(true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (bool(bvec2(true, false))) || false)));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true, false, false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || false))))
  return;
 if(_GLF_DEAD(false))
  return;
}
