#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (67760 & (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 1) | 1)); _injected_loop_counter ++)
      {
       subgroupAll(true);
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     switch(_GLF_SWITCH(0))
      {
       case 0:
       case 68:
       case 7:
       case 83:
       case 23:
       case 98:
       do
        {
         do
          {
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       break;
       case 97:
       mat2 _GLF_SWITCH_0_0v[30];
       case 5:
       if((true ? true : (bvec2(false, true) != bvec2(false, false))))
        {
         float _GLF_SWITCH_0_1v[95], _GLF_SWITCH_0_2v;
         (+ ivec4(93282, -95981, -1396, -38230));
         mat2x3(-759.364, 29.11, 934.079, 866.260, -71.29, 1.9);
         ;
         int _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v[86];
         {
          (ivec3(10980, 56942, 59440) << ivec3(-86936, 4181, -7061));
          ivec4 _GLF_SWITCH_0_5v[57], _GLF_SWITCH_0_6v[19], _GLF_SWITCH_0_7v[49];
          ;
          ;
         }
         do
          {
           vec3(-1.5, 14.76, 157.895);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         vec2 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
         {
          (uvec3(97846u, 137049u, 16493u) - uvec3(55411u, 18389u, 156207u));
          uvec4(20250u, 177597u, 31564u, 134493u);
          mat2 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
         }
        }
       default:
       1;
      }
    }
   else
    {
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}
