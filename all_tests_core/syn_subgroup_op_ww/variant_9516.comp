#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - tan(0.0)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   do
    {
     GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y = _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ 0u, min((subgroup_local_id) ^ 0u, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u), min((subgroup_local_id), (subgroup_local_id))) ^ 0u))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), uint(uvec4(uint(subgroup_local_id), 0u, 1u, 1u))))), subgroup_local_id))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ 0u, min((subgroup_local_id) ^ 0u, _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))) ^ 0u))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u), ~ (~ (uvec2(min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ 0u, min((subgroup_local_id) ^ 0u, _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))) ^ 0u))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u)))), (_GLF_IDENTITY(uvec2(min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ 0u, min((subgroup_local_id) ^ 0u, _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))) ^ 0u))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u), ~ (~ (uvec2(min(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ 0u, min((subgroup_local_id) ^ 0u, _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))) ^ 0u))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u))))) ^ uvec2(0u, 0u)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), false || (bool(false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((_GLF_IDENTITY(false, ! (! (false))))))) && true)) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = (0 & -59451); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((_GLF_IDENTITY(0, ~ (~ (0))))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y) || false)))), false)))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))) && true)))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.x = num_workgroup;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED(567.669)), mix(vec2(_GLF_FUZZED(-4.6), (vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED(567.669)))[1]), vec2((vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED(567.669)))[0], _GLF_FUZZED(-1.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), bvec2(true, true))).y, (false ? _GLF_FUZZED(5719.5290) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) >> 0)), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-27.97))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), ~ (_GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (~ (~ (_injected_loop_counter --))) - 0))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = workgroup_base, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = workgroup_base) << 0u, (true ? _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = workgroup_base) << 0u, ~ (~ ((GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = workgroup_base) << 0u))) : _GLF_FUZZED(subgroup_size))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base) >> uvec3(0u, 0u, 0u)).z + subgroup_id * subgroup_size + GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base)).z + subgroup_id * subgroup_size + GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_id * subgroup_size + GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(packSnorm2x16(vec2(845.133, 74.33))) : subgroup_size)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, (0u ^ 0u)))))) + 0u), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base) | uvec3(0u, 0u, 0u)).z + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) / 1u), (subgroup_size) / 1u)) + 0u)))), max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, (0u ^ 0u)))))) + 0u), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base) | uvec3(0u, 0u, 0u)).z + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) / 1u), (subgroup_size) / 1u)) + 0u)))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, (0u ^ 0u)))))) + 0u), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base, (GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base) | uvec3(0u, 0u, 0u)).z + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) / 1u), (subgroup_size) / 1u)) + 0u))))))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) * 1u), _GLF_IDENTITY(0u, ~ (~ (0u))), 0u))))) + ((GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 1 * (_GLF_IDENTITY(1, (1) - 0)))) << 0)) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, (_GLF_IDENTITY(0u, 0u | (0u)) ^ 1u), 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ 1u), 0u, 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) + 0u)), (_GLF_IDENTITY(0u ^ 1u, clamp(_GLF_IDENTITY(0u ^ 1u, max(0u ^ 1u, 0u ^ 1u)), 0u ^ 1u, _GLF_IDENTITY(0u ^ 1u, uint(_GLF_IDENTITY(uint(0u ^ 1u), 0u + (uint(0u ^ 1u)))))))), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)))), clamp(_GLF_IDENTITY((uvec4(subgroup_size, (0u ^ 1u), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (~ (0u))))), 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (_GLF_IDENTITY(0u ^ 1u, (_GLF_IDENTITY(0u ^ 1u, 1u * (_GLF_IDENTITY(0u, (0u) ^ 0u) ^ 1u))) | (0u ^ 1u))), 0u, 1u), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), bool(bvec2(! (_GLF_IDENTITY(true, (true) && true)), false)))))))), (injectionSwitch.x < injectionSwitch.y)))))) ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)))), uvec4(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY((uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(27255u, 43273u, 81094u, 33414u)) : false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)))))), clamp(~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(27255u, 43273u, 81094u, 33414u)) : false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)))))), ~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(27255u, 43273u, 81094u, 33414u)) : false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)))))), ~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(27255u, 43273u, 81094u, 33414u)) : false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u))))))))))))), uvec4(0u, 0u, 0u, 0u) ^ ((uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, _GLF_IDENTITY(1u, max(1u, 1u)))))))), max(_GLF_IDENTITY((uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (_GLF_IDENTITY(0u ^ 1u, 0u + (0u ^ 1u))), 0u, 1u)))), uvec4(0u, 0u, 0u, 0u) ^ ((uvec4(subgroup_size, (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 0u))) ^ 1u), 0u, _GLF_IDENTITY(1u, min(1u, 1u)))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, _GLF_IDENTITY(1u, max(1u, 1u)))))))), _GLF_IDENTITY((uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), _GLF_IDENTITY((0u ^ 1u), ~ (_GLF_IDENTITY(~ ((0u ^ 1u)), (~ ((0u ^ 1u))) ^ 0u))), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : _GLF_IDENTITY(uvec4(subgroup_size, (0u ^ 1u), 0u, 1u), (uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)) / _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) - uvec4(0u, 0u, 0u, 0u)))))), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (uvec4(0u, 0u, 0u, 0u)))) ^ ((uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), 1u))), 0u, 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, _GLF_IDENTITY(1u, max(1u, 1u))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ 1u), 0u, _GLF_IDENTITY(1u, max(1u, 1u)))))) - uvec4(0u, 0u, 0u, 0u))))))))), (uvec4(subgroup_size, (0u ^ 1u), 0u, 1u)) | _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(1u, 1u * (1u))) + 0u)) | 0u)))), 0u, 1u)))), min(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(1u, 1u * (1u))) + 0u)) | 0u)))), 0u, 1u)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(1u, 1u * (1u))) + 0u)) | 0u)))), 0u, 1u)))), ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(1u, 1u * (1u))) + 0u)) | 0u)))), 0u, 1u))))) | ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(1u, 1u * (1u))) + 0u)) | 0u)))), 0u, 1u))))))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, 194066u)) : uvec4(subgroup_size, (0u ^ _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(1u, 1u * (1u))) + 0u)) | 0u)))), 0u, 1u)))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), (0u ^ 1u), 0u, 1u), clamp(uvec4(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), (0u ^ 1u), 0u, 1u), uvec4(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), (0u ^ 1u), 0u, 1u), uvec4(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), (0u ^ 1u), 0u, 1u)))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u) | (subgroup_size), _GLF_IDENTITY((0u | (subgroup_size)), (_GLF_IDENTITY((0u | (subgroup_size)), _GLF_IDENTITY(0u | ((0u | (subgroup_size))), clamp(0u | ((0u | (subgroup_size))), _GLF_IDENTITY(0u | ((0u | (subgroup_size))), max(0u | ((0u | (subgroup_size))), 0u | ((0u | (subgroup_size))))), 0u | ((0u | (subgroup_size))))))) / 1u) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 0u | (subgroup_size), _GLF_IDENTITY(0u | (subgroup_size), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), min(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), min(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), min(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u))))), uint(_GLF_IDENTITY(uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), min(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u)))))), min(uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), min(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u)))))), uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), min(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u), _GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) << 0u))))))))))))), ~ (~ (0u | (subgroup_size))))), clamp(uint(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size)))), (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))) / 1u)), uint(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))), max(uint(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))), uint(_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))))))))))), ~ (_GLF_IDENTITY(~ (0u | (subgroup_size)), (~ (0u | (subgroup_size))) ^ 0u)))), (0u ^ 1u), 0u, 1u), (false ? _GLF_FUZZED(uvec4(42176u, 42783u, 161434u, _GLF_IDENTITY(194066u, clamp(194066u, 194066u, _GLF_IDENTITY(_GLF_IDENTITY(194066u, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | (_GLF_FUZZED(num_workgroup)))) ^ 0u) : 194066u)), (_GLF_IDENTITY(_GLF_IDENTITY(194066u, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | (_GLF_FUZZED(num_workgroup)))) ^ 0u) : 194066u)), min(_GLF_IDENTITY(194066u, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | (_GLF_FUZZED(num_workgroup)))) ^ 0u) : 194066u)), _GLF_IDENTITY(194066u, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | (_GLF_FUZZED(num_workgroup)))) ^ 0u) : 194066u))))) * 1u))))) : uvec4(subgroup_size, (0u ^ 1u), 0u, 1u))))))))));
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(atanh(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6), max(vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6), vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6))))))).y))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(atanh(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6), max(vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6), vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6))))))).y))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(atanh(_GLF_IDENTITY(vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6), max(vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6), vec2(_GLF_IDENTITY(-67.27, mix(float(_GLF_FUZZED(-1057.2301)), float(_GLF_IDENTITY(-67.27, min(-67.27, -67.27))), bool(true))), -7.6))))))).y))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)) && true))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))) || false)), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), true, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), true, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), true, false)), false))), true, true))), true)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))))), false), true, false))))), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))))), false), true, false))))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))))), false), true, false))))), false)), true, true))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)), true, false))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), false), true, false))))), false))))), true, false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))))))))))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(1)), uint(uvec2(uint(uint(1)), 0u)))), (uint(uint(uint(1)))) / 1u)), (_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uint(1), 0u + (uint(1)))), 0u + ((uint(1)))), (uint(1)), _GLF_IDENTITY((uint(1)), uint(uvec3((uint(1)), 1u, (164178u & 0u)))))) / 1u)) | (uint(1))), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(330.842), ((injectionSwitch) * mat2(1.0))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(1232.8446)), bvec2(true, false)))).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(330.842), ((injectionSwitch) * mat2(1.0))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(1232.8446)), bvec2(true, false)))).x), float(_GLF_FUZZED(693.909)), bool(false))) > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(false, false || (false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))) || false))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(false, false || (false))))))) && true) && true)))) || false)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) | 0))) < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.8) : injectionSwitch.x)) < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)) | 0)), 0 + ((0 | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 < subgroup_size)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(12.67), _GLF_FUZZED(428.926)), bvec2(false, false))).x < injectionSwitch.y)))), bool(bvec3(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, _GLF_IDENTITY(_GLF_IDENTITY(((false) || false), ! (! (((false) || false)))) && true, _GLF_IDENTITY(bool(bool(((false) || false) && true)), (bool(bool(((false) || false) && true))) || false))), ((false) || false) && true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-6.1)), (false ? _GLF_FUZZED(-8.2) : (true ? injectionSwitch.y : _GLF_FUZZED(-6.1))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))), (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))) && true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))))) || false)))) && _GLF_IDENTITY(true, false || (true))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))), false), false)))))))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y), false, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(36.42) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), mix(float(_GLF_FUZZED(-620.143)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))))))) > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 & 1), ((1 & 1)) - 0)); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                }
                              }
                             do
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                barrier();
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, determinant(mat3(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(2.5)), ((_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-698.824, 6.7)) : injectionSwitch)).x > injectionSwitch.y))))) && true)) || false) ? 0.0 : _GLF_FUZZED(2.5))) - _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0), (mat4x2(injectionSwitch, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, tan(0.0) + (0.0)), float(mat4(0.0, 0.0, 1.0, cos(determinant(mat2(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), (false ? _GLF_FUZZED(15.02) : _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.4) : 0.0)), 0.0)))))))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0)) * mat4(1.0))), clamp(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) / determinant(mat4(1.0, sqrt(1.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), max(determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-500.825) : 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7286.8988) : 1.0)), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, abs(0.0), 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, abs(0.0), 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0), mat2x4(mat4(mat2x4(1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, abs(0.0), 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, abs(0.0), 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 1.0), (mat4x2(injectionSwitch, 1.0, 1.0, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, min(_GLF_IDENTITY((1.0) / 1.0, ((1.0) / 1.0) - 0.0), _GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(mix(float((1.0) / 1.0), float(_GLF_FUZZED(-3.7)), bool(false)), (mix(float((1.0) / 1.0), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(-6.2) : -3.7)))), (float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(-6.2) : -3.7))), min(_GLF_FUZZED(_GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(-6.2) : -3.7))), _GLF_FUZZED(_GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(-6.2) : -3.7))))))) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(false))) / 1.0)))))), float(_GLF_FUZZED(4.2)), bool(false))), _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0))), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), _GLF_IDENTITY(min((0.0), (0.0)), min(min((0.0), (0.0)), min((0.0), (0.0))))) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(83.50))), 1.0 * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(83.50))))), 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.6)), float(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0)), 1.0, 1.0)) * mat4(1.0))), vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3(0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(-53.77)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(-53.77)), bool(false)), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(-53.77)), bool(false)), float(float(mix(float(1.0), float(_GLF_FUZZED(-53.77)), bool(false)))))))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), abs(1.0), 0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), (mat4x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), determinant(_GLF_IDENTITY(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), clamp((1.0), _GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(3.4))), (1.0))), (1.0)))), 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 0.0, abs(1.0), 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), (float(mat4(1.0, 0.0, abs(1.0), 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))) * 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, sqrt(1.0), 1.0, round(length(normalize(1.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), (true ? dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)) : _GLF_FUZZED(-7.8)))), 1.0, tan(0.0)))), 0.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 0.0, abs(1.0), 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), (float(mat4(1.0, 0.0, abs(1.0), 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))) * 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, sqrt(1.0), 1.0, round(length(normalize(1.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), (true ? dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)) : _GLF_FUZZED(-7.8)))), 1.0, tan(0.0)))), 0.0, 0.0, 0.0, 0.0, 1.0), (mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 0.0, abs(1.0), 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), (float(mat4(1.0, 0.0, abs(1.0), 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))) * 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, sqrt(1.0), 1.0, round(length(normalize(1.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), (true ? dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)) : _GLF_FUZZED(-7.8)))), 1.0, tan(0.0)))), 0.0, 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) * _GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(1.0, 0.0 + (1.0)))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0), vec2(0.0, 0.0) + (vec2(1.0, 0.0))), vec2(1.0, 0.0))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), (true ? clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))) : _GLF_FUZZED(6211.1178)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, sqrt(abs(0.0)), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, abs(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat4(0.0, sqrt(abs(0.0)), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, abs(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)), mat4(1.0) * (transpose(mat4(0.0, sqrt(abs(0.0)), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, abs(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)))))))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)), transpose(transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6218.3019)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), (true ? 1.0 * (1.0) : _GLF_FUZZED(887.420)))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- -897.504))), bool(false))), 0.0, 0.0, 1.0))))))))))) * _GLF_IDENTITY(mat4(1.0), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2133.3458)), bool(false))))) ? mat4(1.0) : _GLF_FUZZED(mat4(-1.9, -35.23, -2534.7681, -0.0, _GLF_IDENTITY(_GLF_IDENTITY(-608.460, clamp(_GLF_IDENTITY(-608.460, max(-608.460, -608.460)), -608.460, -608.460)), mix(float(-608.460), float(_GLF_FUZZED((_GLF_IDENTITY(true, ! (! (true))) ? 846.724 : -4.0))), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))), 0.1, -5.6, -221.587, 3623.3291, 82.60, _GLF_IDENTITY(6.2, (6.2) / sqrt(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) - 0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), 0.7, 2.5, 3.5, -2540.2617, 1961.0919)))))), vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - log(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 0.0, 0.0, abs(0.0)), (false ? _GLF_FUZZED(mat2x4(-2628.7631, 8.0, -42.36, 4.9, 6260.3167, -4.9, 6.3, _GLF_IDENTITY(2.5, clamp(2.5, 2.5, 2.5)))) : mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) / 1.0))))))), 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-37.10)), bool(false))))), (determinant(mat3(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, (0.0) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (false ? _GLF_FUZZED((5.0 / 7.9)) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))) / 1.0), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-89.02), clamp(true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(-89.02), min(_GLF_FUZZED(-89.02), _GLF_IDENTITY(_GLF_FUZZED(-89.02), (_GLF_FUZZED(-89.02)) - 0.0))), _GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-89.02), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-89.02), (false ? _GLF_FUZZED(0.1) : true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-89.02)))) / 1.0), _GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-89.02), max(true ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)) : _GLF_FUZZED(-89.02), true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-89.02))))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0), (mat4x2(injectionSwitch, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.9)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0), (mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.9)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.66)), float(1.0), bool(true))) * (0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8506.6769)), float(0.0), bool(true))))), 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.2)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.6)), float(1.0), bool(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))))) * mat4(1.0)))))).x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-99380) : _injected_loop_counter)))) != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-23064) : _GLF_IDENTITY(0, (0) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))));
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(0, (0) << 0)), max(2, _GLF_IDENTITY(2, _GLF_IDENTITY(min(2, 2), (min(2, 2)) ^ 0))))), 4, 64, 4);
              }
            }
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(0, 0 | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           subgroupAll(false);
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, sqrt(_GLF_IDENTITY(_GLF_IDENTITY(exp(0.0), (_GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0)))) / _GLF_IDENTITY(1.0, (1.0) - 0.0)), min(_GLF_IDENTITY(exp(0.0), (_GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0)))) / 1.0), _GLF_IDENTITY(exp(0.0), (_GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0)))) / 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 1.0, 0.0))).x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true, false)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))))) && true))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, ~ (~ (2))))), (2) / 1)), (uint(_GLF_IDENTITY(2, (2) / 1))) << (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), max(0u << _GLF_IDENTITY(uint(0u), uint(0u)), 0u << _GLF_IDENTITY(uint(0u), uint(0u)))))), 4, 64, 4);
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(3), int(3))))), int(1)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           subgroupAll(true);
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
