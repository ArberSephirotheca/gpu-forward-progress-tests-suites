#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), (int(5)) ^ 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false)))))));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(((- 2.3) * -3.1))), bool(false))), injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, tan(_GLF_IDENTITY(0.0, (0.0) - 0.0)), 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, tan(0.0), 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, tan(0.0), 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, tan(0.0), 0.0))))) + (injectionSwitch.y)))))) || false)))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(_GLF_IDENTITY(90.09, clamp(90.09, 90.09, 90.09)))), bvec2(false, false))).x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | 0) : _GLF_FUZZED(-60279)))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), (bool(false)) || false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false))))), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), bool(bvec4(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), false, true, false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), bool(bvec4(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), false, true, false))), false), true, false))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))))))), false, false)), true && (bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))))))), false, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))) || false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) || false, true && ((bool(false)) || false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))), false)))))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), false, false, true)))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), false, false, true)))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))), false, false, true)))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))))), true)))))))))))) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec4(bool(bvec4(false, false, false, true)), true, true, false))))))), (false) && true)))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_IF_TRUE(true)))), ! (! (! (! (! (_GLF_WRAPPED_IF_TRUE(true)))))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))), int(3)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) || false)))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4109.9956), _GLF_FUZZED(-3716.1811)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-75.00) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(vec3(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y))), 1.0 * (float(vec3(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true), false))))) && true, (((injectionSwitch.x > injectionSwitch.y)) && true) && true)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(55223) : int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(0, (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) ^ (0)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), false || ((_GLF_WRAPPED_IF_FALSE(false))))) || _GLF_IDENTITY(false, (false) || false)), false || (false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), false || ((_GLF_WRAPPED_IF_FALSE(false))))) || _GLF_IDENTITY(false, (false) || false)), false || (false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), false || (bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), false || ((_GLF_WRAPPED_IF_FALSE(false))))) || _GLF_IDENTITY(false, (false) || false)), false || (false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) - (1 ^ 1))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_DEAD(false)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_DEAD(false)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, abs(1.0), round(length(normalize(1.0))), determinant(mat2(cos(0.0), 1.0, 0.0, 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), sqrt(0.0))), mix(float(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), sqrt(0.0)))), float(_GLF_FUZZED(-1.0)), bool(false))))))))) && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mod(injectionSwitch, injectionSwitch)) : injectionSwitch)).y)) && (_GLF_DEAD(false))))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true), false))))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.5)), float(injectionSwitch.y), bool(true)))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-8.4)), float(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), bool(true)))) / round(length(normalize(1.0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))))) * 1.0) + 0.0, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-8.4)), float(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), bool(true)))) / round(length(normalize(1.0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))))) * 1.0), float(mat2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-8.4)), float(float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), bool(true)))) / round(length(normalize(1.0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))))) * 1.0), 1.0, 0.0, 1.0))) + 0.0)))))), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true, ! (! (((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))) && true, ! (! (((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0)))))) && true)))), (! (_GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true, _GLF_IDENTITY(! (! (((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))), bool(_GLF_IDENTITY(bool(! (! (((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))), (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (bool(! (! (((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))))))))))) || false)))))) || false))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))) : _GLF_FUZZED(vec2(-1.1, 28.92)))).y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), bool(bool(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))) || false))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec4((false), true, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((-9198 & 0), int(int((-9198 & 0)))), (_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((-9198 & 0), int(int((-9198 & 0)))), (_injected_loop_counter > _GLF_IDENTITY((-9198 & 0), int(int((_GLF_IDENTITY(-9198 & 0, 0 ^ (-9198 & 0))))))) || false)) && true)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID))) >> _GLF_IDENTITY((uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)), max((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u)) | uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), 0u))) | uvec3(0u, 0u, 0u))))).x, (true ? _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID))) >> _GLF_IDENTITY((uvec3(0u, 0u, 0u) | uvec3(0u, _GLF_IDENTITY(0u, (0u) << (0u ^ 0u)), 0u)), max((uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), 0u))) | uvec3(0u, 0u, 0u))))).x : _GLF_FUZZED(subgroup_id)));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), (workgroup_size * workgroup_id) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) / uint(_GLF_ONE(1.0, injectionSwitch.y)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), false)))))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))), (workgroup_base) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u))), 0u + (_GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) ^ 0u, 0u | (_GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_id) : (workgroup_base))) ^ 0u))) + 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) ^ 0u, 0u | (_GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_id) : (workgroup_base))) ^ 0u))) + 0u, _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY((workgroup_base) ^ 0u, 0u | (_GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_id) : (_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), (uvec2(workgroup_base, 1u)) | (uvec2(workgroup_base, 1u)))))))) ^ 0u))) + 0u, 1u)), (uint(uvec2((_GLF_IDENTITY((workgroup_base) ^ 0u, 0u | (_GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_id) : (workgroup_base))) ^ 0u))) + 0u, 1u))) << 0u)) : _GLF_FUZZED(118939u)))))))) ^ 0u), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (max(_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) - (0u << _GLF_IDENTITY(uint(7u), uint(7u))))))) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), clamp(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) + 0u))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id, 1u), uvec2(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << _GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED(uvec2(106600u, 140049u))))), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)))), 0u), max(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) / 1u))))))), 0u), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) / 1u))))))), 0u)), min(~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) / 1u))))))), 0u)), ~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) / 1u))))))), 0u)))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)))), 0u), clamp(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), _GLF_IDENTITY((uvec2(subgroup_id, 1u)), min((uvec2(subgroup_id, 1u)), (uvec2(subgroup_id, 1u)))) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)))), 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)))), 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)))), 0u)))))))), (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), 1u), uvec2(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, _GLF_IDENTITY(1u, (1u) >> 0u)), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(subgroup_id, 1u), _GLF_IDENTITY((uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (0u))), ((uvec2(subgroup_id, 1u)) << uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (0u)))) >> (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u))))), _GLF_IDENTITY(uvec2(subgroup_id, 1u), _GLF_IDENTITY((uvec2(subgroup_id, 1u)), ((uvec2(subgroup_id, 1u))) ^ _GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) ^ (uvec2(0u, 0u)))) << uvec2(0u, 0u)))), _GLF_IDENTITY(0u, 0u | (0u))))))) / (1u ^ 0u))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * subgroup_size) / 1u), workgroup_base + subgroup_id * subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))), (((subgroup_local_id + 1) % subgroup_size)) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (_GLF_IDENTITY(uint(2u), uint(2u)))))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-83.44), _GLF_FUZZED(9.9)), bvec2(false, false))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0)))) * 1.0) > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(5)), max(~ (int(5)), ~ (int(5))))), 0 | ((_GLF_IDENTITY(~ (int(5)), max(~ (int(5)), ~ (int(5)))))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(vec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 0u)))) | (virtual_gid)), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, max((virtual_gid) << 0u, (virtual_gid) << 0u))), virtual_gid))], uint(1), 4, 64, 4);
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.2)), bvec2(true, false))).y))))) && true)) && true)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), true && (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), clamp(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(int(1), (int(1)) ^ 0))), _GLF_IDENTITY(int(1), (int(1)) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), clamp(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(int(1), (int(1)) ^ 0))), _GLF_IDENTITY(int(1), (int(1)) ^ 0))), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ _GLF_IDENTITY(0, ~ (~ (0)))), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))) - 0)))) ^ 0)), _GLF_IDENTITY(clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(true, true && (true)) ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0)) | (0 | 0)))) ^ 0), 1, 1))))) - 0)), (clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, true && (true)) ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(true, true && (true)) ? 1 : _GLF_FUZZED((_injected_loop_counter --))))) >> 0), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), min(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0)))) << 0)) + 0)) | (0 | 0)))) ^ 0), 1, 1))))) - 0))) - (0 >> _GLF_IDENTITY(int(7), int(7)))))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))), subgroup_size))), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) ^ 0, min((int(1)) ^ 0, (int(1)) ^ 0))), 1, 1))), 1 * _GLF_IDENTITY((_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) / 1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) - 0), _GLF_IDENTITY(int(1), min(int(1), int(1))), int(1)))) ^ 0), 1, 1)))), clamp((_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) / 1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) - 0), _GLF_IDENTITY(int(1), min(int(1), int(1))), int(1)))) ^ 0), 1, 1)))), (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) / 1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) - 0), _GLF_IDENTITY(int(1), min(int(1), int(1))), int(1)))) ^ 0), 1, 1)))), (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) / 1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) - 0), _GLF_IDENTITY(int(1), min(int(1), int(1))), int(1)))) ^ 0), 1, 1)))))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), (true ? int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(-28775))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) || false, _GLF_IDENTITY((_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), min(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (-5446 & 0) | (int(1))), (int(1)) ^ 0), 1, 1))))) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) || false, ! (! ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), true && ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), min(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (-5446 & 0) | (int(1))), (int(1)) ^ 0), 1, 1))))) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) || false, ! (! ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), true && ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) || false)))), ! (! ((_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), min(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (-5446 & 0) | (int(1))), (int(1)) ^ 0), 1, 1))))) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) || false, ! (! ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), true && ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) || false)))))))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), min(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (-5446 & 0) | (int(1))), (int(1)) ^ 0), 1, 1))))) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) || false, ! (! ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), true && ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) || false)))), ! (! ((_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), min(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))), (int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (-5446 & 0) | (int(1))), (int(1)) ^ 0), 1, 1))))) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) || false, ! (! ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), true && ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0)), clamp(int(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), clamp(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))), 1, 1)) >> ivec3(0, 0, 0))))))))), int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), 0 | (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1)), (int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter --)))), 1))) >> 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1))))), ((int(_GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), (int(1)) ^ 0), 1, 1)))))) ^ 0) - 0)))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) || false)))))))))))) && true)) && true))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), 0 + ((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(63518))), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > 0, false, true, true)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_injected_loop_counter > 0, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(_injected_loop_counter > 0, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true)))), bool(bool(bool(bvec4(_injected_loop_counter > 0, false, true, true))))), true))))); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       do
                        {
                         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4))))) >> _GLF_IDENTITY(int(4), int(4))), (true ? (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), int(_GLF_IDENTITY(int((1 << _GLF_IDENTITY(int(4), int(4)))), max(int((1 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int((1 << _GLF_IDENTITY(int(4), int(4)))), 0 | (int((1 << _GLF_IDENTITY(int(4), int(4)))))))))) >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(88462))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, (1 & 1) * 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)))))) > 0); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_injected_loop_counter --)))
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) || false)))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))) && true)) || false)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (false), (! (false)) || false)), _GLF_IDENTITY(bool(bvec3(true && (_GLF_IDENTITY(! (false), (! (false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec3(true && (_GLF_IDENTITY(! (false), (! (false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(true && (_GLF_IDENTITY(! (false), (! (false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                             barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))))
                              barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))));
                      }
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true)))))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(sin(_GLF_IDENTITY(0.0, (0.0) / 1.0)), abs(0.0), 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(sin(0.0), abs(0.0), 0.0)), 0.0 + (_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(sin(0.0), abs(0.0), 0.0)), clamp(dot(vec3(1.0, 1.0, 1.0), vec3(sin(0.0), abs(0.0), 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(sin(0.0), abs(0.0), 0.0)), min(dot(vec3(1.0, 1.0, 1.0), vec3(sin(0.0), abs(0.0), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(sin(0.0), abs(0.0), 0.0)))), dot(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(sin(0.0), abs(0.0), 0.0), vec3(mat4x2(vec3(sin(0.0), abs(0.0), 0.0), 1.0, 1.0, 0.0, 1.0, 1.0))))))))), 0.0))).y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) - 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                                  barrier();
                                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))
                                        barrier();
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                              }
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                              }
                             else
                              {
                              }
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                  barrier();
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false)))), ((_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false))))) && true), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), false || (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false)))), ((_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false))))) && true), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.4)), bool(false)))))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(~ (~ (int(2))), (~ (~ (int(2)))) / 1))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), mix(float(_GLF_FUZZED(float(95850u))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), bool(true)))))))
                              barrier();
                            }
                          }
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             do
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (0 >> _GLF_IDENTITY(int(0), int(0))) | (0 >> _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))), sqrt(1.0), 0.0, 1.0, 0.0))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))).y)) && true))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-69.31)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), 0.0, 1.0)))), max(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-6.6))), 1.0), mat3(1.0) * (mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) ? _GLF_FUZZED(578.799) : 0.0)), 1.0), mat3(1.0) * (mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0))))))).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), false, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3970.9873)), float(1.0), bool(true))))) - 0.0), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3970.9873)), float(1.0), bool(true))))) - 0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))) > injectionSwitch.y)) && true)) && true)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(2.5, -342.863)) : injectionSwitch), vec2(vec4((false ? _GLF_FUZZED(vec2(2.5, -342.863)) : injectionSwitch), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0)))).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false)), false, _GLF_IDENTITY(false, (false) && true), true))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-26589) : _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --, ~ (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))))))))), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) ^ 0))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               else
                                {
                                }
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(4.9)), bool(false))), bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-6.7)), bool(false)))))), false, false), false))), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false), false))), false)))))))))));
                            }
                          }
                        }
                       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               barrier();
                              }
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(47032) : _GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, false))), (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = ((1 & 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           barrier();
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = _GLF_IDENTITY((-73672 & 0), min((-73672 & 0), (-73672 & 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat3(1.0, exp(0.0), 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec3(-48.38, 5.7, -9062.5980).s)), float(0.0), bool(true))), _GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-2462.6697)), 1.0 * ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), _GLF_IDENTITY(bool(bool(bool(! (true)))), false || (bool(bool(bool(! (true)))))))), ! (! (bool(_GLF_IDENTITY(bool(! (true)), _GLF_IDENTITY(bool(bool(bool(! (true)))), false || (bool(bool(bool(! (true)))))))))))))) ? 0.0 : _GLF_FUZZED(-2462.6697))))), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0))), 0.0, 0.0))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0)), (float(mat3x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0))) - 0.0)))))))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(-36072)), _GLF_FUZZED(0.9)), bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true)))))))).y), _GLF_IDENTITY((_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) * 1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 1.0))) * (_GLF_IDENTITY((_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), 0.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 1.0, 1.0))))), clamp(float(_GLF_IDENTITY(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), 0.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), 0.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0), mat3(mat4x3(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), 0.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(length(log(1.0)), (true ? length(log(1.0)) : _GLF_FUZZED(dot(vec4(5.0, -8.7, -2728.3357, -387.068), vec4(4.2, -3910.7913, 7.7, -395.898))))), 0.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3((injectionSwitch.y), 0.0, 0.0, sqrt(1.0), length(log(1.0)), 0.0, 1.0, 1.0, 1.0))))))))))) * 1.0, clamp(_GLF_IDENTITY((_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) * 1.0, min((_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) * 1.0, (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) * 1.0)), (_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))) * 1.0, (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) * 1.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), 1 * (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter))))) * 1)))) != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                    barrier();
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         do
                                          {
                                           for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                                barrier();
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               do
                                                {
                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                                                  {
                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       barrier();
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                  }
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                 do
                                                  {
                                                   if(_GLF_DEAD(false))
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       barrier();
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                               barrier();
                                               if(_GLF_DEAD(false))
                                                {
                                                 do
                                                  {
                                                   barrier();
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                               do
                                                {
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             else
                                              {
                                              }
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_DEAD(false))
                                                  {
                                                   do
                                                    {
                                                     barrier();
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                  }
                                                }
                                               do
                                                {
                                                 barrier();
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               barrier();
                                              }
                                            }
                                           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
                                  barrier();
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))));
                                  }
                                }
                               else
                                {
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(true, _GLF_IDENTITY(true, true && (true))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(true, true))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(true, true))), false), true)))))))))))) && true)))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(_injected_loop_counter)), 0 ^ ((true ? 1 : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                               barrier();
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                              barrier();
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), max(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5))))) * 1)) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))) + 0.0)))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) - 0)) << 0)) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) | (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                                  }
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))), bool(bool(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))))))))))
                                      barrier();
                                     barrier();
                                    }
                                   barrier();
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 1))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-652.362)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))
                  barrier();
                 subgroupAll(false);
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(7624.3557, -4754.6169)))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) / vec2(1.0, 1.0))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, false, true, false)))))))))
                    {
                     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((_GLF_IDENTITY(0 ^ 0, max(0 ^ 0, 0 ^ 0))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), (int(1)) | (int(1))))), int(1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (6), (~ (6)) >> 0), (_GLF_IDENTITY(~ (6), (~ _GLF_IDENTITY((6), ((6)) << 0)) >> 0)) - 0)))))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), 0 | (_GLF_FUZZED(_injected_loop_counter)))))) << (0 >> _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) << 0), 2, 2))))), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))) != 0); _injected_loop_counter --)
                                    {
                                     barrier();
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false))))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                                {
                                }
                               else
                                {
                                 barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), injectionSwitch)))[1]), vec2(_GLF_FUZZED(105.433), _GLF_FUZZED(3109.2319)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), injectionSwitch)), _GLF_IDENTITY(dot(vec2(1.0, sqrt(0.0)), vec2(0.0, 1.0)), dot(vec2(1.0, sqrt(0.0)), vec2(0.0, 1.0))), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0))).y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x > injectionSwitch.y)), true)))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(95.47, 22.31)))).y))), true)), false || (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))
                              barrier();
                            }
                           else
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true)))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), (_GLF_DEAD(false)) && true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4935.3500), _GLF_FUZZED(float((false && false)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y) - 0.0, (true ? (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y) - 0.0 : _GLF_FUZZED(-4.5))))))))
                      barrier();
                    }
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))))], uint(2), 4, 64, 4);
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 subgroupAll(true);
                }
              }
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), min(_GLF_IDENTITY(int(3), max(int(3), int(3))), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(int(1083.7980)) : int(3)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(int(1083.7980)) : int(3)))), 1 * (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(int(1083.7980)) : int(3))))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
