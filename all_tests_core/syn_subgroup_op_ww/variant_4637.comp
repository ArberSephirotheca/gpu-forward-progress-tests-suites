#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint next_virtual_gid;
 ivec4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.w = workgroup_base;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.y = subgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.y + subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
  {
   GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.z = virtual_gid;
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.y + ((subgroup_local_id + 1) % subgroup_size), ivec4(1));
 atomicStore(buf[GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_basevirtual_gidworkgroup_base.z], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(true);
   atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   do
    {
     subgroupAll(false);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(2), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
