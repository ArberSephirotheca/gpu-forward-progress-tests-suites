#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 bool _f0;
 mat2 _f1;
 bool _f2;
 vec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_18 {
 bool _f0;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
} ;

struct _GLF_struct_16 {
 ivec2 _f0;
 bvec4 _f1;
 mat2x3 _f2;
 bvec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
} ;

struct _GLF_struct_20 {
 uint workgroup_id;
 uvec3 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_13 _f0;
} ;

struct _GLF_struct_21 {
 bvec4 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_20 _f2;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 uvec3 _f2;
 ivec4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_7 {
 int _f0;
 uvec4 _f1;
 uvec3 _f2;
 float _f3;
 vec4 _f4;
 mat3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 ivec4 _f1;
 _GLF_struct_6 _f2;
 uvec2 _f3;
 mat3x2 _f4;
 _GLF_struct_7 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 bool _f1;
 vec4 _f2;
 bvec3 _f3;
 vec4 _f4;
 mat4x3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_2 {
 uint _f0;
 mat4x3 _f1;
 vec4 _f2;
 ivec4 _f3;
 mat4x2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_1 {
 bool _f0;
 mat2 _f1;
 vec4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_4 _f0;
 uint _f1;
 _GLF_struct_8 _f2;
 uint subgroup_size;
 mat2x4 _f3;
 _GLF_struct_11 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_0 {
 uint num_workgroup;
 vec3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_4(_GLF_struct_1(true, mat2(1.0), vec4(1.0), mat2x3(1.0)), _GLF_struct_2(1u, mat4x3(1.0), _GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(-0.2), _GLF_FUZZED(-9983.3331), _GLF_FUZZED(-6.5), _GLF_FUZZED(-4.5)), vec4(_GLF_IDENTITY((vec4(1.0))[0], float(mat4((vec4(1.0))[0], 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0)))), (vec4(1.0))[1], (vec4(1.0))[2], (vec4(1.0))[3]), bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ivec4(1), mat4x2(1.0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (1), (1 * (1)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), 1))) >> 0)), min(ivec4(1), ivec4(1)))), _GLF_struct_3(ivec4(1), true, vec4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, (true) && true))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true)), bvec3(bvec3(bvec3(bvec3(true))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec4(bvec3(bvec3(bvec3(true))), true)))))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))))))))))))))), vec4(1.0), mat4x3(1.0), uvec2(1u))), 1u, _GLF_struct_8(_GLF_struct_5(mat3x2(1.0)), ivec4(1), _GLF_struct_6(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)), mat2(1.0) * (_GLF_IDENTITY((mat2(1.0)), mat2(0.0, 0.0, 0.0, 0.0) + ((mat2(1.0)))))) * mat2(1.0))) * _GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0))))), uvec2(1u), mat4x3(1.0), uvec4(_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u))))), uvec2(1u), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), min((_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), max((_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))))))) / 1.0)), _GLF_struct_7(1, uvec4(1u), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) ^ uvec3(0u, 0u, 0u)), uvec3(1u)), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (true ? uvec3(1u) : _GLF_FUZZED(uvec3(161898u, 167597u, 173068u)))), (uvec3(1u)) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u)))))))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))), 1.0, vec4(1.0), mat3(1.0), ivec2(1)), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 1.0 * (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), injectionSwitch.y)))))), min((_GLF_IDENTITY(vec2(1.0), max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) - vec2(0.0, 0.0))))) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (vec2(1.0)) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-1.5)))))))), gl_SubgroupSize, mat2x4(1.0), _GLF_struct_11(_GLF_struct_9(bvec4(true), mat2(1.0)), _GLF_struct_10(ivec2(1)), uvec3(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, (1u) >> 0u), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), 0u | (_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))) / (1u & 1u))), 1u)), 1u * (uint(uvec3(_GLF_IDENTITY(1u, (1u) >> 0u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), 1u))))), 1u))), _GLF_IDENTITY(ivec4(1), (ivec4(1)) << ivec4(0, 0, 0, 0)), _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(5340.4540, _GLF_IDENTITY(_GLF_IDENTITY(-6.2, (false ? _GLF_FUZZED(91.36) : -6.2)), (_GLF_IDENTITY(-6.2, (false ? _GLF_FUZZED(91.36) : -6.2))) + sin(0.0)), -4.2, -2.9)) : mat2(1.0)))), mat4x3(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))))), true)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-421.873, 3.1)) : injectionSwitch)).x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false), false)))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_NumWorkGroups.x, vec3(1.0));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0, 0.0)), 1.0, 1.0, cos(0.0)))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(bvec4(true), _GLF_struct_14(_GLF_struct_13(vec4(1.0))), _GLF_struct_20(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u)).x, uvec3(1u), _GLF_struct_15(uvec4(1u)), _GLF_struct_16(ivec2(1), bvec4(true), mat2x3(1.0), bvec3(true), bvec4(true)), _GLF_struct_17(uvec3(1u)), _GLF_struct_18(true), _GLF_struct_19(true, mat2(1.0), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), false || (bool(_GLF_IDENTITY(true, ! (! (true))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), false || (bool(_GLF_IDENTITY(true, ! (! (true))))))))))), vec3(1.0), vec2(1.0)), mat2x4(1.0)));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_21._f2.workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_struct_replacement_12.subgroup_size, (workgroup_base + subgroup_id * _GLF_struct_replacement_12.subgroup_size) | (workgroup_base + subgroup_id * _GLF_struct_replacement_12.subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_12.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_12.subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-681.929)), bool(false)))) - 0.0), injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-681.929)), bool(false)))) - 0.0), injectionSwitch.y, injectionSwitch.y)))) || false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       continue;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, 0 ^ (4)), 4)));
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
             return;
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | _GLF_IDENTITY((0), ((0)) / 1))))))), (_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0))))))), false || (_injected_loop_counter > _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, ~ (~ (0))) : _GLF_FUZZED(_injected_loop_counter)))) | (0)))))))))) || false)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             return;
            }
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(51.77, 38.99).x)), float(injectionSwitch.y), bool(true))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, ! (! (false)))))), false)))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY((false), false || ((false)))))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))) || _GLF_IDENTITY(false, ! (! (false))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, ! (! (false)))))))))))))))
          {
           if(subgroup_local_id + 1 < _GLF_struct_replacement_12.subgroup_size)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))) && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           do
                            {
                             return;
                             if(_GLF_DEAD(false))
                              break;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        break;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), false || (bool(bvec3(_GLF_DEAD(false), false, true))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 return;
                }
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, clamp(2, 2, 2))), 4, 64, 4);
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false, false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))) >> _GLF_IDENTITY(int(4), int(4))) ^ 0)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((- 0.5))), vec2(_GLF_FUZZED(5.4), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(798.466, -0.0)))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-1732.1303, max(-1732.1303, -1732.1303))), _GLF_FUZZED(-310.744)), vec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(798.466, -0.0)))))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(9.6)), vec2(_GLF_FUZZED(-31.34), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (true ? injectionSwitch : _GLF_FUZZED(vec2(798.466, -0.0)))))[1]), bvec2(true, true))))).y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))) && true)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                       break;
                      }
                     subgroupAll(false);
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))) && true)))
                          break;
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                               return;
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-38665))) ^ 0), ((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-38665))) ^ 0)) >> (0 & int(-2.8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         do
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) / round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             if(_GLF_DEAD(false))
                              return;
                             do
                              {
                               do
                                {
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bool(bool(bvec4(false, true, false, true))))))));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               break;
                              }
                             return;
                            }
                           return;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       break;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).y)) * (injectionSwitch)) / vec2(1.0, 1.0))).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (true ? ~ (_injected_loop_counter ++) : _GLF_FUZZED(_injected_loop_counter))))))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bool((false))))))))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               continue;
                               if(_GLF_DEAD(false))
                                continue;
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                break;
                               return;
                               if(_GLF_DEAD(false))
                                break;
                              }
                            }
                           break;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-609.636), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), clamp(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), (vec2((injectionSwitch)[0], _GLF_FUZZED(9.8))) * vec2(1.0, 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), (vec2((injectionSwitch)[0], _GLF_FUZZED(9.8))) * vec2(1.0, 1.0)))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        break;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, _GLF_IDENTITY(0, min(0, 0)) + _GLF_IDENTITY((2), ~ (~ (_GLF_IDENTITY((2), clamp((2), (2), (2)))))))), _GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), ((~ (4))) + 0)), 64, 4);
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))) || false))
                      {
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        continue;
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         break;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              break;
                             return;
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         do
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), float(_GLF_FUZZED(2.0)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 & 1))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   subgroupAll(true);
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true))))));
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) << 0), 4, 4))))), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) << 0), 4, 4))))), int(4))), min((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) << 0), 4, 4))))), int(4))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) << 0), 4, 4))))), int(4))), (true ? (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) << 0), 4, 4))))), int(4))) : _GLF_FUZZED(-77464)))))) ^ 0) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))) || false), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
}
