#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) && true)) || _GLF_IDENTITY(false, (false) || false))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), true, true, true)), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false)), true, true))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), true, true, true)), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true, true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), true, true, true)), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true, true, _GLF_IDENTITY(true, false || (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     return;
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1)))))); _injected_loop_counter ++)
                                          {
                                           return;
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     if(_GLF_DEAD(false))
                                      break;
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                      {
                       return;
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(608.954)), bool(false))), injectionSwitch.y))))))
                    return;
                   do
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(7), int(7))) ^ ((1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
                                break;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                    {
                                     return;
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               return;
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                    return;
                                   return;
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-71.02))), 1.0, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-71.02))), 1.0, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-71.02))), 1.0, 0.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0)))))))) > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x))) + 0.0) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x))) + 0.0) > injectionSwitch.y) || false))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x))) + 0.0) > injectionSwitch.y)) && true)))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))), true && (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), true && (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), true && (! (! (_GLF_WRAPPED_LOOP(false)))))))))));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))) : _GLF_FUZZED(atomicMax(_injected_loop_counter, 28252)))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                          return;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) + 0.0)))))
              continue;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) && (false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), bool(bool(! (_GLF_IDENTITY(true, false || (true)) && (false))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))), _GLF_IDENTITY(bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))), false, true)), false || (bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))), false, true)))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))), _GLF_IDENTITY(bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))), false, true)), false || (bool(bvec3(true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true)) && (false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) && (false))))), false, true)))))))))))))))))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)), ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) / _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) - 0u), 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))) << 0u))) : _GLF_FUZZED((num_workgroup >> subgroup_size)))))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))) && (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))) && (false)))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(34251))), 1)), _GLF_IDENTITY((subgroup_local_id + 1) / 1u, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) / 1u : _GLF_FUZZED(virtual_gid))))), (true ? (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup))) + 1) / 1u)) : _GLF_FUZZED(uvec2(199711u, 192004u).s))) : _GLF_FUZZED((num_workgroup >> subgroup_size)))))) % subgroup_size) + 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
     atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3745.9614)), vec2(_GLF_FUZZED(2358.9904), (injectionSwitch)[1]), bvec2(false, true))), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))))).y, 0.0 + (injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 0)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if((subgroup_local_id % 2) == 0)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), true)))))) || (true))), true && (bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (_GLF_IDENTITY(! (false || (true)), _GLF_IDENTITY(true, ! (! (true))) && (! (false || (true))))))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(true, false || (true)))), false || ((bool(_GLF_IDENTITY(true, false || (true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (_GLF_IDENTITY(! (false || (true)), true && (! (false || (true))))))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))), false || ((bool(_GLF_IDENTITY(true, false || (true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (_GLF_IDENTITY(! (false || (true)), true && (! (false || (true))))))))), bool(bvec4(! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (_GLF_IDENTITY(! (false || (true)), true && (! (false || (true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(true, false || (true)))), false || ((bool(_GLF_IDENTITY(true, false || (true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1480.1217))), injectionSwitch.x)))) > injectionSwitch.y)))), true, true)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(true, false || (true))))), true && (bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))), ! (! (true))), false || _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), false || (bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), false || (bool(bvec2(true, false)))))))) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))) && true))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true))))), false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))))))), ! (! ((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true))))), false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3((true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))))))))))) && true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))))))) || false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(true, false || (true)))) && true), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false)), (bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))) && true)))))) && true))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))), _GLF_IDENTITY(false || (! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))))), true && (false || (! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bool((true)))))), true && (bool(_GLF_IDENTITY(true, false || (true)))))))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(true, false || (true)))) && true), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(true, false || (true)))) && true))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))), false || (! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))), false || (! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))))))) || false), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(true, false || (true)))) && true), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec4((true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(true, false || (true)))) && true))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))), false || (! (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(true, false || (true)))))))))) || false), false, true))))))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (true)))))), false)))) && true))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))) || (true))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))), true)))))))) || (true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(true, false || (true))))) || false)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true)) || (true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(false || (_GLF_IDENTITY(true, false || (true))), ! (! (false || (_GLF_IDENTITY(true, false || (true)))))))) || _GLF_IDENTITY(false, false || (false)))))))))), ((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))) || (true))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), (_GLF_IDENTITY(bool(bvec3(false, true, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(false, true, true))))) || _GLF_IDENTITY(false, (false) && true)), (bool(bvec3(false, true, true))) && true)) || (true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), true && (false || (true)))) && _GLF_IDENTITY(true, ! (! (true)))))))) || false)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, true)), (bool(bvec3(false, true, true))) && true)) || (true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(false || (_GLF_IDENTITY(true, false || (true))), ! (! (false || (_GLF_IDENTITY(true, false || (true)))))))) || false))))))))) || false) && true))))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))))))))))))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))), false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-9217.8343, 6627.0457)) : (injectionSwitch) * mat2(1.0)))).y))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-9217.8343, 6627.0457)) : (injectionSwitch) * mat2(1.0)))).y)))), ! (_GLF_IDENTITY(! (! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-9217.8343, 6627.0457)) : (injectionSwitch) * mat2(1.0)))).y))))), ! (! (! (! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-9217.8343, 6627.0457)) : (injectionSwitch) * mat2(1.0)))).y)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false)))))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = ((0 | 0) ^ _GLF_IDENTITY(1, (1) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8479.5903), (_GLF_FUZZED(8479.5903)) + log(1.0)), _GLF_FUZZED(2.4)), bvec2(false, false)))), mix(vec2((min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8479.5903), (_GLF_FUZZED(8479.5903)) + log(1.0)), _GLF_FUZZED(2.4)), bvec2(false, false)))))[0], _GLF_FUZZED(-4.0)), vec2(_GLF_FUZZED(7.2), (min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8479.5903), (_GLF_FUZZED(8479.5903)) + log(1.0)), _GLF_FUZZED(2.4)), bvec2(false, false)))))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(min(vec2(_GLF_FUZZED(float(177880u)), _GLF_IDENTITY(_GLF_FUZZED(-383.792), tan(0.0) + (_GLF_FUZZED(-383.792)))), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(8479.5903, min(_GLF_IDENTITY(8479.5903, (_GLF_IDENTITY(8479.5903, float(mat2(8479.5903, 0.0, 1.0, 1.0)))) - 0.0), 8479.5903))), (_GLF_FUZZED(8479.5903)) + log(1.0)), _GLF_FUZZED(2.4)), bvec2(false, false)))), mix(vec2((min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(_GLF_IDENTITY(float(177880u), 0.0 + (float(177880u)))), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8479.5903), (_GLF_FUZZED(8479.5903)) + log(1.0)), _GLF_FUZZED(2.4)), bvec2(false, false)))))[0], _GLF_FUZZED(-4.0)), vec2(_GLF_FUZZED(7.2), (min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8479.5903), _GLF_IDENTITY((_GLF_FUZZED(8479.5903)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_FUZZED(8479.5903)) : _GLF_FUZZED(7.1))) + log(1.0)), _GLF_FUZZED(2.4)), bvec2(false, false)))))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true))))).y), ! (! _GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), clamp(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, _GLF_IDENTITY(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), float(_GLF_FUZZED(4.2)), bool(false)))), float(_GLF_FUZZED((3.8 - 502.084))), bool(false)))), -383.792)), _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, (-383.792) / 1.0), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), _GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), (true ? _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)) : _GLF_FUZZED(2.2))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), max(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), vec2(_GLF_FUZZED(_GLF_IDENTITY(float(177880u), min(float(177880u), float(177880u)))), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), -383.792)))))))), min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_FUZZED(8479.5903), _GLF_FUZZED(2.4)), bvec2(false, false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true)), vec2(vec2(mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), clamp(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1309.3084), _GLF_IDENTITY(float(mat2(_GLF_FUZZED(1309.3084), 1.0, 0.0, 0.0)), max(float(mat2(_GLF_FUZZED(1309.3084), 1.0, 0.0, 0.0)), float(mat2(_GLF_FUZZED(1309.3084), 1.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), _GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, mix(float(-383.792), float(_GLF_FUZZED(-8.7)), bool(false))), clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), (true ? _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)) : _GLF_FUZZED(2.2))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1309.3084), clamp(_GLF_FUZZED(1309.3084), _GLF_FUZZED(1309.3084), _GLF_FUZZED(1309.3084)))), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), max(vec2(_GLF_FUZZED(float(177880u)), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), float(_GLF_FUZZED(2.1)), bool(false)))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))))))), min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_FUZZED(8479.5903), _GLF_FUZZED(2.4)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (0) + 0)], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true)))))).y)), (((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(177880u, max(177880u, 177880u)))), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), clamp(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), clamp(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)))), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), clamp(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), clamp(mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true)), mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))))))), -383.792)), _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), _GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), -383.792)), (true ? _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)) : _GLF_FUZZED(2.2))))))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)), min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), _GLF_IDENTITY(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), mix(float(_GLF_FUZZED(277.236)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), min(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)))))), bool(true))), bool(true))), -383.792)))), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)), min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), _GLF_IDENTITY(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), mix(float(_GLF_FUZZED(277.236)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), min(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)))))), bool(true))), bool(true))), -383.792)))))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)), min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), _GLF_IDENTITY(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), mix(float(_GLF_FUZZED(277.236)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), min(float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)))))), bool(true))), bool(true))), -383.792)))))[1]), vec2(_GLF_FUZZED(-4.5), _GLF_FUZZED(701.954)), bvec2(false, false))), max(vec2(_GLF_FUZZED(float(177880u)), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))), float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))), float(mat4(_GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, cos(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0), vec3(0.0, 1.0, 0.0))))))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))))))), min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(8479.5903), _GLF_IDENTITY(_GLF_FUZZED(2.4), clamp(_GLF_IDENTITY(_GLF_FUZZED(2.4), max(_GLF_FUZZED(2.4), _GLF_FUZZED(2.4))), _GLF_IDENTITY(_GLF_FUZZED(2.4), clamp(_GLF_FUZZED(2.4), _GLF_FUZZED(2.4), _GLF_FUZZED(2.4))), _GLF_FUZZED(2.4)))), bvec2(false, false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], float(vec2(injectionSwitch[1], 0.0)))) / cos(0.0)))))[0])), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(true, bool(bvec2(true, true))))), vec2(vec2(mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(-383.792, -383.792)), min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), clamp(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)), float(mat3x2(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792)), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(8.1)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))), 1.0)))), bool(true))), -383.792)), _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)), (true ? _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)) : _GLF_FUZZED(2.2))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, _GLF_IDENTITY(-383.792, (true ? _GLF_IDENTITY(-383.792, max(-383.792, -383.792)) : _GLF_FUZZED(780.583)))))), bool(true))), -383.792)), (true ? _GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)) : _GLF_FUZZED(2.2))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, _GLF_IDENTITY(clamp(-383.792, -383.792, -383.792), max(clamp(-383.792, -383.792, -383.792), clamp(-383.792, -383.792, -383.792))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))) || (true))))), -383.792)))), _GLF_IDENTITY(max(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(max(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))))), clamp(max(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))))), max(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(-81.92)), float(-383.792), bool(true))), clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792))))), max(vec2(_GLF_IDENTITY(_GLF_FUZZED(float(177880u)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(float(177880u)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0))), 0.0, 1.0, abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(float(177880u)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0))), 0.0, 1.0, abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0))))), (true ? float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(float(177880u)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0))), 0.0, 1.0, abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0), transpose(transpose(mat4x3(_GLF_FUZZED(float(177880u)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0))), 0.0, 1.0, abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0))))) : _GLF_FUZZED(ldexp(227.880, 14220))))), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))), vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(_GLF_IDENTITY(-383.792, min(_GLF_IDENTITY(-383.792, mix(float(_GLF_FUZZED(1309.3084)), float(_GLF_IDENTITY(-383.792, clamp(-383.792, -383.792, -383.792))), bool(true))), -383.792)))))))))))), min(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)), mix(vec2((vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[0], (vec2(_GLF_FUZZED(float(177880u)), _GLF_FUZZED(-383.792)))[1]), vec2(_GLF_FUZZED(8479.5903), _GLF_FUZZED(2.4)), bvec2(false, false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true)))))).y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && (_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 1, 1, 1))) > 0))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0)))) || false, false || ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter > 0)))) || false))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
                              break;
                             return;
                            }
                          }
                         for(int _injected_loop_counter = (((((1 & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           subgroupAll(true);
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) && true, ! (! ((_GLF_WRAPPED_LOOP(false)) && true)))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))))))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))); _injected_loop_counter ++)
          {
           subgroupAll(false);
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = ((0 | (0 << _GLF_IDENTITY(int(3), int(3)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(99121, (99121) ^ 0), ~ (_GLF_IDENTITY(~ (99121), (~ (99121)) | (~ (99121)))))) : _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | (_GLF_IDENTITY(4, max(4, 4)))))), 64, 4);
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
