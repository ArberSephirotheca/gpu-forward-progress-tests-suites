#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), true, false, true))))), false, true, false)))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x = _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | (subgroup_size)) / 1u))) / 1u)) | (subgroup_size), 0u ^ ((_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-6721.3197 + -26.43))), vec2(_GLF_FUZZED(9116.0768), (injectionSwitch)[1]), bvec2(false, true))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))))) && true)) || false), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) || false), (false) || false)))))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(((+ mat2(0.4, 2.9, -9.5, -719.012)) * injectionSwitch)))).x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))))))) || false), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true))), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false)))))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))))), (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY((! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))))), (injectionSwitch.x > injectionSwitch.y)))))), true && ((! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))))), (injectionSwitch.x > injectionSwitch.y)))))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bvec2((false) || false, false), bvec2(bvec2(bvec2((false) || false, false))))))), (! (_GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bvec2((false) || false, false), bvec2(bvec2(bvec2((false) || false, false)))))))) || false))))))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))))) || false), (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y))))), (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(false, (false) || false))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(false, (false) || false))))))))), (injectionSwitch.x > injectionSwitch.y)))))) || false)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))))))))) || false)))))))), false))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) && true)), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), bool(bool(false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 0.0, 1.0))))) > injectionSwitch.y)))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true) && true)))) || false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))), (workgroup_base))) | _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED(workgroup_base) : (workgroup_base))))))) >> 0u);
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base), max((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base), (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base) | (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + subgroup_base)))) + subgroup_local_id;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y = _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid))), (true ? ~ (virtual_gid) : _GLF_FUZZED(num_workgroup)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)), dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0))), abs(1.0), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8453.9888) : 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 1.0, sqrt(1.0), 0.0)))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u)), uint(uvec4(uint(4u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), uint(4u))), max((subgroup_base) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u)), uint(uvec4(uint(4u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), uint(4u))), (subgroup_base) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u)), uint(uvec4(uint(4u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), uint(4u)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u)), (uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u))) ^ 0u), uint(uvec4(uint(4u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), uint(4u)))), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u)))), (false ? _GLF_FUZZED((workgroup_id % subgroup_size)) : _GLF_IDENTITY(4u, (4u) << (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))) << 0u)), uint(uvec4(uint(4u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), uint(4u))))) >> 0u)))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u), 0u ^ _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_id)))) | ((subgroup_local_id + 1))))) % GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y))], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), min(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, 0 ^ (1))), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), 0u | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))))), (1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) / 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), min(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, 0 ^ (1))), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), 0u | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))))), (1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) / 1u)))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), min(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, 0 ^ (1))), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), 0u | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))))), (1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) / 1u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), min(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, 0 ^ (1))), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), 0u | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))))), (1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) / 1u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), min(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, 0 ^ (1))), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))), 0u | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u))))), (1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u))), min(uint(1u), uint(1u))), uint(1u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) / 1u)))))))), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))), _GLF_IDENTITY(true, true && (true)))))))), ((! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))), _GLF_IDENTITY(true, true && (true))))))))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))));
   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (64) + 0), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)), clamp(_GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)), (true ? float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)) : _GLF_FUZZED(-637.516))), float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)), min(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)), (float(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(547.882, -376.750)) : injectionSwitch)).x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0))) / 1.0)))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0)))))) / 1.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(_GLF_IDENTITY(uvec3(next_virtual_gid, 1u, 1u), ~ (~ (uvec3(next_virtual_gid, 1u, 1u))))))], uint(2), 4, _GLF_IDENTITY(64, (64) >> 0), 4);
   if(_GLF_DEAD(false))
    return;
  }
}
