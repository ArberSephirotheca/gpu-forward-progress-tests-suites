#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint subgroup_base;
 uint _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.w = subgroup_size;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y = GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.w;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, 1u);
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_0.subgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.x;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_0.subgroup_base + ((GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.x + 1) % GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if((GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.x % 2) == 0)
  {
   subgroupAll(true);
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}
