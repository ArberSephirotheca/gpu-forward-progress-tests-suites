#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false, bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false, bool(bvec4((_GLF_IDENTITY(((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (((_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false, false, false, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && true))))
          barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 1))), (_injected_loop_counter) | 0)))) != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2630.7956) : 0.0)), float(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2630.7956) : 0.0)), tan(0.0), sqrt(0.0)))), 0.0)), injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((true ? -405.826 : 254.629)) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))))))))))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> _GLF_IDENTITY(0, max(0, 0)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, abs(0.0), 1.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), _GLF_IDENTITY((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)), min((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))))).x))), clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize)))) - (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize)))) - (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize)))) - (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize)))) - (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u))))) >> uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize))), uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize)))) - (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) | ((gl_WorkGroupSize)))) - (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))))).x))), _GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))) | (gl_WorkGroupSize)), _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ((gl_WorkGroupSize) | (gl_WorkGroupSize)) | uvec3(0u, 0u, 0u))).x)), max((~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), min((~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), (~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), _GLF_IDENTITY(((gl_WorkGroupSize) | (gl_WorkGroupSize)), min(((gl_WorkGroupSize) | (gl_WorkGroupSize)), ((gl_WorkGroupSize) | (gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))).x))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)))).x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)))) - 0u)) - 0u)) - 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u)) + 0u, ((_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u)) + 0u) - uint(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-366.664 / _GLF_IDENTITY(-8.5, _GLF_IDENTITY(float(float(-8.5)), clamp(float(_GLF_IDENTITY(float(-8.5), clamp(float(-8.5), float(-8.5), _GLF_IDENTITY(float(-8.5), (float(-8.5)) / 1.0)))), float(float(-8.5)), _GLF_IDENTITY(float(float(-8.5)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-752.862) : float(float(-8.5)), min(_GLF_IDENTITY(false ? _GLF_FUZZED(-752.862) : float(float(-8.5)), max(false ? _GLF_FUZZED(-752.862) : float(float(-8.5)), false ? _GLF_FUZZED(-752.862) : float(float(-8.5)))), false ? _GLF_FUZZED(-752.862) : float(float(-8.5)))))))))))), float(0.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))), 0.0, 0.0)), injectionSwitch.x)))) * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec4(3u, (0u ^ 0u), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0u), _GLF_IDENTITY(1u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 6120u) ^ (1u)))))), uint(3u))) | (subgroup_id)), subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false)))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true)), bvec2(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true)), _GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (false)))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false, true)))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> (0 << _GLF_IDENTITY(int(5), int(5)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, (3) / 1), 3))), int(3))), (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> (0 << _GLF_IDENTITY(int(5), int(5)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, (3) / 1), 3))), int(3))), int(ivec3((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> (0 << _GLF_IDENTITY(int(5), int(5)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, (3) / 1), 3))), int(3))), 0, 1)))) | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> (0 << _GLF_IDENTITY(int(5), int(5)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, (3) / 1), 3))), int(3)))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, determinant(mat3(0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 1.0, abs(0.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, determinant(mat3(0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 1.0, abs(0.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) ? subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u)))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0], _GLF_IDENTITY(max((injectionSwitch)[0], (injectionSwitch)[0]), min(max((injectionSwitch)[0], (injectionSwitch)[0]), max((injectionSwitch)[0], (injectionSwitch)[0])))), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false)), (false ? _GLF_FUZZED(injectionSwitch) : mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x) + 0.0))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) | (0))], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((+ 98.87), max((+ 98.87), (+ 98.87))), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), max((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y) && true))), bool(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) | (0))], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((+ 98.87), max((+ 98.87), (+ 98.87))), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), max((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(79.56, (true ? _GLF_IDENTITY(79.56, (79.56) - abs(0.0)) : _GLF_FUZZED(vec3(3.4, 4865.5918, -50.11).g)))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), clamp(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0]))) - 0.0))), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((+ 98.87), float(_GLF_IDENTITY(float((+ 98.87)), max(float((+ 98.87)), float((+ 98.87)))))), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false)), max(mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false)), mix(vec2(_GLF_FUZZED(79.56), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY((+ 98.87), clamp((+ 98.87), (+ 98.87), (+ 98.87))))), bvec2(true, false))))).x > injectionSwitch.y))) && true)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) - 0)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true), false))), true, true)))))))
      {
       atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(64, (64) - _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), _GLF_IDENTITY(~ (~ (0)), int(_GLF_IDENTITY(ivec2(~ (~ (0)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(~ (~ (0)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(~ (~ (0)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), _GLF_IDENTITY(0, int(int(0)))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), (true ? _GLF_IDENTITY(64, (64) - 0) : _GLF_FUZZED((58303 & -49774)))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - 0), 0 + (_GLF_IDENTITY(64, (64) - 0)))), clamp((_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0))))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, (64) - 0)), clamp((_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, _GLF_IDENTITY((64), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((64), ~ (~ ((64)))), 1, 1)), (false ? _GLF_FUZZED(86586) : int(ivec3(_GLF_IDENTITY((64), ~ (~ ((64)))), 1, 1))))) - 0))))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, (64) - 0)), clamp((_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0))))), max(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, (64) - 0)), clamp((_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, (64) - 0)), clamp((_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0)), (_GLF_IDENTITY(64, (64) - 0)))))))) - 0)) << 0)))), 4);
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(packHalf2x16(vec2(-73.20, 0.1))))) + _GLF_IDENTITY(1, (1) / 1) < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x))) * 1.0) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) : _GLF_FUZZED(vec2(4.3, -6.4)))) * vec2(1.0, 1.0)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch) : _GLF_FUZZED(vec2(4.3, -6.4)))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0))))))))), (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))))) || false)))))))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0), clamp(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(6.2, clamp(6.2, 6.2, 6.2)))), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))), false))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0), max(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0), max(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y)))))), false || (bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y)))))))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7750.7033), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-85.16)), bvec2(true, false))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) && true)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) * 1.0))))))))), float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), abs(sqrt(1.0)), 1.0)), mix(float(float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), abs(sqrt(1.0)), 1.0))), float(_GLF_FUZZED(3295.2642)), bool(false)))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8.8) : 1.0)), 1.0, 0.0))), 0.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.4))), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0))), 0.0, 1.0, 1.0), max(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, -0.6)), -0.6))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(6.2)), mix(float(_GLF_IDENTITY(float(_GLF_FUZZED(6.2)), 0.0 + (float(_GLF_FUZZED(6.2))))), float(_GLF_FUZZED(-8.9)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(fma(-2344.8234, -1432.1109, 0.6)) : 0.0)) + (injectionSwitch.y), (false ? _GLF_FUZZED(_GLF_IDENTITY(-0.6, clamp(-0.6, _GLF_IDENTITY(-0.6, _GLF_IDENTITY(min(-0.6, -0.6), min(_GLF_IDENTITY(min(-0.6, -0.6), max(min(-0.6, -0.6), min(-0.6, -0.6))), min(-0.6, -0.6)))), _GLF_IDENTITY(-0.6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-0.6, mix(float(_GLF_FUZZED(-767.826)), float(-0.6), bool(true))) : _GLF_FUZZED(round(-7.7))))))) : 0.0 + (injectionSwitch.y))))))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.2), 1.0 * (_GLF_FUZZED(6.2)))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) && true)))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), 1.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0)))))))))))
    barrier();
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), false, false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 1, _GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), ! (! (_GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), (_GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (bool(bool(_injected_loop_counter != 1))), ! (! (! (bool(bool(_injected_loop_counter != 1))))))))) || false)))))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false)))) || false)))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-7.4, -0.2, -5794.0102, -123.253).s)), bvec2(true, false))).x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           do
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = (0 & 44128); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | (0)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ! (! ((false)))))), (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))) || false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))));
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(29928), (_GLF_FUZZED(29928)) / 1))), 64)))), _GLF_IDENTITY(4, (4) << 0));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0)))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0)))))), false)), true && (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))))), false)))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) / sqrt(1.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y), (max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)) - 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0)))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)) : _GLF_FUZZED(-6.0))))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0)))))), false)), true && (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646)), mix(float((true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), float(_GLF_FUZZED(float(false))), bool(false)))), 1.0, 0.0)))))) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(37.58) : 1.0)) : _GLF_FUZZED(344.646))), 1.0, 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false))))))))), false))))))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), true)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))
            barrier();
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, max(1, 1)) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.7) : injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(5), int(5)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), true)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}
