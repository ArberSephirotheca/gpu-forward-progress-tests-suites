#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_40 {
 mat3x4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 mat4x2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_41 {
 _GLF_struct_40 _f0;
 mat2x4 _f1;
 float _f2;
 vec2 _f3;
 uvec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_38 {
 uvec4 _f0;
 vec2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_37 {
 bvec3 _f0;
 vec4 _f1;
 bvec3 _f2;
 bvec4 _f3;
 ivec4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_36 {
 vec2 _f0;
 int _f1;
 uvec3 _f2;
 ivec4 _f3;
 vec4 _f4;
 mat4x3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_35 {
 uvec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_34 {
 mat3x2 _f0;
 bool _f1;
 bool _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_39 {
 _GLF_struct_34 _f0;
 _GLF_struct_35 _f1;
 _GLF_struct_36 _f2;
 _GLF_struct_37 _f3;
 _GLF_struct_38 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_42 {
 mat2x4 _f0;
 ivec2 _f1;
 int _injected_loop_counter;
 _GLF_struct_39 _f2;
 vec2 _f3;
 _GLF_struct_41 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_31 {
 vec3 _f0;
 bool _f1;
 bool _f2;
 float _f3;
} ;

struct _GLF_struct_30 {
 uvec4 _f0;
 bvec3 _f1;
 uint _f2;
} ;

struct _GLF_struct_32 {
 _GLF_struct_30 _f0;
 vec4 _f1;
 mat2x4 _f2;
 bool _f3;
 _GLF_struct_31 _f4;
 uint _f5;
} ;

struct _GLF_struct_29 {
 uvec4 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_33 {
 _GLF_struct_29 _f0;
 mat3 _f1;
 float _f2;
 uint _f3;
 uvec4 _f4;
 float _f5;
 uint workgroup_size;
 _GLF_struct_32 _f6;
} ;

struct _GLF_struct_28 {
 vec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_25 {
 ivec3 _f0;
 bvec3 _f1;
 bvec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_27 {
 bvec4 _f0;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_22 {
 mat3x4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_21 {
 vec3 _f0;
 mat2 _f1;
 float _f2;
 bvec4 _f3;
 vec3 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_20 {
 vec4 _f0;
 mat3x4 _f1;
 float _f2;
} ;

struct _GLF_struct_23 {
 _GLF_struct_20 _f0;
 mat2 _f1;
 _GLF_struct_21 _f2;
 _GLF_struct_22 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 vec2 _f1;
 bvec3 _f2;
 uvec4 _f3;
 vec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_17 {
 bvec2 _f0;
 bvec4 _f1;
 bool _f2;
 mat4x2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_17 _f0;
 bvec4 _f1;
 vec2 _f2;
 float _f3;
 ivec2 _f4;
 _GLF_struct_18 _f5;
 vec3 _f6;
 uint subgroup_local_id;
} ;

struct _GLF_struct_24 {
 mat2 _f0;
 _GLF_struct_19 _f1;
 bvec4 _f2;
 _GLF_struct_23 _f3;
} ;

struct _GLF_struct_14 {
 int _f0;
 mat4 _f1;
 mat3 _f2;
 mat4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 ivec4 _f3;
 mat4x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_15 {
 vec2 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 bool _f3;
 vec3 _f4;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 mat4 _f1;
 mat2x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 uvec3 _f1;
 bool _f2;
 bvec2 _f3;
 mat3x2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 float _f1;
 _GLF_struct_10 _f2;
 mat3x4 _f3;
 ivec3 _f4;
 _GLF_struct_11 _f5;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 vec2 _f1;
 vec2 _f2;
 mat3 _f3;
 vec4 _f4;
 uvec3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 mat4x3 _f1;
 mat3x4 _f2;
 ivec4 _f3;
 float _f4;
 int _f5;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 mat2 _f1;
 float _f2;
 bool _f3;
 bvec2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 mat4x2 _f1;
 mat4x2 _f2;
 bvec4 _f3;
 uint _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 mat4x3 _f4;
 _GLF_struct_8 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 mat3x4 _f1;
 ivec4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 uint _f1;
 ivec3 _f2;
 int _f3;
 vec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 ivec3 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_16 {
 uint subgroup_id;
 uvec3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_12 _f3;
 float _f4;
 _GLF_struct_15 _f5;
 bvec3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(gl_SubgroupID, uvec3(1u), _GLF_struct_4(bvec2(true), _GLF_struct_0(vec2(1.0), mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-925.488), mix(float(_GLF_FUZZED(-97.72)), float(_GLF_FUZZED(-925.488)), bool(true)))), float(1.0), bool(true))))), _GLF_struct_1(vec2(1.0)), _GLF_struct_2(vec3(1.0), 1u, ivec3(1), 1, vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), _GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))), _GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) ^ (uvec2(1u))))))), (uvec2(1u)) | (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u))))), _GLF_IDENTITY(ivec3(1), (ivec3(1)) | (ivec3(1))), _GLF_struct_3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u, 1u, 1u) * (uvec3(1u))), _GLF_IDENTITY((uvec3(1u)), clamp((uvec3(1u)), (uvec3(1u)), (uvec3(1u)))) | uvec3(0u, 0u, 0u)), mat3x4(1.0), _GLF_IDENTITY(ivec4(1), max(ivec4(1), _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (ivec4(1)) ^ ivec4(0, 0, 0, 0))) - ivec4(0, 0, 0, 0)))), mat3(1.0))), _GLF_struct_9(mat3(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-530.124)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8671.3589)), float(1.0), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(60.55, min(_GLF_IDENTITY(60.55, min(60.55, 60.55)), _GLF_IDENTITY(_GLF_IDENTITY(60.55, (60.55) - 0.0), float(mat4(_GLF_IDENTITY(60.55, _GLF_IDENTITY((60.55) - 0.0, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY((60.55) - 0.0, _GLF_IDENTITY(float(mat3x4((60.55) - 0.0, 0.0, 1.0, abs(0.0), cos(0.0), tan(0.0), sqrt(1.0), 0.0, exp(0.0), 0.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-99.83)), float(_GLF_IDENTITY(float(mat3x4((60.55) - 0.0, 0.0, 1.0, abs(0.0), cos(0.0), tan(0.0), sqrt(1.0), 0.0, exp(0.0), 0.0, 1.0, 1.0)), float(mat3x4(float(mat3x4((60.55) - 0.0, 0.0, 1.0, abs(0.0), cos(0.0), tan(0.0), sqrt(1.0), 0.0, exp(0.0), 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((60.55) - 0.0) * 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), sin(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), abs(length(0.0)), 1.0, 0.0)))), _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, log(1.0), length(vec4(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0)), determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-925.786)), float(0.0), bool(true))))), 0.0, 1.0, abs(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(33.63) : _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), 1.0), float(float(min(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), 1.0))))))), 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * mat3(1.0))), _GLF_IDENTITY(vec3(mat4(vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * mat3(1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0)), (vec3(mat4(vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * mat3(1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0))) + vec3(0.0, 0.0, 0.0)))))), 0.0, 0.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.8)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-3568.7734 - -48.89))), bool(false))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(844.673)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), 1.0, 0.0))), (_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), _GLF_IDENTITY(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(vec4(_GLF_IDENTITY(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0), mat3(mat4x3(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0))))), mix(vec4((vec4(_GLF_IDENTITY(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0), mat3(mat4x3(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0))))))[0], _GLF_FUZZED(-72.10), (vec4(_GLF_IDENTITY(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0), mat3(mat4x3(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0))))))[2], (vec4(_GLF_IDENTITY(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0), mat3(mat4x3(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0))))))[3]), vec4(_GLF_FUZZED(9938.6921), (vec4(_GLF_IDENTITY(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0), mat3(mat4x3(mat3(mat4(1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.1), max(_GLF_FUZZED(-1.1), _GLF_FUZZED(-1.1))))), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, 1.0, 1.0, 1.0, 0.0))))))[1], _GLF_FUZZED(4.2), _GLF_FUZZED(-7.7)), bvec4(false, true, false, false))))), vec4(1.0, 0.0, 1.0, 0.0)))) / 1.0), 1.0))))))), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8.1) : 0.0))), bool(true)))))), float(_GLF_FUZZED(-31.39)), bool(false))), _GLF_IDENTITY(cos(0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(15.61) : _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), (cos(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.7)), bool(false))))) * 1.0), clamp(cos(0.0), _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), cos(0.0))))), 0.0, 1.0)))), _GLF_struct_5(uvec2(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) << (0u | 0u)), 1u))), mat4x2(1.0), mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bvec4(true), 1u, uvec2(1u)), _GLF_struct_6(_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), (transpose(mat4(1.0))) / mat4(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.1)), float(1.0), bool(true))), 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6.8) : 1.0)), 1.0, 1.0)))), mat2(1.0), 1.0, true, bvec2(true), ivec3(1)), _GLF_struct_7(mat3x2(1.0), mat4x3(1.0), mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(72.81), max(_GLF_FUZZED(72.81), _GLF_IDENTITY(_GLF_FUZZED(72.81), (_GLF_FUZZED(72.81)) - 0.0)))))) * 1.0), mix(float(_GLF_FUZZED(-74.85)), float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(72.81))), min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(72.81)), min((true ? 1.0 : _GLF_FUZZED(72.81)), (true ? 1.0 : _GLF_FUZZED(72.81))))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(72.81)))))) * 1.0)), bool(true)))), ivec4(1), 1.0, 1), mat4x3(1.0), _GLF_struct_8(mat4x2(1.0), vec2(1.0), vec2(1.0), mat3(1.0), vec4(1.0), uvec3(1u), mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(determinant(mat3(93.98, 6001.7378, 2117.9972, 0.6, -4312.5076, -1812.6934, 9.6, -6.6, -3241.7506))) : _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))), ivec4(1)), _GLF_struct_12(mat2(1.0), 1.0, _GLF_struct_10(vec2(1.0), uvec3(1u), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ((true)) && true))))) || false))), bvec2(true), mat3x2(1.0), mat3x4(1.0)), mat3x4(1.0), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (false ? _GLF_FUZZED(82232) : 1))), _GLF_struct_11(mat3x2(1.0), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, round(length(normalize(1.0))), abs(0.0), sin(0.0), 1.0, 0.0)), float(mat2x3(float(mat2x3(1.0, round(length(normalize(1.0))), abs(0.0), sin(0.0), 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(46.34)), float(0.0), bool(true)))) / _GLF_ONE(1.0, injectionSwitch.y)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), mat2x4(1.0), uvec2(1u))), 1.0, _GLF_struct_15(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(938.754), (true ? _GLF_FUZZED(938.754) : _GLF_FUZZED(781.666))), clamp(_GLF_IDENTITY(_GLF_FUZZED(938.754), (true ? _GLF_FUZZED(938.754) : _GLF_FUZZED(781.666))), _GLF_IDENTITY(_GLF_FUZZED(938.754), (true ? _GLF_FUZZED(938.754) : _GLF_FUZZED(781.666))), _GLF_IDENTITY(_GLF_FUZZED(938.754), (true ? _GLF_FUZZED(938.754) : _GLF_FUZZED(781.666))))) : 1.0)), 1.0, 0.0, 1.0)), _GLF_IDENTITY(float(float(float(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(938.754) : 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5759.2398) : 1.0)))), max(1.0, 1.0)), (false ? _GLF_FUZZED(-5000.5869) : 1.0))) - sqrt(0.0)), 0.0, 1.0)))), float(mat2x4(float(float(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(938.754) : 1.0)), min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(938.754) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(938.754) : 1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(938.754) : 1.0, (true ? false ? _GLF_FUZZED(938.754) : 1.0 : _GLF_FUZZED(-445.245))))), min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(938.754) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(938.754, mix(float(_GLF_IDENTITY(938.754, _GLF_IDENTITY((938.754), min(_GLF_IDENTITY((938.754), min((938.754), (938.754))), (938.754))) / 1.0)), float(_GLF_FUZZED(-54.56)), bool(false)))) : 1.0))))) * 1.0), 1.0, 0.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))))), 0.0, 1.0, 0.0)), float(_GLF_IDENTITY(mat3x2(float(mat3x2(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-53.42), min(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-53.42), (false ? _GLF_FUZZED(-5637.0214) : true ? injectionSwitch.x : _GLF_FUZZED(-53.42))), _GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-53.42), float(mat3x2(true ? injectionSwitch.x : _GLF_FUZZED(-53.42), 0.0, 0.0, 1.0, 0.0, 0.0)))))))), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-2855.1146) : (injectionSwitch.x))) / _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0), transpose(transpose(mat3x2(float(mat3x2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.3))), min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.3))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.3))))), 0.0, 0.0)), mix(float(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-6.3), clamp(_GLF_FUZZED(-6.3), _GLF_IDENTITY(_GLF_FUZZED(-6.3), max(_GLF_FUZZED(-6.3), _GLF_FUZZED(-6.3))), _GLF_FUZZED(-6.3))))), 0.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.3))), 0.0, 0.0))))), float(_GLF_FUZZED(-0.3)), bool(false)))), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 0.0)), 1.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)))))))), _GLF_struct_13(mat4(1.0), bvec4(true), mat3x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), ivec4(1, 1, 1, 1) * (ivec4(1))), (true ? ivec4(1) : _GLF_FUZZED(ivec4(86386, 94470, -80763, -87708)))), mat4x3(1.0), ivec2(1)), _GLF_struct_14(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(58286))), 1)), mat4(1.0), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), clamp(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), 1.0)), 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0 + (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))))) + _GLF_ZERO(0.0, injectionSwitch.x))), mat4(1.0), bvec2(true)), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), bool(bool(_GLF_IDENTITY(true, false || (true))))), vec3(1.0)), bvec3(true));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(mat2(1.0), _GLF_struct_19(_GLF_struct_17(bvec2(true), bvec4(true), true, mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), float(mat2x3(float(float(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0))))), bvec4(true)), bvec4(true), vec2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), float(_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(vec4(2.0, -7.1, 79.99, -57.14)) : _GLF_IDENTITY(vec4(min(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), float(mat2x3(float(0.0), 0.0, 0.0, 1.0, 0.0, 1.0))), float(_GLF_FUZZED(-3.1)), bool(false))), _GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 0.0, 0.0), (_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), 1.0, 0.0, 0.0), mix(vec4((vec4(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), 1.0, 0.0, 0.0))[0], _GLF_FUZZED(-8191.9648), _GLF_FUZZED(-5.8), _GLF_FUZZED(82.89)), vec4(_GLF_FUZZED(7984.1055), (vec4(min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0))), 0.0)), mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), 1.0, 0.0, 0.0))[1], (vec4(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0))[2], (vec4(min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), 0.0), 1.0, 0.0, 0.0))[3]), bvec4(false, true, true, true)))) - vec4(0.0, 0.0, 0.0, 0.0)))))) : _GLF_FUZZED(1.1)))), 0.0)))), 1.0, ivec2(1), _GLF_struct_18(mat3x4(1.0), vec2(1.0), bvec3(true), uvec4(1u), vec4(1.0), bvec4(true)), vec3(1.0), gl_SubgroupInvocationID), bvec4(true), _GLF_struct_23(_GLF_struct_20(vec4(1.0), mat3x4(1.0), 1.0), mat2(1.0), _GLF_struct_21(vec3(1.0), mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-698.888) : 1.0)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.2)), float(1.0), bool(true))))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))))), 1.0))), 1.0, bvec4(true), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) / vec3(1.0, 1.0, 1.0)), uvec2(1u)), _GLF_struct_22(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(float(1.0))), float(mat2x4(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(6303.9264))), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0))), (_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4993.8203))), 1.0, 0.0, sin(0.0), 1.0)))) + 0.0)), mat4(1.0)), vec2(1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(_GLF_struct_29(uvec4(1u), vec4(1.0)), mat3(1.0), 1.0, 1u, uvec4(1u), _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4516.0830) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.4)), float(1.0), bool(true)))))), mix(float(_GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4516.0830) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.4)), float(1.0), bool(true)))))), max(max(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4516.0830) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.4)), float(1.0), bool(true)))))), max(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4516.0830) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.4)), float(1.0), bool(true))))))))), float(_GLF_FUZZED(8.4)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), 1u, 0u, 0u))), 0u + (_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec4(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))) | 0u)) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), 1u, 0u, 0u))))), _GLF_struct_32(_GLF_struct_30(uvec4(1u), bvec3(true), 1u), vec4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(464.304)), float(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0)))), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(464.304, mix(float(464.304), float(_GLF_FUZZED(-5.6)), bool(false))))), float(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0)))), bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(464.304)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0)), max(float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)), float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), 0.0, 1.0)))))), bool(_GLF_IDENTITY(true, ! (! (true))))))), ((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(464.304)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0)), max(float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, cos(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)), float(mat3x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-95.60))), 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), 0.0, 1.0)))))), bool(_GLF_IDENTITY(true, ! (! (true)))))))) / sqrt(1.0)) * 1.0)) + _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9632.0475) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))) + 0.0)))), mat2x4(1.0), true, _GLF_struct_31(vec3(1.0), true, true, 1.0), 1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, true, true, true))))), bool(bvec4(true, false, false, false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bool(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), bool(bool(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, false)))), ! (! (false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, false))))))))), bool(bool(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false)))))), false, false, false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false)))))), false, false, false))))))), bool(bvec4(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false)))))), false, false, false))))))), false, true, true)))), ! (! (bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false)))))), false, false, false))))))), bool(bvec4(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false)))))), false, false, false))))))), false, true, true))))))))))), true)))), false))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) || false), true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), true)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED((-7.7))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) : _GLF_FUZZED(fma(-9923.9334, 8302.4513, 804.402))), clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED((-7.7))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) : _GLF_FUZZED(fma(-9923.9334, 8302.4513, 804.402))), mix(float((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED((-7.7))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) : _GLF_FUZZED(fma(-9923.9334, 8302.4513, 804.402)))), float(_GLF_FUZZED(58.66)), bool(false))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED((-7.7))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) : _GLF_FUZZED(fma(-9923.9334, 8302.4513, 804.402))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED((-7.7))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) : _GLF_FUZZED(fma(-9923.9334, 8302.4513, 804.402)))))) > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true)))))), true))), (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))) || false)) && true))), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false)))))))), true)))) || false))))));
        }
       else
        {
        }
      }
    }
   barrier();
  }
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(bvec4(true), _GLF_struct_26(_GLF_struct_25(ivec3(1), bvec3(true), bvec3(true), vec4(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)), ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u))))).x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_base = _GLF_struct_replacement_33.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, (_GLF_struct_replacement_27._f1.workgroup_id) | 0u), _GLF_struct_replacement_27._f1.workgroup_id, _GLF_struct_replacement_27._f1.workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, _GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u | ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u | ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)))), max(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u | ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u | ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u))))))) * 1u)), (63073u & _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))) ^ (_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, ~ (~ (_GLF_struct_replacement_27._f1.workgroup_id)))))), max(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, (_GLF_struct_replacement_27._f1.workgroup_id) | 0u), _GLF_struct_replacement_27._f1.workgroup_id, _GLF_struct_replacement_27._f1.workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u | ((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, 0u + (_GLF_struct_replacement_27._f1.workgroup_id))), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u))))), (63073u & _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))) ^ (_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, ~ (~ (_GLF_struct_replacement_27._f1.workgroup_id)))))), 0u | (min(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), max((_GLF_struct_replacement_27._f1.workgroup_id), (_GLF_struct_replacement_27._f1.workgroup_id))) | 0u), _GLF_struct_replacement_27._f1.workgroup_id, _GLF_struct_replacement_27._f1.workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, _GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u | ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)))), (false ? _GLF_FUZZED(177110u) : ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ _GLF_IDENTITY(0u, (0u) / (1u | 1u)))), 0u | (_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), clamp((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), (~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), (~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u))))))))), (63073u & _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))) ^ (_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, ~ (~ (_GLF_struct_replacement_27._f1.workgroup_id)))))))), min(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, (_GLF_struct_replacement_27._f1.workgroup_id) | 0u), _GLF_struct_replacement_27._f1.workgroup_id, _GLF_struct_replacement_27._f1.workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), 0u + ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)))), 0u | (_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u)), ((~ _GLF_IDENTITY((_GLF_struct_replacement_27._f1.workgroup_id), ((_GLF_struct_replacement_27._f1.workgroup_id)) ^ 0u))) | 0u)))), (63073u & _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))) ^ (_GLF_IDENTITY(_GLF_struct_replacement_27._f1.workgroup_id, ~ (~ (_GLF_struct_replacement_27._f1.workgroup_id)))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id, ~ (~ (_GLF_struct_replacement_16.subgroup_id))) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_16.subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), 0u))), (true ? (_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, uint(uint(1u))) * (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))), max(_GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size))) : _GLF_FUZZED(118261u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_16.subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), 0u))), (true ? (_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, uint(uint(1u))) * (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))), max(_GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size))) : _GLF_FUZZED(118261u))), (_GLF_IDENTITY((_GLF_struct_replacement_16.subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), 0u))), (true ? (_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, uint(uint(1u))) * (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))), max(_GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size))) : _GLF_FUZZED(118261u)))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_16.subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), 0u))), (true ? (_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, uint(uint(1u))) * (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))), max(_GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size))) : _GLF_FUZZED(118261u))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_16.subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), 0u))), (true ? (_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, uint(uint(1u))) * (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))), max(_GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size))) : _GLF_FUZZED(118261u))), 0u | (_GLF_IDENTITY((_GLF_struct_replacement_16.subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * subgroup_size, 0u | (_GLF_struct_replacement_16.subgroup_id * subgroup_size)))), _GLF_struct_replacement_16.subgroup_id * subgroup_size))), 0u))), (true ? (_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_16.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, uint(uint(1u))) * (_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))), max(_GLF_struct_replacement_16.subgroup_id * subgroup_size, _GLF_struct_replacement_16.subgroup_id * subgroup_size))) : _GLF_FUZZED(118261u))))), 1u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_24._f1.subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_24._f1.subgroup_local_id, (workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id, ~ (~ (_GLF_struct_replacement_24._f1.subgroup_local_id))), _GLF_struct_replacement_24._f1.subgroup_local_id, _GLF_struct_replacement_24._f1.subgroup_local_id)), _GLF_struct_replacement_24._f1.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id, uint(uvec3(_GLF_struct_replacement_24._f1.subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u)))))) * 1u), workgroup_base + subgroup_base + _GLF_struct_replacement_24._f1.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_24._f1.subgroup_local_id));
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_24._f1.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), bool(bool(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)))))) && true)) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true))) || false), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), false, false, false)))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(true, (true) && true), false, true))) || _GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true))) || false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], uint(1), 4, 64, 4);
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(1.4)))), vec2(_GLF_FUZZED((vec4(-5.6, -7.0, 36.28, 59.02).t - 159.874)), _GLF_FUZZED(52.86)), bvec2(false, false))), (injectionSwitch) + vec2(0.0, 0.0)).y))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) && true), false || ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7865.5035), _GLF_IDENTITY(_GLF_FUZZED(-558.521), float(mat4x3(_GLF_FUZZED(-558.521), sqrt(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), vec2(1.0, 1.0) * (vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), tan(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1))) - 0)]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false))), false))))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7865.5035), _GLF_IDENTITY(_GLF_FUZZED(-558.521), float(mat4x3(_GLF_FUZZED(-558.521), sqrt(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 1.0))), tan(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) - 0)]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false))), false))), false))))).x : _GLF_FUZZED(640.246))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))) || false))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec2((0), 0))) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(step(injectionSwitch, vec2(-437.666, 5350.0877)))))) * vec2(1.0, 1.0)).y))))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (! (false))) || (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), min((0), (0))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))))) && true)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))) && (false))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + log(1.0))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0))))), min(vec2(mat2x4(injectionSwitch, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0))))), vec2(mat2x4(injectionSwitch, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)))))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), bool(bvec3(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)), false, true))))))))))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, ((injectionSwitch.y) - 0.0) - 0.0)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0))))))))
      {
      }
     else
      {
       barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-12.40)), bool(false))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(_GLF_struct_42 _GLF_struct_replacement_42 = _GLF_struct_42(mat2x4(1.0), ivec2(1), 1, _GLF_struct_39(_GLF_struct_34(mat3x2(1.0), true, true, mat3x2(1.0)), _GLF_struct_35(uvec2(1u), mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(4.0)), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(4.0)), min(float(_GLF_FUZZED(4.0)), float(_GLF_FUZZED(4.0)))), float(_GLF_FUZZED(4.0)), float(_GLF_FUZZED(4.0)))), float(1.0), bool(true)))), float(_GLF_FUZZED((7.5 + -971.647))), bool(false))), (false ? _GLF_FUZZED(atan(63.66)) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(4.0)), max(float(_GLF_FUZZED(4.0)), float(_GLF_FUZZED(4.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(4.0)), min(float(_GLF_FUZZED(4.0)), float(_GLF_FUZZED(4.0)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(4.0)), min(float(_GLF_FUZZED(4.0)), float(_GLF_FUZZED(4.0)))) : _GLF_FUZZED(-801.294))), float(_GLF_FUZZED(4.0)), float(_GLF_FUZZED(4.0)))), float(1.0), bool(true)))), float(_GLF_FUZZED((7.5 + -971.647))), bool(false))))))), _GLF_struct_36(vec2(1.0), 1, uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), ivec4(1), vec4(1.0), mat4x3(1.0), bvec3(true)), _GLF_struct_37(bvec3(true), vec4(1.0), bvec3(true), bvec4(true), ivec4(1), mat3x4(1.0)), _GLF_struct_38(_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), 0u, 1u)))), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9874.7790) : injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(9.0)), bool(false)))) + (uvec4(1u)))) | (uvec4(1u))), vec2(1.0), mat3(1.0)), _GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-38.41)), bool(_GLF_IDENTITY(false, (false) || false)))), 1.0))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.7)), bool(false)))), float(_GLF_FUZZED(71.27)), bool(false))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-38.41)), bool(_GLF_IDENTITY(false, (false) || false)))), 1.0))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.7)), bool(false)))), float(_GLF_FUZZED(71.27)), bool(false))))))))))), float(vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-38.41)), bool(_GLF_IDENTITY(false, (false) || false)))), 1.0))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.7)), bool(false)))), float(_GLF_FUZZED(71.27)), bool(false))))))))))), 1.0)))) - 0.0)), (mat4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, abs(1.0), 1.0, 1.0, abs(1.0))), 1.0 * (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, abs(1.0), 1.0, 1.0, abs(1.0))), (float(mat2x3(1.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0)))))) / 1.0)))) * (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), float(_GLF_FUZZED(279.614)), bool(false))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.4)), bool(false))) : _GLF_FUZZED(-8.0))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(71.27)), bool(false))))))))))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 1.0, 0.0, 1.0, 0.0), (true ? mat3x2(0.0, 0.0, 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat3x2(-52.95, _GLF_IDENTITY(5.6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-46.56) : 5.6)), 501.702, -336.562, -838.613, -957.988)))))), 0.0))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) + vec2(0.0, 0.0)), _GLF_struct_41(_GLF_struct_40(mat3x4(1.0), mat4x3(1.0), ivec2(1), mat3x2(1.0), mat4x2(1.0), _GLF_IDENTITY(uvec2(1u), ~ (~ (_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))))))), mat2x4(1.0), 1.0, vec2(1.0), uvec4(1u), uvec2(1u)), ivec3(1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_42._injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec2(_GLF_struct_replacement_42._injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_struct_replacement_42._injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))); _GLF_struct_replacement_42._injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, min(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, _GLF_struct_replacement_24._f1.subgroup_local_id % 2)), min(_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id, (_GLF_struct_replacement_24._f1.subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % 2, 0u ^ (_GLF_struct_replacement_24._f1.subgroup_local_id % 2)), _GLF_struct_replacement_24._f1.subgroup_local_id % 2)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, (_GLF_struct_replacement_24._f1.subgroup_local_id % 2) | (_GLF_struct_replacement_24._f1.subgroup_local_id % 2)), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ (_GLF_struct_replacement_24._f1.subgroup_local_id % 2)), min(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, _GLF_struct_replacement_24._f1.subgroup_local_id % 2)))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, min(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, _GLF_IDENTITY(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, uint(uvec2(_GLF_struct_replacement_24._f1.subgroup_local_id % 2, _GLF_IDENTITY(1u, 0u | (1u))))))))))) == 0)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), _injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(6))), (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(_GLF_IDENTITY(6, clamp(6, _GLF_IDENTITY(6, ~ (~ (6))), 6)))))))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ (1), max(~ (1), ~ (_GLF_IDENTITY(1, max(1, 1)))))))), clamp(~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ (1), max(~ (1), ~ (_GLF_IDENTITY(1, max(1, 1)))))))), ~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ (1), max(~ (1), ~ (_GLF_IDENTITY(1, max(1, 1)))))))), ~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ (1), max(~ (1), ~ (_GLF_IDENTITY(1, max(1, 1))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, false))))), false))))))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))) && true)))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)), _GLF_IDENTITY(false, (false) && true)))))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     subgroupAll(true);
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6409.9103), _GLF_FUZZED(8069.6976)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y), (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.67), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-5.7, 641.339, 4.0).z)), bvec2(true, false))).x > injectionSwitch.y)) || false)) || false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true)))));
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).x > injectionSwitch.y, _GLF_IDENTITY(! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)) || false))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))) || false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp((0 << _GLF_IDENTITY(int(8), int(8))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), 1 * (int(8)))) | (_GLF_IDENTITY(int(8), (0 << _GLF_IDENTITY(int(6), int(6))) ^ (int(8))))), int(8))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ~ (~ ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, 1 * (8))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp((0 << _GLF_IDENTITY(int(8), int(8))), (0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ~ (~ ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, 1 * (8))))))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp((0 << _GLF_IDENTITY(int(8), int(8))), (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED(-36415)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ~ (~ ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, 1 * (8))))))))))))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp((0 << _GLF_IDENTITY(int(8), int(8))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), max(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ~ (~ ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, 1 * (8))))))))))), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), true), true, false)))))), true))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1) : _GLF_FUZZED(_GLF_IDENTITY(-33467, 0 + (-33467))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1) : _GLF_FUZZED(-33467)) ^ 0))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), min(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), vec2(vec4(injectionSwitch, 1.0, sqrt(0.0)))))).x < injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), min(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), vec2(vec4(injectionSwitch, 1.0, sqrt(0.0)))))).x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3094.5225), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(65.60)), bvec2(true, false))).y) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), min(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), vec2(vec4(injectionSwitch, 1.0, sqrt(0.0)))))).x < injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.0))))), injectionSwitch.x)) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), min(vec2(vec4(injectionSwitch, 1.0, sqrt(0.0))), vec2(vec4(injectionSwitch, 1.0, sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.7)), float(0.0), bool(true))))))))).x < injectionSwitch.y) || false)))))))))))))))))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ _GLF_IDENTITY((~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), max((~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true)))))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, exp(0.0) * (injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).y, true, false, false))))), (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.2), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-7.0) : (injectionSwitch)[1]))) / 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(606.543)), bvec2(true, false))).x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)))))) || false)))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, max(0, 0))), ((0 | 0)) ^ (0 << _GLF_IDENTITY(int(7), int(7)))) ^ _GLF_IDENTITY((_GLF_IDENTITY((0 ^ 0), 0 ^ ((0 ^ 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), int(7))), (_GLF_IDENTITY(((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), int(7))), clamp(((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(int(int(7))), (int(int(int(7)))) >> 0)), int(7))), ((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), int(7)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), int(7)) : _GLF_FUZZED(-58302)))), ((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), int(7)))))) | (((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(int(int(7)), clamp(int(int(7)), int(int(7)), int(int(7)))))), int(7)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(66026) : 4)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(66026) : 4)), (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(66026) : 4))) >> 0), 1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0))), _GLF_IDENTITY(64, min(64, 64)), 4);
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, ! (! (true))))), (bool((_GLF_IDENTITY(true, ! (! (true)))))) || false)), ! (! (bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, ! (! (true))))), (bool((_GLF_IDENTITY(true, ! (! (true)))))) || false)))))) || false), false, false), true)))))))))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupAll(false);
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << (0 >> _GLF_IDENTITY(int(6), int(6)))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mod(injectionSwitch, vec2(-37.93, -4.9))))).x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.0, 9.0)))).y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.0, 9.0)))).y) + 0.0))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
               for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (int(1))), min(~ (~ (int(1))), ~ (~ (int(1)))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), max((int(1)), (int(1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (1))), (true ? int(_GLF_IDENTITY(1, (1) | (1))) : _GLF_FUZZED(_injected_loop_counter))), (int(1)) << 0)))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), (int(1)) << 0))))) << 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))) || false), false, false), bvec3(bvec4(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false, false), false))))))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))
                  barrier();
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                }
               for(int _injected_loop_counter = (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)) | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (0) << (48078 & 0)), ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) && true))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) && true))) || false, bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) && true))) || false))))))) || false), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))) || false))), bool(bvec2(! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)) && true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec2(0, 1)))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), clamp(ivec3(1, 0, 0), ivec3(1, 0, 0), _GLF_IDENTITY(ivec3(1, 0, 0), ivec3(0, 0, 0) + (ivec3(1, 0, 0))))))), true && (_injected_loop_counter < 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0)) >> 0))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true))))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(50.59)), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, true)))[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0)))])).y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), _GLF_IDENTITY(true, true && (true)), true)))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), bool(bvec3(true && ((false)), true, true))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && ((false)))))), ! (_GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && ((false))))))), false || (! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && ((false)))))))))))))) || false)))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(_GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(vec4(1.0), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_28._injected_loop_counter < 1); _GLF_struct_replacement_28._injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-37.84, -702.065)) : injectionSwitch, max(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-37.84, -702.065)) : _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), max(injectionSwitch, injectionSwitch)))), min(false ? _GLF_FUZZED(vec2(-37.84, -702.065)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-37.84, -702.065)) : injectionSwitch)), false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-37.84, -702.065), clamp(vec2(_GLF_IDENTITY(-37.84, max(-37.84, _GLF_IDENTITY(-37.84, _GLF_IDENTITY(float(mat3x2(-37.84, 0.0, 0.0, 0.0, 0.0, abs(0.0))), min(float(mat3x2(-37.84, 0.0, 0.0, 0.0, 0.0, abs(0.0))), float(mat3x2(-37.84, 0.0, 0.0, 0.0, 0.0, abs(0.0)))))))), -702.065), vec2(-37.84, -702.065), _GLF_IDENTITY(vec2(-37.84, -702.065), (vec2(-37.84, -702.065)) * mat2(1.0))))) : injectionSwitch)))).y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((7869 & 0), (false ? _GLF_FUZZED(findMSB(next_virtual_gid)) : (7869 & 0)))), 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))) || false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))) && true)))), false, true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(floor(mix(3629.2057, -8862.7793, 4.9))) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).x, injectionSwitch.x)))))) > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 1 * (0)), 0))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec4(int(4), 1, 0, 0)))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = (0 ^ (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), false, true, true)), false || (bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), false, true, true))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), false, true, true)), false || (bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), false, true, true)))))))) && true); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-443.569) : injectionSwitch.x)) < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true, false, false)), false || (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true, false, false))))))))
                      {
                      }
                     else
                      {
                       barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), clamp(vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), mix(vec4(_GLF_FUZZED(-92.22), (vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))[1], _GLF_FUZZED(vec4(7.0, 33.07, -404.603, 6.6).w), _GLF_FUZZED(-0.5)), vec4((vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))[0], _GLF_FUZZED(2912.0821), (vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))[2], (vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))[3]), bvec4(true, false, true, true))), vec4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, false))), false, false)))), bool(bvec3((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, false))), false, false)))), false, false)))));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))))).y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}
