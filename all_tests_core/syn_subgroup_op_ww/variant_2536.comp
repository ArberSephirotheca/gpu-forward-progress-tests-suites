#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))))))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7)))), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7))))), 1 * (~ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7)))))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) && true))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, true, false)), (_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, true, false)), true && (bool(bvec4(bool(bool(false)), true, true, false))))) || false), true && (_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, true, false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(bool(bool(false)), true, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(bool(bool(false)), true, true, false)), false)))))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(bool(bool(false)), true, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(bool(bool(false)), true, true, false)), false)))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(bool(bool(false)), true, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(bool(bool(false)), true, true, false)), false)))))))), false)))) || false))))))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2270.5602))), (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2270.5602)))) - 0.0)))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))).y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, tan(0.0), 0.0, 1.0, cos(0.0), 1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0)), mix(float(float(mat4x3(injectionSwitch.y, 0.0, tan(0.0), 0.0, 1.0, cos(0.0), 1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0))), float(_GLF_FUZZED((- 5.2))), bool(false)))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))))), vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), _GLF_IDENTITY(mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)), (mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))) * mat3(1.0))), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, _GLF_IDENTITY(abs(1.0), abs(1.0) * (_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))))), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))))))))), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))) * mat3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))) + (0.0))))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))) * mat3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))) + (0.0))))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))))), 1.0 * (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))) * mat3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))) + (0.0))))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))) * mat3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))) + (0.0))))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))) * mat3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))) + (0.0))))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))), (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true)))) * mat3(1.0)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))) + (0.0))))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, true, true))))))))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), (vec3(injectionSwitch.y, abs(1.0), 0.0)) / exp(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)) + (0.0)))))), _GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, true && (true)), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, true && (true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(2891.1362), _GLF_FUZZED(-890.065)), vec3(_GLF_FUZZED(-603.603), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_IDENTITY((vec3(injectionSwitch.y, abs(1.0), 0.0))[2], float(mat4x2((_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), mix(vec3((vec3(injectionSwitch.y, abs(1.0), 0.0))[0], _GLF_FUZZED(-47.55), (vec3(injectionSwitch.y, abs(1.0), 0.0))[2]), vec3(_GLF_FUZZED(3854.4257), (vec3(injectionSwitch.y, abs(1.0), 0.0))[1], _GLF_FUZZED(7.4)), bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))[2], 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), bvec3(false, _GLF_IDENTITY(true, ! (! (true))), true)))))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), uvec3(0u, 0u, 0u) + (~ (~ (gl_NumWorkGroups))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.9)), bool(false))), 0.0, 1.0, 0.0, 0.0, 1.0))) > injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(exp(vec2(0.0, 0.0)))).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_ONE(1.0, injectionSwitch.y))))))))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), clamp(((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), 0 | (((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), max(((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)))), false, false), true))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), false, true)))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true), false)))))) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, 0u ^ (workgroup_size * workgroup_id));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_id * subgroup_size, 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(subgroup_id * subgroup_size, 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u)), (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_id * subgroup_size, 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(subgroup_id * subgroup_size, 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u))) ^ 0u), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id)))), min(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id)))), _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u, clamp((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u, (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u, max((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u, ((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u) | ((_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))), ~ (~ (uint(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((~ workgroup_id))))))))) / 1u))))))))), _GLF_IDENTITY(uint(uvec4(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u))) * 1u) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, true && (true)))))))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))))))));
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))) + 1 < _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(72045u))), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))) + 1 < _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(72045u))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.5), _GLF_FUZZED(8.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.5), _GLF_FUZZED(8.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.5), _GLF_FUZZED(8.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))) || false)))
          barrier();
        }
       do
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     barrier();
     for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0), max(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))))), _GLF_ONE(1.0, injectionSwitch.y)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(2), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5062.6368)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5062.6368)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))
    {
     for(int _injected_loop_counter = (1 ^ (0 | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) - 0.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), bvec3(bvec4(bvec3(bvec3(true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-932.643), _GLF_FUZZED(-1.2)), bvec2(false, false))).y)))), true))))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-77.96) : injectionSwitch.x)))) < injectionSwitch.y)))) || false))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, 1 * (1)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false))))))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, false || (false)), true)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false))))))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, false || (false)), true)))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)))))))))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)))))))))))))))))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)))))))))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0), (mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))), length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0))), dot(vec2(0.0, 1.0), vec2(0.0, abs(1.0)))), length(0.0), abs(1.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(476.399), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (false ? _GLF_FUZZED(734.856) : 3.6)))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.6)), bool(false))) > injectionSwitch.y))) || false)))))))))))))))))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, false || (false)), true))))))))) || false))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (64) + 0), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), mix(float(_GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), (false ? _GLF_FUZZED(-4.4) : 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), float(_GLF_FUZZED(2.7)), bool(false))), mix(float(_GLF_FUZZED(-902.637)), float(_GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), mix(float(_GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), (false ? _GLF_FUZZED(-4.4) : 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), float(_GLF_FUZZED(2.7)), bool(false)))), bool(true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      barrier();
    }
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true, false))))), bool(bool(_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true, false))))), bool(bvec3(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true, false))))), true, false))))))))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bvec4(! ((_GLF_DEAD(false))), true, false, true))))) || false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true)))), true))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))) && (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}
