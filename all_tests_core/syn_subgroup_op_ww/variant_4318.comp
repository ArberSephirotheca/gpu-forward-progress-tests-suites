#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat3 _f0;
 ivec4 _f1;
 uint _f2;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 mat4x3 _f1;
 uvec3 _f2;
 vec4 _f3;
 bvec2 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 mat3x4 _f1;
 uint _f2;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 ivec3 _f1;
 uint workgroup_size;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 bvec4 _f1;
 mat3 _f2;
 mat4x2 _f3;
 mat4x2 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 vec4 _f3;
 ivec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 mat2x3 _f1;
 mat2 _f2;
 mat4x3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat4x2 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 _GLF_struct_6 _f1;
 uvec2 _f2;
 bvec2 _f3;
 ivec3 _f4;
 mat4 _f5;
 _GLF_struct_8 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.w = subgroup_id;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x = subgroup_size;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_4(_GLF_struct_0(uvec2(1u), mat2x3(1.0), mat2(1.0), mat4x3(1.0), uvec3(1u)), _GLF_struct_1(ivec2(1)), mat4x2(1.0), _GLF_struct_2(mat3x2(1.0), mat4x3(1.0), uvec2(1u), vec4(1.0), ivec4(1), ivec2(1)), _GLF_struct_3(vec4(1.0), bvec4(true), mat3(1.0), mat4x2(1.0), mat4x2(1.0), mat3x4(1.0), mat3x2(1.0))), _GLF_struct_6(mat4(1.0), ivec3(1), gl_WorkGroupSize.x, _GLF_struct_5(bvec4(true), mat3x4(1.0), 1u)), uvec2(1u), bvec2(true), ivec3(1), mat4(1.0), _GLF_struct_8(mat2(1.0), mat4x3(1.0), uvec3(1u), vec4(1.0), bvec2(true), _GLF_struct_7(mat3(1.0), ivec4(1), 1u)));
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z = _GLF_struct_replacement_9._f1.workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z * workgroup_id;
 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.xy.y = workgroup_base;
 uint subgroup_base = GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.w * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x;
 uint virtual_gid = GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.xy.y + subgroup_base + subgroup_local_id;
 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.xy.x = virtual_gid;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y = GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.xy.x;
 uint next_virtual_gid = GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.xy.y + subgroup_base + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x);
 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.z = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y], uint(1), 4, 64, 4);
 do
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(true);
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
      }
     atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.z], uint(2), 4, 64, 4);
    }
   else
    {
     subgroupAll(false);
     atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basenext_virtual_gidsubgroup_id.z], uint(2), 4, 64, 4);
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
