#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, cos(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          return;
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y))))))))))))
        return;
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(311.565)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-2064.1231)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), _GLF_IDENTITY(true, bool(bool(true))))), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), _GLF_IDENTITY(true, bool(bool(true)))))))))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), ~ (~ (int(ivec4(1, 1, 1, 1))))))) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(94963))) | (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, _GLF_IDENTITY(((0) << 0) | (_GLF_IDENTITY((0) << 0, int(ivec4((0) << 0, 1, 1, 1)))), ~ (~ (((0) << 0) | (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0, int(ivec4((0) << 0, 1, 1, 1)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0)))))))
        continue;
       barrier();
      }
     break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))))), (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, true && ((false) || false))))))))) || false))) && true), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), false))), true))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true, true)), true && (bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true, true)))))))))) || false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(26.61)))) / 1.0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true, true)), _GLF_IDENTITY(true, ! (! (true))) && (bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && true))), true, true)))))))))) || false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true))))) ? injectionSwitch : _GLF_FUZZED(asin(vec2(810.264, 6.7))))))).x, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true))))) ? injectionSwitch : _GLF_FUZZED(asin(vec2(810.264, 6.7))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true))))) ? injectionSwitch : _GLF_FUZZED(asin(vec2(810.264, 6.7))))))).x)) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(asin(vec2(810.264, 6.7))), min(_GLF_FUZZED(asin(vec2(810.264, 6.7))), _GLF_FUZZED(asin(vec2(810.264, 6.7)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(asin(vec2(810.264, 6.7))), min(_GLF_FUZZED(asin(vec2(810.264, 6.7))), _GLF_FUZZED(asin(vec2(810.264, 6.7)))))))) : _GLF_FUZZED(vec2(4.4))))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1.2)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asin(vec2(810.264, 6.7))))))), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asin(vec2(810.264, 6.7)))))))) - vec2(0.0, 0.0)).x > injectionSwitch.y)) || false), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(float(-92155))), bool(false))))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))) && true))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(632.498) : injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-43.63, mix(_GLF_IDENTITY(float(-43.63), min(float(-43.63), float(-43.63))), float(_GLF_FUZZED(-9.7)), bool(false))))), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-42.33)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))) - abs(0.0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(injectionSwitch.y), bool(true))))), 0, 0, 1)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(injectionSwitch.y), bool(true))))), 0, 0, 1))), (false ? _GLF_FUZZED(floatBitsToInt(2.8)) : _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))), 0, 0, 1))))), bool(bvec3(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(injectionSwitch.y), bool(true))))), 0, 0, 1))), (false ? _GLF_FUZZED(floatBitsToInt(2.8)) : _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))), 0, 0, 1))))), false, false)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), true, false, false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), false || ((false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((false), false || ((false)))), (! (_GLF_IDENTITY((false), false || ((false))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), false))), false || (false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true)))))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), false || ((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
            break;
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.4))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.4)), float(injectionSwitch.x), bool(true))))), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), true && (bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false)))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, true)))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, log(1.0), 0.0, exp(0.0), 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, log(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, _GLF_IDENTITY(exp(0.0), clamp(_GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0))), exp(0.0), exp(0.0))), 1.0, 0.0, length(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(12.53)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), max(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0), _GLF_IDENTITY(mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), max(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0))), (mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), max(float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))), (true ? float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(_GLF_IDENTITY(transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (transpose(mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) * mat3(1.0))))) : _GLF_FUZZED(distance(-9.8, -4.9))))), _GLF_IDENTITY(0.0 + (0.0), 0.0 + (0.0 + (0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0)))) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 0.0)), 0.0, 1.0, 1.0, 1.0))))), (false ? _GLF_FUZZED((mat3x2(-1309.1361, 4634.6011, 5415.6257, 6880.2936, -5.3, -76.03) * vec3(606.168, -2.2, 2.2))) : vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, log(1.0), 0.0, exp(0.0), 1.0, 0.0, length(vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.8)), bool(false))), injectionSwitch.x))), 1.0, 0.0, 0.0, 1.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), injectionSwitch.x), 1.0, 0.0, 0.0, 1.0))))), 0.0 + (float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0), mat4x2(mat4x2(mat4x2(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0)))))))), 0.0)), 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, log(1.0), 0.0, exp(0.0), 1.0, 0.0, length(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, false))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, false)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))) || false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY((_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (bool(bvec3(bool(false), false, true)))))) || false, bool(bvec4((_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (bool(bvec3(bool(false), false, true)))))) || false, false, false, false)))))))))))))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (bool(bvec3(bool(false), false, true)))))) || false))))))))))))))))))), true && (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (_GLF_IDENTITY(bool(bvec3(bool(false), false, true)), ! (! (bool(bvec3(bool(false), false, true))))))))) || false)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (_GLF_IDENTITY(bool(bvec3(bool(false), false, true)), ! (! (bool(bvec3(bool(false), false, true))))))))) || false))))))))))), false || (bool((! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (_GLF_IDENTITY(bool(bvec3(bool(false), false, true)), ! (! (bool(bvec3(bool(false), false, true))))))))) || false)))))))))))))), bool(bool(bool(_GLF_IDENTITY(bool((! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (_GLF_IDENTITY(bool(bvec3(bool(false), false, true)), ! (! (bool(bvec3(bool(false), false, true))))))))) || false))))))))))), false || (bool((! (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, true)), false || (_GLF_IDENTITY(bool(bvec3(bool(false), false, true)), ! (! (bool(bvec3(bool(false), false, true))))))))) || false))))))))))))))))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
 if(_GLF_DEAD(false))
  return;
 if((subgroup_local_id % _GLF_IDENTITY(2, (2) / (1 & 1))) == _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))))
  {
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), _GLF_IDENTITY(uint(uvec3(uint(2), 0u, 1u)), (uint(uvec3(uint(_GLF_IDENTITY(2, (2) + 0)), 0u, 1u))) ^ 0u)), _GLF_IDENTITY(4, (4) << 0), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) || false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
