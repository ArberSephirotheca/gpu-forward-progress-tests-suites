#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(7, _GLF_IDENTITY(7, int(ivec3(7, 1, 0)))))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)))) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, tan(0.0))), vec2(mat2x4(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, tan(0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, tan(0.0))), vec2(mat2x4(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, tan(0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0))))))).x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), false, false), true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), max(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), _GLF_IDENTITY(gl_WorkGroupSize, ~ _GLF_IDENTITY((~ (gl_WorkGroupSize)), min((~ (gl_WorkGroupSize)), (~ (gl_WorkGroupSize))))))).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(34013u, 110986u, _GLF_IDENTITY(166757u, (true ? 166757u : _GLF_FUZZED(subgroup_local_id))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), max(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)))))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)), (true ? _GLF_IDENTITY((true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)), ~ (~ ((true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))) : _GLF_FUZZED((-26410 & (_injected_loop_counter - 69152)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) & int((39791u))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 1 * (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))))) ^ 0u))))) + subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size)) | (clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(subgroup_id)))))) ^ 0u))))) + subgroup_id * subgroup_size)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), 0u | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), clamp(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), ~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), ~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u))))))) >> 0u))), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, max((~ (workgroup_base)) ^ 0u, _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, min((~ (workgroup_base)) ^ 0u, (~ (workgroup_base)) ^ 0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, max((~ (workgroup_base)) ^ 0u, (~ (workgroup_base)) ^ 0u)))))))))) ^ 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u))))) << 0u)) | 0u)) - _GLF_IDENTITY(0u, 0u + (0u)))))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_id * subgroup_size)) : _GLF_FUZZED((workgroup_base * workgroup_id)))))), (~ (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u))))) << 0u)) - 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u))))) << 0u)) - 0u))), 1u * (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u))))) << 0u)) - 0u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) ^ 0u, ((~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)))) ^ 0u) - (0u | 0u)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) ^ 0u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) >> 0u)), (~ (workgroup_base)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (workgroup_base)) ^ 0u))))) << 0u)) - 0u)))))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_id * subgroup_size)) : _GLF_FUZZED((workgroup_base * workgroup_id))), (0u | 0u) ^ ((true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_id * subgroup_size)) : _GLF_FUZZED((workgroup_base * workgroup_id))))))))) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), max(int(7), int(7)))) | (_GLF_IDENTITY(int(7), (int(7)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = (1 ^ (0 | (0 >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((false ? 6.9 : -9.5))), vec2(_GLF_FUZZED(588.827), (injectionSwitch)[1]), bvec2(false, true))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((false ? 6.9 : -9.5), float(mat4x2((false ? 6.9 : -9.5), 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 1.0))))), vec2(_GLF_FUZZED(588.827), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((false ? 6.9 : -9.5), float(mat4x2((false ? 6.9 : -9.5), 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 1.0))))), vec2(_GLF_FUZZED(588.827), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y) - 0.0)))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((false ? 6.9 : -9.5))), vec2(_GLF_FUZZED(588.827), (injectionSwitch)[1]), bvec2(false, true))).y)))))) || false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, determinant(mat3(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.9)), float(0.0), bool(true))), determinant(mat4(1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(false))), bool(false)))), 1.0)), min(float(mat4x2(injectionSwitch.x, 0.0, determinant(mat3(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), float(mat4x2(injectionSwitch.x, 0.0, determinant(mat3(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-9.1))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0), 1.0))))), (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec3(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), bvec3(bvec4(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)))), (bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3((_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), (injectionSwitch.x > injectionSwitch.y))), false, false), true))))) && true)) && true)), ((! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)))), (bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), (injectionSwitch.x > injectionSwitch.y)), true, true)))), false, false), true))))) && true)) && true))) || false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.y), bool(true)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), min((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), ((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(85.92))) : _GLF_FUZZED(16.81)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, (true) && true) ? 2 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(2, min(2, 2))))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(int(_GLF_IDENTITY(64, min(64, 64))))), _GLF_IDENTITY((64) | (_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), 0 ^ (_GLF_IDENTITY(min(64, 64), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), min(64, 64)))), clamp(~ (_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), min(64, 64)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), min(64, 64)))), (~ (_GLF_IDENTITY(min(64, 64), clamp(min(64, 64), min(64, 64), min(64, 64))))) + 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(min(64, 64), (min(64, 64)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(min(64, 64), min(64, 64), min(64, 64))))))))))), (1 ^ 0), 1, _GLF_IDENTITY(0, min(0, 0)))))))), max((64) | (_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, min(64, 64)), _GLF_IDENTITY((1 ^ 0), 0 ^ ((1 ^ 0))), 1, 0)))))), _GLF_IDENTITY((64) | (_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 64 : _GLF_FUZZED((29895 * 74426)))))), (_GLF_IDENTITY(1 ^ 0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (1 ^ 0))), 1, _GLF_IDENTITY(0, (0) << 0))))))), 0 + ((64) | (_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), min(64, 64)), (1 ^ 0), 1, 0))))))))))), 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 0.0, cos(0.0), 0.0, 1.0, sin(0.0), 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(float(true)) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))) - 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0)))))))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(3.8, clamp(3.8, 3.8, _GLF_IDENTITY(3.8, float(_GLF_IDENTITY(mat4(3.8, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), (mat4(3.8, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)) * mat4(1.0))))))), _GLF_FUZZED(-68.91)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))))[0], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))))[0], min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2345.2194)), bool(false))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.9))), 0.0, 0.0, 0.0, 0.0)), 1.0))))))[0], ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0), (mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))))[0]) * 1.0), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(injectionSwitch, injectionSwitch)).x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))))[0]))) + sqrt(0.0)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), _GLF_IDENTITY(mat2(mat4x2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))), (true ? mat2(mat4x2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(mat2(-603.244, -5.8, -6.7, -9.0)) : mat2(injectionSwitch, determinant(mat4(0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))))) : _GLF_FUZZED(mat2(1.5, 0.5, -7.6, -2.3))))))))[1]), bvec2(true, true))).y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       subgroupAll(false);
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(! (bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, true, false))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(2), 4, 64, 4);
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 1 * (_GLF_IDENTITY(int(8), int(8))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
        barrier();
       do
        {
         subgroupAll(_GLF_IDENTITY(true, ! (! (true))));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false), bvec2(bvec4(bvec2(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false), true, false))))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(96.61)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           barrier();
          }
         barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))))
            barrier();
          }
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) || false), true, true, true))))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
