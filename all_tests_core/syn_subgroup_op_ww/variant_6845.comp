#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0))), injectionSwitch.y))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)))))) || false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0))))); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), 0 | (int(0)))), 1 * (~ (_GLF_IDENTITY(int(0), 0 | (int(0)))))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) : _GLF_FUZZED(_injected_loop_counter))) > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) && true))))) || false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(3), int(3))) | int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))) || false))))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), true), bvec3(bvec4(bvec3(bvec2(false, true), true), false))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))))))), false)), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), false)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true))))), false), false)))), true))))))))), false, true))))), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), true)))))), true))), true, true)), true)))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           for(int _injected_loop_counter = ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), min(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((-64473 & 0), clamp((-64473 & 0), (-64473 & 0), (-64473 & 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              break;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))) || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8100.3431)))))))
            return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -23333); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED((ivec4(-10703, 19849, -93524, 43002) , -949.325)) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         barrier();
        }
       return;
      }
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(94.82) : injectionSwitch.x)) < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(217.672))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(distance(-5892.0691, 523.188)) : injectionSwitch.x)))) < injectionSwitch.y)))), ((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
            break;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) ^ 1, max(0 ^ _GLF_IDENTITY(1, (1) << (0 | 0)), _GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1))), (false ? _GLF_FUZZED(60450) : _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) ^ 1, max(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (0 | 0)), max(_GLF_IDENTITY(1, (1) << (0 | 0)), _GLF_IDENTITY(1, (1) << (0 | 0)))), _GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1))))))); _injected_loop_counter ++)
              {
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-78146))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, clamp(1, 1, 1)) & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), min(vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))).x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    continue;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, 1u * (_GLF_IDENTITY((gl_WorkGroupSize.x), (true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(subgroup_id))) << 0u)));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(-77414) : _GLF_IDENTITY(int(5), int(5))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(-77414) : _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) ^ 0)) - 0)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), (int(5)) | 0), 0, 0), (ivec3(_GLF_IDENTITY(int(5), (int(5)) | 0), 0, 0)) * ivec3(1, 1, 1))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    continue;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / (1u & 1u));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! (! (injectionSwitch.x > injectionSwitch.y)), false))))))))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) != (1 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-34.51, -7883.5623)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (true ? vec2(vec3(injectionSwitch, 0.0)) : _GLF_FUZZED(injectionSwitch)))))).x)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), true), true, false))))))))
          barrier();
        }
       else
        {
        }
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false), true, true, _GLF_IDENTITY(true, (true) && true)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true))))) || false))))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), injectionSwitch)) : _GLF_FUZZED(vec2(41.46, 532.835))))))) - vec2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, _GLF_IDENTITY(0 ^ (3), (0 ^ (3)) | (0 ^ (3)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) | (int(3))), (false ? _GLF_FUZZED(floatBitsToInt(_GLF_IDENTITY(131.519, max(_GLF_IDENTITY(131.519, (false ? _GLF_FUZZED(563.242) : 131.519)), 131.519)))) : int(3))), 0, 1, 1))), (false ? _GLF_FUZZED(-84503) : int(3))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))), clamp((_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))), (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))), (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))), 0 ^ ((_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4.0)), bool(false))) < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(_GLF_IDENTITY(3, 0 ^ (3)))))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_FUZZED(_injected_loop_counter)) ^ 0, max((_GLF_FUZZED(_injected_loop_counter)) ^ 0, (_GLF_FUZZED(_injected_loop_counter)) ^ 0))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(int(3), min(int(3), int(3))))))), 0 | (int(int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(int(3), min(int(3), int(3)))))))))))) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))), min((int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))), max(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0)))) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))), max((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), max((1) | (1), (1) | (1)))) << _GLF_IDENTITY(int(3), int(3))), clamp((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) | (int(3)))) + 0))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) - 0), 0))), 1, (1 & 1)), (ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(_GLF_IDENTITY(3, (3) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4504.3598)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? ~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(int(3), 1, (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-84503), (_GLF_FUZZED(-84503)) | (_GLF_FUZZED(-84503))) : int(3)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), max(int(3), int(3)))) ^ 0)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3))))))))) >> (0 | 0)) : _GLF_FUZZED(_injected_loop_counter))) | ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-84503) : int(3)))))) : _GLF_FUZZED(_injected_loop_counter))))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 0), 1, (_GLF_IDENTITY(1, max(1, 1)) & 1))) << ivec4(0, 0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(3, (3) | (3))) | (3))), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), min(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0)))), vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0))))))).y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))), (bool(bool(injectionSwitch.x < injectionSwitch.y))) || false))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    break;
                   break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   continue;
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, false, false))))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, false, false)))))))))), (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, false, false))))))))))) && true))));
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
          break;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ (1u ^ 1u)) + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uint(workgroup_base)), min(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 0u))), uint(uvec2(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 0u))), 1u))))), uint(uint(workgroup_base))))) + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_FUZZED(num_workgroup)))) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), clamp(1.0 * (injectionSwitch.x), _GLF_IDENTITY(1.0 * (injectionSwitch.x), clamp(1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x))), 1.0 * (injectionSwitch.x)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(abs(vec3(_GLF_IDENTITY(1.0, _GLF_ONE(1.0, injectionSwitch.y) * (1.0)), 1.0, 1.0))))), abs(1.0), 1.0, 1.0))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - (-6840 & 0)), 0, 0))))))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = ((((1 ^ 0) & _GLF_IDENTITY(1, 0 | (1))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                 barrier();
                }
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (false) || false)))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.2, -0.4)))).y))))
                      {
                       do
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     break;
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, true, false))))))
                  barrier();
                 break;
                }
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
              return;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(_GLF_IDENTITY(mat4x2((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4x2((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               return;
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             else
              {
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), max(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), (0 ^ 1))), (0 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))), 0 | (~ (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))))))), _GLF_IDENTITY(int(1), min(int(1), int(1))))) & (41005 | ivec4(-94543, -78443, -65188, -84179)).p); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(mix(82970, _injected_loop_counter, false)) : int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((ivec4(12456, -87322, -873, -27970) , -43022)) : (1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0, 1 * ((int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.0)), bool(false))), injectionSwitch.x))) << 0))) | (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-38450)))))))) ^ 0u))) == 0, true && (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, 0 ^ (2))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2))))), (~ ((subgroup_local_id % 2))) ^ 0u))) == _GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY(int(int(2)), (int(int(2))) | (int(int(2))))))), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, max(0u, 0u))))) == 0) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))), _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (_GLF_IDENTITY(max(0u, 0u), (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (max(0u, 0u)))) << 0u)) >> 0u))))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ _GLF_IDENTITY((~ (~ ((subgroup_local_id % 2)))), 0u ^ ((~ (~ ((subgroup_local_id % 2)))))))) ^ 0u))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2)))), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0)), false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) % 2)))), max((~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) % 2)))), (~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) % 2)))))), 0u ^ ((~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) / 1u))))))) ^ 0u))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2)))), ((_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))))) | ((_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))))))))), (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) | 0u)) ^ 0u))) == 0))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), ~ (~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id)))), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id))))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id))))))) * 1u) % 2))))), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (true ? ~ ((subgroup_local_id % 2)) : _GLF_FUZZED(num_workgroup))), ~ ((subgroup_local_id % 2))))) ^ 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), uint(uint(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) >> 0), 2, 2))), ((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) >> 0), 2, 2)))) * 1u)), (~ ((subgroup_local_id % 2))) ^ 0u)), 1u * (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) - 0u)) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) - 0u)) ^ 0u), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) - 0u)) ^ 0u)) + 0u), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) - 0u)) ^ 0u), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) - 0u)) ^ 0u)))))))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 + (int(7))), int(7))), 0)), max(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) << 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (~ (7)) | 0)))), int(7))), 0)), (int(_GLF_IDENTITY(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), _GLF_IDENTITY(clamp(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (_GLF_IDENTITY(clamp(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, min(7, 7))) | (_GLF_IDENTITY(7, max(7, 7))))))), 0)), ivec3(0, 0, 0) | (clamp(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))) | (_GLF_IDENTITY(clamp(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), ivec3(0, 0, 0) | (_GLF_IDENTITY(clamp(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), ivec3(ivec4(clamp(ivec3(0, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), clamp(0 >> _GLF_IDENTITY(int(7), int(7)), 0 >> _GLF_IDENTITY(int(7), int(7)), 0 >> _GLF_IDENTITY(int(7), int(7))))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(int(int(7))), ~ (~ (int(int(int(7))))))))), 0)), 0)))))))))) / 1), (_GLF_IDENTITY(int(ivec3(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) >> _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))), 0 | ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))))))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0))) >> (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))))) >> _GLF_IDENTITY(int(7), int(7))))), 0)), (int(_GLF_IDENTITY(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), clamp(ivec3(0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> (0 & 95964)))), 0), ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ivec3(0, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), max(0 >> _GLF_IDENTITY(int(7), int(7)), 0 >> _GLF_IDENTITY(int(7), int(7))))), 0))))) / 1)) / _GLF_IDENTITY(1, 1 * (1))), int(ivec3(_GLF_IDENTITY(0, ~ (~ (0))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))) ^ 0u, clamp((~ ((subgroup_local_id % 2))) ^ 0u, (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) << 0u)) ^ 0u, (~ ((subgroup_local_id % 2))) ^ 0u))))) == 0)))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) * 1u), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), 0u))))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % _GLF_IDENTITY(2, clamp(2, 2, 2)))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)) >> 0u), 1u * (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), 0u | ((subgroup_local_id % 2))))))) / 1u))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), ~ (_GLF_IDENTITY(~ (~ ((subgroup_local_id % 2))), max(~ (~ ((subgroup_local_id % 2))), ~ (~ ((subgroup_local_id % 2))))))))))) ^ _GLF_IDENTITY(0u, max(0u, 0u))))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id)))) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u), max(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | _GLF_IDENTITY(1u, (1u) << 0u)) * ((subgroup_local_id % 2))))) ^ 0u), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u))), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) ^ 1) | (2)))), (~ ((subgroup_local_id % _GLF_IDENTITY(2, (2) / 1)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))))), _GLF_IDENTITY(min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) << 0u)) ^ 0u))), (min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))) ^ 0u))) == _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(ivec4(7, 0, (0 >> _GLF_IDENTITY(int(6), int(6))), 1)))), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), clamp(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), ~ (_GLF_IDENTITY(~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), clamp(~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), ~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), ~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7))))))))))), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) - 0)), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (false ? _GLF_FUZZED(bitfieldReverse(-30367)) : _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))))), _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), 1 * ((0 >> _GLF_IDENTITY(int(7), int(7)))))) | ((0 >> _GLF_IDENTITY(int(7), int(7))))), 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), 0 | (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), clamp(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))) + 0), 1, 0, 0)), min(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (_GLF_IDENTITY(0, ((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(8), int(8))) ^ (0)) >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), clamp(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) >> 0), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))))) + 0), 1, 0, 0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (_GLF_IDENTITY(~ (7), int(ivec2(~ (7), 0)))) << 0)))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))) + 0), 1, 0, 0)))))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((~ ((subgroup_local_id % 2)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u)), uint(uint((_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((~ ((subgroup_local_id % 2)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u)))))) == 0))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) * 1u))))))), (true ? _GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), min(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u))) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ (_GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) % 2))), (~ (~ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) % 2)))) ^ 0u)))) ^ 0u))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), 0u ^ (~ ((subgroup_local_id % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) | (2)), 2)))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), 0u ^ (~ ((subgroup_local_id % 2)))), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), 0u ^ (~ ((subgroup_local_id % 2))))) | 0u), 0u)))) ^ 0u))) == 0))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) >> 0u), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (false ? _GLF_FUZZED(25828) : 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (subgroup_local_id % 2), clamp(~ (subgroup_local_id % 2), ~ (subgroup_local_id % 2), ~ (subgroup_local_id % 2))))))), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), uint(uvec4((~ ((subgroup_local_id % 2))), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 0u))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) << 0))) >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(_GLF_IDENTITY(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ~ (_GLF_IDENTITY(~ (ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), ivec3(ivec3(~ (ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))))))) / 1), int(ivec3(0, (_GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) << 0), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) << 0, ((int(7)) << 0) | 0))) - 0), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, 0 | (2)))))) | (2)))), max(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | (2)))), _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | (2))))))))) ^ 0u))) == 0)))))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) * 1u), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), 0u))))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % _GLF_IDENTITY(2, clamp(2, 2, 2)))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)) >> 0u), 1u * (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), 0u | ((subgroup_local_id % 2))))))) / 1u))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), ~ (_GLF_IDENTITY(~ (~ ((subgroup_local_id % 2))), max(~ (~ ((subgroup_local_id % 2))), ~ (~ ((subgroup_local_id % 2))))))))))) ^ _GLF_IDENTITY(0u, max(0u, 0u))))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id)))) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u), max(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | _GLF_IDENTITY(1u, (1u) << 0u)) * ((subgroup_local_id % 2))))) ^ 0u), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u))), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), (0u | 1u) * ((subgroup_local_id % 2))))) ^ 0u))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % _GLF_IDENTITY(2, (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) ^ 1) | (2)))), (~ ((subgroup_local_id % _GLF_IDENTITY(2, (2) / 1)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) - 0u))))), _GLF_IDENTITY(min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) << 0u)) ^ 0u))), (min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))) ^ 0u))) == _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(ivec4(7, 0, (0 >> _GLF_IDENTITY(int(6), int(6))), 1)))), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), clamp(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), ~ (_GLF_IDENTITY(~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), clamp(~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), ~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), ~ (int(int(_GLF_IDENTITY(int(7), (int(7)) | (int(7))))))))))), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) - 0)), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (false ? _GLF_FUZZED(bitfieldReverse(-30367)) : _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))))), _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), 1 * ((0 >> _GLF_IDENTITY(int(7), int(7)))))) | ((0 >> _GLF_IDENTITY(int(7), int(7))))), 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), 0 | (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), clamp(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))) + 0), 1, 0, 0)), min(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (_GLF_IDENTITY(0, ((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(8), int(8))) ^ (0)) >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), clamp(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) >> 0), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))))) + 0), 1, 0, 0)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (_GLF_IDENTITY(~ (7), int(ivec2(~ (7), 0)))) << 0)))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)))), (_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))) + 0), 1, 0, 0)))))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((~ ((subgroup_local_id % 2)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u)), uint(uint((_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), ((~ ((subgroup_local_id % 2)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u)))))) == 0))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) * 1u))))))), (true ? _GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), min(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u))) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ (_GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) % 2))), (~ (~ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) % 2)))) ^ 0u)))) ^ 0u))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), 0u ^ (~ ((subgroup_local_id % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) | (2)), 2)))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), 0u ^ (~ ((subgroup_local_id % 2)))), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), 0u ^ (~ ((subgroup_local_id % 2))))) | 0u), 0u)))) ^ 0u))) == 0))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) >> 0u), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (false ? _GLF_FUZZED(25828) : 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (subgroup_local_id % 2), clamp(~ (subgroup_local_id % 2), ~ (subgroup_local_id % 2), ~ (subgroup_local_id % 2))))))), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), uint(uvec4((~ ((subgroup_local_id % 2))), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 0u))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) << 0))) >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(_GLF_IDENTITY(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0), ~ (_GLF_IDENTITY(~ (ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), ivec3(ivec3(~ (ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))))))) / 1), int(ivec3(0, (_GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) << 0), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) << 0, ((int(7)) << 0) | 0))) - 0), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, 0 | (2)))))) | (2)))), max(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | (2)))), _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | (2))))))))) ^ 0u))) == 0)))))))) && true)), true, true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))))) | (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, clamp(subgroup_local_id % 2, subgroup_local_id % 2, subgroup_local_id % 2)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, uint(uvec2(subgroup_local_id % 2, 1u))))), 1u * (~ ((subgroup_local_id % 2)))))), _GLF_IDENTITY(~ (~ (~ ((subgroup_local_id % 2)))), (~ (~ (~ ((subgroup_local_id % 2))))) - (0u | 0u)))) ^ 0u)), (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) << 0u))))), ~ (~ (~ ((subgroup_local_id % 2)))))) ^ 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ (~ (~ ((subgroup_local_id % 2)))))) ^ 0u), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ (_GLF_IDENTITY(~ (~ ((subgroup_local_id % 2))), (~ (~ ((subgroup_local_id % 2)))) >> 0u)))) ^ 0u)))))))) == 0, _GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id)))) % 2), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), min(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)) % 2)), clamp(((subgroup_local_id % 2)), ((subgroup_local_id % 2)), ((subgroup_local_id % 2)))), ((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))))), (~ ((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id % 2))), 0u | ((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id % 2))))) | (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)))))) ^ 0u))) == 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), ~ (~ (_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) << 0u)))), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), (true ? (~ ((subgroup_local_id % 2))) : _GLF_FUZZED(num_workgroup)))) | ((~ ((subgroup_local_id % 2))))) ^ 0u), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY(_GLF_IDENTITY((~ ((subgroup_local_id % 2))), (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), (true ? (~ ((subgroup_local_id % 2))) : _GLF_FUZZED(num_workgroup)))) | ((~ ((subgroup_local_id % 2))))) ^ 0u, (_GLF_IDENTITY((~ ((subgroup_local_id % 2))), (_GLF_IDENTITY((~ ((subgroup_local_id % _GLF_IDENTITY(2, min(2, 2))))), (true ? (~ ((subgroup_local_id % 2))) : _GLF_FUZZED(num_workgroup)))) | ((~ ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 1u, 0u))))) % 2))))) ^ 0u) - 0u))) - ((0u ^ 0u) << _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)) * 1u))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), (subgroup_local_id % 2), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) % 2), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) << 0u)))), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), max((~ ((subgroup_local_id % 2))), _GLF_IDENTITY((~ ((subgroup_local_id % 2))), min((~ ((subgroup_local_id % 2))), (~ ((subgroup_local_id % 2))))))) ^ 0u)), _GLF_IDENTITY(min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED((~ (false , workgroup_size)))))))) >> 0u)))), (~ ((subgroup_local_id % 2))) ^ 0u))), (min(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), 0u ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), 0u ^ (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), ~ (~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))) ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))) << _GLF_IDENTITY(0u, (0u) / 1u)))) == _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(24884))))), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) << 0), int(7))), 0)))), (true ? _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 + (_GLF_IDENTITY(int(7), int(7))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (_GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(7), int(7))), 0))) / 1), int(ivec3(0, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) - 0), _GLF_IDENTITY(int(7), int(7)))), (true ? 0 >> _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED(45452)))) >> 0)), 0)))) : _GLF_FUZZED(61712)))), false || (_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), clamp(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))), (~ ((subgroup_local_id % 2))) ^ 0u))))) == 0)))))))), false, false, true)), bool(bool(bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), max(~ ((subgroup_local_id % 2)), ~ ((subgroup_local_id % 2)))), _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % _GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) >> 0)))))) >> 0u), (true ? ~ _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) >> 0u) : _GLF_FUZZED(subgroup_base)))) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((min(0u, _GLF_IDENTITY(0u, max(0u, 0u)))) | (min(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), ((min(0u, _GLF_IDENTITY(0u, max(0u, 0u)))) | (min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))) * 1u)))))))) == 0, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ ((subgroup_local_id % 2)))), _GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), uint(uvec2(((subgroup_local_id % 2)), 1u))), 1u * (~ ((subgroup_local_id % 2)))))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2))))), ((~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY(((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))), 0u ^ (_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) << 0u)))), ((~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))))) ^ 0u), (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), clamp(~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), ~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), _GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), min(~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), _GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), min(~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))), ~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2))))))))))), ((~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))))) ^ 0u)) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)))) >> (0u ^ 0u))))) ^ 0u))) == 0, false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id)))) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, 0u | (0u))))) == 0))), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % 2), 1u * (_GLF_IDENTITY((subgroup_local_id % 2), uint(uvec4((subgroup_local_id % 2), 1u, 1u, 1u)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (~ ((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))), _GLF_IDENTITY(~ ((subgroup_local_id % 2)), 1u * (~ ((subgroup_local_id % 2)))))), ~ (~ _GLF_IDENTITY((~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) % 2))))), ((~ _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))))) ^ 0u)))) ^ 0u))) == 0, _GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, 0u | (0u))))) == 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, 0u | (0u))))) == 0), true && (false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, 0u | (0u))))) == 0)))), bool(bvec4(! (_GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, 0u | (0u))))) == 0), true && (false || (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, 0u | (0u))))) == 0)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) || false))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, min(subgroup_local_id % 2, subgroup_local_id % 2)))), (~ _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) / 1u), max(((subgroup_local_id % 2)), _GLF_IDENTITY(((subgroup_local_id % 2)), 0u | (((subgroup_local_id % 2))))))) >> 0u)) ^ 0u))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, max(0, 0))))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, max(0, 0))))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0)), true && (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), 0u, 0u, 1u))))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, (0) / 1))), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, max(0, 0))))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0))))) && true))))), ! (! (true && (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, min(subgroup_local_id % 2, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))))) << 0u) % 2)))), (~ _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) / 1u), max(((subgroup_local_id % 2)), _GLF_IDENTITY(((subgroup_local_id % 2)), 0u | (((subgroup_local_id % 2))))))) >> 0u)) ^ 0u))) == 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), _GLF_IDENTITY((int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, max(0, 0))))) / 1, ((int(ivec3(0, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), (false ? _GLF_FUZZED(-29273) : (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(0, max(0, 0))))) / 1) - 0)), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))), 0u, 1u)), (false ? _GLF_FUZZED(subgroup_id) : uint(uvec3(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))), 0u, 1u))))) == 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 0, 0))))), 1, 1), max(ivec4(2, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 0, 0))))), 1, 1), ivec4(2, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 0, 0))))), 1, 1))))), (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) >> 0)))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) - 0u)) ^ 0u)))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0)), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, max(0, 0))))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u))) == 0)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), 0u, 0u, 1u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), 0u, 0u, 1u))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), 0u, 0u, 1u)))))))), (~ (_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), 0u, 0u, 1u))))))))) * 1u))), _GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u))), (~ ((subgroup_local_id % 2))) ^ 0u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u)), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), uint(uvec4(_GLF_IDENTITY(~ ((subgroup_local_id % 2)), (~ ((subgroup_local_id % 2))) ^ 0u), 0u, 0u, 1u))))))))) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))))), 0)), max(_GLF_IDENTITY(int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(0, (0) / 1))), (int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(0, max(0, 0))))) / 1), int(ivec3(0, (0 >> _GLF_IDENTITY(int(7), int(7))), 0))))), false || (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), _GLF_IDENTITY((~ ((subgroup_local_id % 2))) ^ 0u, max((~ ((subgroup_local_id % 2))) ^ 0u, (~ ((subgroup_local_id % 2))) ^ 0u))))) == 0))))) && true)))))))))), false, false, true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5)))) ^ 0), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))))) / 1, ~ (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(int(5), int(5)), 0))), _GLF_IDENTITY(int(5), int(5)))))))) / 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5)))) ^ 0), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))))) / 1, ~ (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(int(5), int(5)), 0))), _GLF_IDENTITY(int(5), int(5)))))))) / 1)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5)))) ^ 0), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))))) / 1, ~ (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(int(5), int(5)), 0))), _GLF_IDENTITY(int(5), int(5)))))))) / 1))))) + 0)) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5)))) ^ 0), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))))) / 1, ~ (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(int(5), int(5)), 0))), _GLF_IDENTITY(int(5), int(5)))))))) / 1))))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), max(uint(2), uint(2))), 4, 64, 4);
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(82.41)), float(injectionSwitch.y), bool(true))))))))))))))) || false)) && true))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))), int(ivec4(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))), 1, 1, 1)))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec3(1, 0, 1)))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0), (1 & (1 & 1)) * (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_ONE(1.0, injectionSwitch.y), 0.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec2(cos(0.0), 1.0), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(cos(0.0), 1.0), (vec2(cos(0.0), 1.0)) - vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-19.98)), ((true ? 0.0 : _GLF_FUZZED(-19.98))) - 0.0)), 0.0))), 0.0))).y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), false)))))) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 8))))) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(cos((79.42 * 529.571))))) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * cos(0.0)), injectionSwitch.x)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | 0)) << 0))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(_GLF_IDENTITY(int(2), (int(2)) << 0)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = ((_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 0) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(2), 4, 64, _GLF_IDENTITY(4, (4) << 0));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3615.6841)), float(0.0), bool(true))), injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
}
