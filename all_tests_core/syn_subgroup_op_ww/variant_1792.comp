#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))), 0))); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-1973)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 & 7601); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (ivec2(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) / ivec2(1, 1)))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, (0) | (0)), ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) / 1), (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(5), int(5))) >> 0)) >> _GLF_IDENTITY(int(5), int(5)))), ivec2(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, min(0, 0)) : _GLF_FUZZED(11651))), 0) + (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, (0) | (0)), ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) / 1), (1 << _GLF_IDENTITY(int(5), int(5))) >> 0)) >> _GLF_IDENTITY(int(5), int(5)))), min(ivec2(_GLF_IDENTITY(0, (0) | (0)), ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) / 1), (1 << _GLF_IDENTITY(int(5), int(5))) >> 0)) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec3(5, 0, 1)), ~ (~ (int(ivec3(5, 0, 1)))))))))), ivec2(_GLF_IDENTITY(0, (0) | (0)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) ^ 0), (1 << _GLF_IDENTITY(int(5), int(5))) / 1), (1 << _GLF_IDENTITY(int(5), int(5))) >> 0)) >> _GLF_IDENTITY(int(5), int(5)))))))), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(0, (0) | (0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) / ivec2(1, 1), ivec2(1, 1) * (_GLF_IDENTITY((ivec2(_GLF_IDENTITY(0, (0) | (0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) >> 0)) ^ 0)))))) / ivec2(1, 1), ((ivec2(_GLF_IDENTITY(0, (0) | (0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), int(_GLF_IDENTITY(5, (5) | (5))))))) / ivec2(1, 1)) - ivec2(0, 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, (0) | (0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (ivec2(_GLF_IDENTITY(0, (0) | (0)), ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (5) | 0), 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))))) / ivec2(1, 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) / 1u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true))))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, min(0, 0)))))) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0)))))))) / 1))))) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size)), 0u | ((((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0)))))))) / 1))))) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size)))))) >> 0u)) - (0u & 36318u)), (workgroup_base + subgroup_base + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, 0u), min(uvec3(subgroup_local_id, 1u, 0u), uvec3(subgroup_local_id, 1u, 0u)))))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size)) - (0u & 36318u))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(workgroup_base))), uint(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 1u, 0u, _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY(uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))) - 0u)), min(uvec4(1u, 1u, 1u, 1u), uvec4(1u, _GLF_IDENTITY(1u, min(1u, 1u)), 1u, 1u))) * (uvec4(workgroup_base + subgroup_base, 1u, 0u, 0u))))) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), ((1)) / 1))) ^ 0)))) % subgroup_size, ~ (~ ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), ((1)) / 1))) ^ 0))), int(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), ((1)) / 1))) ^ 0))))))) % subgroup_size))))) - _GLF_IDENTITY((0u & 36318u), ((0u & 36318u)) - (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size)) - (0u & 36318u)), (workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size))), (uint(subgroup_size)) ^ 0u))))) - 0u, ~ (~ ((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), (_GLF_IDENTITY((uint(subgroup_size)), max((uint(subgroup_size)), (uint(subgroup_size))))) | 0u) ^ 0u))))) - 0u)))))), max(((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_size))), (uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, min(1u, 1u))), subgroup_size, subgroup_size)))) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), min(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)) | (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))))) - 0u))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), ~ (~ ((uint(subgroup_size))))) ^ 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(_GLF_IDENTITY(uint(subgroup_size), 0u ^ (_GLF_IDENTITY(uint(subgroup_size), uint(uint(uint(subgroup_size)))))), uint(subgroup_size))), max(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), uint(uint(uint(uvec2(subgroup_size, 0u))))))), _GLF_IDENTITY(uint(subgroup_size), (uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) ^ 0u))))) - 0u))))))), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))), _GLF_IDENTITY(1, (1) ^ 0)))), max((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(1, (1) ^ 0)), ~ (~ (min(1, _GLF_IDENTITY(1, (1) ^ 0))))))))) % subgroup_size)) - (0u & 36318u)), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u, ~ (_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u), max(_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u), 0u ^ (~ ((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), ~ ((uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)))))))), max((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(uvec2(101605u, _GLF_IDENTITY(1721u, (_GLF_IDENTITY(1721u, ~ (~ (1721u)))) - 0u)).x) : subgroup_size)), (false ? _GLF_FUZZED(workgroup_size) : subgroup_size))), (uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)))) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), 0u | (uint(subgroup_size))), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> 0u), (uint(subgroup_size)) ^ 0u))), (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))) | (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), 0u + (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u)), min(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))))))), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size), _GLF_IDENTITY(uint(uint(((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size))), (uint(uint(((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size)))) >> 0u))) - (0u & 36318u))), max(0u + (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), max(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(_GLF_IDENTITY(uint(subgroup_size), clamp(uint(subgroup_size), uint(subgroup_size), uint(subgroup_size))), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_size))), (uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)))) ^ 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))) | (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))) >> 0u))) - 0u))), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u)), min(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(_GLF_IDENTITY(uint(subgroup_size), 1u * (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), (uint(subgroup_size)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), min(uint(subgroup_size), uint(subgroup_size))), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), (_GLF_IDENTITY(uint(subgroup_size), (uint(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) ^ 0u)) | (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))))))), (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))), clamp(~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))), (true ? ~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) : _GLF_FUZZED(-88675))), ~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))))))))) % subgroup_size)) - (0u & 36318u))), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_local_id + 1) : _GLF_FUZZED(atomicOr(subgroup_id, workgroup_id)))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), max(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 0u)))))) << (0u ^ _GLF_IDENTITY(0u, 0u | (0u))))) : subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)))), 0u ^ ((uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, subgroup_size)))))), ((uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u))) / 1u), subgroup_size, subgroup_size))))) << 0u) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u)), _GLF_IDENTITY(min(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), 0u)))), ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), ((uint(subgroup_size))) ^ 0u) ^ 0u))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), ((uint(subgroup_size))) ^ 0u) ^ 0u))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), ((uint(subgroup_size))) ^ 0u) ^ 0u))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)))))), (_GLF_IDENTITY(min(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u)))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), ((uint(subgroup_size))) ^ 0u) ^ 0u))), _GLF_IDENTITY(uint(subgroup_size), max(_GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) | 0u)) | (_GLF_IDENTITY(uint(subgroup_size), clamp(uint(subgroup_size), uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), 0u + (uint(subgroup_size))))))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)))), (true ? min(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), 0u)))), ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) >> 0u)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)), (_GLF_IDENTITY((uint(subgroup_size)), ((uint(subgroup_size))) - 0u)) ^ 0u) ^ 0u))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), clamp(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), (true ? _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u) : _GLF_FUZZED(workgroup_size)))))))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)))) : _GLF_FUZZED(num_workgroup)))) * 1u)))), (((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(0, (0) / 1) >> _GLF_IDENTITY(int(6), int(6))) ^ (1)), (1) ^ 0)))) % subgroup_size)) - (0u & 36318u))), (0u + (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) | (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))), max(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : subgroup_size), (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : subgroup_size), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : subgroup_size), 0u ^ ((false ? _GLF_FUZZED(workgroup_size) : subgroup_size))))))) | ((_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(workgroup_size) : subgroup_size))))), (uint(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), subgroup_size, subgroup_size)))) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) | (subgroup_size)))) ^ 0u))))) - 0u))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), 1u * (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u)) - 0u), max(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) - 0u), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))), (1u ^ 1u) ^ ((_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))))) >> 0u)))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))), (1u ^ 1u) ^ ((_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))))) >> 0u)))))) - 0u))) >> 0u)) / 1u), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u), max(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u), min((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u), (subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u))), (subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u))), ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u)) >> 0u))), _GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY(_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u))), (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) - (0u | 0u))) >> 0u)))))) - 0u))) / 1u), ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))) | (_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))))) - 0u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u, ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), _GLF_IDENTITY((uint(subgroup_size)) ^ 0u, (_GLF_IDENTITY((uint(subgroup_size)) ^ 0u, ~ (~ ((uint(subgroup_size)) ^ 0u)))) >> 0u)))))) - 0u))) / 1u) | 0u))) + (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))), min(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))))) - 0u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))))) - 0u), 0u, 1u, 0u)), max(uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))))) - 0u), 0u, 1u, 0u)), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))))) - 0u), 0u, 1u, 0u))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))), max(_GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u)))), _GLF_IDENTITY(uint(subgroup_size), max(uint(subgroup_size), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(subgroup_size), max(uint(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | 0u)))), _GLF_IDENTITY(uint(subgroup_size), (uint(subgroup_size)) ^ 0u))))) - 0u))))))), (((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size)) - (0u & 36318u)))) + (0u & 118298u)))))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), clamp((_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), (_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), (_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))))))))) % subgroup_size)) - (0u & 36318u)), 0u + (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), clamp((_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), (_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) * 1)))) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, false))) ? 1 : _GLF_FUZZED(-28686))))))))), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), clamp((_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), (_GLF_IDENTITY(1, (1) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-28686))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) * 1)))) ^ 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, false))) ? 1 : _GLF_FUZZED(-28686)))))))))) >> 0u) % subgroup_size)) - (0u & 36318u)))), workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))), ((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))))) * _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) + 0u)) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size) - (0u ^ 0u)))) - (0u & 36318u))))));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 & _GLF_IDENTITY(70794, max(70794, 70794))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))), (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0)))) | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, 1)), min(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))), (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0)))) | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, 1)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))), (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0)))) | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1), 0))))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, 1))))))), ~ (~ (_GLF_IDENTITY(1, max(1, 1)))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
          return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (bool(bool(false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))))))))) + 0u)], uint(1), _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) >> 0))), 64, 4);
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 0.0, 0.0))) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) % 2) == _GLF_IDENTITY(0, min(0, 0)))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(3)) ^ 0)), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(3)) ^ 0)), ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(4, 4, 4))))) >> _GLF_IDENTITY(int(4), int(4))), 1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec4((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(3)) ^ 0)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 1)), 1), (true ? ivec2(int(ivec4((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(3)) ^ 0)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 1)), 1) : _GLF_FUZZED(ivec2(-2090, 61458)))))))), int(3)))); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) ^ 0), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY((1 & 1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 & 1))) - 0))); _injected_loop_counter ++)
                                    {
                                     subgroupAll(true);
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         do
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) || false))))), ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), (bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))) && true))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, true, false))))))))))), false, true)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch))) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && true), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), (! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              break;
                             return;
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             continue;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = (-10095 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1))), (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_injected_loop_counter)) != 1) && true)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(33.50)), vec2(_GLF_FUZZED((+ 2865.6389)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))) && true)))
                                    {
                                    }
                                   else
                                    {
                                     subgroupAll(false);
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))) ? _GLF_FUZZED(174.777) : _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) > injectionSwitch.y))));
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
}
