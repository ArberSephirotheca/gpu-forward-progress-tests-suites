#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)), (bool(bvec2(_GLF_IDENTITY(true, (true) && true), false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(0, 0 | (0)) : _GLF_FUZZED(ivec3(-80108, -41861, 27346).g))))) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) ^ 0)) ^ 0)], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))[2])), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u))[1], _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))[2])), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) ^ 0)) ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))), 1))), (0) | (0)))), 0, 0)))], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (false ? _GLF_FUZZED(uvec2(91338u, 121409u)[1]) : gl_NumWorkGroups[2])))))))), clamp(min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, ~ (~ ((0) ^ 0))))) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))))), min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) | ((0) ^ 0)))) ^ 0)], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u), (_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u)) | (_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u))), _GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u), _GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u)))))), gl_NumWorkGroups[2])), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], min(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], ~ (~ (gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)]))))), gl_NumWorkGroups[1], gl_NumWorkGroups[2])))))), min(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]), (false ? _GLF_FUZZED(uvec3(130452u, 172618u, 18472u)) : _GLF_IDENTITY(uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]), (uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | (uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))), (_GLF_IDENTITY(uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]), (false ? _GLF_FUZZED(uvec3(130452u, 172618u, 18472u)) : _GLF_IDENTITY(uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]), (uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | (uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))))) << (uvec3(0u, 0u, 0u) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(-77589))) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]), (true ? uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(-77589))) ^ 0)) ^ 0)], gl_NumWorkGroups[1], gl_NumWorkGroups[2]) : _GLF_FUZZED(uvec3(105255u, 151989u, 19825u))))), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) ^ 0)], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], 1u * (_GLF_IDENTITY(gl_NumWorkGroups[2], 0u ^ (gl_NumWorkGroups[2]))))))))))))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / uint(_GLF_ONE(1.0, injectionSwitch.y)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(9690.2875)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false))), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(determinant(mat3(-7751.0036, _GLF_IDENTITY(-1949.3212, (_GLF_IDENTITY(-1949.3212, mix(float(_GLF_FUZZED(1.3)), float(-1949.3212), bool(true)))) * _GLF_IDENTITY(dot(vec3(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)))), 9208.3972, 19.20, _GLF_IDENTITY(_GLF_IDENTITY(1987.3626, 0.0 + (1987.3626)), (1987.3626) / 1.0), -98.35, 4.5, 723.997, -3.9))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))) - 0.0) > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && true)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
          barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(930.331)), bvec2(true, false))))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(930.331)), bvec2(true, false))))))))).y))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, (true) || false), true)))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bool((false)))), false)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1032.3392), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(219.367)), bvec2(true, false))).y))))) || false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), false, true, false))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1234.4745) : injectionSwitch.y))) / 1.0)))))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(1, (1) | (1)))), ~ (~ (1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), (min(_injected_loop_counter, _injected_loop_counter)) / 1)), _injected_loop_counter)), (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter), (clamp(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) - 0)) : _GLF_FUZZED(_injected_loop_counter))), _injected_loop_counter)) != (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), injectionSwitch.x), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, _GLF_IDENTITY(dot(-7.2, -818.974), (_GLF_IDENTITY(dot(-7.2, -818.974), float(mat3x4(dot(-7.2, -818.974), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0)))) - 0.0))) : 0.0)), injectionSwitch.x), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), injectionSwitch.x), _GLF_IDENTITY(float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))), float(mat3x4(float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0))))) << _GLF_IDENTITY(int(3), int(3)), int(ivec2(int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, _GLF_IDENTITY(-3498.4906, mix(float(-3498.4906), float(_GLF_FUZZED(3.0)), bool(false))), _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)))))), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0), (mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)) * mat4(1.0)))))), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3)), 1))), int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6284.3778), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5569.9128)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) * vec2(1.0, 1.0)).y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), injectionSwitch.x), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3)), int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), injectionSwitch.x), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, _GLF_IDENTITY(-3498.4906, max(-3498.4906, -3498.4906)), _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), injectionSwitch.x), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3)), 0 | (int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, _GLF_IDENTITY(dot(-7.2, -818.974), (dot(-7.2, -818.974)) - 0.0))) : 0.0)), injectionSwitch.x), float(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(1565.8304, -3498.4906, dot(-7.2, _GLF_IDENTITY(-818.974, 0.0 + (-818.974))))) : 0.0)), injectionSwitch.x))))) << _GLF_IDENTITY(int(3), int(3)))))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, 0 | (1)) ^ 0))) || false); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) && _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(true))), ! (! ((! (_GLF_WRAPPED_IF_TRUE(true))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) - (0 >> _GLF_IDENTITY(int(1), int(1)))))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-614.684) : 1.0)))))) / vec2(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, length(0.0), sqrt(0.0)))))), injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-614.684) : 1.0)))))) / vec2(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, length(0.0), sqrt(0.0)))))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-614.684) : 1.0)))))) / vec2(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, length(0.0), sqrt(0.0)))))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-614.684) : 1.0)))))) / vec2(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, length(0.0), sqrt(0.0)))))), injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), max(0u ^ (subgroup_local_id), 0u ^ (subgroup_local_id)))))) + 1) % subgroup_size), min(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id)))))))) + 1) % subgroup_size), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size)), 0u ^ ((((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size)), (_GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size)), uint(uvec3((((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1) % subgroup_size)), 0u, (1u ^ 0u))))) | 0u) - 0u)))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ (1 & 1)) ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), clamp(~ (virtual_gid), ~ (virtual_gid), _GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))))), _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))], uint(1), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) >> 0)) + (1 ^ 1)), 64)), 4);
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).y)), bool(bool(injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.1))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) * mat2(1.0)), max(injectionSwitch, injectionSwitch)))).y))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), clamp(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), clamp(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))))), vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.4)), float(0.0), bool(true))), sqrt(1.0), 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0))).y)), false, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))) || false), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1.9)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec4(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec4(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), true))))))), _GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec4(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec4(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, true), true))))))), _GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))))) || false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (231 & 0)); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, true && (true)), true, true))), false, false, false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-5.5)), bool(false)))))))))))))
            {
             for(int _injected_loop_counter = (1 ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & 41199) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, max(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))), true, true)))))), bool(bvec2(bool(false), false)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, false))), true), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && true, false))), true), true), false)))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY((true) && true, ! (! ((true) && true)))) && (false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), bool(bvec3(bool(bvec4(true, true, true, true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && (false))) || false), _GLF_IDENTITY(false, true && (false)), true, true)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, false)))))), (bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, false, false))))))) || false)))))));
          }
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) % 2), ((subgroup_local_id % 2)) - 0u) == 0)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1))), (_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); _injected_loop_counter ++)
          {
           subgroupAll(true);
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (true ? _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-22418))), _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))), (true ? min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(51597))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0)))), clamp(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0)))), int(ivec4(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0)))), 1, 0, 0)))) | 0), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0)))))), int(4)))) - 0))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))))) / ivec3(1, 1, 1)), (ivec3(_GLF_IDENTITY(2, min(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), 0 + (_GLF_IDENTITY(2, ~ (~ (2))))), 2)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) * (0 << _GLF_IDENTITY(int(4), int(4))))) - 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, exp(sin(0.0)), 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, exp(0.0), 1.0, 1.0))).x > injectionSwitch.y)) ? _GLF_FUZZED(75590) : _GLF_IDENTITY(1, 1 * (1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) | ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << 0)))), (true ? (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), max((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))))), max(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) : _GLF_FUZZED((uvec2(66199u, _GLF_IDENTITY(154624u, (true ? 154624u : _GLF_FUZZED((true ? 118985u : workgroup_size))))) , -90687)))) ^ 0)))) | ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)) << 0), 0))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY((2), clamp((2), (2), _GLF_IDENTITY((2), min((2), (2))))) | (2))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))), max(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY((2), clamp((2), (2), _GLF_IDENTITY((2), min((2), (2))))) | (2))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))), _GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY((2), clamp((2), (2), _GLF_IDENTITY((2), min((2), (2))))) | (2))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))), (0 << _GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, ~ (~ (1))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, 0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(0, (0) | (0))))), ((ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) / 1), (_GLF_IDENTITY(0, ~ (~ (0))) << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) << 0), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) << 0), (_GLF_IDENTITY(3, (3) << 0)) - 0), 1 * (_GLF_IDENTITY(3, (3) << 0)))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, 0, 0)) | ivec3(0, 0, 0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(54420), min(_GLF_FUZZED(54420), _GLF_FUZZED(54420))) : 3), min(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(54420) : 3), 0 ^ ((false ? _GLF_FUZZED(54420) : 3))), ((false ? _GLF_FUZZED(54420) : 3)) * 1), _GLF_IDENTITY((false ? _GLF_FUZZED(54420) : 3), ((false ? _GLF_FUZZED(54420) : 3)) | ((false ? _GLF_FUZZED(54420) : 3))))))) - 0), 3))), _GLF_IDENTITY(int(3), 0 ^ (int(3)))))), (false ? _GLF_FUZZED(clamp(ivec3(94324), 59174, -59903)) : _GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) + 0)), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54420) : 3))) - 0), 3))), int(3)))), (true ? _GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) + 0)), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54420) : 3))) - 0), 3))), int(3)))), ivec3(_GLF_IDENTITY(ivec3(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) + 0)), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54420) : 3))) - 0), 3))), int(3))))), max(ivec3(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) + 0)), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54420) : 3))) - 0), 3))), int(3))))), ivec3(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) + 0)), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54420) : 3))) - 0), 3))), int(3))))))))) : _GLF_FUZZED(ivec3(21035, -40743, -48731)))))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((2) | (2), ((2) | (2)) * 1), ~ (~ (_GLF_IDENTITY((2) | (2), ((2) | (2)) * 1)))))) / 1), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), (_GLF_IDENTITY((ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((2) | (2), ((2) | (2)) * 1), ~ (~ (_GLF_IDENTITY((2) | (2), ((2) | (2)) * 1)))))) / 1), (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ivec3(0, 0, 0) | ((ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((2) | (2), ((2) | (2)) * 1), ~ (~ (_GLF_IDENTITY((2) | (2), ((2) | (2)) * 1)))))) / _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (~ (1))), 1))), (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))) - ivec3(0, 0, 0)) | ivec3(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))), 0, 0, 1))), max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), int(int(0)))))) / 1))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(2, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) - 0)))), ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) ^ 0)), int(4)))) / (1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (true ? 1 : _GLF_FUZZED(-73448))))))), ((_GLF_IDENTITY(1, 0 ^ (1)) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, max(3, 3))))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((ivec3(2, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), int(4)))))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))))) | ivec3(0, 0, 0), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(ivec3(-20430, -95675, 10267)) : _GLF_IDENTITY((ivec3(2, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), ((0 << _GLF_IDENTITY(int(4), int(4)))) / 1), (0 << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), ((0 << _GLF_IDENTITY(int(4), int(4)))) >> 0))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), (int(3))))))))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 0, 0)), 0 ^ (int(ivec4(0, 0, 0, 0)))))), ((ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, 0, 0)) * (ivec3(1, 1, 1) & ivec3(1, 1, 1))))))), _GLF_IDENTITY(0 ^ (int(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(4, 1))), min(_GLF_IDENTITY(4, int(ivec2(4, 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(4, 1))), clamp(_GLF_IDENTITY(4, int(ivec2(4, 1))), _GLF_IDENTITY(4, int(ivec2(4, 1))), _GLF_IDENTITY(4, int(ivec2(4, 1)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 + (1)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) + 0))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) + 0))), min(~ (~ (_GLF_IDENTITY(1, (1) + 0))), ~ (~ (_GLF_IDENTITY(1, (1) + 0)))))) | (~ (~ (_GLF_IDENTITY(1, (1) + 0)))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))), (_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3)))), ivec3(ivec3(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3)))), clamp(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3)))), ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3)))), ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3)))))))))) | ivec3(0, _GLF_IDENTITY(0, (0) * 1), 0)))), 0 | (_GLF_IDENTITY(0 ^ (int(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 + (1)))), ~ (~ (_GLF_IDENTITY(1, (1) + 0)))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))))) | ivec3(0, _GLF_IDENTITY(0, (0) * 1), 0)))), _GLF_IDENTITY(int(ivec2(0 ^ (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, (2) - (0 >> _GLF_IDENTITY(int(3), int(3)))), (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 + (1)))), ~ (~ (_GLF_IDENTITY(1, (1) + 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))))) | ivec3(0, _GLF_IDENTITY(0, (0) * 1), 0)))), 0)), ~ (~ (int(ivec2(0 ^ (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, (2) - (0 >> _GLF_IDENTITY(int(3), int(3)))), (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 + (1)))), ~ (~ (_GLF_IDENTITY(1, (1) + 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))))) | ivec3(0, _GLF_IDENTITY(0, (0) * 1), 0)))), 0))))))))))))), (uint(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) - 0))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(atomicLoad(-18495, 61859, -78631, -32977))))) >> _GLF_IDENTITY(int(3), int(3))))) / ivec3(1, 1, 1)), max(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) - 0))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(atomicLoad(-18495, 61859, -78631, -32977))))) >> _GLF_IDENTITY(int(3), int(3))))) / ivec3(1, 1, 1)), _GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(2, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) - 0))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(atomicLoad(-18495, 61859, -78631, -32977))))) >> _GLF_IDENTITY(int(3), int(3))))) / ivec3(1, 1, 1)))), (ivec3(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, ~ (~ (2))), 2)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) * (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 1))))))) - 0, ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) * (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 1))))))) - 0) * 1))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), max((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) | 0), max((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) : _GLF_FUZZED((uvec2(66199u, 154624u) , -90687)))) ^ 0), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-65541) : 3))))), (true ? (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-65541) : 3))))) : _GLF_FUZZED(34102))) >> _GLF_IDENTITY(int(3), int(3)), max((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), int(ivec2((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 1)))) | ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(44256))), max((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((52794 | 81644)))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) : _GLF_FUZZED((uvec2(66199u, 154624u) , -90687)))) ^ 0)) + 0)))) | ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)) << 0), 0))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) / 1), (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), 0 ^ ((3))) << 0)), min(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), 0 ^ ((3))) << 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), 0 ^ ((3))) << 0)), (false ? _GLF_FUZZED(88696) : _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), 0 ^ ((3))) << 0)), 0 | (int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), 0 ^ ((3))) << 0)))))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) >> 0))))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, 0))), ((ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) / 1), (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, 0, 0)) | ivec3(0, 0, 0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(2, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(0 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), int(ivec3(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), int(int(0 << _GLF_IDENTITY(int(4), int(4))))), 0, 1)))))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (3))), (true ? int(_GLF_IDENTITY(3, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (3))) : _GLF_FUZZED(-30739))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54420) : 3))) - 0), 3))), _GLF_IDENTITY(int(3), 0 ^ (int(3)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(clamp(ivec3(94324), 59174, -59903), (clamp(ivec3(94324), 59174, -59903)) | ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) : ivec3(2, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, max(4, 4)), 4))), int(4))) >> 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 0, 1, 0)), (int(ivec4(3, 0, 1, 0))) + 0)), clamp(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? _GLF_FUZZED(54420) : 3))) - 0), 3))), _GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), ((2) | (2)) * 1))) / 1), (0 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) | ivec3(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))), 0, 0, 1))), max(0, _GLF_IDENTITY(0, int(int(0))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))), 0, 0, 1))), max(0, _GLF_IDENTITY(0, int(int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))), 0, 0, 1))), max(0, _GLF_IDENTITY(0, int(int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))), 0, 0, 1))), max(0, _GLF_IDENTITY(0, int(int(0)))))))) / 1))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(2, _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) ^ (0 << _GLF_IDENTITY(int(0), int(0)))))) / (1 & 1)), ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 ^ (1)) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, max(3, 3))))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((ivec3(2, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1) << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0, (0) * 1) << _GLF_IDENTITY(int(4), int(4))) ^ 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))), (true ? 1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))) : _GLF_FUZZED((-63822 ^ 34072))))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> _GLF_IDENTITY(int(3), int(3))) << 0)) + 0)))) | ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-20430, -95675, 10267)) : _GLF_IDENTITY((ivec3(2, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0))) << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (3) ^ 0), 3))), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> _GLF_IDENTITY(int(3), int(3))))), ~ (~ ((ivec3(2, (_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(74509) : 3))), int(3)))))))) | ivec3(0, 0, 0))))), 0 ^ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1)), (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1))) | (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1))))), _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0)))), (true ? clamp(1, 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0)))) : _GLF_FUZZED(18208)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (true ? _GLF_IDENTITY(1, (1) + 0) : _GLF_FUZZED(-16797)))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))), max(ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1)), (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1))) | (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1))))), _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0)))), (true ? clamp(1, 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0)))) : _GLF_FUZZED(18208)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (true ? _GLF_IDENTITY(1, (1) + 0) : _GLF_FUZZED(-16797)))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))), ivec3(2, (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1)), (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1))) | (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 << _GLF_IDENTITY(int(3), int(3))), 1))))), _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0)))), (true ? clamp(1, 1, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0)))) : _GLF_FUZZED(18208)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (true ? _GLF_IDENTITY(1, (1) + 0) : _GLF_FUZZED(-16797)))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))))), (ivec3(2, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(_GLF_IDENTITY(4, int(ivec3(4, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | _GLF_IDENTITY((3), min((3), (3))))), int(3))))) | ivec3(0, _GLF_IDENTITY(0, (0) * 1), 0)))))))))) << 0u), 4, 64, 4);
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))))), true)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           do
            {
             subgroupAll(false);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), 0 | (_GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), _GLF_IDENTITY(int(3), max(int(3), int(3)))), min(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), 1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))))) ^ 0)) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))).x > injectionSwitch.y))))))))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
