#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id;
 uvec4 GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz = GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size;
 uvec4 GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base;
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.xy = GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 do
  {
   GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.xy = GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.xy;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.w = subgroup_local_id;
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.y = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.w;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.xy.y = workgroup_id;
 uint workgroup_base = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.z * GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.xy.y;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.w = workgroup_base;
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.z = subgroup_base;
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.x = GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.z;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.w = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.x;
  }
 else
  {
  }
 uint virtual_gid = GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.w + GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.w + GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.y;
 GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.xy.x = virtual_gid;
 uint next_virtual_gid = GLF_merged3_0_2_48_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_baseworkgroup_base.w + GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.w + ((GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.y + 1) % subgroup_size);
 GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.z = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.xy.x], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if((GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_sizesubgroup_local_id.xyz.y % 2) == 0)
      {
       subgroupAll(true);
       atomicStore(buf[GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.z], uint(2), 4, 64, 4);
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       atomicStore(buf[GLF_merged3_0_2_48_2_1_16_3_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidsubgroup_base.z], uint(2), 4, 64, 4);
      }
    }
  }
}
