#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ _GLF_IDENTITY((_injected_loop_counter ++), (_GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) | 0)) >> _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-53067) : _GLF_IDENTITY(0, ~ (~ (0))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, false)))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ~ (~ (_GLF_IDENTITY((8), ((8)) + 0)))) ^ _GLF_IDENTITY(0, (0) ^ 0))), int(8)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) ^ 0)), int(_GLF_IDENTITY(8, (8) >> 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) ^ 0)), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (46105 & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false))))), ! _GLF_IDENTITY((! (false)), true && ((! (false))))))))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(822.112)), float(injectionSwitch.x), bool(true)))) * 1.0) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(822.112)), float(injectionSwitch.x), bool(true)))) * 1.0) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(822.112)), float(injectionSwitch.x), bool(true)))) * 1.0) > injectionSwitch.y), false, false))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(822.112)), float(injectionSwitch.x), bool(true)))) * 1.0) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(822.112)), float(injectionSwitch.x), bool(true)))) * 1.0) > injectionSwitch.y), false, false))), false, false)))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))) + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec3(0u, (0u ^ 1u), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), 0u ^ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))) ^ 0u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(sin(sin(0.0)), float(mat4x2(sin(sin(0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))) < injectionSwitch.y)) ? _GLF_IDENTITY(0u ^ _GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(max(0u ^ 0u, 0u ^ 0u), (_GLF_IDENTITY(max(0u ^ 0u, 0u ^ 0u), (_GLF_IDENTITY(max(0u ^ 0u, 0u ^ 0u), min(_GLF_IDENTITY(max(0u ^ 0u, 0u ^ 0u), 0u + (max(0u ^ 0u, 0u ^ 0u))), _GLF_IDENTITY(max(0u ^ 0u, 0u ^ 0u), ~ (~ (max(0u ^ 0u, 0u ^ 0u))))))) | (max(0u ^ 0u, 0u ^ 0u)))) | (_GLF_IDENTITY(max(_GLF_IDENTITY(0u ^ _GLF_IDENTITY(0u, min(0u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(0u, max(0u, 0u)) ^ 0u)), 0u ^ 0u), (_GLF_IDENTITY(max(0u ^ 0u, 0u ^ 0u), (true ? max(0u ^ 0u, 0u ^ 0u) : _GLF_FUZZED(subgroup_size)))) >> _GLF_IDENTITY(0u, min(0u, 0u)))))) : _GLF_FUZZED(workgroup_id)))) ^ (subgroup_local_id + 1))) % subgroup_size);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, _GLF_IDENTITY(1, (1) / 1)), (clamp(_GLF_IDENTITY(1, min(1, 1)), 1, _GLF_IDENTITY(1, (1) / 1))) | (clamp(_GLF_IDENTITY(1, min(1, 1)), 1, _GLF_IDENTITY(1, (1) / 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), true), true)))))))))))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
        return;
      }
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(50.27), _GLF_FUZZED(-401.671)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, int(int(1)))))), 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), 0u + (subgroup_local_id)), 1u, 0u))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), 1u, 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), 1u, 0u))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), 1u, 0u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), 1u, 0u))))), 0u)))))) << 0u) + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0, int(ivec3(0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) | (_injected_loop_counter)) != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(29152) : 2)))))), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(false);
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ 0, int(ivec3(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | 0), 1, 1)))), ~ (~ (~ (_GLF_IDENTITY(0 ^ 0, int(ivec3(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | 0), 1, 1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(_injected_loop_counter))), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != 0, (_GLF_IDENTITY(_injected_loop_counter, int(int(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 0))), _injected_loop_counter, _injected_loop_counter))))) != 0) || false))) && true); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (0 & -74600); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)));
   subgroupAll(true);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true)), false || (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true))))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) << 0))))) | ((0 | 0))), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (0 | 0) << 0))))) | ((0 | 0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) | (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) << 0))))) | ((0 | 0))), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (0 | 0) << 0))))) | ((0 | 0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) | (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) << 0))))) | ((0 | 0))), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (0 | 0) << 0))))) | ((0 | 0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) | (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | 0)) | ((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) << 0))))) | ((0 | 0))), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (_GLF_IDENTITY(0 | 0, (0 | 0) << 0))))) | ((0 | 0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) | (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0)))) | ((0 | 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((0 | 0), ((0 | 0)) | ((_GLF_IDENTITY(0, 0 | (0)) | 0))))) | (0 >> _GLF_IDENTITY(int(4), int(4)))))), bool(bvec4(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0), ((0 | 0)) | _GLF_IDENTITY(((0 | 0)), _GLF_IDENTITY((((0 | 0))), ((((0 | 0)))) + 0) ^ 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, sqrt(1.0), 0.0, 1.0))))))) << _GLF_IDENTITY(int(4), int(4)))) - 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) | _GLF_IDENTITY(((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0)))), (((0 | 0))) ^ 0)) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))), _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0, ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0, max(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0)))))))), int(ivec3(_GLF_IDENTITY((0 | 0), ((0 | 0)) | _GLF_IDENTITY(((0 | 0)), (_GLF_IDENTITY(((0 | 0)), (((0 | 0))) | (((0 | 0))))) ^ 0)) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (true ? _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-28861)))) - 0), ~ (~ (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), 0 | (int(4))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0))), 0, 0))), _GLF_IDENTITY((0 | 0), ((0 | 0)) | _GLF_IDENTITY(((0 | 0)), (((0 | 0))) ^ 0)) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), max(0 >> _GLF_IDENTITY(int(4), int(4)), 0 >> _GLF_IDENTITY(int(4), int(4))))) | (0 >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(_GLF_ZERO(0.0, injectionSwitch.x))))))) << 0)))) / 1))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))), _GLF_IDENTITY(int(4), 0 | (int(4))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))))), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4))))) - 0), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (4))), int(4))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (4))), int(4))), 0 ^ ((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (4))), int(4)))))))) - 0))), _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) | _GLF_IDENTITY(((0 | 0)), (((0 | 0))) ^ 0)) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0))), (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) | _GLF_IDENTITY(((0 | 0)), (((0 | 0))) ^ 0)) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (true ? (0 >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, max(4, 4)))))) << 0)))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))) - 0)))))))))), false, true, true))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6))))), min(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6)))))) / 1), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6)))))))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) - 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6)))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))));
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) - (64807 & 0)), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
}
