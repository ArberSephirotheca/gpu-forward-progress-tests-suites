#version 460
struct _GLF_struct_17 {
 mat2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 bvec3 _f1;
 mat3x4 _f2;
 mat4 _f3;
 vec3 _f4;
 mat4x3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_15 {
 mat3x2 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 int _f3;
 mat4x2 _f4;
 uint num_workgroup;
} ;

struct _GLF_struct_18 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_17 _f2;
 uint _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_14 {
 mat3 _f0;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 uint _f1;
 float _f2;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 bvec2 _f1;
 ivec3 _f2;
 float _f3;
 float _f4;
 bvec4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 ivec3 _f1;
 bool _f2;
 float _f3;
 mat4 _f4;
 mat4 _f5;
 float _f6;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 ivec3 _f2;
 int _f3;
 uint _f4;
 _GLF_struct_12 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_8 {
 bool _f0;
 uvec2 _f1;
 mat3 _f2;
 bvec2 _f3;
 bvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 uvec4 _f1;
 int _f2;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
 _GLF_struct_7 _f1;
 mat2x4 _f2;
 _GLF_struct_8 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 mat4x2 _f1;
 mat2 _f2;
 uvec2 _f3;
 mat4x2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 int _f1;
 bvec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 bool _f1;
 uvec2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_19 {
 _GLF_struct_6 _f0;
 mat4x2 _f1;
 vec4 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_14 _f5;
 _GLF_struct_18 _f6;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat2x3 _f1;
 vec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 _GLF_struct_0 _f1;
 uint subgroup_size;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 ivec3 _f1;
 uvec4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(uvec3(1u), _GLF_struct_0(bvec2(true), mat2x3(1.0), vec4(1.0), uvec3(1u)), gl_SubgroupSize), ivec3(1), uvec4(1u));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_6(mat3x4(1.0), true, uvec2(1u), _GLF_struct_3(mat2x3(1.0)), _GLF_struct_4(ivec4(1), 1, bvec4(true), 1u), _GLF_struct_5(mat4x3(1.0), mat4x2(1.0), mat2(1.0), uvec2(1u), mat4x2(1.0), mat2x4(1.0))), mat4x2(1.0), vec4(1.0), _GLF_struct_9(uvec4(1u), _GLF_struct_7(ivec3(1), uvec4(1u), 1), mat2x4(1.0), _GLF_struct_8(true, uvec2(1u), mat3(1.0), bvec2(true), bvec2(true), uvec4(1u)), mat4x2(1.0)), _GLF_struct_13(_GLF_struct_10(mat3x2(1.0), ivec3(1), true, 1.0, mat4(1.0), mat4(1.0), 1.0), _GLF_struct_11(vec4(1.0), bvec2(true), ivec3(1), 1.0, 1.0, bvec4(true), mat4x2(1.0)), ivec3(1), 1, 1u, _GLF_struct_12(mat4(1.0), 1u, 1.0), mat2x4(1.0)), _GLF_struct_14(mat3(1.0)), _GLF_struct_18(_GLF_struct_15(mat3x2(1.0), mat3x4(1.0), ivec3(1), 1, mat4x2(1.0), gl_NumWorkGroups.x), _GLF_struct_16(ivec4(1), bvec3(true), mat3x4(1.0), mat4(1.0), vec3(1.0), mat4x3(1.0), ivec2(1)), _GLF_struct_17(mat2(1.0), ivec2(1)), 1u, mat2x4(1.0)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_2._f0.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_2._f0.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_2._f0.subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_2._f0.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}
