#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true) ? gl_NumWorkGroups : _GLF_IDENTITY(_GLF_FUZZED(uvec3(167831u, 198514u, 20842u)), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(_GLF_FUZZED(uvec3(167831u, 198514u, 20842u)), uvec3(uvec3(_GLF_FUZZED(uvec3(167831u, 198514u, 20842u))))), (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 0u + (_GLF_IDENTITY(uint(3u), 0u ^ (uint(3u))))))))), (uvec3(uvec4(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(167831u, 198514u, 20842u), _GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), max(_GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), clamp(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), _GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), uvec3(0u, 0u, 0u) | (min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))), min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))), min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(167831u, 198514u, 20842u), _GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), max(_GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), clamp(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), _GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), uvec3(0u, 0u, 0u) | (min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))), min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))), min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u))))), (_GLF_IDENTITY(uvec3(167831u, 198514u, 20842u), _GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), max(_GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), clamp(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), _GLF_IDENTITY(min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)), uvec3(0u, 0u, 0u) | (min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))), min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))), min(uvec3(167831u, 198514u, 20842u), uvec3(167831u, 198514u, 20842u)))))) - uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 0u + (uint(3u)))))))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) * 1u))), clamp(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), ~ (_GLF_IDENTITY(~ (~ (1u)), min(~ (~ (1u)), ~ (~ (1u)))))))), _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, ~ (~ (1u)))))))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true && _GLF_IDENTITY((bool(false)), ! (! ((bool(false))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true && (bool(false)), ! _GLF_IDENTITY((! (true && (bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (true && (bool(false)))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true && (bool(false)), ! (! (_GLF_IDENTITY(true && (bool(false)), (true && (bool(false))) && true))))), bool(bvec2((_GLF_IDENTITY(true && (bool(false)), ! (! (true && (bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(true && (bool(false)), ! (! (true && (bool(false)))))), bool(bool((_GLF_IDENTITY(true && (bool(false)), ! (! (true && (bool(false)))))))))), true && (false || (_GLF_IDENTITY((_GLF_IDENTITY(true && (bool(false)), ! (! (true && (bool(false)))))), bool(bool((_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, false))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true && (bool(false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(true && (bool(false)), (true && (bool(false))) || false)), (true && (_GLF_IDENTITY(true && (bool(false)), (true && (bool(false))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((! (true && (bool(false))))), false || (! ((! (true && (bool(false)))))))))))))))))), bool(bvec2(! (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, ! (! ((bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))) || false))))))), ! (! (true && (bool(false)))))), true)))), ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && (bool(false)), ! (! (true && (bool(false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true && (bool(false)), ! (! (true && (bool(false)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(true && _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((bool(false)), false), bvec2(bvec4(bvec2((bool(false)), false), false, false)))), true && (bool(_GLF_IDENTITY(bvec2((bool(false)), false), bvec2(bvec4(bvec2((bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false), false, false))))))), ! (! (true && (_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))))))), (bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(true && _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((bool(false)), false), bvec2(bvec4(bvec2((bool(false)), false), false, false)))), true && (bool(_GLF_IDENTITY(bvec2((bool(false)), false), bvec2(bvec4(bvec2((bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false), false, false))))))), ! (! (true && (_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))))))), ! (! (_GLF_IDENTITY(true && _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((bool(false)), false), bvec2(bvec4(bvec2((bool(false)), false), false, _GLF_IDENTITY(false, ! (! (false))))))), true && (bool(_GLF_IDENTITY(bvec2((bool(false)), false), bvec2(bvec4(bvec2((bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), false), false, false))))))), ! (! (true && (_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true), false, false, false))))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true), false, false, false))))))), true && (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true), false, false, false))))))), (true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))) || false, _GLF_IDENTITY(((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false))) && true), false, false, false)))))))) || false)))) || false), ! (! (true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false))))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && (bool(_GLF_IDENTITY(false, true && (false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true), false, false, false))))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true), false, false, false))))))), true && (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true), false, false, false))))))), (true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) || false, bool(bvec4(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))) || false, _GLF_IDENTITY(((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false))) && true), false, false, false)))))))) || false)))) || false), ! (! (true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false))))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && (bool(_GLF_IDENTITY(false, true && (false))))))))) && true), true))))) && true))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_DEAD(false)) && true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false))), true)))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), true, true))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && true); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-178.845)), float(injectionSwitch.x), bool(true)))), 1.0, 1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 0.0))), (mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-178.845)), float(injectionSwitch.x), bool(true)))), 1.0, 1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 0.0))), (mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-178.845)), float(injectionSwitch.x), bool(true)))), 1.0, 1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 0.0))), (mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))[1]), vec2(_GLF_FUZZED((+ 18.96)), _GLF_FUZZED((- -3.5))), bvec2(false, false))), _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0)))), 1.0)), (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0))))), 1.0, 1.0, 0.0, 1.0))) - _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))))), mix(float(_GLF_FUZZED(-2696.7541)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), (clamp(0.0, 0.0, 0.0)) + 0.0))), bool(true)))))), bool(true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))))), mix(float(_GLF_FUZZED(-2696.7541)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true)))))), bool(true)))), min(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0))), _GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(bool(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), mix(float(_GLF_FUZZED(-2696.7541)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(1942.6998, min(_GLF_IDENTITY(1942.6998, mix(float(_GLF_FUZZED(-4.3)), float(1942.6998), bool(true))), 1942.6998)))), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true)))))), bool(true)))), vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(1942.6998, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1942.6998 : _GLF_FUZZED(2.2))))), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))))), mix(float(_GLF_FUZZED(-2696.7541)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true)))))), bool(true)))))))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-178.845)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), ! (! (bool(true))))))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1.8)))), _GLF_IDENTITY(mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), ((0.0)) - 0.0)), 1.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)))))), (mat3(mat3x4(mat3(injectionSwitch, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + _GLF_IDENTITY((0.0), ((0.0)) - 0.0)), 1.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 0.0))))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) / mat3(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-787.302)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0))), bool(true))), 1.0))))), _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(sin(0.0), mix(float(sin(0.0)), float(_GLF_FUZZED(vec3(-756.272, 977.619, 86.01).s)), bool(false)))), 1.0)), _GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), min((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), _GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), (_GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), ((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0)))) * mat2(1.0)), 0.0)), min(_GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), ((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0)))) * mat2(1.0)), 0.0)), min(vec2(vec3(_GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), ((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0)))) * mat2(1.0)), 0.0)), vec2(vec3(_GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), ((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0)))) * mat2(1.0)), 0.0)))), vec2(vec3(_GLF_IDENTITY((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0))), ((vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(660.692))), 0.0, 1.0)))) * mat2(1.0)), 0.0)))))) - vec2(0.0, 0.0)))) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1942.6998)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))) * workgroup_id) << 0u), workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)), workgroup_id))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false, false, false)), (bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false, false, false))) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), (bool(bvec3(_GLF_DEAD(false), false, true))) && _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! (_GLF_IDENTITY(true, true && (true)))) && true))), true && (true)))) || false) && true))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 0, (1 | 0) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))) : _GLF_FUZZED(41874))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(837.335)), float(injectionSwitch[1]), bool(true))))).x > injectionSwitch.y)))))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), true, true, false))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (1u | 1u) * (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_id)))) * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id))) * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size) + 0u)))))) - 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (1u | 1u) * (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_id)))) * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id))) * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size) + 0u)))))) - 0u) | 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)), ~ (~ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)), ~ (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))), min(~ (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))), ~ (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)))))))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))) % subgroup_size, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) / 1))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) / 1))))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) / 1))))))), 1u, (0u ^ 0u)), (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) / 1))))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) / 1))))))), 1u, (0u ^ 0u))) ^ uvec3(0u, 0u, 0u)))) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), ~ (~ (subgroup_local_id + 1)))) % subgroup_size, clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), clamp(_GLF_IDENTITY(~ (subgroup_local_id + 1), uint(uvec4(~ (subgroup_local_id + 1), 0u, 0u, 0u))), ~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 1)), (int(ivec3(1, 0, 1))) << 0)), subgroup_local_id + 1)), ~ (~ (subgroup_local_id + 1)))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), ~ (~ (subgroup_local_id + 1)))) % subgroup_size)), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (subgroup_local_id + 1)), max(~ (~ (subgroup_local_id + 1)), ~ (~ (subgroup_local_id + 1))))), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))))))) | 0u))))) % subgroup_size) / 1u, (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))))) % subgroup_size) / 1u) | (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (subgroup_local_id + 1)), (~ (~ (subgroup_local_id + 1))) + 0u)), max(_GLF_IDENTITY(subgroup_local_id + 1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1))))))))), 0u | ((~ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))))))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))))) % subgroup_size) / 1u))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))))
      {
       for(int _injected_loop_counter = (0 & -91508); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) >> 0) < 1)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) >> 0) < 1)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) >> 0) < 1))))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (true) || false))))))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), ((1)) | 0), (1))), _GLF_IDENTITY((1), ((_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, 1)), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))) / 1))) ^ 0), int(ivec3(_GLF_IDENTITY(1, (1) ^ 0), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED((-911.908)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-13.31) : 0.0)))), injectionSwitch.x)), 1)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) * 1)), 4, 64, 4);
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) ^ 0u) < subgroup_size)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            return;
           if(_GLF_DEAD(false))
            break;
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(24854)))), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), _GLF_IDENTITY((bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true))))) && true)))
        return;
       subgroupAll(false);
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(18.62, 0.0)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y : _GLF_FUZZED(-0.0))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              {
              }
             else
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), clamp(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))));
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       subgroupAll(true);
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((injectionSwitch.x > injectionSwitch.y) || false))) && true))))))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         return;
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) << 0))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true))), _GLF_IDENTITY(false, bool(bool(false))))), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), bool(bvec2(bool(bvec4(true, true, true, false)), false))))) || false), false))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                return;
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
}
