#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_28 {
 mat3x4 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_25 {
 int _f0;
 bvec4 _f1;
 bvec3 _f2;
 ivec2 _f3;
 mat2x4 _f4;
 mat2x3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_24 {
 mat4x3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 ivec3 _f3;
 mat4x2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_26 {
 ivec3 _f0;
 uvec3 _f1;
 _GLF_struct_24 _f2;
 ivec2 _f3;
 mat2x3 _f4;
 _GLF_struct_25 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_22 {
 int _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_21 {
 bvec3 _f0;
 mat4x3 _f1;
 vec3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
 bool _f1;
 ivec2 _f2;
 _GLF_struct_21 _f3;
 _GLF_struct_22 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 bool _f1;
 mat2 _f2;
 bvec4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_20 {
 uint workgroup_size;
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_17 {
 bvec4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 _GLF_struct_17 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_27 {
 bvec3 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_23 _f3;
 mat2x4 _f4;
 _GLF_struct_26 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_15 {
 int _injected_loop_counter;
 uint _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 vec3 _f1;
 bvec4 _f2;
 int _f3;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 mat4x3 _f1;
 mat4x3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 mat3 _f2;
 vec3 _f3;
 _GLF_struct_12 _f4;
 vec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 ivec3 _f1;
 bool _f2;
 mat4x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 mat3x4 _f1;
 uvec3 _f2;
 vec3 _f3;
 bvec4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 bvec3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 mat3x2 _f1;
 int _f2;
 mat2x4 _f3;
 bvec2 _f4;
 bvec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 mat2 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_2 {
 bool _f0;
 ivec4 _f1;
 bvec2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 mat3x2 _f1;
 mat2x4 _f2;
 uvec3 _f3;
 bvec2 _f4;
 uvec3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_14 {
 _GLF_struct_3 _f0;
 mat4 _f1;
 _GLF_struct_9 _f2;
 uint virtual_gid;
 vec3 _f3;
 _GLF_struct_13 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(bvec3(true), _GLF_struct_18(bvec3(true), _GLF_struct_17(bvec4(true), bvec4(true)), mat3x4(1.0)), _GLF_struct_20(gl_WorkGroupSize.x, _GLF_struct_19(bvec3(true), true, mat2(1.0), bvec4(true), ivec3(1))), _GLF_struct_23(mat4(1.0), true, ivec2(1), _GLF_struct_21(bvec3(true), mat4x3(1.0), vec3(1.0), mat4x3(1.0)), _GLF_struct_22(1, ivec4(1)), vec4(1.0)), mat2x4(1.0), _GLF_struct_26(ivec3(1), uvec3(1u), _GLF_struct_24(mat4x3(1.0), mat3x4(1.0), mat2x4(1.0), ivec3(1), mat4x2(1.0), ivec4(1)), ivec2(1), mat2x3(1.0), _GLF_struct_25(1, bvec4(true), bvec3(true), ivec2(1), mat2x4(1.0), mat2x3(1.0), mat4x3(1.0)), mat2x4(1.0)), mat3x2(1.0));
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(mat3x4(1.0), gl_WorkGroupID.x);
 uint workgroup_base = _GLF_struct_replacement_27._f2.workgroup_size * _GLF_struct_replacement_28.workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_3(mat4x2(1.0), _GLF_struct_0(1, mat4x2(1.0)), _GLF_struct_1(mat2x4(1.0), mat3x2(1.0), mat2x4(1.0), uvec3(1u), bvec2(true), uvec3(1u), ivec3(1)), _GLF_struct_2(true, ivec4(1), bvec2(true), mat3x2(1.0)), mat4(1.0)), mat4(1.0), _GLF_struct_9(_GLF_struct_4(ivec2(1), mat3x2(1.0), 1, mat2x4(1.0), bvec2(true), bvec3(true), mat2x3(1.0)), _GLF_struct_5(mat2x4(1.0), uvec4(1u)), mat2(1.0), _GLF_struct_6(mat4(1.0), bvec3(true), mat2x3(1.0)), _GLF_struct_7(mat4(1.0), mat3x4(1.0), uvec3(1u), vec3(1.0), bvec4(true), vec2(1.0)), _GLF_struct_8(uvec4(1u), ivec3(1), true, mat4x3(1.0), bvec2(true))), workgroup_base + subgroup_base + subgroup_local_id, vec3(1.0), _GLF_struct_13(_GLF_struct_10(mat3(1.0), mat4x3(1.0), mat4x3(1.0), ivec3(1)), _GLF_struct_11(vec3(1.0), bvec4(true)), mat3(1.0), vec3(1.0), _GLF_struct_12(vec2(1.0), vec3(1.0), bvec4(true), 1), vec4(1.0), bvec3(true)));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   atomicStore(buf[_GLF_struct_replacement_14.virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))))); _injected_loop_counter --)
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if((subgroup_local_id % 2) == 0)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(true);
              }
             else
              {
              }
             do
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             for(_GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_15(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> (0 << _GLF_IDENTITY(int(5), int(5)))))), 1u, ivec3(1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_16._f0._injected_loop_counter > 0); _GLF_struct_replacement_16._f0._injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   subgroupAll(false);
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
}
