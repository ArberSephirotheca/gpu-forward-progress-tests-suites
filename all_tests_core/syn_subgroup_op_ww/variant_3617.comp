#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 vec4 _f0;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 bvec4 _f1;
 float _f2;
 uvec3 _f3;
 uint _f4;
 float _f5;
 mat3 _f6;
} ;

struct _GLF_struct_7 {
 int _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_6 {
 uint num_workgroup;
 ivec3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 vec3 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 ivec4 _f1;
 bvec4 _f2;
 uvec3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_3 {
 int _f0;
 mat2x4 _f1;
 bvec4 _f2;
 float _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 bvec4 _f1;
 float _f2;
 vec2 _f3;
 bvec2 _f4;
 mat4 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_2 _f0;
 mat4x3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_10 _f3;
 mat2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1861.6455)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), injectionSwitch)).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) && true)) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 1) | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_2(_GLF_struct_0(mat3x4(1.0), mat2x3(1.0)), _GLF_struct_1(vec3(1.0), bvec4(true), 1.0, _GLF_IDENTITY(vec2(1.0), (true ? vec2(1.0) : _GLF_FUZZED(injectionSwitch))), bvec2(true), mat4(1.0), mat2x4(1.0))), mat4x3(1.0), _GLF_struct_5(_GLF_struct_3(1, mat2x4(1.0), bvec4(true), 1.0), _GLF_struct_4(mat3x2(1.0), ivec4(1), bvec4(true), uvec3(1u), mat4(1.0))), _GLF_struct_10(_GLF_struct_6(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)))), (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)))))) ^ _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))), uvec3(1u, 1u, 1u) * ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))))))).x, ivec3(1), vec4(1.0)), vec3(1.0), _GLF_struct_7(1, uvec2(1u)), _GLF_struct_8(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) - mat2(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (0.0) * determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY((mat2(1.0)) - mat2(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (0.0) * determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 0.0, 0.0), transpose(transpose((mat2(1.0)) - mat2(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (0.0) * determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 0.0, 0.0)))))))), bvec4(true), 1.0, uvec3(1u), 1u, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), (true ? clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))) : _GLF_FUZZED(-831.638))))) - _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-25.95)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true))), mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-25.95)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true)))), float(_GLF_FUZZED(float(126091u))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), mat3(1.0)), _GLF_struct_9(vec4(1.0)), vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2(mat2x4(mat2(1.0)))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
      {
       barrier();
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), ~ (~ (subgroup_id * subgroup_size)))) ^ 0u) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     break;
    }
   if(_GLF_DEAD(false))
    continue;
   atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(10040) : 1)), 1))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))).y) || false))) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid))], uint(2), 4, 64, 4);
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (17688 & 0)); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), false))))))
            barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)), bool(bvec3((_GLF_IDENTITY(false, (false) || false)), true, true))))))) && true));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && true))));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
            }
           break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1))), int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(1, clamp(1, 1, 1)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) * 1), 0, _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | 0)))), 0 | (min(_GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | 0))))))))))), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(19290), _GLF_IDENTITY(min(_GLF_FUZZED(19290), _GLF_FUZZED(19290)), (min(_GLF_FUZZED(19290), _GLF_IDENTITY(_GLF_FUZZED(19290), ~ (~ (_GLF_FUZZED(19290)))))) + 0)) : ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY((~ (int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, 1), clamp(1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))))), max((~ (int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, 1), clamp(1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))))), (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, 1), clamp(1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))))))) - (0 << _GLF_IDENTITY(int(7), int(7)))))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0)))))) | 0)), ~ (~ (int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), max((false ? _GLF_FUZZED(43993) : int(1)), (false ? _GLF_FUZZED(43993) : int(1))))) + 0)))))), ~ (~ (1))))), 1, 1)))))))))), 1), (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1))) ^ 0)), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(_GLF_IDENTITY(1, (1) | (1)))))) << 0))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0))))) | 0)) >> 0), max(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY(0, 0 ^ (0))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-86613), min(_GLF_FUZZED(-86613), _GLF_FUZZED(-86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, _GLF_IDENTITY(1, (1) / 1)))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))), 0)) ^ ivec2(0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(int(1))), 1)), 1, 1))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)), (true ? _GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | (_GLF_IDENTITY(clamp(1, 1, 1), int(ivec2(clamp(1, 1, 1), 1))))))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)) : _GLF_FUZZED(ivec2(-52986, 60473)))))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))) | 0) : _GLF_FUZZED(86471)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, min(-86613, -86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)) | (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0)))), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) - 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) - 0)))))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0))), (false ? _GLF_FUZZED(23103) : int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) << ivec2(0, 0)), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0), ivec2(0, 0) + ((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, 0 + (-86613))) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) >> 0)) | (clamp(1, 1, 1))), ~ (~ (clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1))))), 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)))), clamp(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0)))))) | 0)), ~ (~ (int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), max((false ? _GLF_FUZZED(43993) : int(1)), (false ? _GLF_FUZZED(43993) : int(1))))) + 0)))))), ~ (~ (1))))), 1, 1)))))))))), 1), (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1))) ^ 0)), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(_GLF_IDENTITY(1, (1) | (1)))))) << 0))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0))))) | 0)) >> 0), max(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY(0, 0 ^ (0))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-86613), min(_GLF_FUZZED(-86613), _GLF_FUZZED(-86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, _GLF_IDENTITY(1, (1) / 1)))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))), 0)) ^ ivec2(0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(int(1))), 1)), 1, 1))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)), (true ? _GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | (_GLF_IDENTITY(clamp(1, 1, 1), int(ivec2(clamp(1, 1, 1), 1))))))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)) : _GLF_FUZZED(ivec2(-52986, 60473)))))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))) | 0) : _GLF_FUZZED(86471)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, min(-86613, -86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)) | (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0)))), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) - 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) - 0)))))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0))), (false ? _GLF_FUZZED(23103) : int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) << ivec2(0, 0)), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0), ivec2(0, 0) + ((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, 0 + (-86613))) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) >> 0)) | (clamp(1, 1, 1))), ~ (~ (clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1))))), 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0)))))) | 0)), ~ (~ (int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), max((false ? _GLF_FUZZED(43993) : int(1)), (false ? _GLF_FUZZED(43993) : int(1))))) + 0)))))), ~ (~ (1))))), 1, 1)))))))))), 1), (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1))) ^ 0)), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(_GLF_IDENTITY(1, (1) | (1)))))) << 0))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0))))) | 0)) >> 0), max(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY(0, 0 ^ (0))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-86613), min(_GLF_FUZZED(-86613), _GLF_FUZZED(-86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, _GLF_IDENTITY(1, (1) / 1)))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))), 0)) ^ ivec2(0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(int(1))), 1)), 1, 1))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)), (true ? _GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | (_GLF_IDENTITY(clamp(1, 1, 1), int(ivec2(clamp(1, 1, 1), 1))))))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)) : _GLF_FUZZED(ivec2(-52986, 60473)))))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))) | 0) : _GLF_FUZZED(86471)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, min(-86613, -86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)) | (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0)))), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) - 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) - 0)))))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0))), (false ? _GLF_FUZZED(23103) : int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) << ivec2(0, 0)), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0), ivec2(0, 0) + ((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, 0 + (-86613))) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) >> 0)) | (clamp(1, 1, 1))), ~ (~ (clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1))))), 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) >> 0))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (ivec2(0, 0)))))) | 0)), ~ (~ (int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(43993) : int(1)), max((false ? _GLF_FUZZED(43993) : int(1)), (false ? _GLF_FUZZED(43993) : int(1))))) + 0)))))), ~ (~ (1))))), 1, 1)))))))))), 1), (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1))) ^ 0)), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(_GLF_IDENTITY(1, (1) | (1)))))) << 0))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (0 ^ 0) ^ (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0))))) | 0)) >> 0), max(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY(0, 0 ^ (0))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-86613), min(_GLF_FUZZED(-86613), _GLF_FUZZED(-86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, _GLF_IDENTITY(1, (1) / 1)))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))), 0)) ^ ivec2(0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(int(1))), 1)), 1, 1))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)), (true ? _GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | (_GLF_IDENTITY(clamp(1, 1, 1), int(ivec2(clamp(1, 1, 1), 1))))))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)) : _GLF_FUZZED(ivec2(-52986, 60473)))))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))) | 0) : _GLF_FUZZED(86471)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, min(-86613, -86613))) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1)) | (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0)))), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) - 0)), 0 ^ (~ (_GLF_IDENTITY(1, (1) - 0)))))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0))), (false ? _GLF_FUZZED(23103) : int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0)) << ivec2(0, 0)), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(-86613) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0), ivec2(0, 0) + ((ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1)))), (clamp(1, 1, 1)) >> 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-86613, 0 + (-86613))) : int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) >> 0)) | (clamp(1, 1, 1))), ~ (~ (clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 1 * (~ (1))))), 1, 1))))) / (1 ^ 0)))))), 0)) ^ ivec2(0, 0)))))))), ~ (~ (int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 1))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))))) > (_GLF_IDENTITY(0 | 0, ~ (~ (_GLF_IDENTITY(0 | 0, int(_GLF_IDENTITY(ivec4(0 | 0, 1, 1, 0), (ivec4(0 | 0, 1, 1, 0)) - ivec4(0, 0, 0, 0))))))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((1 ^ 1), min((1 ^ 1), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) << 0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))), 0u | ((_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))))], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) / _GLF_IDENTITY(1, clamp(1, 1, 1)))), max(_GLF_IDENTITY(uint(2), (false ? _GLF_FUZZED(162352u) : uint(2))), _GLF_IDENTITY(uint(2), (uint(2)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(max((false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), (false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))), (max((false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), int(ivec4(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), (1 | 1), 1, 1)))), (false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_FUZZED(_injected_loop_counter)))))))) / 1))) >> 0), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(62611, (62611) - 0), (62611) | (62611))) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))), 0 | ((false ? _GLF_FUZZED(62611) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
}
