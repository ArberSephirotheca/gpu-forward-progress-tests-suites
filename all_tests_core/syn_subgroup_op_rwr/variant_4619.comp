#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), (false) || false)));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(64.73)), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (8) - 0)) / 1)), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.0) : injectionSwitch.x)))), 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), mat2(1.0) * (mat4x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.0) : injectionSwitch.x)))), 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))))) > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y), float(_GLF_FUZZED(-2.4)), bool(false)))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY((mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), transpose(_GLF_IDENTITY(transpose((mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), (transpose((mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))) * mat3(1.0)))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.0) : injectionSwitch.x)))), 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0), mat2(1.0) * (mat4x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.0) : injectionSwitch.x)))), 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0))))))) > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, false || (true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) >> ((0u & 47217u) >> _GLF_IDENTITY(uint(8u), uint(8u)))) | (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base)))), workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (subgroup_size) * 1u), 0u, 0u, 0u))) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + _GLF_IDENTITY((1u), 0u | ((1u)))), ~ (~ (_GLF_IDENTITY(1u, 0u + (1u))))))), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(subgroup_local_id, subgroup_local_id)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))))), 1u, 1u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, 1u)), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, 1u))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, 1u)), (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, 1u)), 0u | (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, 1u))))) >> 0u)))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))) | (max(subgroup_local_id, subgroup_local_id)))))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), ~ (~ (_GLF_IDENTITY(1u, 0u + (1u))))))), max(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(subgroup_local_id, subgroup_local_id)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))))), _GLF_IDENTITY(1u, min(1u, 1u)), 1u)), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(subgroup_local_id, subgroup_local_id)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))))), _GLF_IDENTITY(1u, min(1u, 1u)), 1u))) * 1u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))) >> 0u))) | (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))), 1u, 1u))))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))) + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false))), (false) || _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || ((false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))))))), true))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
        {
        }
       else
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = ((_GLF_IDENTITY(0, (50663 & 0) ^ (0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(_GLF_IDENTITY(4, (4) | 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, int(ivec2(2, (0 | 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(int(int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(int(int(2)))), (_GLF_IDENTITY(int(2), int(int(int(2))))) >> 0)) | (_GLF_IDENTITY(int(2), int(int(int(2))))))) << 0), 1 * (int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! (_injected_loop_counter != (1 | int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.8)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), (false ? _GLF_FUZZED(-7883.2917) : _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.8)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.x)))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), (false) || false), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))))) || (! (_injected_loop_counter != (1 | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(float((152589u >= 103636u)))), float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))), log(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))).x)), bool(true))))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), false))))))), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, false || (true))), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), false))))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), true)))))))))), _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(bool((false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), bool(bool((false)))), false, true)))))) || false)), _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && (true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! ((! ((injectionSwitch.x < injectionSwitch.y)))), (! ((! ((injectionSwitch.x < injectionSwitch.y))))) || false))))), bool(bvec2(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), true)))))))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), false))))))), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), false))))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), true)))))))))), _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(bool((false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), bool(bool((false)))), false, true)))))) || false)), _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(true, false || (true)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), true)))))))), bool(bvec3(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), false))))))), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, true), false))))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(false, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec2(false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, true)))), true)))))))))), _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(bool((false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), bool(bool((false)))), false, true)))))) || false)), _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && (true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), true)))))))), false, true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
          return;
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, (false) && true)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((false), false), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5325.4044), _GLF_FUZZED(4.2)), bvec2(false, false))).x > injectionSwitch.y)) || (true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2((false), false), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5325.4044), _GLF_FUZZED(4.2)), bvec2(false, false))).x > injectionSwitch.y)) || (true))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2((false), false), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5325.4044), _GLF_FUZZED(4.2)), bvec2(false, false))).x > injectionSwitch.y)) || (true))), true)), true))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2((false), false), true)), bvec2(bvec4(bvec2(bvec3(bvec2((false), false), true)), true, false)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), true, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), true))), false)))))), true, false))))))))) && _GLF_IDENTITY(true, ! (! (true))))) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1, (read_1) / 1u)), (true ? ~ (_GLF_IDENTITY(read_1, (read_1) / 1u)) : _GLF_FUZZED(workgroup_base))))), read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec2(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u)))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))))))) >> 0u))) : _GLF_FUZZED(workgroup_base))) + 1)) | (uint(_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(read_1, 1u, (107131u & 0u))), 0u ^ (uint(uvec3(read_1, 1u, (107131u & 0u))))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 1u, (107131u & 0u))), 1u)))))) + 1, (_GLF_IDENTITY(1u, (1u) << 0u) | 1u)), max(uvec2(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(read_1, 1u, (107131u & 0u))), 0u ^ (uint(uvec3(read_1, 1u, (107131u & 0u))))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 1u, (107131u & 0u))), 1u)))))) + 1, (_GLF_IDENTITY(1u, (1u) << 0u) | 1u)), uvec2(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(read_1, 1u, (107131u & 0u))), 0u ^ (uint(uvec3(read_1, 1u, (107131u & 0u))))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 1u, (107131u & 0u))), 1u)))))) + 1, (_GLF_IDENTITY(1u, (1u) << 0u) | 1u)))))))), clamp((uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> _GLF_IDENTITY(0u, 0u + (0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u, 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u)), 0u ^ (max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(4u), uint(4u))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(4u), uint(4u))), clamp((0u << _GLF_IDENTITY(uint(4u), uint(4u))), (0u << _GLF_IDENTITY(uint(4u), uint(4u))), (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))) / 1u))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u))))) : _GLF_FUZZED(workgroup_base))) + 1)) | (uint(_GLF_IDENTITY(read_1 + 1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec3(read_1, 1u, _GLF_IDENTITY((107131u & 0u), (_GLF_IDENTITY((107131u & 0u), (true ? _GLF_IDENTITY((107131u & 0u), min((107131u & 0u), (107131u & 0u))) : _GLF_FUZZED(workgroup_size)))) << 0u))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 1u, (107131u & 0u))), 1u)))))) + 1, (_GLF_IDENTITY(1u, (1u) << 0u) | 1u)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, _GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_id) : read_1)))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u)), min(max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, min(read_1, read_1))) ^ 0u))), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))))) / (uint(_GLF_ONE(1.0, injectionSwitch.y)) | 0u)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (read_1)), min(read_1, read_1)), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))), 1u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u))))) : _GLF_FUZZED(workgroup_base))) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1)))) | (uint(_GLF_IDENTITY(read_1 + 1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec3(read_1, 1u, (107131u & 0u))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(read_1, (read_1) | (read_1)), 1u, (107131u & 0u))), 1u)))))) + 1, (_GLF_IDENTITY(1u, (1u) << 0u) | 1u)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec4(read_1, 1u, 1u, (1u & 1u)), (false ? _GLF_FUZZED(uvec4(162133u, 78821u, 107048u, 114904u)) : uvec4(read_1, 1u, 1u, (1u & 1u)))))), min(read_1, _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u ^ (read_1))) | 0u))), 1u, 1u, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) + 0u)))))) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | 0u)) | 0u), read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)), uint(uvec4(_GLF_IDENTITY(read_1, min(read_1, read_1)), 1u, 1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))) >> 0u))) : _GLF_FUZZED(workgroup_base))) + 1)) | (uint(_GLF_IDENTITY(read_1 + 1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1, 1u, (_GLF_IDENTITY(107131u, max(107131u, 107131u)) & 0u)), _GLF_IDENTITY(uvec3(uvec4(uvec3(read_1, 1u, (_GLF_IDENTITY(107131u, max(107131u, 107131u)) & 0u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), 0u | (uint(8u))), uint(8u))))), ~ (~ (uvec3(uvec4(uvec3(read_1, 1u, (_GLF_IDENTITY(107131u, max(107131u, 107131u)) & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))))), uint(uvec2(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (read_1)), ~ (~ (_GLF_IDENTITY(read_1, (read_1) | (read_1))))), 1u, (_GLF_IDENTITY(107131u & 0u, (107131u & 0u) | (107131u & 0u))))), 1u)))))) + 1, (_GLF_IDENTITY(1u, (1u) << 0u) | 1u))))))))), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x))))))) - 0.0) > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY((_injected_loop_counter != 1) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))) && true)))))); _injected_loop_counter ++)
      {
       if(subgroup_local_id + 1 < subgroup_size)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, true)), true, true)))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))), true, true))))))));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) ^ 0)); _injected_loop_counter --)
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))));
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         do
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY((read_1) - 0u, _GLF_IDENTITY(~ (~ ((read_1) - 0u)), 0u | (~ (~ ((read_1) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((read_1) - 0u, ~ (_GLF_IDENTITY(~ ((read_1) - 0u), 0u ^ (~ ((read_1) - 0u))))), 0u ^ (_GLF_IDENTITY((read_1) - 0u, ~ (_GLF_IDENTITY(~ ((read_1) - 0u), 0u ^ (~ ((read_1) - 0u)))))))) | ((read_1) - 0u))) + 1 == _GLF_IDENTITY(read_2, min(read_2, read_2))) + 1, 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2x3(mat2x3(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 0.0))))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2x3(mat2x3(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 0.0), mat2x3(mat2x3(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)))) / sqrt(1.0)), injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 0.0))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(false))
            break;
          }
         subgroupAll(false);
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))))))))
              return;
            }
          }
         do
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, 0u + _GLF_IDENTITY((read_1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : (read_1)))) + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), (1) | (1)))) == _GLF_IDENTITY(read_2, (read_2) | (read_2))), (false ? _GLF_FUZZED((++ (read_2))) : uint(read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) | (read_2))))) + 1, 4, 64, 4);
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), true, true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-9196.0920)), bool(false))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         subgroupAll(true);
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(490.523)), float(injectionSwitch.y), bool(true))))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) || false), true, false)))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))), ! (! (false)))));
}
