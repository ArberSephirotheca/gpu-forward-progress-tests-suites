#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), bool(bvec4(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))) && true), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)))) || false) && (true)) && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))) && true))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), _GLF_FUZZED(982.563)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0), (injectionSwitch)[1]), bvec2(true, true))).x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), (vec4(1.0, 0.0, 0.0, 0.0)) - tan(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), float(vec2(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), mat4(1.0) * (vec4(1.0, 0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), 0.0), vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9542.8780) : 1.0)), 0.0, 0.0, 0.0))), 1.0))))), (true ? float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9893.4269)), vec2(_GLF_FUZZED(1666.0784), (injectionSwitch)[1]), bvec2(false, true))).x), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(681.230)), float(1.0), bool(true))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 0.0))))) : _GLF_FUZZED(1.3)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x, _GLF_IDENTITY((false ? _GLF_FUZZED(-2.1) : injectionSwitch.x), mix(float((false ? _GLF_FUZZED(-2.1) : injectionSwitch.x)), float(_GLF_FUZZED(6.2)), bool(false))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)), false, true)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(0u, 0u))))), 0u) ^ (gl_NumWorkGroups)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))).x, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), (uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)) + uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))).x) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) / 1.0)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, 0u, 0u), max(uvec4(gl_WorkGroupSize.x, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 0u, 0u, 0u), max(uvec4(gl_WorkGroupSize.x, 0u, 0u, 0u), uvec4(gl_WorkGroupSize.x, 0u, 0u, 0u)))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat2x3(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), min(vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), _GLF_IDENTITY(vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), clamp(vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)))))), (vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))) + vec2(0.0, 0.0)), vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), vec2(mat2x3(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), exp(0.0), 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, sqrt(0.0), length(0.0), 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)))))).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY((vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0))) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), mat2(1.0) * ((vec2(mat4x2(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0))) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))).y))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size + subgroup_local_id, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(num_workgroup) : uint(2u))), uint(2u))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (0u ^ 0u) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id)), subgroup_id)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) + 0u) + subgroup_local_id, min(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u, 1u))), subgroup_id)) * subgroup_size, (1u ^ 1u) + (subgroup_id * subgroup_size)) + subgroup_local_id) << 0u)))) ^ 0u);
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | 0u, (_GLF_IDENTITY((subgroup_id) | 0u, ~ (_GLF_IDENTITY(~ ((subgroup_id) | _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u))), (~ ((subgroup_id) | 0u)) >> 0u)))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) | (1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), (subgroup_id) << 0u)) | 0u)) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec2(subgroup_id, 1u), max(uvec2(subgroup_id, 1u), uvec2(subgroup_id, 1u))))), subgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) / 1u, (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) / 1u)))) << 0u))) * subgroup_size) | 0u) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) / 1u))))), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size)), (subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))))), max(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), 0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))))) * 1u)) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) >> 0))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))), true && ((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))) && true))), bool(bvec2(_GLF_DEAD(false), false)))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
  {
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), _GLF_IDENTITY(true, false || (true)))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))) != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) / 1.0), max(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) / 1.0), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) / 1.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))).y))))
          barrier();
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), false || (! (false))))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))) || false), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))) || false)))))))))
  barrier();
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_size)))) ^ (_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) | (_GLF_IDENTITY(0u | 0u, (0u | 0u) << 0u)))))], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))), bool(bvec4(bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))), _GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), false || (bool(bvec3(true, true, false)))))))), false, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))), _GLF_IDENTITY(true, (true) && true) && (bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false))), false))))))), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(bool(bvec3(bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))), false || (_GLF_IDENTITY(bool(bvec3(bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))), ! (! (bool(bvec3(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))))), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))))))))) && true))))))))
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid) | (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid))))], uint(read_1 + 1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4)), (4) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), _GLF_IDENTITY(min(4, 4), (min(4, 4)) / 1)));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), true && (false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -52925) ^ (1 & 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), (bool(false)) && true)) && true)))));
          }
        }
      }
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))) && true)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, true))), false))))))))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), (~ (~ (3))) | (~ (~ (3)))))), _GLF_IDENTITY(int(3), int(ivec2(int(3), 0)))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true, true)))))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY((int(_GLF_IDENTITY(6, (6) << 0))), max((int(6)), (int(6)))))))))), (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), ~ (~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), int(ivec2(int(6), 1))), int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) | (_GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) - 0)))))))))))))))) * 1), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), min(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), ~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6)))))))))) - 0), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), ((int(6))) >> 0), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), 0, _GLF_IDENTITY(0, 0 + (0)))), min(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), ((int(6))) << 0)) >> 0)) >> 0), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(_GLF_IDENTITY(6, min(6, 6)))), max((int(6)), (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (-96735 & 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))))) << 0)) | 0))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), min(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(6), 0 ^ (_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) - 0))))))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))))), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), min(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) | (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ((int(6))) | (0 << _GLF_IDENTITY(int(0), int(0)))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) * 1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), max((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), min((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), (_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))))))))))), 0, 0)), (true ? int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(4949) : int(6))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), ((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) << 0)), clamp(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(-7937) : _GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))))), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0), int(6))))))))))))), _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, min(0, 0))), 0)) : _GLF_FUZZED(-14886)))))))))), (~ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), min(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), ~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6)))))))))) - 0), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), ((int(6))) >> 0), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), 0, _GLF_IDENTITY(0, 0 + (0)))), min(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), ((int(6))) << 0)) >> 0)) >> 0), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(_GLF_IDENTITY(6, min(6, 6)))), max((int(6)), (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (-96735 & 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))))) << 0)) | 0))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), min(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(6), 0 ^ (_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) - 0))))))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))))), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), min(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) | (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ((int(6))) | (0 << _GLF_IDENTITY(int(0), int(0)))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) * 1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), max((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), min((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), (_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))))))))))), 0, 0)), (true ? int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(4949) : int(6))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), ((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) << 0)), clamp(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(-7937) : _GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))))), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0), int(6))))))))))))), _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, min(0, 0))), 0)) : _GLF_FUZZED(-14886))))))))))) >> 0)), (false ? _GLF_FUZZED(-42405) : (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), min(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), ~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6)))))))))) - 0), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), ((int(6))) >> 0), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), 0, _GLF_IDENTITY(0, 0 + (0)))), min(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), ((int(6))) << 0)) >> 0)) >> 0), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(_GLF_IDENTITY(6, min(6, 6)))), max((int(6)), (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (-96735 & 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))))) << 0)) | 0))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), min(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(6), 0 ^ (_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) - 0))))))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))))), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), min(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) | (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ((int(6))) | (0 << _GLF_IDENTITY(int(0), int(0)))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) * 1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), max((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), min((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), (_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))))))))))), 0, 0)), (true ? int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(4949) : int(6))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), ((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) << 0)), clamp(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(-7937) : _GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))))), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0), int(6))))))))))))), _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, min(0, 0))), 0)) : _GLF_FUZZED(-14886)))))))))), (~ (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), min(~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6))))), ~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), 0, 0, 1))), (int(6)))))))))) - 0), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), ((int(6))) >> 0), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), 0, _GLF_IDENTITY(0, 0 + (0)))), min(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), ((int(6))) << 0)) >> 0)) >> 0), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), max(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(_GLF_IDENTITY(6, min(6, 6)))), max((int(6)), (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (-96735 & 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), (_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))))) << 0)) | 0))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), min(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(6), 0 ^ (_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) - 0))))))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))))), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), min(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) | (~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ((int(6))) | (0 << _GLF_IDENTITY(int(0), int(0)))), max((int(6)), (int(6))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))), (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) * 1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), max((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), min((_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))), (_GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (max((int(6)), (int(6)))) / 1))))))))))), 0, 0)), (true ? int(ivec3(_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), min(~ _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(4949) : int(6))))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((int(6)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))))), ((~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))) << 0)), clamp(_GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max(_GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(-7937) : _GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))))), (int(6))))))), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), max((int(6)), (_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0), int(6))))))))))))), _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, min(0, 0))), 0)) : _GLF_FUZZED(-14886))))))))))) >> 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                  barrier();
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, sin(0.0))), _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, sin(0.0))), mix(float(_GLF_FUZZED(-344.004)), float(dot(vec4(sqrt(0.0), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, sin(0.0)))), bool(true)))), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, max(read_1 + _GLF_IDENTITY(1, (1) - 0), read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | 0))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (0 >> _GLF_IDENTITY(int(8), int(8))) | (~ (_GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (_GLF_IDENTITY(1 | 0, (1 | 0) | 0))))))))) | 0))) == _GLF_IDENTITY(_GLF_IDENTITY(read_2, ~ (_GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2))))), min(_GLF_IDENTITY(read_2, ~ (_GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2))))), _GLF_IDENTITY(read_2, ~ (_GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2)))))))), min(uint(_GLF_IDENTITY(read_1 + 1, max(read_1 + _GLF_IDENTITY(1, (1) - 0), read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), min((1), (1))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))), ((_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776))))) | ((_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) | (_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) + (ivec2(1, 0)))))), (int(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) | (_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) + (ivec2(1, 0))))))) ^ 0))))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0), (1) / (1 | 0)))))))) | 0))) == _GLF_IDENTITY(read_2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2))), max(_GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2))), _GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2)))))))), uint(_GLF_IDENTITY(read_1 + 1, max(read_1 + _GLF_IDENTITY(1, (1) - 0), read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (1 | 0)))))))) | 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (1 | 0)))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (1 | 0)))))))) | 0), (false ? _GLF_FUZZED(-31550) : _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (1 | 0)))))))) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (1 | 0)))))))) | 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), (true ? (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) | (1))) : _GLF_FUZZED(-43776)))))))), max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), min(~ (_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), int(ivec3(~ (_GLF_IDENTITY(1, min(1, 1))), 0, 1)))))) - (1 ^ 1)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / (1 | 0)))))))) | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))) == _GLF_IDENTITY(read_2, ~ (_GLF_IDENTITY(~ (read_2), min(~ (read_2), ~ (read_2)))))))) + 1, 4, 64, 4);
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) && true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED(vec4(-37.51, 3290.9527, -1533.9046, -6.0).t)), bool(false)))) || false)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), 0))) > 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bool(bool(bvec2(true, true)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), mat3(1.0) * (vec3(injectionSwitch.x, 0.0, 1.0))))) > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, exp(0.0), 1.0, length(vec2(0.0, 0.0))))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, exp(0.0), 1.0, length(vec2(0.0, 0.0))))))))))), false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, 212.222)))))), mix(vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])) : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, _GLF_IDENTITY(4.3, mix(float(4.3), float(_GLF_FUZZED((-9969.5903 / 596.994))), bool(false))), 212.222)))))))[0], max(_GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_IDENTITY(_GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, 212.222))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, 212.222))), (_GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, 212.222)))) * 1.0)), float(_GLF_FUZZED(7.3)), bool(false)))))))[0], clamp((_GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, _GLF_IDENTITY(212.222, mix(float(_GLF_FUZZED(-851.679)), float(212.222), bool(true))))))))), mix(vec2(_GLF_FUZZED((-948.184 + (1.3))), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, _GLF_IDENTITY(212.222, mix(float(_GLF_FUZZED(-851.679)), float(212.222), bool(true))))))))))[1]), vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, _GLF_IDENTITY(212.222, mix(float(_GLF_FUZZED(-851.679)), float(212.222), bool(true))))))))))[0], max((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, _GLF_IDENTITY(212.222, mix(float(_GLF_FUZZED(-851.679)), float(212.222), bool(true))))))))))[0], (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, _GLF_IDENTITY(212.222, mix(float(_GLF_FUZZED(-851.679)), float(212.222), bool(true))))))))))[0])), _GLF_FUZZED(-7.5)), bvec2(true, false))))[0], (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(_GLF_IDENTITY(-1203.0440, clamp(-1203.0440, _GLF_IDENTITY(-1203.0440, min(-1203.0440, -1203.0440)), _GLF_IDENTITY(-1203.0440, clamp(-1203.0440, -1203.0440, -1203.0440)))), 5906.1687, 4.3, 212.222)))))))[0], (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[_GLF_IDENTITY(1, max(1, 1))] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, _GLF_IDENTITY(-954.712, float(mat3x2(-954.712, abs(0.0), 1.0, abs(abs(0.0)), 0.0, cos(0.0))))), vec4(-1203.0440, 5906.1687, 4.3, 212.222)))))))[0])), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, _GLF_IDENTITY(212.222, (_GLF_IDENTITY(212.222, float(vec4(212.222, 1.0, 0.0, 1.0)))) / 1.0))))))))[0])), (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(true, (true) || false) ? injectionSwitch[1] : _GLF_FUZZED(distance(vec4(-2804.2131, -125.318, 502.459, -954.712), vec4(-1203.0440, 5906.1687, 4.3, 212.222)))))))[1]), vec2(_GLF_FUZZED(-9447.6769), _GLF_FUZZED(-2.4)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(0.0 + (injectionSwitch[0]), clamp(0.0 + (injectionSwitch[0]), 0.0 + (injectionSwitch[0]), 0.0 + (injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y))), true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (true))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0))) && true); _injected_loop_counter --)
            {
             subgroupAll(false);
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.2)), vec2(_GLF_FUZZED(-4139.9789), (injectionSwitch)[1]), bvec2(false, true))))), max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9408.3871, 1.8)) : injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0))), max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(vec3(-82.63, 5150.0274, 0.0).s)), vec2(_GLF_FUZZED(3.6), _GLF_IDENTITY((vec2(1.0, 1.0))[1], min((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(false, true)))), max(injectionSwitch, injectionSwitch)).y) / 1.0), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.7)), vec2(_GLF_FUZZED(-549.132), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))), max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) - length(abs(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9327.0594)), bool(false))), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(11.00), 1.0 * (_GLF_FUZZED(11.00)))), float(float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, exp(0.0)))), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.07)), float(1.0), bool(true))), 1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(0.6)), bool(false)))) - 0.0))), 0.0))), bool(true)))), 0.0, 0.0, 0.0)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.2)), vec2(_GLF_FUZZED(-4139.9789), (injectionSwitch)[1]), bvec2(false, true))))), max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9408.3871, 1.8)) : injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0))), max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(vec3(-82.63, 5150.0274, 0.0).s)), vec2(_GLF_FUZZED(3.6), _GLF_IDENTITY((vec2(1.0, 1.0))[1], min((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(false, true)))), max(injectionSwitch, injectionSwitch)).y) / 1.0), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.7)), vec2(_GLF_FUZZED(-549.132), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))), max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) - length(abs(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9327.0594)), bool(false))), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(11.00), 1.0 * (_GLF_FUZZED(11.00)))), float(float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, exp(0.0)))), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.07)), float(1.0), bool(true))), 1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(0.6)), bool(false)))) - 0.0))), 0.0))), bool(true)))), 0.0, 0.0, 0.0)))))), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.2)), vec2(_GLF_FUZZED(-4139.9789), (injectionSwitch)[1]), bvec2(false, true))))), max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9408.3871, 1.8)) : injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0))), max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(vec3(-82.63, 5150.0274, 0.0).s)), vec2(_GLF_FUZZED(3.6), _GLF_IDENTITY((vec2(1.0, 1.0))[1], min((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), bvec2(false, true)))), max(injectionSwitch, injectionSwitch)).y) / 1.0), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.7)), vec2(_GLF_FUZZED(-549.132), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))), max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) - length(abs(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9327.0594)), bool(false))), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(11.00), 1.0 * (_GLF_FUZZED(11.00)))), float(float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, exp(0.0)))), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.07)), float(1.0), bool(true))), 1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(false ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(0.6)), bool(false)))) - 0.0))), 0.0))), bool(true)))), 0.0, 0.0, 0.0)))))))), true, false, true)))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x < injectionSwitch.y))) || false)))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))))), (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))) | 0u)], uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-76353, max(-76353, -76353))) : 1), int(_GLF_IDENTITY(ivec4((false ? _GLF_FUZZED(_GLF_IDENTITY(-76353, max(-76353, -76353))) : 1), 0, 0, 0), (ivec4((false ? _GLF_FUZZED(_GLF_IDENTITY(-76353, max(-76353, -76353))) : 1), 0, 0, 0)) | (ivec4((false ? _GLF_FUZZED(_GLF_IDENTITY(-76353, max(-76353, -76353))) : 1), 0, 0, 0)))))), 4, 64, 4);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), 0 + (_GLF_IDENTITY(int(6), 0 | (int(6))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec4(_injected_loop_counter < 1, false, false, true)))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false, true, false)))), false || (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false, true, false)))))))) || (false))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), max(int(3), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0), int(3))), _GLF_IDENTITY(int(3), max(int(3), int(3))))), _GLF_IDENTITY(int(3), (int(3)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), (_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), max(~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), ~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))))))))) || _GLF_IDENTITY(false, (false) && true))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
                      barrier();
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != (_GLF_IDENTITY(1 | 1, (1 | 1) >> 0))); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))) != (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(3.5)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true)))) - 0.0)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mat3x2(681.356, 3.2, 71.13, 20.64, 0.4, -196.443)[0])))))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (max(injectionSwitch.x, injectionSwitch.x)) - 0.0)) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mat3x2(681.356, 3.2, 71.13, 20.64, 0.4, -196.443)[0])))))).y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY((max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, length(0.0)))))).x)) - 0.0, min((max(injectionSwitch.x, injectionSwitch.x)) - 0.0, _GLF_IDENTITY((max(injectionSwitch.x, injectionSwitch.x)) - 0.0, max((max(injectionSwitch.x, injectionSwitch.x)) - 0.0, (max(injectionSwitch.x, injectionSwitch.x)) - 0.0)))))) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mat3x2(681.356, 3.2, 71.13, 20.64, 0.4, -196.443)[_GLF_IDENTITY(0, ~ (~ (0)))])))))).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) || false)))))))))));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), (0 << _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), min(0 << _GLF_IDENTITY(int(3), int(3)), 0 << _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(7638) : int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             subgroupAll(true);
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec4((! (false)), true, true, true)), bool(bvec4(bool(bvec4((! (false)), true, true, true)), false, true, true))))), bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec4((! (false)), true, true, true)), bool(bvec4(bool(bvec4((! (false)), true, true, true)), false, true, true))))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))) && true)))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (0) / 1))) + 0)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4671.3014, 5910.1302)))).x), float(mat3x4((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4671.3014, 5910.1302)))).x), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 1.0, 0.0, 1.0)), max(dot(vec4(0.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 1.0, 0.0, 1.0))))), 1.0, 1.0))) / 1.0) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true))))))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, true)))))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))) && true))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(1.0), 0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat4(injectionSwitch, log(1.0), 0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), sin(vec2(0.0, 0.0)) + (vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(1.0), 0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat4(injectionSwitch, log(1.0), 0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))))).x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)), int(ivec4((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)), 0, (1 & 1), 1)))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)), int(ivec4((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)), 0, (1 & 1), 1)))), 1 * ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)), int(ivec4((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)), 0, (1 & 1), 1)))))), 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-363.561), _GLF_FUZZED(-748.382)), bvec2(false, false))).y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), true, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0)).x < injectionSwitch.y)), true, true))))))))))))
          barrier();
        }
       else
        {
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), false || ((_GLF_WRAPPED_LOOP(false)))))))) || false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ((! (_GLF_WRAPPED_LOOP(false)))) || false)))));
}
