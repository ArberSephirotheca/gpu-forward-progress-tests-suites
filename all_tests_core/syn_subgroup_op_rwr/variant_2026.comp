#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))), (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))) || false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), (! (! (true))) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2((! (true)), false), bvec2(bvec3(bvec2((! (true)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(bvec2(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(bvec2(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(bvec2(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), false)))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))))))))))))), true, true, false))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8.6)), vec2(_GLF_FUZZED(-628.466), (injectionSwitch)[1]), bvec2(false, true))), vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.9)), bvec2(true, false)))[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, min(1, 1))))], injectionSwitch[1])), injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))).y)), false)), ! _GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ((_GLF_IDENTITY(! (true), ! (! (! (true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2((! (true)), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec3(bvec2((! (true)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(bool(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true))))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))))))))))))), true, true, false))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.9)), bvec2(true, false)))[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(63605) : 1))) | (1))))))))], injectionSwitch[1])), injectionSwitch[1])), clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y)), false)))), (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ((_GLF_IDENTITY(! (true), ! (! (! (true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2((! (true)), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec3(bvec2((! (true)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(bool(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true))))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))))))))))))), true, true, false))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.9)), bvec2(true, false)))[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(63605) : 1))) | (1))))))))], injectionSwitch[1])), injectionSwitch[1])), clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y)), false)))), bool(bool((! (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ((_GLF_IDENTITY(! (true), ! (! (! (true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2((! (true)), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec3(bvec2((! (true)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), bool(bool(! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true))))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) && true), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)))))))))))))))), true, true, false))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.9)), bvec2(true, false)))[1], min(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 + (1)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(63605) : 1))) | (1))))))))], injectionSwitch[1])), injectionSwitch[1])), clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y)), false)))))))) && true))))) && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) || false)))))))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, length(vec2(0.0, 0.0))), (mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, length(vec2(0.0, 0.0)))) * mat2(1.0)))))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(511.291), _GLF_FUZZED(-5806.5770)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / cos(vec2(0.0, 0.0)))[1]), bvec2(true, true))).y))))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) + 0u);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-277.991, -2.5)))), injectionSwitch)), 1.0, round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(_GLF_FUZZED(9.6)), bool(false))), 1.0), vec3(0.0, sin(0.0), 1.0))), 1.0, 1.0, 1.0)), mat2(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, exp(0.0))))) * (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-277.991, -2.5)))), injectionSwitch)), 1.0, round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, sin(0.0), 1.0), (vec3(0.0, sin(0.0), 1.0)) / abs(vec3(1.0, 1.0, 1.0)))), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0))), 1.0, 1.0, 1.0))))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), bool(bvec3(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, true))))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), bool(bvec3(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_IDENTITY(false, (false) || false))), true, true)))))) || false)), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), 0u)))) << 0u, ~ (~ ((_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) | (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u))))), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), 0u)))) << 0u)))), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u))), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_id))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), 0u)))) << 0u, ~ (~ ((_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) | (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u))))), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), 0u)))) << 0u)))), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID.x, 1u, 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u))), (uvec4(gl_WorkGroupID.x, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_id))), 1u, 0u, 0u))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size))) | 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, (true) || false) ? subgroup_id : _GLF_FUZZED(workgroup_size))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.0), _GLF_FUZZED(3942.2572)), bvec2(false, false))).x > injectionSwitch.y))))) && true)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (_GLF_IDENTITY(1, (1) | (1)))), _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), _GLF_IDENTITY(((1)), (((1))) | (((1)))) | 0), (1))))) << 0)), 4, _GLF_IDENTITY(64, (64) | (64)), 4);
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-4.6), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(float(true))), bvec2(true, false))), (injectionSwitch))) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))));
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid))], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), (false ? _GLF_FUZZED(15913) : (1 & 1))), (1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1))))) < subgroup_size)
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false)), false || (false))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), bool(bool(bool(bvec3(true, false, false)))))))))))
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))) >> 0u) == read_2, true, false), bvec3(bvec3(bvec3(read_1 + 1 == read_2, true, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))) >> 0u) == read_2, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)), bvec3(bvec3(bvec3(read_1 + 1 == read_2, true, false)))))), (_GLF_IDENTITY(read_1 + 1 == read_2, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))) >> 0u) == read_2, true, false), bvec3(bvec3(bvec3(read_1 + 1 == read_2, true, false))))))) && true)) || false)) + _GLF_IDENTITY(1, (1) / 1), 4, 64, 4);
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED((~ 2114))))))); _injected_loop_counter --)
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)))) < injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_IDENTITY(int(5), min(int(5), int(5)))), max(int(_GLF_IDENTITY(int(5), min(int(5), int(5)))), int(_GLF_IDENTITY(int(5), min(int(5), int(5)))))))), _GLF_IDENTITY(int(5), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 | (0)), 0)), 0, _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) * 1), 0, 1)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
              break;
             if(_GLF_DEAD(false))
              break;
             do
              {
               subgroupAll(_GLF_IDENTITY(false, true && (false)));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true, true)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true, true)), true)))), ! (! (bool(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), true, true)), true))))))))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, true))))))), true)))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (! ((true) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true)))))))))))), ! (! (! (! ((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true))), (_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(true, (true) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true)))) || false)) && true))))))))))))))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (true))))), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3((! _GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, _GLF_IDENTITY(true, (true) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, _GLF_IDENTITY(true, (true) || false)))))), bool(bvec2((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, _GLF_IDENTITY(true, (true) || false)))))), false)))))), false, _GLF_IDENTITY(true, ! (! (true))))), bvec3(bvec4(bvec3(bvec3((! (_GLF_IDENTITY(true, ! (! (true))))), false, true)), false))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) ^ 0u)) | 0u)], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) ^ (1u ^ 1u))))) + 1 == read_2) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ _GLF_IDENTITY((read_1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((read_1), (false ? _GLF_FUZZED(subgroup_size) : (read_1)))), (~ (_GLF_IDENTITY((read_1), (false ? _GLF_FUZZED(subgroup_size) : (read_1))))) | (~ (_GLF_IDENTITY((read_1), (false ? _GLF_FUZZED(subgroup_size) : (read_1))))))))) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == _GLF_IDENTITY(read_2, uint(uvec2(read_2, 0u)))) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ _GLF_IDENTITY((read_1), uint(uvec3((read_1), 1u, 0u)))))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_id) : read_1)))), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))) + 1 == read_2) + _GLF_IDENTITY(1, max(1, 1)))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1))), (_GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ _GLF_IDENTITY((read_1), uint(uvec3((read_1), 0u, 1u)))))) * 1u)) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, ! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((_GLF_IDENTITY(read_1, (read_1) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) << 0)) == read_2)))))) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))) >> 0u)) + 1 == read_2) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, (uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, (uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1) | 0u))), uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), clamp((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true) ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1))))), max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, (1) << 0)), min(0 ^ (_GLF_IDENTITY(1, (1) << 0)), 0 ^ (_GLF_IDENTITY(1, (1) << 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1)), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, max(read_1, read_1)), _GLF_IDENTITY(read_1, min(read_1, read_1)), _GLF_IDENTITY(read_1, 0u | (read_1))))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((read_1), (_GLF_IDENTITY((read_1), (true ? (read_1) : _GLF_FUZZED(next_virtual_gid)))) - 0u), (0u ^ (read_1)) ^ (1u ^ 1u))))) + 1 == read_2) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (~ (read_1)) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == read_2), max(uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (~ (read_1)) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == read_2), _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (~ (read_1)) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == read_2), max(uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (~ (read_1)) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == read_2), uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (~ (read_1)) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == read_2))))) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false ? _GLF_FUZZED(next_virtual_gid) : read_1, (_GLF_IDENTITY(false ? _GLF_FUZZED(next_virtual_gid) : read_1, max(_GLF_IDENTITY(false ? _GLF_FUZZED(next_virtual_gid) : read_1, (true ? false ? _GLF_FUZZED(next_virtual_gid) : read_1 : _GLF_FUZZED(workgroup_id))), false ? _GLF_FUZZED(next_virtual_gid) : read_1))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(next_virtual_gid) : read_1, min(false ? _GLF_FUZZED(next_virtual_gid) : read_1, false ? _GLF_FUZZED(next_virtual_gid) : read_1)))))), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1))), ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))) + (0u ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) + 1 == read_2) + 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, ! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) << 0)) == read_2)))))) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))) >> 0u)) + 1 == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), clamp((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1))), (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (_GLF_IDENTITY(~ ((read_1)), min(~ ((read_1)), _GLF_IDENTITY(~ ((read_1)), (~ ((read_1))) - 0u))))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), ((1)) | 0), (1), (1))) ^ 0) == read_2, ! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) << 0)) == read_2)))))) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))) >> 0u)) + 1 == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), clamp((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))))) + 1 == read_2) + 1)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))) >> 0u)) + 1 == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0), uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), clamp(_GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((false ? _GLF_FUZZED(next_virtual_gid) : read_1), clamp((false ? _GLF_FUZZED(next_virtual_gid) : read_1), (false ? _GLF_FUZZED(next_virtual_gid) : read_1), (false ? _GLF_FUZZED(next_virtual_gid) : read_1)))), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, false)))), true))) ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))))) + 1 == read_2) + 1))))), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1)))) - 0u))), _GLF_IDENTITY(max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1), (max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1)) | (max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1)))), (~ (_GLF_IDENTITY(max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1), (max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1)) | (max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1))))) ^ 0u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) ^ (1u ^ 1u))))) + 1 == _GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, (read_2) - 0u)) / 1u)) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + 1 == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))))) ^ (read_1)))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))), clamp(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))), _GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))), _GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))))) + 1 == read_2) + 1)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ~ (~ ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))))), (_GLF_IDENTITY(read_1, 0u ^ (read_1))), (_GLF_IDENTITY(read_1, 0u ^ (read_1))))))))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, _GLF_IDENTITY(read_1, ~ (~ (read_1))))), _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, _GLF_IDENTITY(! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) << 0)) == read_2)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) << 0)) == read_2)))))))) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ((_GLF_IDENTITY(read_1, 0u ^ (read_1)))) >> 0u)) + 1 == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1), uint(uvec3(_GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1), 1u, 1u))))), clamp((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ (read_1), 0u ^ (_GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ (read_1))))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(read_1, uint(uvec2(read_1, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))))), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) / 1u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))))) + 1 == read_2) + _GLF_IDENTITY(1, (1) - 0))), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1))))), max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) ^ (1u ^ 1u))))) + 1 == read_2) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), 1u * (_GLF_IDENTITY(0u ^ (read_1), (0u ^ (read_1)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))))) + 1 == _GLF_IDENTITY(read_2, uint(uvec2(read_2, (((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), (true ? (_GLF_IDENTITY(read_1, 0u ^ (read_1))) : _GLF_FUZZED(atomicXor(read_1, virtual_gid))))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), ~ (~ (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)))))) | (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1))) + 0u))), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u), 0u ^ (read_1)))) + 1 == read_2) + 1)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, ~ (~ (0u))) ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, (1) ^ 0) == read_2, ! (! (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ~ (~ ((read_1)))) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) << 0)) == read_2)))))) + 1, max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), (_GLF_IDENTITY((read_1), (true ? (read_1) : _GLF_FUZZED(workgroup_base)))) | (_GLF_IDENTITY((read_1), (_GLF_IDENTITY((read_1), ((read_1)) - 0u)) << 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u ^ (read_1))), ((_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | 0u)) * 1u), _GLF_IDENTITY(read_1, (read_1) | 0u))))))) >> 0u)) + 1 == read_2) + 1, max(uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1, uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), clamp((read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ _GLF_IDENTITY((read_1), clamp((read_1), (read_1), (read_1))))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid))) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1))), (read_1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (read_1)))))) + 1 == read_2) + 1)), uint(_GLF_IDENTITY(read_1, (read_1) | (_GLF_IDENTITY(read_1, 0u ^ (read_1)))) + 1 == read_2) + 1))))), max(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, ~ (~ (0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 ^ (_GLF_IDENTITY(1, (1) << 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), (1) << _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), (true ? ivec4(0, 1, 1, 1) : _GLF_FUZZED(ivec4(56820, 24260, 87387, 42960))))))), 0 ^ (_GLF_IDENTITY(1, (1) << 0))) : _GLF_FUZZED(_injected_loop_counter)))) + 0), uint(read_1 + 1 == read_2) + 1))) | 0u) : _GLF_FUZZED(153370u))))), 4, 64, 4);
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), 1 * (int(int(3)))))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) - _GLF_IDENTITY(0, (0) / 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) | 0)); _injected_loop_counter --)
          {
           subgroupAll(true);
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    break;
  }
}
