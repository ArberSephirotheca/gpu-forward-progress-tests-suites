#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, exp(0.0), 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != (((0 << _GLF_IDENTITY(int(3), int(3))) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.y), _GLF_IDENTITY(float(vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 0.0)), (float(vec2(float(vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 0.0))) * 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), (int(6)) >> 0))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) >> 0), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), clamp(1 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), 1 * (1 << _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) / 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))) ? _GLF_FUZZED(vec2(-35.24, 457.637)) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2186.3898, -7618.9744)) : injectionSwitch))))))).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-35.24, 457.637)) : injectionSwitch)).y) / 1.0))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))) ? _GLF_FUZZED(vec2(-35.24, 457.637)) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2186.3898, -7618.9744)) : injectionSwitch))))))).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-35.24, 457.637)) : injectionSwitch)).y) / 1.0)))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))) ? _GLF_FUZZED(vec2(-35.24, 457.637)) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2186.3898, -7618.9744)) : injectionSwitch))))))).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-35.24, 457.637)) : injectionSwitch)).y) / 1.0)))), true))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(vec2(-35.24, 457.637)) : injectionSwitch)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-35.24, 457.637)) : injectionSwitch)).y) / 1.0, 1.0 * ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-35.24, 457.637)) : injectionSwitch)).y) / 1.0))))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ((true) && true) && true)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(2.0, -5.3, 2285.0601, -9.1).b)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), true && (bool(_GLF_IDENTITY(true, (true) || false)))))), injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && _GLF_IDENTITY((false), true && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), min(_GLF_FUZZED(vec2(-35.24, 457.637)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), (_GLF_FUZZED(vec2(-35.24, 457.637))) / vec2(1.0, 1.0)))) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-35.24, 457.637), mix(vec2(_GLF_FUZZED(65.64), (vec2(-35.24, 457.637))[1]), vec2((vec2(-35.24, 457.637))[0], _GLF_FUZZED(4.5)), bvec2(true, false)))) : injectionSwitch)).y) / 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && _GLF_IDENTITY((false), true && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), min(_GLF_FUZZED(vec2(-35.24, 457.637)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), (_GLF_FUZZED(vec2(-35.24, 457.637))) / vec2(1.0, 1.0)))) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-35.24, 457.637), mix(vec2(_GLF_FUZZED(65.64), (vec2(-35.24, 457.637))[1]), vec2(_GLF_IDENTITY((vec2(-35.24, 457.637))[0], ((vec2(-35.24, 457.637))[0]) - 0.0), _GLF_FUZZED(4.5)), bvec2(true, false)))) : injectionSwitch)).y) / 1.0)))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true)))), _GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && _GLF_IDENTITY((false), true && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), min(_GLF_FUZZED(vec2(-35.24, 457.637)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), (_GLF_FUZZED(vec2(-35.24, 457.637))) / vec2(1.0, 1.0)))) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-35.24, 457.637), mix(vec2(_GLF_FUZZED(65.64), (vec2(-35.24, 457.637))[1]), vec2((vec2(-35.24, 457.637))[0], _GLF_FUZZED(4.5)), bvec2(true, false)))) : injectionSwitch)).y) / 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && _GLF_IDENTITY((false), true && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), min(_GLF_FUZZED(vec2(-35.24, 457.637)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), (_GLF_FUZZED(vec2(-35.24, 457.637))) / vec2(1.0, 1.0)))) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-35.24, 457.637), mix(vec2(_GLF_FUZZED(65.64), (vec2(-35.24, 457.637))[1]), vec2(_GLF_IDENTITY((vec2(-35.24, 457.637))[0], ((vec2(-35.24, 457.637))[0]) - 0.0), _GLF_FUZZED(4.5)), bvec2(true, false)))) : injectionSwitch)).y) / 1.0)))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true)))), _GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && _GLF_IDENTITY((false), true && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), min(_GLF_FUZZED(vec2(-35.24, 457.637)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), (_GLF_FUZZED(vec2(-35.24, 457.637))) / vec2(1.0, 1.0)))) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-35.24, 457.637), mix(vec2(_GLF_FUZZED(65.64), (vec2(-35.24, 457.637))[1]), vec2((vec2(-35.24, 457.637))[0], _GLF_FUZZED(4.5)), bvec2(true, false)))) : injectionSwitch)).y) / 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && _GLF_IDENTITY((false), true && ((false)))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), min(_GLF_FUZZED(vec2(-35.24, 457.637)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-35.24, 457.637)), (_GLF_FUZZED(vec2(-35.24, 457.637))) / vec2(1.0, 1.0)))) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-35.24, 457.637), mix(vec2(_GLF_FUZZED(65.64), (vec2(-35.24, 457.637))[1]), vec2(_GLF_IDENTITY((vec2(-35.24, 457.637))[0], ((vec2(-35.24, 457.637))[0]) - 0.0), _GLF_FUZZED(4.5)), bvec2(true, false)))) : injectionSwitch)).y) / 1.0)))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true)))), _GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), false)))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))));
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec4((injectionSwitch) * mat2(1.0), 0.0, 1.0)))))).y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               barrier();
              }
            }
           else
            {
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
                barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5708.4725), _GLF_FUZZED(6.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7908.8283) : _GLF_IDENTITY(0.0, 1.0 * (0.0))))) - 0.0), min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.2) : 0.0)), 0.0)), 0.0))))).y)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5708.4725), _GLF_FUZZED(6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.2) : 0.0)), 0.0)), 0.0))))).y)))))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5708.4725), _GLF_FUZZED(6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.2) : 0.0)), 0.0)), 0.0))))).y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5708.4725), _GLF_FUZZED(6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.2) : 0.0)), 0.0)), 0.0))))).y)))))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)))) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))), vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))), 0.0, 0.0))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5708.4725), _GLF_FUZZED(6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-6.2, float(mat3x4(-6.2, 1.0, 1.0, 1.0, abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) : 0.0)), 0.0)), 0.0))))).y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 >> _GLF_IDENTITY(int(5), int(5)))) > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bvec2(bvec4(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true)), true, false))))))))), false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false))) && true), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(false, false || (false))) && true)), ! (! (! (! ((_GLF_IDENTITY(false, false || (false))) && true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))) && _GLF_IDENTITY(true, (true) && true)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((- 82598) & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             else
              {
              }
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter), ~ (~ (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) : _GLF_FUZZED(-4104))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 & 40588), max((0 & 40588), (0 & 40588))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(_GLF_IDENTITY(0, (0) | 0))), clamp(_GLF_IDENTITY((int(_GLF_IDENTITY(0, (0) | 0))), max(_GLF_IDENTITY((int(_GLF_IDENTITY(0, (0) | 0))), ((int(_GLF_IDENTITY(0, (0) | 0)))) >> 0), (int(_GLF_IDENTITY(0, (0) | 0))))), (int(_GLF_IDENTITY(0, (0) | 0))), (int(_GLF_IDENTITY(0, (0) | 0))))) | 0)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))))) || false); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(float(mat3x4(float(injectionSwitch.y), 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(60.94)), float(float(mat3x4(float(injectionSwitch.y), 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), bool(true)))), float(_GLF_FUZZED(52.36)), bool(false))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) / 1.0)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(52.36)), bool(false))) : _GLF_FUZZED(0.3)))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(52.36)), bool(false))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(injectionSwitch.y), float(_GLF_FUZZED(52.36)), bool(false))) : _GLF_FUZZED(0.3))), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(injectionSwitch.y), float(_GLF_FUZZED(52.36)), bool(false))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(injectionSwitch.y), float(_GLF_FUZZED(52.36)), bool(false))) : _GLF_FUZZED(0.3))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), true)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))), false, true, false))))))) || false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! (false)))), (! (_GLF_IDENTITY(! (false), true && (! (false))))) && true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(49097)))])), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))), 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3(float(mat2x3(0.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))), sin(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, abs(_GLF_IDENTITY(0.0, abs(0.0) + (0.0))), 0.0, 0.0, 0.0, 1.0, 1.0))).y))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, bool(bvec4((_GLF_IDENTITY(false, (false) && true)) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, bool(bvec4((_GLF_IDENTITY(false, (false) && true)) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = _GLF_IDENTITY((-95467 & 0), int(_GLF_IDENTITY(ivec3((-95467 & 0), 0, 1), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec3(-76369, 49428, 95222)) : ivec3((-95467 & 0), 0, 1)), ((false ? _GLF_FUZZED(ivec3(-76369, 49428, 95222)) : ivec3((-95467 & 0), 0, 1))) ^ ivec3(0, 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0)), ((_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0))) * 1.0) - 0.0), 0.0), mix(vec2(((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0)), ((_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0))) * 1.0) - 0.0), 0.0))[0], _GLF_FUZZED(-6.6)), vec2(_GLF_FUZZED(5.5), ((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0)), ((_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0))) * 1.0) - 0.0), 0.0))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), max(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6.1) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.9)), float(1.0), bool(true)))))), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), min(vec4(1.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0)))))))), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bool(true))), true))))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(_GLF_IDENTITY(-41.48, max(-41.48, -41.48)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)), float(mat2x4(mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)), mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)))), mix(float(_GLF_FUZZED(-44.08)), float(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48)), ((_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-41.48))) / 1.0)), bool(true)))))), injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)), (clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(uintBitsToFloat(atomicExchange(subgroup_local_id, subgroup_local_id)))))) / 1.0))) / 1.0)), 0.0)), round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), clamp(_GLF_IDENTITY(max(1.0, 1.0), (true ? max(1.0, 1.0) : _GLF_FUZZED(-5902.8466))), max(1.0, 1.0), max(1.0, 1.0)))))) / vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)))), mat3(mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)), (clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.6) : 0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))) / 1.0)), 0.0), (true ? vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)), (clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.6) : 0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))) / 1.0)), 0.0) : _GLF_FUZZED(vec2(5.4, 8336.6277))))), round(length(normalize(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-112.265)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) + 0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(sin(vec2(0.0, 0.0)))).y))))), 0.0)))))))), _GLF_IDENTITY((mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch.y), 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))), (injectionSwitch)))[0], _GLF_FUZZED(9067.3848)), vec2(_GLF_FUZZED(-316.097), (injectionSwitch)[1]), bvec2(false, true))))), injectionSwitch)).y), 0.0)))), transpose(_GLF_IDENTITY(transpose((mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), max(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), mix(float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(156.546)), bool(false))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8657.1173, 854.134)) : injectionSwitch)).y), 0.0))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, -21.49, -2.9), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat4(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, -21.49, -2.9)), transpose(transpose(mat4(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, -21.49, -2.9)))))), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(mat4(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, -21.49, -2.9)), transpose(transpose(mat4(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, -21.49, -2.9)))))), mat3(mat3x4(mat3(_GLF_IDENTITY(mat4(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, -21.49, -2.9)), transpose(transpose(mat4(mat3(-9628.0813, -7.0, -4.1, 9.8, -62.95, 3042.3983, -0.9, _GLF_IDENTITY(-21.49, clamp(_GLF_IDENTITY(-21.49, (true ? -21.49 : _GLF_FUZZED(3.7))), _GLF_IDENTITY(-21.49, float(mat4x2(-21.49, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(-21.49, clamp(-21.49, -21.49, _GLF_IDENTITY(-21.49, max(-21.49, -21.49)))))), -2.9)))))))))))))) : transpose((mat3(mat3(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2061.7696) : 1.0)), injectionSwitch.y), 0.0))))))))) * mat3(1.0))))).x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1742.5866)), vec2(_GLF_FUZZED(3473.4258), (injectionSwitch)[1]), bvec2(false, true)))[1], injectionSwitch[1])))).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(0.3), _GLF_FUZZED(5042.4868)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), bvec2(true, true))).y))) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) | 0)))) - 0) & 63287) ^ (((0 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_DEAD(false)) || false)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
                barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, _GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, _GLF_IDENTITY(-30022, (true ? -30022 : _GLF_FUZZED(25037))))), bvec2(bvec4(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), false))), false, true))))) : injectionSwitch), vec2(mat2x3((false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, _GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec4(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), bvec2(bvec4(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), bvec2(bvec4(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), true, false)))), true, true))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), bvec2(bvec4(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), bvec2(bvec4(_GLF_IDENTITY(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), bvec2(bvec3(lessThan(ivec2(23897, 73883), ivec2(33500, -30022)), false))), true, false)))), true, true))))))), false)))), false))), false, true))))) : injectionSwitch), 1.0, _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), abs(0.0), 1.0)))).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, abs(1.0), 0.0), transpose(transpose(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, abs(1.0), 0.0))))))))), (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), false || (bool(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))) || false), _GLF_IDENTITY(! (! (true)), (! (! (true))) || false)))) && true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))), 0 + (int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))), 0 + (int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1))))))))), clamp(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))), 0 + (int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1))))))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))), 0 + (int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1))))))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))), 0 + (int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))))))))) >> 0))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(int(int(8)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, false))))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.x = next_virtual_gid;
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (_GLF_IDENTITY(4, (4) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), 64, 0);
 atomicStore(buf[GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.x], uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) << 0u), 0u))) + 1, 0u ^ (read_1 + 1))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec2(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), max((read_1), (read_1))) << 0u), 0u))) + 1, _GLF_IDENTITY(0u ^ (read_1 + 1), _GLF_IDENTITY((0u ^ (read_1 + 1)), max((0u ^ (read_1 + 1)), (0u ^ (read_1 + 1)))) * 1u)))), 0u | (((_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec2(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), max((read_1), (read_1))) << 0u), 0u))) + 1, _GLF_IDENTITY(0u ^ (read_1 + 1), (0u ^ (_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)))) * 1u)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) << 0u), 0u))) + 1, 0u ^ (read_1 + 1))), ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) << 0u), _GLF_IDENTITY(0u, (0u) + 0u)))) + 1, _GLF_IDENTITY(0u, (0u) | (0u)) ^ _GLF_IDENTITY((read_1 + 1), clamp(_GLF_IDENTITY((read_1 + 1), (_GLF_IDENTITY((read_1 + 1), ((read_1 + 1)) >> 0u)) | ((read_1 + 1))), _GLF_IDENTITY((read_1 + 1), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((read_1 + 1))), (read_1 + 1)))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec2(_GLF_IDENTITY(read_1, (read_1) << 0u), 0u))) + 1, 0u ^ _GLF_IDENTITY((read_1 + 1), (0u ^ 0u) ^ ((read_1 + 1))))))))) | 0u)), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(86864) : 0)))) + (_GLF_IDENTITY(0, ~ (~ (0))))), 0, 0), _GLF_IDENTITY((clamp(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) >> 0)) / 1), (0))))))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59013) : 0)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), max(min(0, 0), min(0, 0)))), 0)))) ^ 0, ((clamp(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) >> 0)) / 1), (0))))))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59013) : 0)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), max(min(0, 0), min(0, 0)))), 0)))) ^ _GLF_IDENTITY(0, max(0, 0))) * 1))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(true, (true) || false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (_GLF_IDENTITY(true, (true) || false)))), false, _GLF_IDENTITY(true, (true) || false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (_GLF_IDENTITY(true, (true) || false)))), false, _GLF_IDENTITY(true, (true) || false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (_GLF_IDENTITY(true, (true) || false)))), false, _GLF_IDENTITY(true, (true) || false)))))))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(true, (true) || false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(true, (true) || false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(true, (true) || false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(true, (true) || false)))))))))))), true)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((1.5 * (-1216.5589 - -8569.2111)))), float(1.0), _GLF_IDENTITY(bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))), _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 1.0)))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((1.5 * (-1216.5589 - -8569.2111)))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(1.0, 0.0 + (1.0))), _GLF_IDENTITY(max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), min(max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 1.0)))))).x) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), (0.0 + (1.0)) / 1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5972.4096) : _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-712.784))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)))))).x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), (0.0 + (1.0)) / 1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5972.4096) : _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-712.784))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)))))).x > injectionSwitch.y))))), true && (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), (0.0 + (1.0)) / 1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9727.1367) : 1.0)), _GLF_IDENTITY(length(vec2(0.0, 0.0)), float(mat3x4(length(vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, sin(0.0))), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, sin(0.0)))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, 1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5972.4096) : _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-712.784))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)))))).x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false) || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, (1.0) * 1.0)), (0.0 + (1.0)) / 1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), _GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), max(_GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), abs(0.0))), (false ? _GLF_FUZZED(5972.4096) : _GLF_IDENTITY(abs(0.0), (true ? abs(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(162.385)), bool(false)))) : _GLF_FUZZED(-712.784))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)))))).x > injectionSwitch.y))))))), bool(bvec2(! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), abs(0.0), 0.0, 1.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), abs(0.0), 0.0, 1.0)))))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), abs(0.0), 0.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), abs(0.0), 0.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), max(min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))), min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x), abs(0.0), 0.0, 1.0))))))))) + vec2(0.0, 0.0)).x > injectionSwitch.y))), true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0))), true)), (bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0))), true))) || false))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, true))))) || false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y = read_2;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false))), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))) || false), (injectionSwitch.x < injectionSwitch.y))))), true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, false))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(true, (true) && true), false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false))), true)))), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5220.9549)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5220.9549)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (1u & 1u)))) + 1 < subgroup_size)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), (mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))) - mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) > injectionSwitch.y)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(90327) : 0))], injectionSwitch[1])).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.x], _GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, (1) | (1)) == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y), min(_GLF_IDENTITY(uint(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y), clamp(uint(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y), uint(read_1 + 1 == _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2, uvec2(1u, 1u) * (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2, uvec2(1u, 1u) * (GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2)))).y), uint(read_1 + 1 == _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2, max(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2, (GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2) << uvec2(0u, 0u)), _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2, (GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2) * uvec2(1u, 1u)))).y))), uint(_GLF_IDENTITY(read_1, 0u | (read_1)) + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y))) + 1, 4, 64, 4);
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((injectionSwitch[1]), ((injectionSwitch[1])) * 1.0) / 1.0))).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.2)), float(injectionSwitch.x), bool(true))), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0), mix(vec2(_GLF_FUZZED(-64.15), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[1]), vec2((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], _GLF_FUZZED(-716.028)), bvec2(true, false)))), (float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.0), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[1]), vec2((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], _GLF_FUZZED(-45.96)), bvec2(true, false)), max(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.0), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[1]), vec2((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], _GLF_FUZZED(-45.96)), bvec2(true, false)), (true ? mix(vec2(_GLF_FUZZED(-1.0), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[1]), vec2((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], _GLF_FUZZED(-45.96)), bvec2(true, false)) : _GLF_FUZZED(vec2(-1.6, -9654.5627)))), mix(vec2(_GLF_FUZZED(-1.0), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[1]), vec2((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], _GLF_FUZZED(-45.96)), bvec2(true, false))))), mix(vec2(_GLF_FUZZED(-64.15), _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), _GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((-32.83 - 5115.2565))), bool(false)))) / 1.0), bool(true))))), clamp((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), _GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((-32.83 - 5115.2565))), bool(false)))) / 1.0), bool(true))))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), _GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((-32.83 - 5115.2565))), bool(false)))) / 1.0), bool(true))))), min((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), _GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((-32.83 - 5115.2565))), bool(false)))) / 1.0), bool(true))))), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), _GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((-32.83 - 5115.2565))), bool(false)))) / 1.0), bool(true))))))), (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), _GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((-32.83 - 5115.2565))), bool(false)))) / 1.0), bool(true)))))))[1]), vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], min((vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0))[0])), _GLF_FUZZED(-716.028)), bvec2(true, false))))) + 0.0)))) < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)))) / 1.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, abs(tan(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x)), true && (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(336.271)), bvec2(true, false))))).x)), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x3(injectionSwitch.x, 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) - 0.0))), true && (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1))) > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(4.4, mix(_GLF_IDENTITY(float(_GLF_FUZZED(79.00)), min(_GLF_IDENTITY(float(_GLF_FUZZED(79.00)), clamp(float(_GLF_FUZZED(79.00)), float(_GLF_FUZZED(_GLF_IDENTITY(79.00, min(79.00, _GLF_IDENTITY(79.00, mix(float(79.00), float(_GLF_FUZZED(-5.4)), bool(false))))))), float(_GLF_FUZZED(79.00)))), float(_GLF_FUZZED(79.00)))), float(4.4), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), injectionSwitch.x) : _GLF_IDENTITY(_GLF_FUZZED(-28.48), mix(float(_GLF_FUZZED(63.54)), float(_GLF_FUZZED(-28.48)), bool(true)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), _GLF_IDENTITY(true, (true) && true) ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4))))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(44797), (_GLF_IDENTITY(_GLF_FUZZED(44797), min(_GLF_FUZZED(_GLF_IDENTITY(44797, max(44797, 44797))), _GLF_FUZZED(44797)))) ^ 0) : int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4))))), injectionSwitch.x) : _GLF_IDENTITY(_GLF_FUZZED(-28.48), clamp(_GLF_FUZZED(-28.48), _GLF_FUZZED(-28.48), _GLF_FUZZED(-28.48)))))))), clamp(int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), (false ? _GLF_FUZZED(-34.71) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(float(0.0), (float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-92.83) : 0.0)))) * 1.0)), mix(float(_GLF_FUZZED(2.3)), float(float(_GLF_IDENTITY(float(0.0), (float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-92.83) : 0.0)))) * 1.0))), bool(true)))), _GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(4.4)), ((true ? 0.0 : _GLF_FUZZED(4.4))) * sqrt(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-30.49)))))))), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(-28.48, min(-28.48, -28.48)))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! _GLF_IDENTITY((! (! (true))), ! (_GLF_IDENTITY(! ((! (! (true)))), ! (! (! ((! (! (true)))))))))))) ? _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))) : _GLF_FUZZED(-28.48))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4), _GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), min(true ? 0.0 : _GLF_FUZZED(4.4), _GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), float(vec3(true ? 0.0 : _GLF_FUZZED(4.4), 0.0, 0.0))))))))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))), clamp(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), (false ? _GLF_FUZZED(-34.71) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), (float(0.0)) * 1.0))), (true ? 0.0 : _GLF_FUZZED(4.4))))), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(-28.48, min(-28.48, -28.48)))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), _GLF_IDENTITY(true, (true) && true)))) ? _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(4.4, (_GLF_IDENTITY(4.4, tan(0.0) + (4.4))) - 0.0))))), max((_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(4.4, (_GLF_IDENTITY(4.4, tan(0.0) + (4.4))) - 0.0))))), (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(4.4, (_GLF_IDENTITY(4.4, tan(0.0) + (4.4))) - 0.0)))))))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))), clamp(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), (false ? _GLF_FUZZED(-34.71) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), (float(0.0)) * 1.0))), (true ? 0.0 : _GLF_FUZZED(4.4))))), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(-28.48, _GLF_IDENTITY(min(-28.48, -28.48), min(min(-28.48, -28.48), _GLF_IDENTITY(min(-28.48, -28.48), (min(-28.48, -28.48)) / 1.0)))))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), clamp(true ? 0.0 : _GLF_FUZZED(4.4), _GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), (false ? _GLF_FUZZED(-6226.2198) : _GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(4.4), max(true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4))))), true ? 0.0 : _GLF_FUZZED(4.4))), true ? 0.0 : _GLF_FUZZED(4.4), true ? 0.0 : _GLF_FUZZED(4.4))))), injectionSwitch.x) : _GLF_FUZZED(-28.48)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (true))))))), (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))) || false))) ? _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true) ? 0.0 : _GLF_FUZZED(4.4)), 0.0 + (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true) ? 0.0 : _GLF_FUZZED(4.4)), mix(float((_GLF_IDENTITY(true, (true) && true) ? 0.0 : _GLF_FUZZED(4.4))), float(_GLF_FUZZED(-8.1)), bool(false)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-421.104) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x))) : _GLF_IDENTITY(_GLF_FUZZED(-28.48), min(_GLF_FUZZED(-28.48), _GLF_FUZZED(-28.48))))))))) ^ 0))) * 1) + 0)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))))) != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 subgroupAll(false);
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))) || false) || false)))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), max((int(3)), (int(3)))) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / exp(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec4(bool(bvec3(false, true, true)), false, true, false))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(false, (false) && true)))))))))), ! (! ((! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))))))) && true), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)) || (false)))))))), false, true))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))))))))) && true)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)) || (false)))))))), false, true))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))))))))) && true))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)) || (false)))))))), false, true))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))))))))) && true)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)) || (false)))))))), false, true))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))))))))) && true))))), bool(bvec2((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)) || (false)))))))), false, true))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))))))))) && true)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)))))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)) || (false)))))))), false, true))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, false || (false)), false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))))))))) && true))))), false))))))))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), false))))), bool(bvec4(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), false))))), true, false, true))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), false))))), bool(bvec4(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false), false))))), true, false, true)))))))))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (_GLF_IDENTITY(-79422, (_GLF_IDENTITY(-79422, (false ? _GLF_FUZZED(bitfieldInsert(-82174, -52729, 97922, -87229)) : _GLF_IDENTITY(-79422, (-79422) | (-79422))))) | (-79422)) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(7), int(7))) ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.x, 0u ^ (GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.x))], _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), 0u)) ^ 0u) | (uint(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y))), min(_GLF_IDENTITY(uint(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y), max(_GLF_IDENTITY(uint(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y), (uint(read_1 + _GLF_IDENTITY(1, (1) >> 0) == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y)) | (uint(_GLF_IDENTITY(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y, (_GLF_IDENTITY(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y, true, false)), (bool(bvec3(read_1 + 1 == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y, true, false))) && true))) && true)))), uint(_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1))) == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y))), uint(read_1 + _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(35993) : int(1))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(35993) : int(1))))), (_GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(35993) : int(1)))))) << 0), (0 << _GLF_IDENTITY(int(1), int(1))), int(_GLF_ONE(1.0, injectionSwitch.y))))))), max(1, 1))))) == GLF_merged2_0_1_16_1_1_6next_virtual_gidread_2.y))) + 1, 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))))) && true))) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((true && ((injectionSwitch.x > injectionSwitch.y))), ((true && ((injectionSwitch.x > injectionSwitch.y)))) || false)))) || false))))))))))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), 0 | (_injected_loop_counter))) - 0)) | 0) != (1 ^ 1)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))));
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(true);
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4933.6746), _GLF_FUZZED(-368.848)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y), false, true)))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false)))) && true)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true)), bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) && true)), false, false))), false, true)))))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, 0.0, exp(0.0)), (false ? _GLF_FUZZED(mat3x2(-9.7, -3833.4276, _GLF_IDENTITY(-553.869, _GLF_IDENTITY((-553.869), max(_GLF_IDENTITY((-553.869), max((-553.869), (-553.869))), (-553.869))) / 1.0), 9.0, -3.7, -5.5)) : mat3x2(injectionSwitch.y, exp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_ZERO(0.0, injectionSwitch.x)), (min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) - 0.0), (_GLF_IDENTITY(min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_ZERO(0.0, injectionSwitch.x)), (min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 0.0, 0.0, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0)), (true ? float(mat4x2(0.0, 0.0, 0.0, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0)) : _GLF_FUZZED(-39.41)))), 0.0)), injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) - 0.0)) / 1.0))), 1.0, 0.0, 0.0, exp(0.0))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, false))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat3x2(injectionSwitch[0], 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch[1])).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat3x2(injectionSwitch[0], 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch[1])).y))) && true)))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), tan(vec2(0.0, 0.0)) + ((injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9850.5824)), bool(false)))))), max((injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0)))).y)))))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9927.7255)), bool(false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ _GLF_IDENTITY((~ (_injected_loop_counter --)), ~ (~ ((~ (_injected_loop_counter --)))))), (false ? _GLF_FUZZED(ivec2(-81424, -75575).x) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ _GLF_IDENTITY((~ (_injected_loop_counter --)), ~ (~ ((~ (_injected_loop_counter --)))))), ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) << 0)), ~ (~ ((~ (_injected_loop_counter --))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5916.7737), _GLF_FUZZED(-435.215)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / cos(vec2(0.0, 0.0))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     barrier();
    }
  }
}
