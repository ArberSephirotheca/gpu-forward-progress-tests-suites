#version 460
struct _GLF_struct_6 {
 mat2x4 _f0;
 int _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 ivec2 _f1;
 bool _f2;
} ;

struct _GLF_struct_4 {
 bool _f0;
 mat3x2 _f1;
 bool _f2;
 float _f3;
 ivec2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 _GLF_struct_7 _f1;
 uint subgroup_size;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 mat3 _f1;
 vec2 _f2;
 uvec2 _f3;
 vec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
 mat4x2 _f2;
 bvec2 _f3;
 _GLF_struct_1 _f4;
 mat3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_5(_GLF_struct_4(true, mat3x2(1.0), true, 1.0, ivec2(1), mat2x3(1.0))), _GLF_struct_7(_GLF_struct_6(mat2x4(1.0), 1, bvec2(true)), ivec2(1), true), gl_SubgroupSize);
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(ivec4(1), _GLF_struct_0(mat4x3(1.0)), mat4x2(1.0), bvec2(true), _GLF_struct_1(bvec4(true), mat3(1.0), vec2(1.0), uvec2(1u), vec2(1.0), bvec3(true)), mat3(1.0), mat3x4(1.0)), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_8.subgroup_size + _GLF_struct_replacement_3.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_8.subgroup_size + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % _GLF_struct_replacement_8.subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_struct_replacement_3.subgroup_local_id + 1 < _GLF_struct_replacement_8.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
  }
}
