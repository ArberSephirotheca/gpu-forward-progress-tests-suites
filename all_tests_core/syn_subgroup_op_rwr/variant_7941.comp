#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true))))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))) < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))))))
            {
             do
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-53525) : _injected_loop_counter)) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, exp(abs(0.0)), 0.0, 0.0, 0.0))).y)), true)))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(max(gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(max(gl_NumWorkGroups.x, gl_NumWorkGroups.x), _GLF_IDENTITY(max(gl_NumWorkGroups.x, gl_NumWorkGroups.x), (max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)) >> 0u), max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec4(_GLF_IDENTITY((false) || false, bool(bvec4(_GLF_IDENTITY((false) || false, false || ((false) || false)), false, false, false))), false, false, true))))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false))))))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, abs(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0))), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0)), min(_GLF_IDENTITY(float(mat3x4(injectionSwitch.x, abs(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0))), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0)), (float(mat3x4(injectionSwitch.x, abs(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0))), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0))) + 0.0), float(mat3x4(injectionSwitch.x, abs(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sqrt(0.0), 1.0))), 0.0, 0.0, abs(1.0), sqrt(1.0), 1.0))))) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), (((injectionSwitch.x < injectionSwitch.y))) || false))))), true, false, false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           do
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true)) && _GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (! ((true) && true))))))
                {
                 for(int _injected_loop_counter = ((0 & 57312) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, _GLF_IDENTITY(159530u, clamp(159530u, _GLF_IDENTITY(159530u, uint(uvec4(159530u, 0u, 0u, 1u))), 159530u)), 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec3(2u), uvec3(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(2u), uvec3(2u)), ~ (~ (_GLF_IDENTITY(uvec3(2u), uvec3(2u)))))) * uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))) * (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(27950u, max(27950u, 27950u)), 159530u, 147160u)) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(27950u, 159530u, 147160u), uvec3(0u, 0u, 0u) ^ (uvec3(27950u, 159530u, 147160u)))) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))))) << uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)), uvec3(1u, 1u, 1u) * (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(27950u, _GLF_IDENTITY(uint(uint(27950u)), clamp(uint(uint(27950u)), uint(uint(27950u)), uint(uint(27950u))))), 159530u, 147160u)) : _GLF_IDENTITY(gl_WorkGroupID, (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(subgroup_size))))), ~ (~ ((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), uvec3(1u, 1u, 1u) * (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x) | (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), uvec3(1u, 1u, 1u) * (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(27950u, (_GLF_IDENTITY(27950u, (27950u) ^ 0u)) >> 0u), 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, _GLF_IDENTITY(159530u, ~ (~ (159530u))), 147160u)) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), uvec3(1u, 1u, 1u) * (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, _GLF_IDENTITY(2u, clamp(2u, _GLF_IDENTITY(2u, clamp(2u, 2u, 2u)), 2u))))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(27950u, 159530u, 147160u), min(uvec3(27950u, 159530u, 147160u), uvec3(27950u, 159530u, 147160u)))) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(2u, 0u | (_GLF_IDENTITY(2u, ~ (~ (2u)))))), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x) | (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), uvec3(1u, 1u, 1u) * (~ ((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, max(1u, 1u))))), 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u)))), (true ? _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u)))) : _GLF_FUZZED(uvec3(137211u, 100893u, 153432u))))) | (_GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u))))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x)) - 0u)), _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), uvec3(1u, 1u, 1u) * (~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u)))))))) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, max(2u, 2u))))), ((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID), ~ (~ ((false ? _GLF_FUZZED(uvec3(27950u, 159530u, 147160u)) : gl_WorkGroupID)))))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))) ^ uvec3(0u, 0u, 0u))).x));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ uint(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0 * (0.0)), injectionSwitch.x))), workgroup_size, workgroup_size)) * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)) << (0u & 150278u)) ^ 0u), (subgroup_size) ^ _GLF_IDENTITY(0u, min(0u, 0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(atomicMax(subgroup_id, 98784u)) : workgroup_base)), workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(atomicMax(subgroup_id, 98784u)) : workgroup_base)), workgroup_base)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(atomicMax(subgroup_id, 98784u)) : workgroup_base)), workgroup_base))))) - 0u), workgroup_base)), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(workgroup_base, workgroup_base), (max(workgroup_base, workgroup_base)) << 0u)), _GLF_IDENTITY(0u, max(0u, 0u)) + (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) ^ (0u ^ 0u)))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), subgroup_size)));
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u), (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))), _GLF_IDENTITY(uint(uvec2(~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))), (~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u)))) | (~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))))), ~ (~ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u))))), 0u))) >> 0u)))) - 0u), _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, ~ (~ (4))) : _GLF_FUZZED(findLSB(ivec2(-40687, -2482))[1]))), _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(0, int(ivec3(0, 0, 1))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), bool(bvec2(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), (1 ^ 1) | (int(0))))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), false)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(4), int(4)))), (4) - 0), 64, 4);
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, sin(0.0)), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, sin(0.0)), vec3(0.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), mix(vec2((vec2(0.0, 0.0) + (injectionSwitch))[0], _GLF_FUZZED(2420.8879)), vec2(_GLF_FUZZED(45.51), _GLF_IDENTITY((vec2(0.0, 0.0) + (injectionSwitch))[1], mix(float(_GLF_FUZZED(-4856.3631)), float((vec2(0.0, 0.0) + (injectionSwitch))[1]), bool(true)))), bvec2(false, true)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) - 0) | (1))])))).y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, cos(0.0), 0.0)), mix(float(_GLF_FUZZED(-1.1)), float(float(mat2(1.0, 1.0, cos(0.0), 0.0))), bool(true)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))), 0.0, length(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 1.0), max(vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))), 0.0, length(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 1.0), vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))), 0.0, length(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 1.0)))), mix(float(_GLF_FUZZED(9.1)), float(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))), 0.0, length(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 1.0), max(vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))), 0.0, length(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 1.0), vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))), 0.0, length(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 1.0))))), bool(true)))))) * (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))) / vec2(1.0, 1.0)))) / vec2(1.0, 1.0), vec2(0.0, 0.0) + ((injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, exp(0.0), 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))).y))));
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(77.95), _GLF_FUZZED(-824.517)), bvec2(false, false))).x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))).y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), true)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))))).x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), int(int(int(6))))) + 0), int(6), int(6)))), _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(47680) : 0), _GLF_IDENTITY(((false ? _GLF_FUZZED(47680) : 0)) - 0, min(((false ? _GLF_FUZZED(47680) : 0)) - 0, _GLF_IDENTITY(((false ? _GLF_FUZZED(47680) : 0)) - 0, int(int(((false ? _GLF_FUZZED(47680) : 0)) - 0))))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(6, ~ (~ (6))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1), (ivec3(_GLF_IDENTITY(6, ~ (~ (6))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1)) + ivec3(0, 0, 0))), max(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(6, ~ (~ (6))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1), (ivec3(_GLF_IDENTITY(6, ~ (~ (6))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1)) + ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(6, ~ (~ (6))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1), (ivec3(_GLF_IDENTITY(6, ~ (~ (6))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 1)) + ivec3(0, 0, 0)))))), min(6, 6))), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))) | 0, 0 | ((_GLF_IDENTITY(int(6), int(6))) | 0)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) << 0)))) / 1) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), ~ (~ (int(4))))) >> 0))))) | 0) ^ 0)) & 5761), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))), int(4))))) | 0, _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY(int(ivec3(~ (int(4)), 1, 0)), ~ (~ (int(ivec3(~ (int(4)), 1, 0))))))))) >> 0))))) | 0) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), ~ (~ (int(4))))))))) >> 0))))) | 0) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0, (((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0) - 0))))))) & 5761), false, true)), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), clamp((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), 0 + (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), 0 | ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4)))))) / 1) >> 0))))))) | _GLF_IDENTITY(0, (0) - 0)) ^ 0)) & 5761), false, true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) << 0)))) / 1) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), ~ (~ (int(4))))) >> 0))))) | 0) ^ 0)) & 5761), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))), int(4))))) | 0, _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY(int(ivec3(~ (int(4)), 1, 0)), ~ (~ (int(ivec3(~ (int(4)), 1, 0))))))))) >> 0))))) | 0) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), ~ (~ (int(4))))))))) >> 0))))) | 0) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0, (((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0) - 0))))))) & 5761), false, true)), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), clamp((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), 0 + (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), 0 | ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4)))))) / 1) >> 0))))))) | _GLF_IDENTITY(0, (0) - 0)) ^ 0)) & 5761), false, true))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) << 0)))) / 1) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), ~ (~ (int(4))))) >> 0))))) | 0) ^ 0)) & 5761), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))), int(4))))) | 0, _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY(int(ivec3(~ (int(4)), 1, 0)), ~ (~ (int(ivec3(~ (int(4)), 1, 0))))))))) >> 0))))) | 0) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), ~ (~ (int(4))))))))) >> 0))))) | 0) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0, (((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0) - 0))))))) & 5761), false, true)), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), clamp((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), 0 + (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), 0 | ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4)))))) / 1) >> 0))))))) | _GLF_IDENTITY(0, (0) - 0)) ^ 0)) & 5761), false, true)))))))))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) << 0)))) / 1) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), ~ (~ (int(4))))) >> 0))))) | 0) ^ 0)) & 5761), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))), int(4))))) | 0, _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY(int(ivec3(~ (int(4)), 1, 0)), ~ (~ (int(ivec3(~ (int(4)), 1, 0))))))))) >> 0))))) | 0) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), ~ (~ (int(4))))))))) >> 0))))) | 0) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0, (((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0) - 0))))))) & 5761), false, true)), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), clamp((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), 0 + (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), 0 | ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4)))))) / 1) >> 0))))))) | _GLF_IDENTITY(0, (0) - 0)) ^ 0)) & 5761), false, true))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), ((0)) << 0)))) / 1) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), ~ (~ (int(4))))) >> 0))))) | 0) ^ 0)) & 5761), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))), int(4))))) | 0, _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY(int(ivec3(~ (int(4)), 1, 0)), ~ (~ (int(ivec3(~ (int(4)), 1, 0))))))))) >> 0))))) | 0) ^ 0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), _GLF_IDENTITY(~ (~ (int(4))), min(~ (~ (int(4))), ~ (~ (int(4))))))))) >> 0))))) | 0) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0, (((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0))), ~ (~ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) >> 0)))))))) | 0) ^ 0) - 0))))))) & 5761), false, true)), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))) | 0, ((_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), clamp((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0), 0 + (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))), 0 | ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))) >> 0))))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), ~ (~ (int(4)))))) / 1) >> 0))))))) | _GLF_IDENTITY(0, (0) - 0)) ^ 0)) & 5761), false, true)))))))))), false, true, false))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> _GLF_IDENTITY((0 | 0), ((0 | 0)) << (0 >> _GLF_IDENTITY(int(1), int(1))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(vec2(-8.4, 8.6)) : min(injectionSwitch, injectionSwitch))), mat2(1.0) * (min(injectionSwitch, injectionSwitch)))) / vec2(1.0, 1.0))).x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, exp(sqrt(0.0)), 1.0, 1.0, 1.0), (mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, exp(sqrt(0.0)), 1.0, 1.0, 1.0)) * mat4(1.0))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true)))))))))
              continue;
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) | (int(3)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 ^ (int(3)))) | (int(3)))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))) || false); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bool(bool(bvec4(true, false, false, false)))))) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         do
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : read_1)))), (_GLF_IDENTITY(true ? read_1 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) | 0u), 1u))), min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(_GLF_IDENTITY(0u, (0u | 0u) | (0u)), 0u)))), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(_GLF_IDENTITY(0u, (0u | 0u) | (0u)), 0u)))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(_GLF_IDENTITY(0u, (0u | 0u) | (0u)), 0u))))))) ^ (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(uint(uvec2(0u, 0u)), _GLF_IDENTITY(uint(uvec2(0u, 0u)), min(uint(uvec2(0u, 0u)), uint(uvec2(0u, 0u)))))), (_GLF_IDENTITY(uint(uvec2(0u, 0u)), (true ? uint(uvec2(0u, 0u)) : _GLF_FUZZED(packUnorm2x16(injectionSwitch))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), _GLF_IDENTITY((uint(uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))) | 0u, (_GLF_IDENTITY((uint(uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))) | 0u, ((uint(uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))) | 0u) ^ 0u)) + (68451u & 0u))), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), (uvec2(0u, 1u)) * uvec2(1u, 1u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u)))))) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(bitfieldInsert((true ? read_1 : 166429u), subgroup_local_id, _injected_loop_counter, -87293)) : uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (true ? read_1 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), (_GLF_IDENTITY(~ (~ (0u)), (~ (~ (0u))) | (_GLF_IDENTITY(~ (~ (0u)), max(~ (~ (0u)), ~ (~ (0u))))))) / 1u)), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(read_2))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) >> uvec2(0u, 0u))), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), sqrt(1.0), 1.0, 0.0))))) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0u, uint(uint(0u)))))))))), clamp(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0u, uint(uint(0u)))))))))), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), _GLF_IDENTITY((uint(uvec2(0u, 0u))) | 0u, ((uint(uvec2(0u, 0u))) | 0u) - 0u)), uint(uvec2(0u, 0u))))) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0u, uint(uint(0u)))))))))), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0u, uint(uint(0u))))))))))))) << (0u | 0u)))) ^ 0u))) + 1 == _GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), (false ? _GLF_FUZZED((workgroup_id)) : _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : read_1)))), (_GLF_IDENTITY(true ? read_1 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u))))))), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) << 0u)))))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) ^ 0u))), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) << 0u))))), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))), 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (uvec2(0u, 0u))))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? _GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec3(read_1, 1u, 0u)), min(uint(uvec3(read_1, 1u, 0u)), _GLF_IDENTITY(uint(uvec3(read_1, 1u, 0u)), (uint(uvec3(read_1, 1u, 0u))) >> 0u)))) : _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(_GLF_IDENTITY(uvec2(0u, 0u), ((uvec2(1u, 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), uvec2(1u))) >> _GLF_IDENTITY(uvec2(1u), uvec2(1u))) * (uvec2(0u, 0u))))))) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(0u))), (_GLF_IDENTITY(0u, uint(uint(0u)))) >> (0u | 0u))) * 1u)))))))))) ^ 0u))) + 1 == _GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))), 0u | (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, uint(uvec4(read_1, 1u, 0u, (0u | 0u)))), _GLF_IDENTITY(read_1, 0u ^ (read_1)))))))), (_GLF_IDENTITY(true ? read_1 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), _GLF_IDENTITY((uint(uvec2(0u, 0u))) | 0u, clamp((uint(uvec2(0u, 0u))) | 0u, (uint(uvec2(0u, 0u))) | 0u, (uint(uvec2(0u, 0u))) | 0u))), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), uvec2(0u, 0u)))), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), _GLF_IDENTITY((uint(uvec2(0u, 0u))), min((uint(uvec2(0u, 0u))), (uint(uvec2(0u, 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(_GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) << uvec2(0u, 0u)))), uvec2(0u, 0u), uvec2(0u, 0u))))) | 0u), uint(uvec2(0u, 0u)))), (_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(0u, 1u * (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(_GLF_IDENTITY(uvec2(0u, 0u), max(_GLF_IDENTITY(uvec2(0u, 0u), max(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)), uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), uvec2(1u, 1u) * (uvec2(0u, 0u))))))) | 0u), uint(uvec2(0u, 0u)))), (_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) << (1u ^ 1u))))) | 0u), _GLF_IDENTITY(uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), (_GLF_IDENTITY(uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), clamp(uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), uint(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u))))))) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u)))), (_GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) / 1u)) - 0u)))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(0u, 0u))) | 0u, max((uint(uvec2(0u, 0u))) | 0u, (uint(uvec2(0u, 0u))) | 0u)), ((uint(uvec2(0u, 0u))) | 0u) << (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec2(0u, 0u))))) ^ (virtual_gid))) ^ 0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), 0u + (uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), (1u ^ 1u), 0u, 0u))))))))))) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), 0u + (uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), (1u ^ 1u), 0u, 0u))))))))))) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), 0u + (uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), (1u ^ 1u), 0u, 0u))))))))))) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), 0u + (uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), (1u ^ 1u), 0u, 0u))))))))))) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), 0u + (uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), (1u ^ 1u), 0u, 0u))))))))))) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size)))))))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(0u, 0u)), 0u + (uint(uvec2(0u, 0u)))), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))) ^ (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), (1u ^ 1u), 0u, 0u))))))))))) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size)))))))))))) | 0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? read_1 : _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (uint(uvec2(0u, 0u))) | 0u), uint(uvec2(0u, 0u)))))) * 1u) ^ _GLF_IDENTITY((virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0u, uint(uint(0u)))))))))))) ^ 0u))) + 1 == _GLF_IDENTITY(read_2, clamp(read_2, read_2, read_2))))))) + 1, 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             subgroupAll(false);
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))))));
          }
        }
      }
    }
   else
    {
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) | ((next_virtual_gid))) | 0u)) - 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, 0u ^ (0u))))))), (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))))) | (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))))))) - _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(0u, 1u, 1u, 0u)), (uint(uvec4(0u, 1u, 1u, 0u))) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u, 1u, 0u)), uint(_GLF_IDENTITY(uvec2(uint(uvec4(0u, 1u, 1u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (uvec2(uint(uvec4(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))))), 1u, 1u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) / 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) / 1u)) - 0u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) - 0u), 1u)), (uint(uvec2(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) | 0u, (_GLF_IDENTITY((next_virtual_gid) | 0u, ((next_virtual_gid) | 0u) / 1u)) - ((+ 101495u) & 0u)))) - 0u), 1u))) | (uint(uvec2(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) - 0u), 1u)))))))))))], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(read_1, (read_1) - 0u))), (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u | (read_1))) ^ 0u)) ^ 0u) + 1 == read_2) + 1, 4, 64, 4);
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
      {
       subgroupAll(true);
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (_GLF_IDENTITY(bool(bvec2(true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(true, true)))))) && true))), (_GLF_IDENTITY(bool(bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (true))))))))), ! (! (bool(bvec2(true, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))), bool(bvec4((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))), false, true, false)))) || false)))) && true))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), false || (bool(true)))), ! (! (bool(_GLF_IDENTITY(bool(true), false || (bool(true)))))))), false), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true, false), true))))) || false)) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           break;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(55.82), _GLF_FUZZED(349.656)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
}
