#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), ~ (~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(2)) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2))))), int(2)))), ~ (~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(2)) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2))))), int(2)))), min(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(2)) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2))))), int(2)))), 0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) >> 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(2)) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2))))), int(2))))))))))))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), int(2)), 0, 1)), max(int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (~ (2)) | 0)))), int(2)), 0, 1)), int(ivec3(_GLF_IDENTITY(int(2), int(2)), 0, 1))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), int(2)), 0, 1)), max(int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (~ (2)) | 0)))), int(2)), 0, 1)), int(ivec3(_GLF_IDENTITY(int(2), int(2)), 0, 1))))), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))), 1))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)), exp(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)), exp(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0))).y))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-1.5)))), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-49.44)), float(0.0), bool(true))), 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), ! (! (_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))), (false ? _GLF_FUZZED(-36.23) : _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))), max(_GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(dot(vec4(-49.34, 9.3, 57.53, -75.49), vec4(-462.823, 225.242, -36.88, -30.28))))), 0.0), vec3(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(733.653)), float(1.0), bool(true))), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, max(_GLF_IDENTITY((1.0) + 0.0, min((1.0) + 0.0, (1.0) + 0.0)), _GLF_IDENTITY((1.0) + 0.0, ((1.0) + 0.0) - 0.0)))), 1.0))))))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))
          barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.6)), float(0.0), bool(true))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0)))), 0 ^ (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, _GLF_IDENTITY(dot(vec3(abs(1.0), 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(abs(1.0), 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, log(1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), (float(mat3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, _GLF_IDENTITY(dot(vec3(abs(1.0), 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(abs(1.0), 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, log(1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))) - 0.0))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(clamp(int(_GLF_IDENTITY(0, (0) >> 0)), int(0), int(0)), (false ? _GLF_FUZZED(atomicOr(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))), int(0), int(0)), int(ivec2(_GLF_IDENTITY(clamp(int(0), int(0), int(0)), (clamp(int(0), int(0), int(0))) ^ 0), 0)))))))))), ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), 1))), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(clamp(int(0), int(0), int(0)), (false ? _GLF_FUZZED(atomicOr(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(clamp(int(0), int(0), int(0)), int(ivec2(_GLF_IDENTITY(clamp(int(0), int(0), int(0)), (clamp(int(0), int(0), int(0))) ^ 0), 0))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (0))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(clamp(int(0), int(0), int(0)), (false ? _GLF_FUZZED(atomicOr(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(clamp(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0))), int(0)), int(ivec2(_GLF_IDENTITY(clamp(int(0), int(0), int(0)), (clamp(int(0), int(0), int(0))) ^ _GLF_IDENTITY(0, int(int(0)))), 0))))))))))))) * 1) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(subgroup_local_id)))), clamp(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(subgroup_local_id)))), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(subgroup_local_id)))), min(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(subgroup_local_id)))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED(subgroup_local_id)))))) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))), (_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))))))))) | (_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) / uvec3(1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups), 0u)))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))))))))))))).x, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(0u, (0u) * 1u))), 0u | (0u)), 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(85980u, (_GLF_IDENTITY(85980u, ~ (~ (85980u)))) ^ 0u), 888u, 134343u)) : (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)))))).x, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : _GLF_IDENTITY((gl_NumWorkGroups), (true ? (gl_NumWorkGroups) : _GLF_FUZZED(uvec3(82320u, 123759u, 194u))))), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) ^ (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), clamp((_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)) - uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, _GLF_IDENTITY(888u, min(888u, 888u)), 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)))))))).x) | 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) * 1u))), 0u | (0u)), 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(85980u, (_GLF_IDENTITY(85980u, ~ (~ (85980u)))) ^ 0u), 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)))), max(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(85980u, (_GLF_IDENTITY(85980u, ~ (~ (85980u)))) ^ 0u), 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(85980u, (_GLF_IDENTITY(85980u, ~ (~ (85980u)))) ^ 0u), 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)))))))).x, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), clamp((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), min(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)))), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) ^ (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), clamp((false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups)), (false ? _GLF_FUZZED(uvec3(85980u, 888u, 134343u)) : (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)))))))).x) | 0u))), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) << uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))), (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), min(_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) ^ (max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u)))))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u)))))) | uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))) | (max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u))))))))))))), (clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))) | (max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u)))))))))))))) | (clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u))), max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))) | (max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u)))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))), (_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) + ((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u))) / uvec3(_GLF_IDENTITY(1u, (1u) ^ (91211u & 0u)), 1u, 1u))), min(_GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) ^ (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u)))))) | uvec3(0u, 0u, 0u))))), clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, (0u) / 1u), 1u)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) | (uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), max(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)))))) / uvec3(1u, _GLF_IDENTITY(1u, max(1u, 1u)), 1u))), _GLF_IDENTITY(max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))) | (max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))))))), max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u)))))))), (max(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), _GLF_IDENTITY(max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), min(_GLF_IDENTITY((gl_NumWorkGroups), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) ^ ((gl_NumWorkGroups))), (gl_NumWorkGroups))) / uvec3(1u, 1u, 1u))), _GLF_IDENTITY((max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))), min((max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))), (max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + 0u)) - 0u))))))) | (max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), (min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u)))) | uvec3(0u, 0u, 0u))) | (min(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))))))))), max(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), 1u)))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / _GLF_IDENTITY(uvec3(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) ^ 0u)) >> 0u), 1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), ~ (~ (max(1u, 1u)))))) ^ 0u), 1u))))) - uvec3(0u, 0u, 0u)))))))))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))))))))))) >> uvec3(0u, 0u, 0u)).x, 1u, 1u, 1u)) * uvec4(1u, 1u, 1u, 1u))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(max(_GLF_IDENTITY(gl_WorkGroupID.x, 0u + (gl_WorkGroupID.x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)).x)), _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, clamp(_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, ((gl_WorkGroupID.x) | 0u) | 0u), _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, (false ? _GLF_FUZZED(num_workgroup) : (gl_WorkGroupID.x) | 0u)), _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, (_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, uint(uvec3((gl_WorkGroupID.x) | 0u, 0u, 1u)))) + 0u)), ~ (~ (~ (_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, (_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, uint(uvec3((gl_WorkGroupID.x) | 0u, 0u, 1u)))) + 0u))))))))))), (max(_GLF_IDENTITY(gl_WorkGroupID.x, 0u + (gl_WorkGroupID.x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x)), _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, clamp(_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, ((gl_WorkGroupID.x) | 0u) | 0u), _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, (false ? _GLF_FUZZED(num_workgroup) : (gl_WorkGroupID.x) | 0u)), (gl_WorkGroupID.x) | 0u))))) | (max(_GLF_IDENTITY(gl_WorkGroupID.x, 0u + (gl_WorkGroupID.x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (gl_WorkGroupID.x) | (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) + uvec3(0u, 0u, 0u)), gl_WorkGroupID)).x)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, ((gl_WorkGroupID.x) | 0u) / 1u), clamp(_GLF_IDENTITY((gl_WorkGroupID.x) | 0u, ((gl_WorkGroupID.x) | 0u) | 0u), _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, (false ? _GLF_FUZZED(num_workgroup) : (gl_WorkGroupID.x) | 0u)), (gl_WorkGroupID.x) | 0u)))))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ldexp(280.433, 5865)) : injectionSwitch.y))), float(_GLF_FUZZED(919.661)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))) | (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), clamp(clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))), clamp(workgroup_base, workgroup_base, workgroup_base), clamp(workgroup_base, workgroup_base, workgroup_base))), clamp(clamp(workgroup_base, workgroup_base, workgroup_base), clamp(workgroup_base, workgroup_base, workgroup_base), clamp(workgroup_base, workgroup_base, workgroup_base)))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), clamp(0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * subgroup_size)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 | 0, 0 + (_GLF_IDENTITY(0, 0 | (0)) | 0)))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true)))))))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), (true ? _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)) % subgroup_size)) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) : _GLF_FUZZED(uaddCarry(subgroup_id, 56454u, virtual_gid))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), (! (false)) || false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((23.74 + 8687.1531))), bvec2(true, false))).x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     barrier();
    }
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(2174)))), _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + (uint(read_1 + 1))), 4, 64, 4);
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec4(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), 1u, 0u, 0u)), uint(uvec2(uint(uvec4(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), 1u, 0u, 0u)), 0u)))), max(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (1u)), 0u, 0u))), _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 1u, 0u, 0u)))))))))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(false, (false) && true));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _injected_loop_counter ++)
        {
         return;
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))) && true), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), false))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(((false)), true && (((false))))) || false)) || false)));
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) || false)) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((! (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), float(_GLF_FUZZED(8.2)), bool(false)))))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(96.33), _GLF_FUZZED((-231.552 + 270.251))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(min(read_1, read_1), max(min(read_1, read_1), min(read_1, read_1))))))) + 1, 0u + _GLF_IDENTITY((read_1 + 1), ~ (~ ((read_1 + 1))))) == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), ~ (~ (_GLF_IDENTITY(2, (2) * 1))))))) * (1)), int(ivec3(_GLF_IDENTITY(1, int(ivec4(1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.8), _GLF_FUZZED(-977.099)), bvec2(false, false))), injectionSwitch))) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.8), _GLF_FUZZED(-977.099)), bvec2(false, false))), injectionSwitch))) : injectionSwitch))) - sqrt(vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x)), (injectionSwitch.x) + _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(749.839)), float(mat4x2(float(_GLF_FUZZED(749.839)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))), bool(false)))))), 1, (0 | 0)))), 1, 1))), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                barrier();
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(150.022), _GLF_FUZZED(-49.05)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(856.903), _GLF_FUZZED(float(70758))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))[_GLF_IDENTITY(1, (1) | 0)], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0))))) / vec2(1.0, 1.0))[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, mix(float(_GLF_FUZZED(-5609.3775)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(150.022), _GLF_FUZZED(-49.05)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(150.022), _GLF_FUZZED(-49.05)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(150.022), _GLF_FUZZED(-49.05)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(150.022), _GLF_FUZZED(-49.05)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).y), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(150.022), (_GLF_IDENTITY(_GLF_FUZZED(150.022), max(_GLF_FUZZED(150.022), _GLF_FUZZED(150.022)))) / 1.0), _GLF_FUZZED(-49.05)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch)[0], float(mat3x4(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])))), max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], max((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.4, -6.8)) : injectionSwitch)))[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), mix(vec2(_GLF_FUZZED(1.2), (vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch)[0], float(mat3x4(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])))), max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], max((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.4, -6.8)) : injectionSwitch)))[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))))[1]), vec2((vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch)[0], float(mat3x4(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, log(1.0), 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])))), max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], max((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.4, -6.8)) : injectionSwitch)))[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))))[0], _GLF_FUZZED(7.5)), bvec2(true, false))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)), mix(vec2(_GLF_FUZZED(150.022), _GLF_FUZZED(-49.05)), vec2((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))), bvec2(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false))))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(round(abs(injectionSwitch))) : injectionSwitch)).x, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(round(abs(injectionSwitch))) : injectionSwitch)).x, log(1.0))), 1.0 * (float(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(round(abs(injectionSwitch))) : injectionSwitch)).x, log(1.0)))))) < injectionSwitch.y)), true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(150.022), _GLF_IDENTITY(_GLF_FUZZED(-49.05), (true ? _GLF_FUZZED(-49.05) : _GLF_FUZZED(-74.96)))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-208.244)))), float(_GLF_FUZZED(-715.896)), bool(false)))))), mix(vec2((vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(_GLF_IDENTITY(float((injectionSwitch)[1]), (float((injectionSwitch)[1])) + 0.0), float(_GLF_FUZZED(-715.896)), bool(false)))))))[0], _GLF_FUZZED(-4.6)), vec2(_GLF_FUZZED(-346.579), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-715.896)), bool(false)))))))[1]), bvec2(false, true))), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(833.666)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3x4((injectionSwitch)[0], 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.9), _GLF_FUZZED(833.666)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3x4((injectionSwitch)[0], 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) * sqrt(1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))).x)) < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)) * mat3(1.0)))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0)).y)), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))).y)), true), false), false))))))).y))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     subgroupAll(true);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
  }
}
