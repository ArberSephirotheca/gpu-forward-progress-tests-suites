#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_50 {
 vec2 _f0;
 vec2 _f1;
 mat2x3 _f2;
 bool _f3;
} ;

struct _GLF_struct_49 {
 mat2x4 _f0;
} ;

struct _GLF_struct_51 {
 uint workgroup_size;
 mat4x3 _f0;
 uint _f1;
 uint _f2;
 vec4 _f3;
 _GLF_struct_49 _f4;
 _GLF_struct_50 _f5;
} ;

struct _GLF_struct_52 {
 _GLF_struct_51 _f0;
} ;

struct _GLF_struct_46 {
 vec4 _f0;
 mat4 _f1;
 vec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_45 {
 mat3 _f0;
 bool _f1;
 uint _f2;
 bool _f3;
 mat2x4 _f4;
 bool _f5;
 bool _f6;
} ;

struct _GLF_struct_47 {
 _GLF_struct_45 _f0;
 _GLF_struct_46 _f1;
} ;

struct _GLF_struct_43 {
 bvec2 _f0;
 uvec2 _f1;
 bvec3 _f2;
 vec3 _f3;
 float _f4;
} ;

struct _GLF_struct_42 {
 bvec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_41 {
 vec3 _f0;
 ivec3 _f1;
 bool _f2;
 ivec4 _f3;
 int _f4;
 mat3x4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_40 {
 float _f0;
 mat4 _f1;
 mat2 _f2;
 mat3x4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_44 {
 _GLF_struct_40 _f0;
 _GLF_struct_41 _f1;
 mat4x3 _f2;
 _GLF_struct_42 _f3;
 _GLF_struct_43 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_38 {
 uvec3 _f0;
 mat4 _f1;
 vec3 _f2;
 uvec3 _f3;
 uvec2 _f4;
 uint num_workgroup;
 uint _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_37 {
 uvec2 _f0;
} ;

struct _GLF_struct_39 {
 _GLF_struct_37 _f0;
 _GLF_struct_38 _f1;
 mat2x4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_35 {
 uvec3 _f0;
 vec3 _f1;
 uvec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_34 {
 ivec3 _f0;
 vec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_36 {
 vec3 _f0;
 _GLF_struct_34 _f1;
 vec4 _f2;
 _GLF_struct_35 _f3;
} ;

struct _GLF_struct_32 {
 ivec2 _f0;
 int _f1;
 bvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_33 {
 _GLF_struct_32 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_48 {
 _GLF_struct_33 _f0;
 uint _f1;
 _GLF_struct_36 _f2;
 mat3x2 _f3;
 _GLF_struct_39 _f4;
 _GLF_struct_44 _f5;
 _GLF_struct_47 _f6;
} ;

struct _GLF_struct_29 {
 mat2x4 _f0;
 ivec3 _f1;
 int _f2;
 mat3x4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_30 {
 int _injected_loop_counter;
 mat3x4 _f0;
 _GLF_struct_29 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_31 {
 _GLF_struct_30 _f0;
} ;

struct _GLF_struct_26 {
 bool _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_27 {
 _GLF_struct_26 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_24 {
 uvec2 _f0;
 mat3x2 _f1;
 float _f2;
 mat2 _f3;
 ivec3 _f4;
 mat2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_23 {
 ivec3 _f0;
} ;

struct _GLF_struct_22 {
 vec3 _f0;
 mat3 _f1;
 ivec4 _f2;
 mat3x4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 _GLF_struct_24 _f2;
} ;

struct _GLF_struct_20 {
 bool _f0;
} ;

struct _GLF_struct_21 {
 _GLF_struct_20 _f0;
} ;

struct _GLF_struct_19 {
 mat4 _f0;
 mat2x4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_28 {
 _GLF_struct_19 _f0;
 mat3 _f1;
 _GLF_struct_21 _f2;
 _GLF_struct_25 _f3;
 mat2x3 _f4;
 uint read_2;
 int _f5;
 _GLF_struct_27 _f6;
} ;

struct _GLF_struct_16 {
 bvec3 _f0;
 mat3 _f1;
 mat4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 mat4x3 _f1;
 bvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 mat3x2 _f1;
 mat2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_13 {
 bool _f0;
 vec2 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
 mat4 _f4;
 float _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
 int _f3;
 _GLF_struct_16 _f4;
} ;

struct _GLF_struct_11 {
 float _f0;
 ivec4 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 ivec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 uint _f1;
 mat4 _f2;
 vec2 _f3;
 mat4x3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 mat2 _f1;
 uvec4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_9 _f0;
 ivec2 _f1;
 uvec3 _f2;
 _GLF_struct_10 _f3;
 bvec2 _f4;
 mat4x2 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 vec4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_18 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 bvec4 _f2;
 uint virtual_gid;
 _GLF_struct_12 _f3;
 mat2x4 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 vec3 _f1;
 float _f2;
 float _f3;
 mat4x2 _f4;
 mat4x2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_3 {
 bool _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat2x4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 bool _f1;
 _GLF_struct_2 _f2;
 uint workgroup_base;
 ivec2 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), float(_GLF_FUZZED((true ? -69.02 : 4.4))), bool(false))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), float(_GLF_FUZZED((true ? -69.02 : 4.4))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), float(_GLF_FUZZED((true ? -69.02 : 4.4))), bool(false))))), injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false, false)))))
    {
    }
   else
    {
     do
      {
       for(_GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(_GLF_struct_30(0, mat3x4(1.0), _GLF_struct_29(mat2x4(1.0), ivec3(1), 1, mat3x4(1.0), bvec3(true)), mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0)))), (_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0)))), mat2(mat4(mat2(1.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0)))))))) + mat2(0.0, 0.0, 0.0, 0.0))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_31._f0._injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * (1 & 1)), (_GLF_IDENTITY(int(4), min(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-86979) : 4)), 1)))) ^ 0)), int(4)))) * 1))) >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_31._f0._injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) * (1 & 1), ~ (~ ((int(4)) * (1 & 1))))), (_GLF_IDENTITY(int(4), min(int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-86979) : 4)), 1)))) ^ 0)), int(4)))) * 1))) >> _GLF_IDENTITY(int(4), int(4))))) && true); _GLF_struct_replacement_31._f0._injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), true, true)))))))), ((! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), true, true))))))))) || false), _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec2(true && (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), false || ((false)))), _GLF_IDENTITY(bool(bvec4(! (! _GLF_IDENTITY((false), false || ((false)))), false, false, true)), ! (! (bool(bvec4(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))), false || ((false)))), false, false, true)))))), true && (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || ((false))))))))), true && (_GLF_IDENTITY(false, ! (! (false)))))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))), 1, 0)), (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))), 1, 0))) | (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))))), 1, 0)))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))) && true))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               do
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_48 _GLF_struct_replacement_48 = _GLF_struct_48(_GLF_struct_33(_GLF_struct_32(ivec2(1), 1, bvec3(true), 1u), mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8297.0334) : 1.0)), 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(2251.1012, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 2251.1012 : _GLF_FUZZED(33.80))))), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true)))))) - log(1.0)))), 1u, _GLF_struct_36(vec3(1.0), _GLF_struct_34(ivec3(1), vec3(1.0), mat4x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0), (_GLF_IDENTITY(mat3(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0), transpose(transpose(mat3(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 1.0)))), vec4(1.0), _GLF_struct_35(uvec3(1u), vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7497.9136)))), uvec4(1u), uvec3(1u))), mat3x2(1.0), _GLF_struct_39(_GLF_struct_37(uvec2(1u)), _GLF_struct_38(uvec3(1u), mat4(1.0), vec3(1.0), uvec3(1u), uvec2(1u), gl_NumWorkGroups.x, 1u, bvec4(true)), mat2x4(1.0), bvec3(true)), _GLF_struct_44(_GLF_struct_40(1.0, mat4(1.0), mat2(1.0), mat3x4(1.0), bvec4(true)), _GLF_struct_41(vec3(1.0), ivec3(1), true, ivec4(1), 1, mat3x4(1.0), bvec2(true)), mat4x3(1.0), _GLF_struct_42(bvec2(true), mat3x2(1.0)), _GLF_struct_43(bvec2(true), uvec2(1u), bvec3(true), vec3(1.0), 1.0), vec4(1.0)), _GLF_struct_47(_GLF_struct_45(mat3(1.0), true, 1u, true, mat2x4(1.0), true, true), _GLF_struct_46(vec4(1.0), mat4(1.0), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9723.3695) : 1.0))), ivec3(1))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7930.4075), _GLF_FUZZED(9580.8328)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     break;
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 _GLF_struct_52 _GLF_struct_replacement_52 = _GLF_struct_52(_GLF_struct_51(gl_WorkGroupSize.x, mat4x3(1.0), 1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), tan(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), vec4(1.0))))), (vec4(1.0)) * vec4(1.0, 1.0, 1.0, 1.0)), _GLF_struct_49(mat2x4(1.0)), _GLF_struct_50(vec2(1.0), vec2(1.0), mat2x3(1.0), true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1.8, -16.62))))) - vec2(0.0, 0.0)))).y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(bvec3(true), true, _GLF_struct_2(_GLF_struct_0(mat3(1.0), bvec2(true)), _GLF_struct_1(1, mat2x4(1.0), bvec2(true))), _GLF_struct_replacement_52._f0.workgroup_size * workgroup_id, _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0), (true ? ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0) : _GLF_FUZZED(ivec2(-5983, 17949)))), (_GLF_IDENTITY(ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0), (true ? ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0) : _GLF_FUZZED(ivec2(-5983, 17949))))) | ivec2(0, 0)))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0), (false ? _GLF_FUZZED(ivec2(29060, -66716)) : ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0))), (true ? ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0) : _GLF_FUZZED(ivec2(-5983, 17949)))), (_GLF_IDENTITY(ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0), (true ? ivec2(~ (_GLF_IDENTITY(1, 0 + (1))), 0) : _GLF_FUZZED(ivec2(-5983, 17949))))) | ivec2(0, 0)))) : _GLF_FUZZED(98340)))))), min(ivec2(1), ivec2(1))), _GLF_struct_5(_GLF_struct_3(true), _GLF_struct_4(mat2x4(1.0), vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), 1.0, 1.0, mat4x2(1.0), mat4x2(1.0), mat4x3(1.0))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (-73059 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((3369.6694))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((202.904 * 8.2))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))));
     barrier();
    }
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_7(mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(7957.1131)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(7957.1131)), (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(7957.1131)), clamp((_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(7957.1131)), (_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(7957.1131)), (_GLF_IDENTITY(true, (true) || false) ? 1.0 : _GLF_FUZZED(7957.1131))))) * 1.0) : _GLF_FUZZED(5996.9195))))), vec4(1.0), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u)))), _GLF_struct_8(mat3x4(1.0)), bvec4(true), _GLF_IDENTITY(_GLF_struct_replacement_6.workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size, (_GLF_struct_replacement_6.workgroup_base + subgroup_id * subgroup_size) << _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY(((_GLF_IDENTITY(0u, max(0u, 0u)))), (_GLF_IDENTITY(((_GLF_IDENTITY(0u, max(0u, 0u)))), clamp(((_GLF_IDENTITY(0u, max(0u, 0u)))), ((_GLF_IDENTITY(0u, max(0u, 0u)))), ((_GLF_IDENTITY(0u, max(0u, 0u))))))) | 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), ((_GLF_IDENTITY(0u, max(0u, 0u)))) << 0u)))) - 0u), (_GLF_IDENTITY(0u, max(0u, 0u)))))))))) + subgroup_local_id, _GLF_struct_12(_GLF_struct_9(uvec2(1u), mat2(1.0), uvec4(1u), mat4x3(1.0)), ivec2(1), uvec3(1u), _GLF_struct_10(uvec4(1u), 1u, mat4(1.0), vec2(1.0), mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)) || (true))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), false || ((_GLF_IDENTITY(true, false || (true))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) && true))) && true))))))))), bvec2(true), mat4x2(1.0), _GLF_struct_11(_GLF_IDENTITY(1.0, max(1.0, 1.0)), ivec4(1), mat4x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-411.218) : 1.0)), min(1.0, 1.0)), 1.0))), mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-733.573)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0 * (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), 1.0, 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), (false ? _GLF_FUZZED(-656.808) : float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), bool(_GLF_IDENTITY(true, false || (true)))))), ivec3(1), mat2x3(1.0))), mat2x4(1.0), _GLF_struct_17(_GLF_struct_13(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)), true && ((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)))), false), bvec2(bvec3(bvec2((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)), false), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true), false || (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))))))))), bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true), false || (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))))))), true && (bool((! _GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true), false || (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))))))))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)), false), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)), false), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec3(bvec2((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true)))), ! (! (bool(bvec2((true), false))))))) && true)), false), true)))), false, false)))))), true, true, true))))), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(5714.9651) : (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 0.0, 0.0)))))))))) + 0.0)), mat4x3(1.0), mat2x3(1.0), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0)))) + 0.0), clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), 1.0))), 1.0), _GLF_struct_14(mat2x3(1.0), mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(atan(-82.63))))), mat2(1.0), mat3x2(1.0)), _GLF_struct_15(uvec2(1u), mat4x3(1.0), bvec2(true), vec3(1.0)), 1, _GLF_struct_16(bvec3(true), mat3(1.0), mat4(1.0), vec4(1.0))));
 uint next_virtual_gid = _GLF_struct_replacement_6.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))) + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(-39135) : 1))) % subgroup_size);
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_18.virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(float(true))))))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(_GLF_IDENTITY(true, (true) || false), false, false)))) && true)), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))) && true))))))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          break;
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       return;
      }
    }
   else
    {
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | 0)) | (6))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_19(mat4(1.0), mat2x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.7) : _GLF_IDENTITY(1.0, max(1.0, 1.0))))), mat4x3(1.0)), mat3(1.0), _GLF_struct_21(_GLF_struct_20(true)), _GLF_struct_25(_GLF_struct_22(vec3(1.0), mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(50.06)))), ivec4(1), mat3x4(1.0), _GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(1.0), (true ? _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / mat4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1.0, sqrt(1.0), sqrt(1.0)), (false ? _GLF_FUZZED(vec3(-29.61, 9.5, 1277.7830)) : _GLF_IDENTITY(vec3(1.0, sqrt(1.0), sqrt(1.0)), clamp(vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0)))))) - 0.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0))))))), clamp(float(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0), sqrt(_GLF_IDENTITY(1.0, 0.0 + (1.0)))), (false ? _GLF_FUZZED(vec3(-29.61, 9.5, 1277.7830)) : _GLF_IDENTITY(vec3(1.0, sqrt(1.0), sqrt(1.0)), _GLF_IDENTITY(clamp(vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0))), (true ? clamp(vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) / round(length(normalize(1.0)))), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0))) : _GLF_FUZZED(vec3(221.668, -59.61, -492.691)))))))), float(_GLF_IDENTITY(vec3(1.0, sqrt(1.0), sqrt(1.0)), (false ? _GLF_FUZZED(vec3(-29.61, 9.5, 1277.7830)) : _GLF_IDENTITY(vec3(1.0, sqrt(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3743.5226)))), sqrt(1.0)), clamp(vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0))))))), float(_GLF_IDENTITY(vec3(1.0, sqrt(1.0), sqrt(1.0)), (false ? _GLF_FUZZED(vec3(-29.61, 9.5, 1277.7830)) : _GLF_IDENTITY(vec3(1.0, sqrt(1.0), sqrt(1.0)), clamp(vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0)), vec3(1.0, sqrt(1.0), sqrt(1.0)))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(mat4(-1.6, -478.710, 8.5, 954.242, -8470.0404, 15.07, 433.957, -61.72, -1.4, 75.88, -294.531, 2.2, -6293.9449, 2.9, 4.8, -6755.2437))))), transpose(_GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(mat4(1.0), (mat4(_GLF_IDENTITY(1.0, (1.0) + 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0)) : _GLF_FUZZED(mat4(-1.6, -478.710, 8.5, 954.242, -8470.0404, 15.07, _GLF_IDENTITY(433.957, mix(float(_GLF_IDENTITY(433.957, (433.957) / 1.0)), float(_GLF_FUZZED(-0.9)), bool(false))), -61.72, -1.4, 75.88, -294.531, _GLF_IDENTITY(2.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 2.2 : _GLF_FUZZED(-7.4))), -6293.9449, 2.9, 4.8, -6755.2437)))))), transpose(transpose(transpose(transpose(_GLF_IDENTITY(mat4(1.0), (true ? _GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(-3125))), float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0)), bool(true))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat4(1.0)))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(mat4(-1.6, -478.710, 8.5, 954.242, _GLF_IDENTITY(-8470.0404, (true ? _GLF_IDENTITY(-8470.0404, float(mat2x3(-8470.0404, 0.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_IDENTITY(_GLF_FUZZED(323.134), (false ? _GLF_FUZZED(-94.28) : _GLF_FUZZED(323.134))))), _GLF_IDENTITY(15.07, max(15.07, _GLF_IDENTITY(15.07, (15.07) - 0.0))), 433.957, -61.72, -1.4, 75.88, _GLF_IDENTITY(-294.531, mix(float(_GLF_FUZZED((2630.6445 - -716.883))), float(_GLF_IDENTITY(-294.531, (_GLF_IDENTITY(-294.531, mix(float(_GLF_FUZZED(81.40)), float(-294.531), bool(true)))) / 1.0)), bool(true))), 2.2, -6293.9449, 2.9, _GLF_IDENTITY(4.8, mix(float(4.8), float(_GLF_FUZZED(-5.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), -6755.2437)))))))))))))), _GLF_struct_23(ivec3(1)), _GLF_struct_24(uvec2(1u), mat3x2(1.0), 1.0, mat2(1.0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) >> 0)), max(ivec3(1), _GLF_IDENTITY(ivec3(1), (true ? _GLF_IDENTITY(ivec3(1), max(ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1)))), (ivec3(1)) | (_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) ^ (ivec3(1)))) ^ ivec3(0, 0, 0)))))) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(68623, 69976, 62611), min(ivec3(68623, 69976, 62611), _GLF_IDENTITY(ivec3(68623, 69976, 62611), ivec3(_GLF_IDENTITY(ivec4(ivec3(68623, 69976, _GLF_IDENTITY(62611, 0 | (62611))), 0), (_GLF_IDENTITY(ivec4(ivec3(68623, 69976, _GLF_IDENTITY(62611, 0 | (62611))), 0), max(ivec4(ivec3(68623, 69976, _GLF_IDENTITY(62611, 0 | (62611))), 0), ivec4(ivec3(68623, 69976, _GLF_IDENTITY(62611, 0 | (62611))), 0)))) + ivec4(0, 0, 0, 0))))))))))), mat2(1.0), mat4x2(1.0))), mat2x3(1.0), atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_18.virtual_gid], (buf[_GLF_struct_replacement_18.virtual_gid]) << 0u), 4, 64, 0), 1, _GLF_struct_27(_GLF_struct_26(true, ivec4(1)), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 return;
                }
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == _GLF_struct_replacement_28.read_2) + 1, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec2(int(4), 1), clamp(ivec2(int(4), 1), ivec2(int(4), 1), _GLF_IDENTITY(ivec2(int(4), 1), max(ivec2(int(4), 1), ivec2(int(4), 1))))))), int(4)))); _injected_loop_counter --)
        {
         subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0)); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(-84579) : int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 >> _GLF_IDENTITY(int(6), int(6))))) << 0))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), max(0 << _GLF_IDENTITY(int(0), int(0)), 0 << _GLF_IDENTITY(int(0), int(0))))) | (0 << _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), 0))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), false || (bool(false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))), true)))))))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 return;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5755.1305) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == _GLF_struct_replacement_28.read_2, false || (read_1 + 1 == _GLF_struct_replacement_28.read_2)), false || (_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (read_1), uint(uvec3(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - 0u), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (_GLF_IDENTITY(read_1, min(read_1, read_1))))))) + 1 == _GLF_struct_replacement_28.read_2))), (uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((read_1 + 1), max((read_1 + 1), (read_1 + 1))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), (false ? _GLF_FUZZED(171164u) : uint(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(atomicMin(next_virtual_gid, read_1))))), min(uvec2(0u, 1u), uvec2(0u, 1u)))))))) ^ 0u)) == _GLF_struct_replacement_28.read_2)) >> 0u) + 1, 4, 64, 4);
       subgroupAll(true);
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), 1.0 * (float(mat3x2(injectionSwitch.x, 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))) > injectionSwitch.y))))
            barrier();
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(16706) : _injected_loop_counter --))) - 0)) >> 0))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.7)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 0.0, 0.0, abs(0.0))), (true ? float(vec4(1.0, 0.0, 0.0, abs(0.0))) : _GLF_FUZZED(38.30)))), 1.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))))) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(5202.9374, float(mat2x3(_GLF_IDENTITY(5202.9374, mix(float(_GLF_FUZZED(8.2)), float(5202.9374), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0)))), (injectionSwitch)[1]), _GLF_IDENTITY((vec2(_GLF_FUZZED(_GLF_IDENTITY(5202.9374, float(mat2x3(_GLF_IDENTITY(5202.9374, mix(float(_GLF_FUZZED(8.2)), float(5202.9374), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0)))), (injectionSwitch)[1])) * mat2(1.0), (true ? (vec2(_GLF_FUZZED(_GLF_IDENTITY(5202.9374, float(mat2x3(_GLF_IDENTITY(5202.9374, mix(float(_GLF_FUZZED(8.2)), float(5202.9374), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0)))), (injectionSwitch)[1])) * mat2(1.0) : _GLF_FUZZED(vec2(-81.24, -8.8))))), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(884.004, 618.343, 6.9).x)), bvec2(_GLF_IDENTITY(true, false || (true)), false))).y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), false), true)))))))) || false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9412.8703)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), false, false, true)), _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))))) && true))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), max((1 << _GLF_IDENTITY(int(6), int(6))), (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 1, (0 >> _GLF_IDENTITY(int(4), int(4)))))) < (0 | 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, false || _GLF_IDENTITY((_injected_loop_counter != 0), false || ((_injected_loop_counter != 0)))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)), true, true)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2934.6206)), float(injectionSwitch.x), bool(true)))) / 1.0), injectionSwitch.x)) < injectionSwitch.y))) && true)))
              {
               barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
