#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.9))), injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uvec4 GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id;
 uvec3 GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base;
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0))), (true ? vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0))) : _GLF_FUZZED(injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         barrier();
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.y = subgroup_size;
 do
  {
   GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), _GLF_ZERO(0.0, injectionSwitch.x))).y, 0u | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.y));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(6.6), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) + 0)) * 1)], _GLF_FUZZED(64.51)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(246.965), (mix(vec2(_GLF_FUZZED(6.6), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) + 0)) * 1)], _GLF_FUZZED(64.51)), bvec2(true, false)))[1]), vec2((mix(vec2(_GLF_FUZZED(6.6), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) + 0)) * 1)], _GLF_FUZZED(64.51)), bvec2(true, false)))[0], _GLF_FUZZED(-41.58)), bvec2(true, false))))) / vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / cos(sqrt(0.0))))).x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 + (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) + 0), (int(5)) - 0))), int(5))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) | ((int(5)))) | (_GLF_IDENTITY(int(5), (int(5)) - 0))), int(5)))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), (int(5)) - 0))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(5)))), (int(5)) - 0))) | (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), _GLF_IDENTITY(0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))))), 0 | (_GLF_IDENTITY(0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))))), (0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)))))) * 1)))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) - 0, ((int(_GLF_IDENTITY(5, (5) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0) + 0))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), min(int(_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, (5) | (5))))), int(5))))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << 0)), (int(5)) - 0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) | 0), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)))))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), ((int(5))) + 0)) | 0) - 0)), _GLF_IDENTITY(0, ~ (~ (0))) | (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) - 0) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), int(ivec3((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), 1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)))))), int(ivec4(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, int(ivec2(5, 0))), 5))), (int(5)) - 0)))))), 0, 1, 0))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          break;
         barrier();
        }
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, bool(bool(false)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2.9, 55.39)))).x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, true)))))), false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3076.5661)))) - 0.0))))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, (true) && true)) && true)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, (true) && true)), false, false))))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y))))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))) | (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & (0 ^ _GLF_IDENTITY(1, (1) + 0))), min(_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & (0 ^ 1), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ~ (~ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))) & (0 ^ 1)) | _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter))), 5, 5))))))) >> _GLF_IDENTITY(int(3), int(3))), (0 | 0) | (((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(3), int(3))))))), clamp((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) - 0)) >> _GLF_IDENTITY(int(6), int(6))) & (0 ^ 1)), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & (0 ^ 1)), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & (0 ^ 1)))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | ((_GLF_IDENTITY(int(6), ~ (~ (int(6))))))))), (true ? (1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter)))) & (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))), 0)) ^ 1))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, ((injectionSwitch.y) - 0.0) * 1.0))))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))))))))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))).x;
 GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.w = workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)), ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.w;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.z = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x;
 do
  {
   GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.y = GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.z;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), false, false, false))) && true))))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2187.2003) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), bool(bvec4(! ((false) || false), false, true, true))))))))
    continue;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-82.05)), float(injectionSwitch.x), bool(true)))) / 1.0) > injectionSwitch.y))))))) || false))
    break;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             barrier();
            }
           break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), bool(bvec2(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, false)), true)))))))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.y + GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x * _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, (true ? GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z : _GLF_FUZZED(subgroup_id))) + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       barrier();
      }
    }
  }
 GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.z = virtual_gid;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.w = GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.z;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x = GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.w;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.0)), _GLF_IDENTITY(float(1.0), float(vec3(_GLF_IDENTITY(float(1.0), min(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), 1.0, cos(0.0)))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))))) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2((! (true)), false), bvec2(bvec4(bvec2((! (true)), false), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), bool(bvec4(! ((! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))), false), bvec2(bvec4(bvec2((! (true)), false), false, true)))))))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            return;
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1069.1749) : injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, 0u + (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y) : GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base, max(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base)), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) / (0u ^ 1u)))))).x) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)))) * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, 0u | ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z))) | (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z))), (((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z)) | (_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z), ~ (~ (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid)).z)))))), (GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y), (_GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y)) | 0u) : GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)))) * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y) : GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)))) * _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid, uvec4(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid[0], GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid[1], GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid[2], GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid[3])).z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y) : GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))) ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)))) * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y) : GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z), 0u | (_GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z), (_GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z)) | (_GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z))))) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)))) * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y) : GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z) : _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x, (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_base.x)))) * GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z))))) + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u + (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)))) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z, _GLF_IDENTITY(0u | ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z), ~ (~ (0u | ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z)))))) | ((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z))), (((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z)) | (_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z), ~ (~ (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid)).z))))))) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) && true)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -44.93)), _GLF_FUZZED(0.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
  return;
 _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x = read_1, (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x = read_1) * 1u);
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1, (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, (4) | (4)))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 64, 4);
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_FUZZED(649.275) : _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.6))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x], _GLF_IDENTITY((buf[GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x]), ((_GLF_IDENTITY(buf[GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x], ~ (~ _GLF_IDENTITY((buf[GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x]), ((buf[GLF_merged3_0_2_50_2_1_11_3_1_12GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basevirtual_gidworkgroup_id.xy.x])) | 0u))))) - 0u) >> 0u), 4, 64, 0);
 GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y = read_2;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))), _GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))))) < GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.z)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true))))))))), bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true))))))))), true, true, false)))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), ! (! _GLF_IDENTITY((false), ((false)) && true))))))))), bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! _GLF_IDENTITY((false), ((false)) && true))))))))), true, true, false)))))))) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid)).x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, ! (! (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, false || (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) || false))))))) + _GLF_IDENTITY(1, int(ivec2(1, 0))), (0u | 1u) * _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false)) + _GLF_IDENTITY(1, int(int(1)))), (true ? _GLF_IDENTITY((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))), ~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), _GLF_IDENTITY(int(ivec2(int(int(1)), 0)), (false ? _GLF_FUZZED(33899) : int(ivec2(int(int(1)), 0)))))))))) : _GLF_FUZZED(read_2))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false, ! (! ((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false))))), max(uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false, ! (! ((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false))))), uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false, ! (! ((_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false))))))) + _GLF_IDENTITY(1, int(int(1)))), (true ? _GLF_IDENTITY((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))), _GLF_IDENTITY(~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))))), uint(uvec3(~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))))), (0u | 0u), 1u)))) : _GLF_FUZZED(read_2))), _GLF_IDENTITY((uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false)) + _GLF_IDENTITY(1, int(int(1)))), (true ? _GLF_IDENTITY((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))), ~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1))))))) : _GLF_FUZZED(read_2))), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1, uint(uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1))) == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))))) + _GLF_IDENTITY(1, int(int(1)))), (true ? _GLF_IDENTITY((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))), _GLF_IDENTITY(~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))))), (_GLF_IDENTITY(~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))))), clamp(~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))))), ~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1)))))), ~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1))))))))) | (~ (~ ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1))))))))) : _GLF_FUZZED(read_2))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, uint(uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, (GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) ^ 0u)))), (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, bool(bvec3(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y, true, false)))) || false)) + _GLF_IDENTITY(1, int(int(1)))), (true ? _GLF_IDENTITY((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), int(int(1)))), ~ (~ ((_GLF_IDENTITY(uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1))), min(uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1))), uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, int(int(1))))))))) : _GLF_FUZZED(read_2)))) << 0u)))), (_GLF_IDENTITY(uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + 1, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))) | 1u) * _GLF_IDENTITY((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + _GLF_IDENTITY(1, (1) / 1) == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, 0)))) | (0 << _GLF_IDENTITY(int(0), int(0))))), ((uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + _GLF_IDENTITY(1, (1) / 1) == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, 0)))) | (0 << _GLF_IDENTITY(int(0), int(0)))))) >> 0u))) - _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 1u)))))), 0u + (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u))), (clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u)))) + 0u))))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.7)), vec2(_GLF_FUZZED(5760.0447), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), ! (! (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(1, clamp(1, 1, 1))))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))) ^ 1)); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       subgroupAll(false);
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-984.169)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-62.67) : injectionSwitch.x))), bool(true))) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > _GLF_IDENTITY(0, min(0, 0)), (_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))) && true)); _GLF_IDENTITY(_injected_loop_counter --, (37759 & 0) + (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) - 0))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), bool(bvec4(! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), false, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), ! (! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)))))), bool(bvec4(! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))), false, false, true))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_13_3_1_11read_1read_2subgroup_sizevirtual_gid.y) + 1, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       subgroupAll(_GLF_IDENTITY(true, (true) || false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
}
