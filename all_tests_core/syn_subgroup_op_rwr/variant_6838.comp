#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 mat4x2 _f0;
 mat4x3 _f1;
 vec3 _f2;
 uvec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 uint _f1;
 vec4 _f2;
 int _f3;
 uvec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 vec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 uvec3 _f1;
 vec4 _f2;
 uvec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_12 _f0;
 ivec2 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 bool _f4;
 mat4 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 mat4x2 _f1;
 mat3 _f2;
 mat2x4 _f3;
 bvec3 _f4;
 uvec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 vec4 _f3;
 mat3x2 _f4;
 uvec4 _f5;
 int _f6;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 ivec2 _f1;
 int _f2;
 mat4 _f3;
 mat4x2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 uint _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 mat3x4 _f3;
 _GLF_struct_10 _f4;
 uint subgroup_id;
} ;

struct _GLF_struct_17 {
 float _f0;
 _GLF_struct_11 _f1;
 ivec4 _f2;
 _GLF_struct_16 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_4 {
 uint _f0;
 ivec4 _f1;
 ivec4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_5 {
 bool _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 uint virtual_gid;
 float _f1;
 mat4x2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 mat2x3 _f1;
 mat3 _f2;
 bvec2 _f3;
 ivec4 _f4;
 float _f5;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 vec3 _f1;
 bool _f2;
 mat2 _f3;
 ivec4 _f4;
 mat4x2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 _GLF_struct_0 _f1;
 mat2 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_3 {
 uint subgroup_local_id;
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 50:
     case 48:
     case 58:
     if(_GLF_DEAD(false))
      return;
     case 30:
     case 79:
     case 8:
     case 61:
     case 31:
     return;
     break;
     default:
     1;
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
            {
             return;
            }
           else
            {
             switch(_GLF_SWITCH((0 | 0)))
              {
               case 24:
               (mat2x4(25.85, 879.150, 495.224, -963.536, 469.840, 875.151, 446.216, -949.735) - mat2x4(97.80, 20.88, 8.1, 8024.8156, 7.4, -2.4, -643.070, -15.97));
               case 70:
               ;
               case 0:
               case 41:
               case 57:
               case 27:
               case 59:
               case 6:
               case 67:
               case 63:
               case 39:
               case 43:
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec4(bvec2(bvec2(false, true)), false, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec4(bvec2(bvec2(false, true)), false, false)))), false, true))))), true && (bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec4(bvec2(bvec2(false, true)), false, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec4(bvec2(bvec2(false, true)), false, false)))), false, true))))))))))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               break;
               case 77:
               ;
               default:
               1;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base;
 for(int _injected_loop_counter = (1 ^ ((0 | 0) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(1.0, _GLF_struct_11(_GLF_struct_7(ivec2(1), 1u, _GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, (((1u ^ 0u) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))), (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u)))) / uvec4(1u, 1u, 1u, 1u)), (_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u)))) / uvec4(1u, 1u, 1u, 1u))) | uvec4(0u, 0u, 0u, 0u))), _GLF_struct_8(vec4(1.0), ivec2(1), 1, mat4(1.0), mat4x2(1.0), bvec4(true)), _GLF_struct_9(uvec3(1u), ivec3(1), mat3x4(1.0), vec4(1.0), mat3x2(1.0), uvec4(1u), 1), mat3x4(1.0), _GLF_struct_10(ivec4(1), mat4x2(1.0), mat3(1.0), mat2x4(1.0), bvec3(true), uvec4(1u), ivec4(1)), gl_SubgroupID), ivec4(1), _GLF_struct_16(_GLF_struct_12(bvec4(true), uvec3(1u), vec4(1.0), uvec2(1u), mat4(1.0)), ivec2(1), _GLF_struct_13(mat2x3(1.0), vec2(1.0), bvec3(true)), _GLF_struct_14(mat3x2(1.0), 1u, vec4(1.0), 1, uvec3(1u), uvec4(1u)), true, mat4(1.0), _GLF_struct_15(mat4x2(1.0), mat4x3(1.0), vec3(1.0), _GLF_IDENTITY(uvec2(1u), (false ? _GLF_FUZZED(uvec2(189262u, 31272u)) : uvec2(1u))), bvec2(true))), uvec2(1u));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (bool(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))), (bool(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0)))) >> 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) || false)))))) && true))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      break;
     switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
      {
       case 85:
       bitfieldExtract((GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.bg & 52281u), -67305, -7775);
       case 96:
       mat2(2.5, 18.18, 696.525, 783.434);
       if(_GLF_DEAD(false))
        continue;
       case 0:
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       break;
       if(_GLF_DEAD(false))
        return;
       case 73:
       uvec2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v;
       default:
       1;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     switch(_GLF_SWITCH(0))
      {
       case 0:
       case 97:
       case 27:
       case 41:
       case 67:
       switch(_GLF_SWITCH(0))
        {
         case 24:
         for(         bvec2(false, false);
 true; mat3x2(5.0, -9440.1917, 7202.4764, -7268.7282, -57.31, -653.543))
          {
          }
         case 0:
         if(_GLF_DEAD(false))
          return;
         case 5:
         if(_GLF_DEAD(false))
          return;
         case 42:
         case 36:
         case 17:
         if(_GLF_DEAD(false))
          continue;
         case 44:
         case 53:
         return;
         break;
         default:
         if(_GLF_DEAD(false))
          return;
         1;
        }
       break;
       default:
       1;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), vec2(_GLF_FUZZED(75.09), _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(2168.8779)))), bvec2(false, true))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), vec2(_GLF_FUZZED(75.09), _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(2168.8779)))), bvec2(false, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), vec2(_GLF_FUZZED(75.09), _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(2168.8779)))), bvec2(false, true))).x)) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 11:
             case 79:
             case 50:
             case 72:
             switch(_GLF_SWITCH(0))
              {
               case 0:
               case 58:
               case 81:
               case 90:
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                }
               break;
               case 54:
               mat2x3 _GLF_SWITCH_4_0v, _GLF_SWITCH_4_1v;
               case 71:
               for(               ((193174u & uvec3(150995u, 110607u, 176626u)) / GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base);
 true; mat3x4(4.9, -495.669, 11.04, 2.7, 97.54, -2633.9416, 2.5, 7.6, 26.53, -710.896, -69.14, -905.821))
                {
                 vec3(807.368, 6269.3470, -9129.9752);
                 ;
                 bvec4 _GLF_SWITCH_4_2v;
                 if(false)
                  {
                   {
                    ((uvec4(140358u, 117074u, 110108u, 31144u) ^ uvec4(55246u, 98502u, 184683u, 112984u)) >> 132353u);
                    ;
                    vec4 _GLF_SWITCH_4_3v;
                    uvec4 _GLF_SWITCH_4_4v, _GLF_SWITCH_4_5v;
                    mat2 _GLF_SWITCH_4_6v[17];
                   }
                   mat4x2 _GLF_SWITCH_4_7v;
                   matrixCompMult(mat3x2(-845.238, 0.2, 3145.1041, 4.2, 7.2, 4.3), mat3x2(1112.9851, -54.43, -5.1, -2.7, 6.5, -3.8));
                   if((vec4(-8.6, 7.7, -4.8, 74.44) != vec4(-502.997, -6.9, -393.972, 310.112)))
                    {
                     greaterThanEqual(uvec4(17489u, 162016u, 164463u, 172625u), (uvec4(110043u, 9449u, 95622u, 122345u) | uvec4(193754u, 108539u, 167295u, 89893u)));
                     all(greaterThanEqual(vec3(-11.61, -1.4, 5.3), vec3(401.531, -489.413, 6.1)));
                     uvec4 _GLF_SWITCH_4_8v[20], _GLF_SWITCH_4_9v, _GLF_SWITCH_4_10v;
                     greaterThan(ivec4(32595, -65477, 46807, -68354), ivec4(35259, -17117, 74513, -48910));
                     abs((ivec3(-57410, -23500, 74049) ^ ivec3(ivec2(-51227, 34920), -16262)));
                    }
                   do
                    {
                     if(true)
                      {
                       uvec4(120998u, 172488u, 25014u, 118383u);
                       ivec4 _GLF_SWITCH_4_11v, _GLF_SWITCH_4_12v;
                       ;
                       vec3 _GLF_SWITCH_4_13v;
                       _GLF_SWITCH_4_11v;
                       mat3x4 _GLF_SWITCH_4_14v, _GLF_SWITCH_4_15v[61];
                       ;
                       uvec3 _GLF_SWITCH_4_16v, _GLF_SWITCH_4_17v;
                       uvec4 _GLF_SWITCH_4_18v;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   ;
                   while((136039u < 163392u))
                    {
                     uint _GLF_SWITCH_4_19v[36];
                     ivec2(73947, 9613);
                     ivec3(11486, -54979, -10588);
                    }
                  }
                 for(                 7666.1665;
 false; abs(36858))
                  {
                   float _GLF_SWITCH_4_20v, _GLF_SWITCH_4_21v[44];
                   mat3(_GLF_SWITCH_4_20v);
                   while(false)
                    {
                     uvec3 _GLF_SWITCH_4_22v[1], _GLF_SWITCH_4_23v[2];
                     bvec3 _GLF_SWITCH_4_24v[26], _GLF_SWITCH_4_25v[71], _GLF_SWITCH_4_26v;
                     uint _GLF_SWITCH_4_27v[29], _GLF_SWITCH_4_28v, _GLF_SWITCH_4_29v[70];
                     mat2x3(6.9, 8.2, -5.8, 49.12, 5.7, 4.7);
                    }
                   if(false)
                    {
                     mat3x4 _GLF_SWITCH_4_30v[79], _GLF_SWITCH_4_31v;
                     unpackSnorm2x16(78306u);
                     bvec2(true, true);
                     mat3x2(-6030.4857, -4.7, 5.0, -667.586, -505.221, -4839.3058);
                    }
                   vec4 _GLF_SWITCH_4_32v[55], _GLF_SWITCH_4_33v;
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      mat3x2(mat2x4(-4.0, -79.52, -23.71, 7467.6509, -0.7, -4.0, 8.8, -7.8));
                     }
                    else
                     {
                     }
                    float _GLF_SWITCH_4_34v[46];
                    do
                     {
                      (mat3x2(3.4, -3.3, -5.7, -82.90, 52.20, -3302.6888) / (++ _GLF_SWITCH_4_20v));
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    mat4 _GLF_SWITCH_4_35v[41];
                    uint _GLF_SWITCH_4_36v;
                    mat2x3 _GLF_SWITCH_4_37v;
                   }
                   ivec3(-72265, -66356, 1757);
                  }
                }
               default:
               1;
              }
             break;
             default:
             1;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       return;
      }
     do
      {
       do
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            return;
           if(_GLF_DEAD(false))
            return;
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) * mat2(1.0))) + vec2(0.0, 0.0)), vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + vec2(0.0, 0.0)), vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + vec2(0.0, 0.0)), vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))).y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           switch(_GLF_SWITCH(0))
            {
             case 20:
             mat3x2 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v;
             case 0:
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             break;
             default:
             1;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         switch(_GLF_SWITCH(0))
          {
           case 0:
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           break;
           case 94:
           mat2x4(70.73, -40.73, 5.7, 5800.5105, -6.7, -44.98, -4.6, 1.9);
           default:
           1;
          }
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     break;
     case 41:
     mat2 _GLF_SWITCH_5_0v[17];
     case 52:
     while(true)
      {
       mat4x2(-72.06, -9.0, 5826.3713, -83.59, -4738.8738, 843.927, -88.93, 0.5);
       int _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v, _GLF_SWITCH_5_3v[85];
       if(true)
        {
         ivec3 _GLF_SWITCH_5_4v;
         ;
         transpose((mat4(-3462.1608, -16.22, -54.90, -3485.4561, -9544.6366, 2.8, -9799.6801, 8.2, -11.21, 5088.7223, -5578.2954, 44.19, -37.64, -8.5, 9.0, -8.1) / 9608.1255));
         if((136248u == 92021u))
          {
           mat3x4(1.1, -3828.8657, 2.5, 9.4, 1.4, -7.5, 861.125, -4559.7373, 598.755, -2.1, -4026.6158, -5.2);
          }
         mat4x3(-8.1, 5.5, 5.1, 9.5, 347.761, -62.70, -82.83, 55.78, 8.6, 700.692, 8114.5513, 19.09);
         sign(_GLF_SWITCH_5_1v);
         (mat4x2(-3690.4204, 7317.8446, -60.30, 1.0, 3756.1191, 8.1, 39.88, -88.06));
         if(true)
          {
           ivec3(22113, 87257, -61356);
           ;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             (dot(-57.91, -45.14) - mat3x4(mat3x2(-56.65, -9.6, -1271.9449, -8.1, -42.87, -49.64)));
            }
           mat2x4(-892.084, -4.8, 1.6, 213.151, -6383.7993, -2018.3351, -1.3, -94.25);
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             ivec3(-5011, -62571, -45829);
            }
           vec4(-66.53, 1596.4337, -2460.0412, -0.9);
           min(-34846, -3004);
          }
        }
       else
        {
         vec2 _GLF_SWITCH_5_5v[7];
        }
      }
     default:
     1;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       switch(_GLF_SWITCH(0))
        {
         case 96:
         for(         bvec4(true, true, true, true).tqt;
 true; (mat3x2(mat4x3(-621.942, 55.87, -5489.5161, -7.1, -508.337, -2765.9206, 3.2, -545.541, -0.7, -5022.3889, -8.4, 5.8)) == mat3x2(9.4, -9.9, -26.93, 246.076, 540.109, 6905.5274)))
          {
          }
         case 68:
         {
         }
         case 0:
         case 2:
         case 3:
         case 65:
         case 58:
         case 77:
         case 67:
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         case 26:
         case 34:
         case 22:
         return;
         break;
         case 83:
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           ;
          }
         default:
         1;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) : _GLF_FUZZED(77264u))), (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u)))), (true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u))))) | _GLF_IDENTITY((true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u))))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ (_GLF_IDENTITY((true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u))))), (true ? (true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u))))) : _GLF_FUZZED(18078u))))))), ((_GLF_IDENTITY(true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u)))), (true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_FUZZED(23496u))))) | (true ? subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(23496u), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(23496u), (_GLF_FUZZED(23496u)) ^ 0u)))))))) - 0u))))) | 0u), subgroup_size));
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_SubgroupInvocationID, _GLF_struct_2(vec2(1.0), _GLF_struct_0(bvec4(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))), vec3(1.0), true, mat2(1.0), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))) >> 0)), mat4x2(1.0), mat2(1.0)), mat2(1.0), _GLF_struct_1(mat3(1.0), mat2x3(1.0), mat3(1.0), bvec2(true), ivec4(1), 1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) >> 0) ^ (_GLF_IDENTITY((-45640 / 2370) & 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), ~ (~ (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), ~ (~ (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219))))))), (~ (int(_GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), ~ (~ (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)))))))) << 0))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) >> 0) ^ (_GLF_IDENTITY((-45640 / 2370) & 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), ~ (~ (_GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), max(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), _GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219))) << ivec4(0, 0, 0, 0)))))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec4((-45640 / 2370) & _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 1))), 0)), 1, 0, (0 & -19219)), ~ _GLF_IDENTITY((~ (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)))), ((~ (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219))))) / ivec4(1, 1, 1, 1))))), (~ (int(_GLF_IDENTITY(ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)), ~ (~ (ivec4((-45640 / 2370) & 0, 1, 0, (0 & -19219)))))))) << 0)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z = workgroup_base;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_5(true, _GLF_struct_4(1u, ivec4(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, max(1, 1))))), ivec4(1), bvec3(true))), GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_3.subgroup_local_id, 1.0, mat4x2(1.0), bvec2(true));
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, min(_GLF_struct_replacement_3.subgroup_local_id, _GLF_struct_replacement_3.subgroup_local_id)))) + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y), min(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y), GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y))), 1u * (_GLF_IDENTITY(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y), min(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y), GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base, uvec3(GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base[0], GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base[1], GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base[2])).y)))))) | (GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.z + _GLF_struct_replacement_17._f1.subgroup_id * GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y)));
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, ~ (~ (_GLF_struct_replacement_6.virtual_gid)))], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   do
    {
     switch(_GLF_SWITCH((0 & 73382)))
      {
       case 76:
       for(       mat3x2(-74.27, -9.9, -9228.3416, -0.8, -3.9, 87.23);
 bvec4(true, false, true, true)[1]; uvec4(usubBorrow(num_workgroup, workgroup_id, next_virtual_gid), uvec2(111328u, 187242u), workgroup_id))
        {
         float _GLF_SWITCH_4_0v;
         mat4x2(-5.1, -3.9, -70.49, -9096.0984, -4.2, 4057.7399, 1914.2857, 3.8);
         if((bvec2(false, false) == notEqual(ivec2(98849, 88429), ivec2(-92148, 52282))))
          {
           if(true)
            {
             (mat2x4(4665.8242, -16.46, -0.5, -8.6, 4.2, 3.5, -1.7, 732.885));
             mat2 _GLF_SWITCH_4_1v;
             mat3x4 _GLF_SWITCH_4_2v, _GLF_SWITCH_4_3v;
             ivec3(70067, 69484, 26520);
            }
           else
            {
             mat3x4 _GLF_SWITCH_4_4v[98];
             bvec3 _GLF_SWITCH_4_5v, _GLF_SWITCH_4_6v, _GLF_SWITCH_4_7v[73];
             bvec3 _GLF_SWITCH_4_8v[39], _GLF_SWITCH_4_9v, _GLF_SWITCH_4_10v;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               (radians(-3431.4568) * -75.40);
              }
             (uvec4(18097u, 149160u, 108543u, 199447u) | uvec4(108379u, 14717u, 36236u, 141554u));
             mat4x2(88.54, -29.92, -5524.1431, -287.122, 90.34, -5.3, -2.1, 4358.9271);
             ivec4(-17528, -38764, 5199, -16116)[2];
             mat4x2(-854.358, 9.8, 284.745, 2106.1300, -72.90, 4.6, 9138.1897, 38.13);
            }
           do
            {
             if(any(bvec2(true, false)))
              {
               ;
               mat3x2(2.5, min(_GLF_SWITCH_4_0v, -17.14), sin(_GLF_SWITCH_4_0v), 109.988, _GLF_SWITCH_4_0v, 9.8);
               mat4x3(-7.4, -17.18, -8290.4980, 926.344, 550.524, -5.5, 635.817, -2.5, -52.41, -604.616, 4.3, 400.548);
               ivec3 _GLF_SWITCH_4_11v, _GLF_SWITCH_4_12v[35];
              }
             else
              {
               atomicXor((next_virtual_gid), 29514u);
               mat4x3 _GLF_SWITCH_4_13v, _GLF_SWITCH_4_14v;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
          }
         else
          {
           mat2 _GLF_SWITCH_4_15v[72], _GLF_SWITCH_4_16v;
          }
         notEqual((false ? bvec4(true, false, true, true) : bvec4(false, true, true, true)), equal(ivec4(-55330, -58305, -15185, 35317), ivec4(50574, 69878, 73755, 62331)));
        }
       case 97:
       for(mat4x3 _GLF_SWITCH_4_17v, _GLF_SWITCH_4_18v[82]; false; greaterThanEqual(ivec2(8405, 50136), ivec2(79699, -73798)))
        {
         ;
         ivec4(1187, -94001, 62335, 77296);
        }
       case 0:
       case 90:
       case 63:
       case 68:
       case 71:
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
       default:
       1;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec4(64, 0, 0, 0)), (int(ivec4(64, 0, 0, 0))) ^ 0)), 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_6.virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   switch(_GLF_SWITCH(0))
    {
     case 55:
     vec2 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v[74];
     case 81:
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       (+ mat2x4(27.51));
      }
     else
      {
      }
     case 0:
     case 58:
     case 46:
     case 16:
     case 14:
     case 50:
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     break;
     case 53:
     float _GLF_SWITCH_5_3v[66];
     default:
     1;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.x = read_2;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
        {
         case 86:
         while(true)
          {
           uvec3 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v;
           mat4x2(mat2x4(-83.97, 4.1, -498.971, 90.57, 5.1, 38.46, 1.0, -6.5));
           {
            bvec4(false, false, true, false);
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              while(true)
               {
                uvec4(4472u, 153121u, 194987u, 81623u);
                mat3x2(vec2(5790.2165, -310.383), injectionSwitch, min(vec2(7089.5820, -79.10), -689.492));
                uvec3 _GLF_SWITCH_5_3v, _GLF_SWITCH_5_4v;
                (mat4(-9499.3841, 1625.2868, 451.942, -7577.8668, -8.9, 2.2, -574.128, -13.67, -0.7, -358.374, 87.11, -5347.7292, -1998.0170, 12.32, 8.2, -3.8) + -0.4);
                ivec3(-96206, -91689, -70579);
                mat3x2 _GLF_SWITCH_5_5v[76], _GLF_SWITCH_5_6v[91];
                max(vec4(93.89, 0.6, -97.91, 83.56), 6859.9169);
                vec2 _GLF_SWITCH_5_7v[35];
               }
             }
            if(any(bvec4(false, false, true, true)))
             {
              (false ? (-470.010 - mat3(317.645, -4472.5716, 4247.8439, 6571.0632, -723.538, 8763.0632, -9861.6999, 4.1, -310.391)) : mat3(-1.1, 9.4, 766.443, -95.27, 1.6, 12.17, 9137.8704, -32.84, -4.2));
              uvec2(55563u, 20840u);
              mat2x3 _GLF_SWITCH_5_8v, _GLF_SWITCH_5_9v[39];
              mat4x3(306.959, -1.7, 55.98, 7.0, 17.45, -42.21, -7.7, 1204.6226, -2.5, -7.1, -9.2, 86.26);
              ;
              mat2x4(-5.5, 5113.6951, -290.008, -604.495, -4.3, -0.5, -3.2, -56.58);
              ivec4(12757, -50051, 22988, 59293);
              mat3x2(mat3(-151.470, -46.21, 7511.8205, -4842.0204, 7570.0832, -8740.0206, 2461.6249, -6.0, 35.78));
             }
            vec2 _GLF_SWITCH_5_10v, _GLF_SWITCH_5_11v;
            if(false)
             {
             }
            else
             {
              uvec2 _GLF_SWITCH_5_12v, _GLF_SWITCH_5_13v, _GLF_SWITCH_5_14v;
              ivec3 _GLF_SWITCH_5_15v;
              (false ? uvec4(159732u, 96762u, 8415u, 138387u) : uvec4(80745u, 187849u, 125369u, 175168u));
              ;
              read_2;
              mix((3319 - ivec3(-47147, -59451, -24764)), ivec3(67308, -68974, 17306), bvec3(false, true, true));
              do
               {
                mat4x3(1.4, 1.9, -3.6, 5.5, -70.54, 3.4, -2.3, 5.7, 193.808, 0.5, 2685.3034, -271.795);
               }
              while(_GLF_WRAPPED_LOOP(false));
              164478u;
             }
            while(false)
             {
              4349.4202;
              bvec3(true, false, true);
             }
            mat2x4(2823.4915, 1.8, 7.2, -7.5, 5.0, 464.615, 0.1, -2883.7484);
            do
             {
             }
            while(true);
            if((! false))
             {
              bitfieldReverse(max(ivec4(-59085, -36862, 86874, 41186), clamp(ivec4(-51304, 83743, -76740, -83565), ivec4(80245, -46946, -11512, 4042), ivec4(-78957, -22170, -88963, 20709))));
              (read_2 * workgroup_size);
              vec2 _GLF_SWITCH_5_16v[95], _GLF_SWITCH_5_17v;
              ;
              mat2(-740.644, 1.2, 9969.4376, -853.755);
              mat4 _GLF_SWITCH_5_18v[30];
              mat2x3 _GLF_SWITCH_5_19v, _GLF_SWITCH_5_20v, _GLF_SWITCH_5_21v;
              mat3x2(-1.7, 8.7, 919.296, 0.8, 4.8, -3.7);
             }
            else
             {
              ivec2 _GLF_SWITCH_5_22v;
              _GLF_SWITCH_5_11v;
             }
           }
           {
            34409u;
            mat3x2 _GLF_SWITCH_5_23v, _GLF_SWITCH_5_24v;
            do
             {
              ivec4(ivec2(-60854, 83493), -86730, -62208);
             }
            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            exp((-5.4 / 6.2));
           }
           if((mat3(mat2(mat4x3(-553.861, -8.5, -2937.0805, -332.593, -45.37, 4.1, 7127.1184, 37.31, -6.9, 712.136, 37.71, -763.474))) != mat3(8443.0084, 6942.6371, 2217.2541, 1229.1610, 8.7, 6125.4785, 730.765, 39.58, -0.5)))
            {
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             mat4x2(-9411.5351, 389.134, -4626.1903, 5.3, -4047.6249, -858.246, 3540.1364, 6.3);
            }
           _GLF_SWITCH_5_1v;
          }
         case 0:
         case 45:
         case 10:
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
         break;
         default:
         1;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false, false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false)))), false))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false)))), false))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false)))), false))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false)))), false))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false)))), false))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false)))), false))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true, true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), false))))), ! (_GLF_IDENTITY(! (bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false))), ! (! (! (bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))) || false)))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     switch(_GLF_SWITCH((0 ^ 0)))
      {
       case 80:
       for(mat4x2 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v[38]; true; (uvec4(178730u, 162288u, 62059u, 81149u) - uvec4(58348u, 155203u, 48879u, 184616u)))
        {
         ivec2 _GLF_SWITCH_5_3v[17], _GLF_SWITCH_5_4v, _GLF_SWITCH_5_5v[48];
         ;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           while(true)
            {
             bvec3(false, true, false);
             uint _GLF_SWITCH_5_6v, _GLF_SWITCH_5_7v;
            }
           while(true)
            {
             mat4x2 _GLF_SWITCH_5_8v[18], _GLF_SWITCH_5_9v, _GLF_SWITCH_5_10v[19];
             vec2 _GLF_SWITCH_5_11v, _GLF_SWITCH_5_12v[43];
             bvec3 _GLF_SWITCH_5_13v;
             mat2x4 _GLF_SWITCH_5_14v, _GLF_SWITCH_5_15v[9];
             (((uvec2(84796u, 16769u) + 86296u) * uvec2(102037u, 155602u)) * (mat4(0.3, 795.521, -6.7, -6.5, 7.7, -381.153, 2.3, 27.67, -54.42, -676.168, 850.970, -720.629, 2.2, -8615.4097, -2421.4744, 72.25) , GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base[0]));
             531.391;
             ;
            }
           mat4x3(6.3, 4.0, -0.4, -42.95, -7280.3962, -8.7, 2359.8480, -4.1, 3.0, -33.29, -621.021, -2565.7887);
           mat4 _GLF_SWITCH_5_16v, _GLF_SWITCH_5_17v;
           bvec3 _GLF_SWITCH_5_18v, _GLF_SWITCH_5_19v;
           do
            {
             (vec4(27.00, 545.138, 5078.2969, -23.28) - vec4(-8.1, 21.81, -7.8, 7.4));
            }
           while(true);
           mat4x3 _GLF_SWITCH_5_20v;
           mat4x3(-7.6, -37.64, 3561.0688, 483.313, -4384.8388, 87.89, -24.95, 1.1, -804.083, 5294.4533, 97.97, -44.41);
          }
        }
       case 0:
       case 68:
       case 19:
       case 94:
       case 15:
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         switch(_GLF_SWITCH(0))
          {
           case 0:
           case 57:
           case 31:
           case 34:
           if(_GLF_DEAD(false))
            return;
           case 71:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
           case 3:
           case 98:
           case 41:
           case 16:
           return;
           break;
           case 32:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(             mix(bvec2(true, false), bvec2(true, false), greaterThan((mat4x3(-35.73, 8.8, 71.41, -8.2, -616.383, -1.6, 242.066, 6.8, 12.19, 77.84, 3.4, -5.8) , ivec2(35874, -57817)), ivec2(-64182, -99298)));
 (mat4x3(-9.7, -7.6, 185.519, 6491.0533, 451.233, 40.44, -3.5, 3747.4202, 9374.4425, -4.0, -421.556, -4.7) == (-0.5 + mat4x3(-477.460, -643.478, -5382.0706, 1978.3164, 1616.5568, 3.1, -7.1, 85.45, -36.57, 3078.2854, 2.1, 29.71))); mat2x3(-5329.6673, -620.673, -3139.2653, -530.531, 17.80, -19.65))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if((uvec4(159872u, 77701u, 24524u, 135768u) != uvec4(44940u, 169739u, 154179u, 142525u)))
                  {
                   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                    {
                     case 48:
                     ;
                     case 0:
                     case 43:
                     (mat4x3(-4.2, -5.7, 889.402, 8.5, -0.5, -7400.7888, -6.1, -42.52, -184.338, 49.46, 2.4, -0.5) + -62.81);
                     case 2:
                     mat4x3 _GLF_SWITCH_4_0v[10], _GLF_SWITCH_4_1v;
                     case 81:
                     case 66:
                     case 90:
                     vec3 _GLF_SWITCH_4_2v, _GLF_SWITCH_4_3v;
                     break;
                     case 86:
                     while(true)
                      {
                       (uvec2(14051u, 27640u) >> workgroup_id);
                       int _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v;
                       bvec4(true, true, true, false);
                       do
                        {
                         mat2x3(_GLF_SWITCH_4_1v);
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       ivec2(79128, -56918);
                       mat4x3 _GLF_SWITCH_5_3v[17];
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         (+ workgroup_base);
                        }
                       mat4x2(-2.2, -4.1, 6441.4240, 64.36, 522.108, 197.544, 7562.1931, 735.387);
                      }
                     default:
                     1;
                    }
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
           case 81:
           read_2;
           default:
           1;
          }
        }
       break;
       default:
       1;
      }
    }
   else
    {
    }
  }
 if(_GLF_struct_replacement_3.subgroup_local_id + 1 < GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.y)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     do
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 61:
         case 18:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                       switch(_GLF_SWITCH(0))
                        {
                         case 0:
                         case 57:
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                         case 69:
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               switch(_GLF_SWITCH(0))
                                {
                                 case 0:
                                 if(_GLF_DEAD(false))
                                  break;
                                 case 51:
                                 case 93:
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                 if(_GLF_DEAD(false))
                                  continue;
                                 case 61:
                                 case 49:
                                 case 82:
                                 switch(_GLF_SWITCH(0))
                                  {
                                   case 0:
                                   case 47:
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             return;
                                            }
                                          }
                                        }
                                      }
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       switch(_GLF_SWITCH(0))
                                        {
                                         case 11:
                                         bvec4(true, true, true, false);
                                         case 0:
                                         case 3:
                                         case 34:
                                         case 77:
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            return;
                                          }
                                         case 82:
                                         switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(92.23)), bool(false)))))))
                                          {
                                           case 33:
                                           if(_GLF_DEAD(false))
                                            break;
                                           mat3x4 _GLF_SWITCH_1_0v[61];
                                           case 0:
                                           case 47:
                                           if(_GLF_DEAD(false))
                                            break;
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                               if(_GLF_DEAD(false))
                                                continue;
                                               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                {
                                                 switch(_GLF_SWITCH(0))
                                                  {
                                                   case 0:
                                                   case 75:
                                                   case 28:
                                                   case 97:
                                                   case 45:
                                                   case 46:
                                                   case 5:
                                                   case 11:
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     return;
                                                    }
                                                   else
                                                    {
                                                    }
                                                   break;
                                                   case 56:
                                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     vec4(193.118, 1.2, -606.949, -7182.2763);
                                                    }
                                                   case 24:
                                                   (-2.0 + (mat4(9.0, -3436.7806, 68.48, -3.9, 4.2, -3027.6617, -85.61, 4240.8589, -231.957, 8024.8662, 8.1, 1.1, -4.9, 2.6, 2.8, -8.8) , mat4x3(0.3, 6750.0807, -5.4, -8.6, 0.6, 9.7, -1.2, -3.7, -97.99, 527.718, 3.8, 550.685)));
                                                   default:
                                                   1;
                                                  }
                                                }
                                              }
                                            }
                                           case 30:
                                           case 58:
                                           case 62:
                                           return;
                                           if(_GLF_DEAD(false))
                                            break;
                                           if(_GLF_DEAD(false))
                                            break;
                                           break;
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              break;
                                             break;
                                            }
                                           case 78:
                                           uvec2 _GLF_SWITCH_1_1v[89];
                                           if(_GLF_DEAD(false))
                                            continue;
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 return;
                                                }
                                               if(_GLF_DEAD(false))
                                                break;
                                              }
                                             if(_GLF_DEAD(false))
                                              break;
                                            }
                                           else
                                            {
                                            }
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            return;
                                           case 64:
                                           ivec4 _GLF_SWITCH_1_2v;
                                           if(_GLF_DEAD(false))
                                            break;
                                           default:
                                           if(_GLF_DEAD(false))
                                            break;
                                           1;
                                          }
                                         break;
                                         case 16:
                                         mat2(-4.4, 2.2, 6.8, -11.13);
                                         default:
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           1;
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(refract(-9393.0321, -1974.6093, 2.8)) : injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(refract(-9393.0321, -1974.6093, 2.8)) : injectionSwitch.y))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(refract(-9393.0321, -1974.6093, 2.8)) : injectionSwitch.y))))))), true, true))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(refract(-9393.0321, -1974.6093, 2.8)) : injectionSwitch.y))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(refract(-9393.0321, -1974.6093, 2.8)) : injectionSwitch.y))))))), true, true))))), true)))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                      }
                                     else
                                      {
                                      }
                                     continue;
                                    }
                                   case 81:
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                          {
                                           return;
                                          }
                                        }
                                       break;
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                     if(_GLF_DEAD(false))
                                      continue;
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), bool(bvec3(! (_GLF_IDENTITY(true, (true) || false)), true, true))))) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))))))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                                          return;
                                         return;
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   case 95:
                                   if(_GLF_DEAD(false))
                                    break;
                                   case 68:
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                   case 6:
                                   case 97:
                                   do
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      continue;
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      continue;
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                       return;
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   case 26:
                                   if(_GLF_DEAD(false))
                                    break;
                                   case 82:
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
                                      break;
                                     continue;
                                    }
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                    {
                                     if(_GLF_DEAD(false))
                                      break;
                                     do
                                      {
                                       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.x), (uint(read_1 + 1 == GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.x)) ^ 0u) + 1, 4, 64, 4);
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      break;
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
                                        {
                                         if(_GLF_DEAD(false))
                                          break;
                                        }
                                       else
                                        {
                                         switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(4), int(4)))))
                                          {
                                           case 86:
                                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                            break;
                                           bvec2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v;
                                           case 0:
                                           case 12:
                                           switch(_GLF_IDENTITY(_GLF_SWITCH(0), (_GLF_IDENTITY(_GLF_SWITCH(0), max(_GLF_SWITCH(0), _GLF_SWITCH(0)))) - 0))
                                            {
                                             case 26:
                                             ivec3(9215, -63391, _GLF_IDENTITY(45226, min(45226, 45226)));
                                             do
                                              {
                                               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                                                return;
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                             case 0:
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               do
                                                {
                                                 if(_GLF_DEAD(false))
                                                  return;
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             else
                                              {
                                              }
                                             if(_GLF_DEAD(false))
                                              return;
                                             case 88:
                                             if(_GLF_DEAD(false))
                                              return;
                                             case 96:
                                             case 12:
                                             case 84:
                                             if(_GLF_DEAD(false))
                                              break;
                                             case 78:
                                             case 49:
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               return;
                                              }
                                             break;
                                             if(_GLF_DEAD(false))
                                              break;
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              continue;
                                             case 27:
                                             if(_GLF_DEAD(false))
                                              continue;
                                             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))
                                              break;
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              continue;
                                             if(_GLF_DEAD(false))
                                              continue;
                                             98903u;
                                             default:
                                             1;
                                             if(_GLF_DEAD(false))
                                              break;
                                            }
                                           break;
                                           default:
                                           1;
                                          }
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           return;
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))));
                                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))))
                                    continue;
                                   break;
                                   if(_GLF_DEAD(false))
                                    continue;
                                   case 31:
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                      {
                                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                                        continue;
                                       if(_GLF_DEAD(false))
                                        break;
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                                          continue;
                                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             return;
                                            }
                                          }
                                         if(_GLF_DEAD(false))
                                          break;
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))))))
                                    break;
                                   if(_GLF_DEAD(false))
                                    continue;
                                   mat2x3(-38.93, -7.2, -126.067, -6.5, -17.62, 708.635);
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if(_GLF_DEAD(false))
                                            continue;
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             do
                                              {
                                               if(_GLF_DEAD(false))
                                                break;
                                               return;
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   return;
                                                  }
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   default:
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
                                    {
                                     if(_GLF_DEAD(false))
                                      continue;
                                     break;
                                    }
                                   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), ~ (~ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED((- _injected_loop_counter)) : int(_GLF_ZERO(0.0, injectionSwitch.x))))), (true ? (_GLF_IDENTITY(0 | int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? 0 | int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(52704)))) : _GLF_FUZZED(85788)))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-633.072) : _GLF_ZERO(0.0, injectionSwitch.x))))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(85788)))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(85788))), 0 + (_GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(85788)))))), true, true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (0 | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(-515.558) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) : _GLF_FUZZED(85788)))), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (0 | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(-515.558) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) : _GLF_FUZZED(85788)))), true, true), true)))), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_IDENTITY(_GLF_FUZZED(85788), min(_GLF_FUZZED(85788), _GLF_IDENTITY(_GLF_FUZZED(85788), 0 + (_GLF_FUZZED(85788)))))))), true, true)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(85788)))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(85788)))), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (true ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(85788)))), true, true), true))))))), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(37927))) : _GLF_FUZZED(85788)))), true, true)), true)))), true))))))))); _injected_loop_counter --)
                                    {
                                     1;
                                    }
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                  }
                                 break;
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         return;
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 case 55:
                                 mat2x4 _GLF_SWITCH_0_0v[27], _GLF_SWITCH_0_1v;
                                 default:
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 do
                                  {
                                   1;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             else
                              {
                               switch(_GLF_SWITCH(0))
                                {
                                 case 0:
                                 case 49:
                                 case 44:
                                 case 6:
                                 case 1:
                                 case 28:
                                 case 8:
                                 case 23:
                                 switch(_GLF_SWITCH(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)))
                                  {
                                   case 28:
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
                                    {
                                    }
                                   else
                                    {
                                     switch(_GLF_SWITCH(0))
                                      {
                                       case 89:
                                       mat3x4(8.6, 5.6, -91.67, -73.17, 110.783, -33.30, -711.369, -672.496, 252.168, -29.18, 7.6, -72.45);
                                       case 84:
                                       (vec3(-659.568, 2.4, -5.7) * mat3(5.3, -8528.1171, 1334.6927, -444.634, -811.812, -30.95, 8.7, 9.8, 82.82));
                                       case 0:
                                       case 42:
                                       case 16:
                                       workgroup_size;
                                       break;
                                       case 18:
                                       ivec2 _GLF_SWITCH_4_0v[60];
                                       case 35:
                                       bool _GLF_SWITCH_4_1v, _GLF_SWITCH_4_2v, _GLF_SWITCH_4_3v;
                                       default:
                                       1;
                                      }
                                    }
                                   case 76:
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     ;
                                    }
                                   case 0:
                                   case 35:
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                   case 60:
                                   case 90:
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y))))
                                    return;
                                   break;
                                   case 18:
                                   ;
                                   case 83:
                                   vec4(-328.239, 1018.4521, -6.8, -3.9);
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
                                    continue;
                                   default:
                                   do
                                    {
                                     1;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                 break;
                                 default:
                                 1;
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true, false, true))))))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               continue;
                              }
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          break;
                         break;
                         default:
                         1;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
           else
            {
            }
          }
         break;
         default:
         1;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
    }
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), bool(bool(false))), true)))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], uint(_GLF_IDENTITY(read_1, (read_1) | 0u) + 1 == GLF_merged3_0_1_6_1_1_13_2_1_14read_2subgroup_sizeworkgroup_base.x) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       switch(_GLF_SWITCH(0))
        {
         case 6:
         mat3 _GLF_SWITCH_2_0v[10], _GLF_SWITCH_2_1v;
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         case 0:
         case 77:
         case 48:
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
          return;
         break;
         case 34:
         do
          {
           if(false)
            {
             if(_GLF_DEAD(false))
              return;
             ;
             {
              if(_GLF_DEAD(false))
               return;
              mat2x3(-5796.5922, 72.90, -2.3, 6.0, 83.47, -117.875);
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 return;
                return;
               }
              mat3 _GLF_SWITCH_2_2v, _GLF_SWITCH_2_3v[73], _GLF_SWITCH_2_4v;
             }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             do
              {
               switch(_GLF_SWITCH(0))
                {
                 case 6:
                 not(notEqual(vec3(5.1, 49.53, 0.3), vec3(0.4, -4.3, -7.6)).st);
                 case 68:
                 uvec4 _GLF_SWITCH_4_0v[68];
                 case 0:
                 case 83:
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     for(int _injected_loop_counter = (((1 | 0) & 1) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(5), int(5)))))
                          {
                           case 99:
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             lessThan(step(-147.653, vec2(923.794, -404.175)), injectionSwitch);
                            }
                           case 0:
                           case 42:
                           case 82:
                           case 80:
                           case 28:
                           case 15:
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                            }
                           break;
                           if(_GLF_DEAD(false))
                            continue;
                           default:
                           1;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  return;
                 case 90:
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   (_GLF_SWITCH_2_1v / 2493.9057);
                  }
                 case 17:
                 vec3 _GLF_SWITCH_2_5v[40], _GLF_SWITCH_2_6v[75];
                 if(_GLF_DEAD(false))
                  return;
                 ivec2 _GLF_SWITCH_2_7v;
                 mat4x3 _GLF_SWITCH_2_8v[71];
                 bvec3(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), true);
                 mat2x3 _GLF_SWITCH_2_9v, _GLF_SWITCH_2_10v[45], _GLF_SWITCH_2_11v;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))
                      return;
                    }
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  return;
                 mat2x4 _GLF_SWITCH_2_12v, _GLF_SWITCH_2_13v;
                 case 61:
                 mat2x4 _GLF_SWITCH_2_14v, _GLF_SWITCH_2_15v, _GLF_SWITCH_2_16v[16];
                 break;
                 case 27:
                 ivec2 _GLF_SWITCH_4_1v, _GLF_SWITCH_4_2v;
                 case 51:
                 mat2 _GLF_SWITCH_4_3v, _GLF_SWITCH_4_4v, _GLF_SWITCH_4_5v;
                 default:
                 1;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             lessThanEqual(uvec2(136271u, 56636u), uvec2(27168u, 76233u));
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, true)))))
                {
                 do
                  {
                   do
                    {
                     switch(_GLF_SWITCH(((0 | (0 << _GLF_IDENTITY(int(3), int(3)))) >> _GLF_IDENTITY(int(3), int(3)))))
                      {
                       case 68:
                       uvec2 _GLF_SWITCH_5_0v[28], _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v;
                       case 0:
                       case 79:
                       case 1:
                       case 36:
                       case 20:
                       case 81:
                       case 30:
                       case 48:
                       case 53:
                       case 60:
                       switch(_GLF_SWITCH(0))
                        {
                         case 0:
                         case 89:
                         case 81:
                         case 14:
                         case 1:
                         case 66:
                         case 67:
                         case 80:
                         case 58:
                         return;
                         break;
                         default:
                         1;
                        }
                       break;
                       default:
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         1;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               else
                {
                }
              }
            }
           else
            {
             for(ivec2 _GLF_SWITCH_2_17v[21]; (vec4(-2858.3195, -0.7, 30.45, _GLF_IDENTITY(186.878, float(mat2x4(_GLF_IDENTITY(186.878, 0.0 + (186.878)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) == vec4(6.5, 8.2, 857.176, -1639.7563)); bvec3(false, false, false))
              {
               ivec2(-53538, -94331);
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 vec4(7.0, -5368.3088, 8.4, -502.290);
                }
               roundEven(vec4(6166.6057, -6.1, 8.5, 5243.3384));
               if(_GLF_DEAD(false))
                break;
               do
                {
                 switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(7)))))
                  {
                   case 0:
                   case 22:
                   case 77:
                   case 96:
                   case 5:
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = (25724 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   break;
                   default:
                   1;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               vec4 _GLF_SWITCH_2_18v, _GLF_SWITCH_2_19v[64], _GLF_SWITCH_2_20v;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             ;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             do
              {
               ;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(true)
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 ;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               mat4 _GLF_SWITCH_2_21v, _GLF_SWITCH_2_22v, _GLF_SWITCH_2_23v;
              }
             uvec2 _GLF_SWITCH_2_24v, _GLF_SWITCH_2_25v[80];
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         default:
         1;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(1), int(1)))))
          {
           case 0:
           case 62:
           case 72:
           case 21:
           case 75:
           case 43:
           case 24:
           case 25:
           case 55:
           case 32:
           return;
           break;
           case 93:
           bvec3(false, true, false);
           default:
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             1;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(length(0.0), mix(float(_GLF_IDENTITY(length(0.0), (length(0.0)) / 1.0)), float(_GLF_FUZZED(598.444)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), vec4(1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 0.0)))))))
    {
     switch(_GLF_SWITCH(0))
      {
       case 0:
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), bool(bool(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))))
        return;
       return;
       break;
       default:
       1;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 40:
             if(_GLF_DEAD(false))
              continue;
             case 19:
             case 22:
             case 41:
             case 15:
             return;
             break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             case 59:
             mat4(-3378.0142, 4813.6984, -296.895, -5.9, asinh(_GLF_IDENTITY(vec4(-971.340, -6.9, -2804.2464, -5763.8262), max(_GLF_IDENTITY(vec4(-971.340, -6.9, -2804.2464, -5763.8262), mix(vec4((vec4(-971.340, -6.9, -2804.2464, -5763.8262))[0], (vec4(-971.340, -6.9, -2804.2464, -5763.8262))[1], _GLF_IDENTITY((vec4(-971.340, -6.9, -2804.2464, -5763.8262))[2], max((vec4(-971.340, -6.9, -2804.2464, -5763.8262))[2], (vec4(-971.340, -6.9, -2804.2464, -5763.8262))[2])), (vec4(-971.340, -6.9, -2804.2464, -5763.8262))[3]), vec4(_GLF_FUZZED(3.7), _GLF_FUZZED(-4.1), _GLF_FUZZED(-5.6), _GLF_FUZZED(20.49)), bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(vec4(-971.340, -6.9, -2804.2464, -5763.8262), vec4(vec4(vec4(-971.340, -6.9, -2804.2464, -5763.8262)))))).g), tan(-969.805), 1.3, -3.5, 4092.5624, -702.125, roundEven(_GLF_IDENTITY(1.5, (true ? 1.5 : _GLF_FUZZED(-9.3)))), 604.378, 8195.2234, refract(fma(557.654, -235.446, -3.2), 1.5, -1130.6304), 468.479, length(-9.9));
             case 25:
             ((uvec4(114028u, 162829u, 77815u, 99892u) * num_workgroup) << subgroup_size);
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             default:
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               1;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-717.635)), bool(false))) > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-717.635)), bool(false))) > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-717.635)), bool(false))) > injectionSwitch.y))))))) || false)), ! (! ((false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-717.635)), bool(false))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (1 ^ (0 | 1)), ! (! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 >> _GLF_IDENTITY(int(7), int(7)))) > (_GLF_IDENTITY(1 ^ (0 | 1), (1 ^ (0 | 1)) ^ 0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, float(float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(4.8, 89.31, 5047.1177).r), _GLF_FUZZED(982.591)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, injectionSwitch.y)))))))))
    return;
  }
}
