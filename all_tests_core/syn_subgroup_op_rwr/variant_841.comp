#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(61288, 0 + (_GLF_IDENTITY(61288, int(int(_GLF_IDENTITY(61288, (61288) + 0)))))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (33087 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))) || false)))
              break;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-68.53), _GLF_FUZZED(9.5)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), false || (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true, false)))))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), bool(bvec4(false, true, true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, false || (true)) && (_GLF_WRAPPED_IF_FALSE(false))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(atanh(-1374.4239)) : injectionSwitch.x)) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-90.93)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))))), float(_GLF_FUZZED((24.86 * 9.6))), bool(false))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), true)), true && (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), true)), ! (! (bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), true))))))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true))) && true))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) << 0), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) ^ 1)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))) || false)))))))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true) || false, false || (_GLF_IDENTITY((true) || false, ((true) || false) || false))), bool(bvec3((true) || false, false, false))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    return;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
        break;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) | 0), (_GLF_IDENTITY(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) | 0), (_injected_loop_counter > ((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) | 0)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0), (0 | 0) ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))))
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float((89530 ^ 56062)))), bool(false))), float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(-257.878, -6042.0829, -4.8, 8.1, 19.57, -79.05, -9.5, -1456.9339, 68.80)) : _GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0)), mat3(mat3(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0))))))))), 1.0, 0.0, sqrt(abs(0.0)), tan(0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_injected_loop_counter))))), (_injected_loop_counter) >> 0))) < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(1, (1) >> 0) * (_GLF_IDENTITY(int(0), min(int(0), int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(_GLF_IDENTITY(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec2(~ (0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)) : _GLF_FUZZED(ivec2(57138, -38739))))))))), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))), (_GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))) - 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0)) - 0), 1, 1)))) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), 0 + (int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0))))), int(0))), max(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(1, (1) >> 0) * (_GLF_IDENTITY(int(0), min(int(0), int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(_GLF_IDENTITY(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec2(~ (0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)) : _GLF_FUZZED(ivec2(57138, -38739))))))))), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))), (_GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))) - 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0)) - 0), 1, 1)))) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), 0 + (int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0))))), int(0))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(1, (1) >> 0) * (_GLF_IDENTITY(int(0), min(int(0), int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(_GLF_IDENTITY(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec2(~ (0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)) : _GLF_FUZZED(ivec2(57138, -38739))))))))), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))), (_GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))) - 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), min((0), (0)))), min(~ (_GLF_IDENTITY((0), min((0), (0)))), ~ (_GLF_IDENTITY((0), min((0), (0)))))))), int(ivec2(~ (0), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))) * _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0))))))))), (_GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(-65844, ~ (~ (_GLF_IDENTITY(-65844, (-65844) << 0)))))))))) << 0)) - 0), 1, 1)))) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), 0 + (int(0))), _GLF_IDENTITY(int(0), min(int(0), int(0))))), int(0)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((false ? _GLF_FUZZED(-59566) : _GLF_IDENTITY(int(7), int(7))), 0 + ((false ? _GLF_FUZZED(-59566) : _GLF_IDENTITY(int(7), int(7))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), ivec2(0, 0) ^ (ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0))), ivec2(ivec3(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), 1))))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(-59566) : _GLF_IDENTITY(int(7), int(7))))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), ivec2(ivec3(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), 1))))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-59566), ~ (~ (_GLF_FUZZED(-59566)))) : _GLF_IDENTITY(int(7), int(7))))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), ivec2(ivec3(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), 1))))), int(int(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(-59566) : _GLF_IDENTITY(int(7), int(7))))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) | 0)) ^ 0)), 0), ivec2(ivec3(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), 1)))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(-59566) : _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) - 0)) << 0), int(7))))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), ivec2(ivec3(ivec2((1 << _GLF_IDENTITY(int(7), int(7))), 0), _GLF_IDENTITY(1, (1) ^ 0)))))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) * 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0)), min(float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0)), float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0))))), injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0)), min(float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0)), float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0))))), injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0)), min(float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0)), float(vec4(injectionSwitch.y, tan(0.0), 0.0, 0.0))))), injectionSwitch.y)))))) && true), false, false))))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(-1.0)), bvec2(false, false)), mix(vec2((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, true, true))))), _GLF_FUZZED(-1.0)), bvec2(false, false)))[0], (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(-1.0)), bvec2(false, false)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(3.3), (true ? _GLF_IDENTITY(_GLF_FUZZED(3.3), 0.0 + (_GLF_FUZZED(3.3))) : _GLF_FUZZED(50.26))), _GLF_FUZZED(-1.7)), bvec2(false, false)))).y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), false)))))), (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false)))), false, true, false)), bool(bvec4(bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false)))), false, true, false)), false, false, false)))), true)))), bool(bvec3(_GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), ! (! (false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false)))), true))))))), false, true)))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true))))), (_GLF_IDENTITY(bool(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true))))), false || (bool(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))))))) && true)), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true)))), false)))))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) && true), false)))), true))))))))))))), (injectionSwitch.x > injectionSwitch.y)))))))))))))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(777.161), _GLF_FUZZED(-4.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, max(injectionSwitch.y, injectionSwitch.y))))) || false))), ! (! ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), _GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))), _GLF_IDENTITY(bool(bool(bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), true && (false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true))))))) && true)))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), true && (false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true))))))) && true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(mat4(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, sqrt(1.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, sqrt(1.0)), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0)))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(mat4(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, sqrt(1.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, sqrt(1.0)), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0)))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(mat4(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, sqrt(1.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, sqrt(1.0)), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0)))))).x > injectionSwitch.y) || false))))))))))), (bool(bool(bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), bool(bvec3((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, true, false)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true)))), false, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true))))), bool(bvec3(false, true, false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) || false)) || false), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), bool(bvec2(! (_GLF_IDENTITY(true, ! (! (true)))), true)))))))))))))), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))))) && true)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)), false || (bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               return;
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), true))))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(true)))))), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-40.16)), float(injectionSwitch.y), bool(true)))))))))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) || false)), true && (true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))))))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), 0 ^ (int(4)))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true && (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))) / vec3(1.0, 1.0, 1.0))))), 0.0, determinant(mat2(determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0))))).y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) - 0u) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 & 32755); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0)) ^ 0))
      {
       return;
      }
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) >> 0), 4)))), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4)))) | ((1 << _GLF_IDENTITY(int(4), int(4))))), min((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (0 >> _GLF_IDENTITY(int(5), int(5)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > (1 ^ 1)); _injected_loop_counter --)
        {
         return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (99664 & _GLF_IDENTITY(0, clamp(0, 0, 0))), true && (_injected_loop_counter != (99664 & _GLF_IDENTITY(0, clamp(0, 0, 0)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, _GLF_IDENTITY(false, (false) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) && true)))))), bool(bvec4(false, false, false, false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), false))))), true && (true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), false)))))))), false, false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), false))))), true && (true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec2(bool(bvec3(false, false, false)), false)))))))), false, false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))), true, false), false)))))))))
            return;
          }
         else
          {
          }
        }
       return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) * int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true, true, false))))), bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false)))), false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x < injectionSwitch.y))), false)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        break;
       return;
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (~ (_GLF_IDENTITY(0u, (0u) << 0u)))), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY((next_virtual_gid), max((next_virtual_gid), (next_virtual_gid))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (~ (_GLF_IDENTITY(0u, (0u) << 0u)))))))], uint(read_1 + 1), _GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(64, (64) | (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(4, int(int(4))));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(1 & 1, max(_GLF_IDENTITY(1 & 1, clamp(1 & 1, 1 & 1, 1 & 1)), 1 & 1))))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), (float(float(injectionSwitch.y))) / 1.0))))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y) && true)))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            return;
           break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), true && (! (false)))))))), ((! (false))) || false))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(1, ~ (~ (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x)) >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))))))); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)], 4, 64, 0);
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (98102 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) + 0u)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) + (uvec4(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u, 0u)))))))) + 1 < subgroup_size)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323)), true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323)), true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, _GLF_IDENTITY(514.323, (514.323) / exp(0.0)))), true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323)), true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323))))), vec2(mat3((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-2.2, 514.323), mat2(1.0) * (vec2(-2.2, 514.323)))), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-2.2, mix(float(-2.2), float(_GLF_FUZZED(-65.15)), bool(false))), _GLF_IDENTITY(514.323, cos(0.0) * (514.323)))), true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323)), true ? injectionSwitch : _GLF_FUZZED(vec2(-2.2, 514.323))))), log(1.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0))) : _GLF_FUZZED(injectionSwitch)))).y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (read_1) / 1u) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(1, (1) / 1))) == read_2) + _GLF_IDENTITY(1, (false ? _GLF_FUZZED((true ? _injected_loop_counter : 46492)) : 1)), 4, _GLF_IDENTITY(64, 0 | (64)), _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) / 1) : _GLF_FUZZED(48541))));
                }
              }
             subgroupAll(false);
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))))))));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 break;
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec4(_GLF_IDENTITY(int(0), int(0)), (1 & 1), 1, 1))), _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (int(_GLF_IDENTITY(8, (8) - 0))) << 0), _GLF_IDENTITY(int(8), (int(8)) | 0))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) | (_GLF_IDENTITY(8, ~ (~ (8))))), (8) - 0)), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), _GLF_IDENTITY((_GLF_IDENTITY(8, (8) - 0)) | 0, ((_GLF_IDENTITY(8, (8) - 0)) | 0) / _GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY(8, (8) - 0)))), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, (1 ^ 1), ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) << 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) - 0)) ^ 0), int(2)))), clamp(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), (0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), min((8), _GLF_IDENTITY((8), ((8)) << 0))) - 0)), int(8)))) | (_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED(mix(_injected_loop_counter, _injected_loop_counter, true)))), (8) - 0)), int(8))), (0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (~ (8))), (8) - 0)), int(8)))) ^ 0))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, (1 ^ _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), ivec4(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - _GLF_IDENTITY(0, 0 + (0)))), int(8))), clamp(0 ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(_injected_loop_counter) : int(8)))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) << 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(8, 0 ^ (8))))))) / _GLF_IDENTITY(1, 0 + (1)))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(ivec4(int(8), int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1), ~ (~ (ivec4(int(8), int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1)))))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (_GLF_IDENTITY(8, (8) | (8))) >> 0)) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1)), (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1))) | (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) >> 0))), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), int(ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) * 1), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) * 1)) ^ 0)) + 0)))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1)), (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1))) | (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), min(int(8), int(8)))), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (false ? _GLF_FUZZED(_injected_loop_counter) : 8)), (8) - 0)), int(8))))), 1, 0, 1))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), int(ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), 0, 0)))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) * 1)))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1)), (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1))) | (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), min(int(8), int(8)))), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (false ? _GLF_FUZZED(_injected_loop_counter) : 8)), (8) - 0)), int(8))))), 1, 0, 1))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), int(ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), 0, 0)))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) * 1))))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1)), (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), _GLF_IDENTITY(~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), min(~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))))), 1, 0, 1))) | (int(ivec4(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), ~ (~ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, 0, 1))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), int(ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), 0, 0)))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) * 1)))))))), 1, (1 ^ 1), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), ivec4(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, int(ivec4(8, 1, 1, 0)))) - 0)), (int(_GLF_IDENTITY(8, _GLF_IDENTITY((_GLF_IDENTITY(8, int(ivec4(8, 1, 1, 0)))) - 0, 0 | ((_GLF_IDENTITY(8, int(ivec4(8, 1, 1, 0)))) - 0))))) >> 0), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, _GLF_IDENTITY(min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0)))), (min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0))))) | (min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0))))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, _GLF_IDENTITY(min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0)))), (min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0))))) | (min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - 0))))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ _GLF_IDENTITY(((8) - 0), (0 ^ 0) + (((8) - 0))))))))), int(int(int(_GLF_IDENTITY(8, _GLF_IDENTITY(_GLF_IDENTITY((8) - 0, min((8) - 0, _GLF_IDENTITY(_GLF_IDENTITY((8), ((8)) >> 0) - 0, min((8) - 0, (8) - 0)))), min((8) - 0, _GLF_IDENTITY((8) - 0, ~ (~ ((8) - _GLF_IDENTITY(0, 0 + (0))))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, min((8) - 0, _GLF_IDENTITY(_GLF_IDENTITY((8), (1 ^ 1) | ((8))) - 0, ~ (~ (_GLF_IDENTITY((8) - 0, 1 * (_GLF_IDENTITY((8), ((8)) | ((8))) - 0))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(20284) : int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, min((8) - 0, _GLF_IDENTITY(_GLF_IDENTITY((8), (1 ^ 1) | ((8))) - 0, ~ (~ (_GLF_IDENTITY((8) - 0, 1 * (_GLF_IDENTITY((8), ((8)) | ((8))) - 0))))))))))), int(ivec2(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8) - 0, min(_GLF_IDENTITY((8) - 0, (_GLF_IDENTITY((8), ((8)) ^ 0) - _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 1, 0)), clamp(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 1, 0)), int(int(int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 1, 0))))), int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 1, 0)), int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 1, 0)))))) / (1 & 1)), _GLF_IDENTITY((8) - 0, ~ (~ (_GLF_IDENTITY((8) - 0, ((8) - 0) << 0)))))))), 1)))))) >> 0), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (8) - 0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (8) - 0))))), max(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (8) - 0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (8) - 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (8) - 0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (8) - 0))))))), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, (1 ^ 1), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), (int(2)) ^ 0))), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-79564) : _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(int(int(2))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(int(int(2)))))))), int(2))))))), 0 ^ (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (int(_GLF_IDENTITY(8, (8) - 0))) / 1)))), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 1, (1 ^ _GLF_IDENTITY(1, (1) / (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), clamp(ivec4(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), _GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), int(ivec4(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0, 0, 0))))), 1, (1 ^ 1), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), ivec4(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8))))))) >> 0, max((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8))))))) >> 0, (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY(int(8), 0 ^ (int(8))))))) >> 0)))), _GLF_IDENTITY(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), _GLF_IDENTITY(0, (0 | 0) | (_GLF_IDENTITY(0, (0) ^ (0 >> _GLF_IDENTITY(int(6), int(6)))))) ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) - 0), (_GLF_IDENTITY(8, (8) - 0)) / 1))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0, ((_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0) >> 0)))), int(_GLF_IDENTITY(8, _GLF_IDENTITY(_GLF_IDENTITY(int(int(8)), (int(int(8))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(int(_GLF_IDENTITY(8, ~ (~ (8)))))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 + ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115), _GLF_IDENTITY(min(_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(8, (8) - 0))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0), int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115), 1 * (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(8, (8) - 0))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0), int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115))), true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(8, (8) - 0))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0), int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115)), (min(_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(8, (8) - 0))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0), int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115), 1 * (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(8, (8) - 0))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0), int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115))), true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), max(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(int(int(_GLF_IDENTITY(8, (8) - 0))))), int(8)))), clamp(clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), min(int(_GLF_IDENTITY(8, (8) - 0)), int(_GLF_IDENTITY(8, (8) - 0))))) ^ 0), int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) >> 0))))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))), clamp(0 ^ (_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8)))))) : _GLF_FUZZED(-23115))) >> 0))))), 1, (1 ^ 1), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), min(_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))), _GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), clamp(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))), 0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))))), 1, (1 ^ 1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) * (1 | 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true, true))))))
                      return;
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))));
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     continue;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))))
                      return;
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7.0, -9.8)))))).y)))))))), (false) && true)))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            return;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     subgroupAll(true);
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, tan(length(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, tan(length(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))) > injectionSwitch.y)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, tan(length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(float(1.0)))), float(_GLF_FUZZED(1.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, tan(length(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, tan(length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (true ? vec3(0.0, 0.0, 0.0) : _GLF_FUZZED(vec3(4.2, 79.73, -7.8)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) * 1.0) > injectionSwitch.y)))))))))
                    continue;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), max(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) / vec2(1.0, 1.0), _GLF_IDENTITY(((injectionSwitch) / vec2(1.0, 1.0)), (((injectionSwitch) / vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0)))) - vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0 + (0.0), mix(float(_GLF_FUZZED(9614.2964)), float(0.0 + (0.0)), bool(true)))), max(0.0, 0.0)), 0.0)).y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(8.3, 20.46)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(8.3, 20.46)) : injectionSwitch)) + vec2(0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + sqrt(vec2(0.0, 0.0))))).x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? 27.70 : 3541.8663))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), true, true))), false, false, true)))));
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           break;
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
}
