#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 0.0 + (injectionSwitch.y))))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(false, true))))))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0 ^ 0) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 0.0, 1.0, 0.0), (true ? mat3x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 0.0, 1.0, 0.0) : _GLF_FUZZED(mat3x2(-8032.8473, 2.8, -7.6, -8.4, 2.1, 694.233)))))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z = _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(_GLF_IDENTITY(uvec4((~ (subgroup_size)), 1u, 1u, 1u), min(uvec4((~ (subgroup_size)), 1u, 1u, 1u), _GLF_IDENTITY(uvec4((~ (subgroup_size)), 1u, 1u, 1u), (uvec4((~ (subgroup_size)), 1u, 1u, 1u)) | (uvec4((~ (subgroup_size)), 1u, 1u, 1u))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))), (int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) ^ 0)), max(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))), (int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) ^ 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))), (int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) ^ 0))))) != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.w = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) / uvec4(1u, 1u, 1u, 1u)).z;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.6, 4.2)) : injectionSwitch)).x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49)))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49))))), vec2(0.0, 0.0) + (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49)))))))).x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(633.387)))), float(_GLF_FUZZED(80.96)), bool(false))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)) : _GLF_FUZZED(31.33)))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.6, 4.2)) : injectionSwitch)).x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49)))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49))))), vec2(0.0, 0.0) + (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49)))))))).x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(633.387)))), float(_GLF_FUZZED(80.96)), bool(false))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)) : _GLF_FUZZED(31.33)))))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.6, 4.2)) : injectionSwitch)).x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49)))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49))))), vec2(0.0, 0.0) + (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-4936.9597, 71.49)))))))).x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(633.387)))), float(_GLF_FUZZED(80.96)), bool(false))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)) : _GLF_FUZZED(31.33)))))) || false), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0) | 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((0 | 0) | 0, clamp((0 | 0) | 0, (0 | 0) | 0, (0 | 0) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) || (_GLF_IDENTITY(false, ! (! (false)))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, true)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(mod(-8.6, -9.5)))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.2)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y = subgroup_local_id;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 1u)), min(uvec3(uvec4(gl_NumWorkGroups, 1u)), uvec3(uvec4(gl_NumWorkGroups, 1u)))))))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 1u)), min(uvec3(uvec4(gl_NumWorkGroups, 1u)), uvec3(uvec4(gl_NumWorkGroups, 1u)))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))))) : _GLF_FUZZED((~ uvec3(187361u, 58103u, 174045u)))))), (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? _GLF_FUZZED(uvec3(72125u, 35050u, 100731u)) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))), uvec3(0u, 0u, 0u) + _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(183357u, 176561u, 69017u)) : gl_NumWorkGroups)))))), _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups))))))), max(((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups))))))), _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups))))))), max(((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups))))))), ((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups)))))))))))) | uvec3(0u, 0u, 0u))))))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.x = num_workgroup;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | 0)), int(0))))), ! (! (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | 0)), int(0))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.y = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.x;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.4)), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(false, true))).y), false || ((injectionSwitch.x < injectionSwitch.y)))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))), int(ivec4(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))), (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) * 1))), 1, 0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))), false)))))))) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(2.6, -6.3)) : injectionSwitch)).y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), (! (! (true))) || false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-78.68) : 1.0))), 0.0))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-78.68) : 1.0))), 0.0))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))))), true, false, true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) * 1)) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, round(length(normalize(1.0))))), mix(float(float(mat2(injectionSwitch.y, 1.0, 0.0, round(length(normalize(1.0)))))), float(_GLF_FUZZED((1453.7858 + -9.4))), bool(false))))))))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) ^ 0), 1, 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bool(bool(bvec4(false, false, true, false)))), bool(bool(bool(bool(bool(bvec4(false, false, true, false))))))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bool(bool(bvec4(false, false, true, false)))), _GLF_IDENTITY(bool(bool(bool(bool(bool(bvec4(false, false, true, false)))))), (bool(bool(bool(bool(bool(bvec4(false, false, true, false))))))) || false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! (! ((! (_GLF_IDENTITY(false, false || (false))))))))))) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false), bool(bool(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false), false || (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false)))))))))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) || false)), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), bool(bool(! (_injected_loop_counter != 0))))))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) >> uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)))))) >> uvec4(0u, 0u, 0u, 0u))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) : _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))), (uvec4(1u, 1u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u))), (true ? (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) : _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))), (uvec4(1u, 1u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED(uvec4(35943u, 175900u, 98390u, 24833u))))), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u))))) | (uvec4(1u, 1u, 1u, 1u))), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), max(_GLF_IDENTITY(uint(uvec3(1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), uint(uvec3(uint(uvec3(1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), 0u, 1u))), uint(uvec3(1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))), 1u, 1u, 1u), _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (false ? _GLF_FUZZED((41048u * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid)) : GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size))) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec3(uvec2(0u, 0u), 0u)))), (uint(_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec3(uvec2(0u, 0u), 0u))))) | (uint(_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec3(uvec2(0u, 0u), 0u))))))) | (uint(uvec2(0u, 0u)))))), (((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)) >> uvec4(0u, 0u, 0u, 0u))))))) >> uvec4(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, (0u) ^ 0u)))) * 1u), 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size))) / uvec4(1u, 1u, 1u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)) ^ uvec4(0u, 0u, 0u, 0u)) / uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | 0u, ((1u) | 0u) | ((1u) | 0u))), 1u, 1u, 1u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))), min(~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY(~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))), uvec4(0u, 0u, 0u, 0u) + (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u), ((GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))))))) + uvec4(0u, 0u, 0u, 0u)))) >> uvec4(0u, 0u, 0u, 0u))) << uvec4(0u, 0u, 0u, 0u)))) + _GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(109140u) : ~ (0u))))), 0u)), 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(109140u) : ~ (0u))))), 0u)), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(109140u) : ~ (0u))))), 0u)), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(109140u) : ~ (0u))))), 0u)), 0u, 0u, 0u)))) + uvec4(0u, 0u, 0u, 0u))).w + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(424.678) : injectionSwitch.y))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3638.0297), _GLF_FUZZED(61.17)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) * 1))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.w + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1) | (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1))), uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uvec4(4u), _GLF_IDENTITY(uvec4(4u), (uvec4(4u)) | (uvec4(4u))))) ^ (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid)))).y + 1, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y)) + 1) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y)), min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y)), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y)))) + 1) | _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) + 0u))))), 0u | ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y)) + 1) | _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) + 0u))))))) + 0u)))), 1u, 1u))), ((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) << (0u & 194384u))) % GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.w);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1), true && (_injected_loop_counter < 1))), true && (! (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false), false, false))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 1.0, 0.0)))), float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0)))))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.x = next_virtual_gid;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.2))), (injectionSwitch.x > injectionSwitch.y) || false), false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, (true) && true), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) && true), false, false)))))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) && true), false, false)))))))), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, (true) && true), false, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) && true), false, false)))))))), true, true))))))))), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) || false), false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) || false), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) || false), false, true, true)))), false, false, true))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true) || false), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((injectionSwitch.x > injectionSwitch.y) || false))), false, true, true)))))) || false, ((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.0, 80.43))))) - vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)))), 0.0)).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-129.689))) > injectionSwitch.y) || false, bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-129.689))) > injectionSwitch.y) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-129.689))) > injectionSwitch.y) || false, ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-129.689))) > injectionSwitch.y) || false) && true)))), true, false, false)))), false, _GLF_IDENTITY(true, ! (! (true))), true)), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))))) || _GLF_IDENTITY(false, true && (false))) || false)))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))))) || false))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || false), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(false, ! (! (false))), true, true)))))) || false))), true))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true))), ! (_GLF_IDENTITY(! (bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))), (_GLF_IDENTITY(! (bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))), ! (! (! (bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))))))) || false)))))) || false))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false)), false || (bool(bvec2(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false))))), false, true))))) || false), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false, ! (! (false))), true, true)))))) || false))), true)))))), bool(bvec3((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)))))) || false))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || false), false, true, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, ! (! (false))), true, true)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, ! (! (false))), true, true))) && true))))) || false))), true)))), false, true)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
              continue;
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 0), (ivec3(_injected_loop_counter, 1, 0)) / ivec3(1, 1, 1))), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 0), (ivec3(_injected_loop_counter, 1, 0)) / ivec3(1, 1, 1))))), min(int(int(int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 0), (ivec3(_injected_loop_counter, 1, 0)) / ivec3(1, 1, 1))))), int(int(int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 0), (ivec3(_injected_loop_counter, 1, 0)) / ivec3(1, 1, 1))))))))) < 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) | uvec4(0u, 0u, 0u, 0u)).w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) | uvec4(0u, 0u, 0u, 0u)).w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) | uvec4(0u, 0u, 0u, 0u)).w, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) | uvec4(0u, 0u, 0u, 0u)).w))) << 0u)) / 1u)], (_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w], clamp(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w], buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) : GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid)).w], buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w]))) / _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.x], uint(read_1 + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) * 1), 1)), 1))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w) << 0u)], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(831.012)), float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), clamp(~ (int(6)), ~ (int(6)), ~ (int(6)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2268.4924)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), (bool(true)) || false))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.z = read_2;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))), clamp(_GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))), mix(vec2(_GLF_FUZZED(-5.9), _GLF_FUZZED(-900.095)), vec2(_GLF_IDENTITY((vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))))[0], ((vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))))[0]) / 1.0), (vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))), (false ? _GLF_FUZZED(vec2(-306.367, 885.821)) : vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))))), _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))), (true ? vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))) : _GLF_FUZZED(vec2(5023.9523, 7.8))))))).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), (mat2x3(injectionSwitch, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), (mat2x3(injectionSwitch, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0)))))))) || false)));
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 0, 0)), int(ivec2(int(ivec4(0, 0, 0, 0)), 0))))))), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 0, 0)), int(ivec2(int(ivec4(0, 0, 0, 0)), 0)))))))) | (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 0, 0)), int(ivec2(int(ivec4(0, 0, 0, 0)), 0))))))))) | 0)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true))))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, true && (true)), true), true))))))))))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))) << _GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))) << _GLF_IDENTITY(0, clamp(0, 0, 0)))) | 0) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)))), 0 | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! _GLF_IDENTITY((false), ((false)) || false))), true, false, false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(91.06))))))) | 0, (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(91.06))))))) | 0) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(91.06))))))) | 0, min(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(91.06))))))) | 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(91.06))))))) | 0)))), _GLF_IDENTITY(int(ivec3(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), injectionSwitch.x)) | 0, 0, 0)), min(_GLF_IDENTITY(int(ivec3(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), injectionSwitch.x)) | 0, 0, 0)), (int(ivec3(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), injectionSwitch.x)) | 0, 0, 0))) << 0), int(ivec3(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), injectionSwitch.x)) | 0, 0, 0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY((_injected_loop_counter != 1), ! (! ((_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1)))))) || false)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true), (_injected_loop_counter != 1) || false))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) : GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)).w, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size), (_GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)) << uvec4(0u, 0u, 0u, 0u)) : GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)).w, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) << (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))))) | uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) | (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size))))) : GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)).w) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid), max(~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid), ~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid))))).y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) : GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)).w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid)).y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) : GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size)).w) || false))) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8318.7417))) > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        continue;
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) * _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u, 1u, 1u, 1u)))) << uvec4(0u, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u)).x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) * uvec4(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), max(~ (~ (1u)), ~ (~ (1u))))), 1u, 1u)), 1u, 1u))) << uvec4(0u, 0u, 0u, 0u)).x), (uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, min(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size))) * _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), (uvec4(1u, 1u, 1u, 1u)) + uvec4(0u, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u)).x)) - 0u)))], uint(read_1 + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.z) + 1, 4, _GLF_IDENTITY(64, (64) * 1), _GLF_IDENTITY(4, (4) ^ 0));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) + 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))))), mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true)))))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(bool(true), true && (bool(true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-6116.3683)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(true)))) - 0.0)))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))) && true)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), false)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false)))))))), false, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), false)))) || false), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))), true, true), true))), false)))))))), false, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), false)))) || false)))) && _GLF_IDENTITY(true, true && (true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (false ? _GLF_FUZZED(vec3(8.8, -7.1, -130.062)) : vec3(1.0, 0.0, 0.0)))), clamp(dot(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8.0) : 0.0)), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(mat3(vec3(1.0, 0.0, 0.0), 1.0, 1.0, 0.0, 0.0, exp(sqrt(0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), clamp(vec3(mat3(vec3(1.0, 0.0, 0.0), 1.0, 1.0, 0.0, 0.0, exp(sqrt(0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), vec3(mat3(vec3(1.0, 0.0, 0.0), 1.0, 1.0, 0.0, 0.0, exp(sqrt(0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), vec3(mat3(vec3(1.0, 0.0, 0.0), 1.0, 1.0, 0.0, 0.0, exp(sqrt(0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0))))))))))))), (_GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))), _GLF_IDENTITY(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mat3(1.0) * (vec3(0.0, 1.0, 1.0)))))), (false ? _GLF_FUZZED(vec3(8.8, -7.1, -130.062)) : vec3(1.0, 0.0, 0.0)))), clamp(dot(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? _GLF_FUZZED(8.0) : 0.0)), sqrt(1.0), 1.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_ONE(1.0, injectionSwitch.y))))) / 1.0), 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), float(mat3x4(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(64.78)), bool(false))), 0.0)), 0.0)), _GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), _GLF_IDENTITY(0.0, float(mat2x3(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-69.63)))), float(_GLF_FUZZED(-47.91)), bool(false))), 1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0))), log(1.0), 1.0, 1.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-1.9) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0))))))) - length(0.0)), round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(sqrt(1.0), 0.0 + (_GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))), min(float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))), float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))))))))), (_GLF_IDENTITY(normalize(_GLF_IDENTITY(sqrt(1.0), 0.0 + (_GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))), min(float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))), float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))))))))), mix(float(normalize(_GLF_IDENTITY(sqrt(1.0), 0.0 + (_GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))), min(float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0))), float(float(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0)))))))))), float(_GLF_FUZZED(-302.487)), bool(false)))) - 0.0))))), (_GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), clamp(_GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) + 0.0), 1.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-987.642)), float(dot(vec3(0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) + 0.0), 1.0), vec3(1.0, 0.0, 0.0))), bool(true))), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), min(dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0))) * exp(0.0)), 0.0, 0.0))))), round(length(normalize(sqrt(1.0)))))), min(float(mat2x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -3859.0774))), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-0.8) : 1.0))), bool(true)))), float(_GLF_FUZZED(-9.6)), bool(false))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-8.5))), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(sqrt(_GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), sqrt(1.0))), 1.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(890.486)), float(float(mat2(1.0, 1.0, 1.0, 1.0))), bool(true)))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5966.9598) : 1.0)))) : _GLF_FUZZED(-7.4)))) / 1.0), 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.5))), sqrt(_GLF_IDENTITY(1.0, (1.0) - 0.0)), 1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) * mat3(1.0)), vec3(mat3(vec3(1.0, 0.0, 0.0), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 0.0)))), dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), min(float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), 1.0, 1.0)), 1.0)), 1.0))), 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-471.029) : float(vec4(1.0, 1.0, 1.0, 1.0))))))), (1.0) / 1.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), length(_GLF_IDENTITY(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), clamp(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), _GLF_IDENTITY(vec4(mat3(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), (vec4(mat3(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))) * mat4(1.0))), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, sin(tan(0.0)), 0.0), mat3x4(mat3x4(mat3x4(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, sin(tan(0.0)), 0.0))))), mix(float(_GLF_FUZZED(1.9)), float(float(_GLF_IDENTITY(mat3x4(dot(vec3(0.0, sqrt(1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7127.0696) : 1.0))), vec3(1.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, sin(tan(0.0)), 0.0), mat3x4(mat3x4(mat3x4(dot(vec3(0.0, _GLF_IDENTITY(sqrt(1.0), float(mat4(sqrt(1.0), 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, 0.0, cos(0.0), determinant(mat2(1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 1.0), vec3(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.9) : 0.0)), 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, sin(tan(0.0)), 0.0)))))), bool(true))))))), round(length(normalize(sqrt(1.0)))))), float(mat2x3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3442.4118), _GLF_FUZZED(-5.3)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(sqrt(1.0), min(sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(506.390)), float(sqrt(1.0)), bool(true))))), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)))), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0)))), dot(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), float(vec4(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) * mat3(1.0))), dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.2)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true)))), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), max(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(492.565) : 1.0))), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false))), 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0), clamp(_GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-940.124)), float(1.0), bool(true)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0)), clamp(float(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0)), (true ? float(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0)) : _GLF_FUZZED(7941.0903))), float(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0)))))), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, float(mat4(1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0))), _GLF_ONE(1.0, injectionSwitch.y))))), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1.0), vec3(1.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, sqrt(1.0), 1.0), (vec3(0.0, sqrt(1.0), 1.0)) / vec3(1.0, 1.0, 1.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0))))), (false ? _GLF_FUZZED(33.69) : float(float(_GLF_IDENTITY(_GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0))), clamp(_GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(0.0, cos(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), log(1.0), 0.0, 0.0), (true ? mat3(0.0, cos(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat3(-24.22, -7942.4056, 5011.3107, -715.489, -586.890, -674.010, -8.6, -48.75, 64.03))))), (float(_GLF_IDENTITY(mat3(0.0, cos(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), log(1.0), 0.0, 0.0), (true ? mat3(0.0, cos(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat3(-24.22, -7942.4056, 5011.3107, -715.489, -586.890, -674.010, -8.6, -48.75, 64.03)))))) - 0.0)), sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY((clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0, max((clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0, (clamp(dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, sqrt(1.0), 1.0), vec3(1.0, 0.0, 0.0)))) + 0.0))))))))))) + 0.0))), round(length(normalize(sqrt(1.0))))))))) / 1.0))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
            barrier();
          }
         barrier();
        }
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 1, min(_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1))), 0 ^ 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, 1)))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))) != (_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) ^ 0), 0)), _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) - 0) | 0)), (int(2)) / 1)), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) >> 0))) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2))), _GLF_IDENTITY(min(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0)), (true ? min(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0)) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) / _GLF_IDENTITY(1, ~ (~ (1))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), (! (_GLF_DEAD(false))) || false)))))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bvec3(bool(bvec4(false, true, true, true)), false, false))))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size) / uvec4(1u, 1u, 1u, 1u)).x], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)) == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.z) + 1, (true ? uint(read_1 + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_13next_virtual_gidnum_workgroupread_2subgroup_size.z) + 1 : _GLF_FUZZED(subgroup_id))), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))) || false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
             break;
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              continue;
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-6733.5341, 1.0 * (-6733.5341))), _GLF_FUZZED((- 3.3))), bvec2(false, false))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-6733.5341, 1.0 * (-6733.5341))), _GLF_FUZZED((- 3.3))), bvec2(false, false))).y) * 1.0)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))) && true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            barrier();
           barrier();
          }
         break;
         if(_GLF_DEAD(false))
          break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         barrier();
        }
       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(4), int(4))) ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))))))))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
}
