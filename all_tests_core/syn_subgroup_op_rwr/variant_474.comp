#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(true, true))), false)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(77288u))), float(1.0), bool(true))))) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))) && true)))))
  barrier();
 uvec4 GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec3 GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.zw = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(77.51)), bool(false))) > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && true), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), false)), (bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), false))) && true))))))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 0.0))))) > injectionSwitch.y)) && true)))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, (((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > injectionSwitch.y)) && true) && true))))), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))))))))))) && true)) || false), false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && true), (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, true)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy = GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.x = subgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
 GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))))))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(0.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(0.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0)) * mat4(1.0)))).y)), true, true)))) && true)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, true)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true, true), bvec3(bvec3(bvec3(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true, true)))))))))), true, true, true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (bool(bvec4(false, true, true, true))))), (injectionSwitch.x > injectionSwitch.y))), false))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, true, _GLF_IDENTITY(true, bool(bool(true)))))))))), bool(bool((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (bool(bvec4(false, true, true, true))))), (injectionSwitch.x > injectionSwitch.y))), false))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, true, _GLF_IDENTITY(true, bool(bool(true))))))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.z = workgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
  barrier();
 GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.z = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y = GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.z;
 GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.y = GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.y;
 uint workgroup_base = GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.z * GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(288.320), _GLF_FUZZED(vec2(-701.840, 6.5).s)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(288.320), _GLF_FUZZED(vec2(-701.840, 6.5).s)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(288.320), _GLF_FUZZED(vec2(-701.840, 6.5).s)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false), false, false))))))));
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.zw.y = workgroup_base;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-399.221), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(-399.221), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (vec4(_GLF_FUZZED(-399.221), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))) * mat4(1.0))))), 0.0 + (float(_GLF_FUZZED(-399.221)))), bool(false)))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false, true))), false, true))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(131146u))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3824.1151)), float(0.0), bool(true))), 1.0)), max(float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(sqrt(-6259.4523)))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), true, false)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
        continue;
       if(_GLF_DEAD(false))
        return;
       break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(947.386), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(804.223)), bvec2(true, false))).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 uint virtual_gid = GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.zw.y + GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.x * subgroup_size + GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.x;
 GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.y = _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid)), (virtual_gid) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.zw.x = GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(52.31), _GLF_FUZZED(6.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x = GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.zw.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.zw.y + GLF_merged3_0_1_11_1_1_12_2_1_14subgroup_idworkgroup_idworkgroup_size.x * subgroup_size + ((GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.x + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, max(1, 1)), (0 | 0), 0)))), (int(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, max(1, 1)), (0 | 0), 0))))) | 0)))) % subgroup_size);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))
    barrier();
  }
 uint read_1 = atomicLoad(buf[GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u)), clamp(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, _GLF_IDENTITY(0u + (read_1), (86774u & 0u) + (0u + (read_1))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, 0u + (read_1))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, clamp(GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, (GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x) << (0u << _GLF_IDENTITY(uint(2u), uint(2u)))))), (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, clamp(GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x, (GLF_merged2_0_2_48_2_2_50GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.xy.x) << (0u << _GLF_IDENTITY(uint(2u), uint(2u))))))) ^ 0u)], _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) * 1))), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, sqrt(1.0), 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(GLF_merged3_0_1_17_1_1_11_2_1_12subgroup_local_idvirtual_gidworkgroup_id.x + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1 == read_2) + 1, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(uint(read_1 + 1 == read_2) + 1, 1u, 0u)), (_GLF_IDENTITY(uint(uvec3(uint(read_1 + 1 == read_2) + 1, 1u, 0u)), 0u ^ (uint(uvec3(uint(read_1 + 1 == read_2) + 1, 1u, 0u))))) + 0u), (uint(uvec3(uint(read_1 + 1 == read_2) + 1, 1u, 0u))) | _GLF_IDENTITY((uint(uvec3(uint(read_1 + 1 == read_2) + 1, 1u, 0u))), ~ (~ ((uint(uvec3(uint(read_1 + 1 == read_2) + 1, 1u, 0u)))))))), 4, 64, 4);
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ _GLF_IDENTITY((~ (read_1 + 1)), ((~ (read_1 + 1))) | ((~ (read_1 + 1)))))) / _GLF_IDENTITY(1u, min(1u, 1u))) == read_2) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))), 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), min(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1)))), (true ? 1 : _GLF_FUZZED(-89076))), 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), clamp(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0)))))))))) ^ 0), 0, 0), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), clamp(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, max(_GLF_IDENTITY(-89076, (-89076) | 0), _GLF_IDENTITY(-89076, int(ivec4(-89076, 1, 1, 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-89076, (true ? _GLF_IDENTITY(-89076, (-89076) / int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(72302)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (true ? 1 : _GLF_FUZZED(-89076))))), 0, (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1) * _GLF_IDENTITY((3), ((3)) | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) - sin(0.0)))))))))) ^ 0), 0, 0)))))) << _GLF_IDENTITY(0, 0 | (0))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, 0 ^ (1)) : _GLF_FUZZED(-89076), (_GLF_IDENTITY(true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(-89076), (_GLF_IDENTITY(_GLF_FUZZED(-89076), (_GLF_FUZZED(-89076)) | (_GLF_FUZZED(-89076)))) + 0), 0 ^ (true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(-89076), (_GLF_IDENTITY(_GLF_FUZZED(-89076), (_GLF_FUZZED(-89076)) | (_GLF_FUZZED(-89076)))) + 0)))) >> (0 >> _GLF_IDENTITY(int(4), int(4)))))), 0, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (int(ivec3(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-89076))), 0, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 1 * (3)))))))) * 1)), 4, 64, _GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), min((~ (4)), _GLF_IDENTITY((~ (4)), max((~ (4)), _GLF_IDENTITY((~ (4)), ((~ (4))) | 0)))))));
   subgroupAll(true);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(vec2(5.0, -783.417)) : vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))).y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false)))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false)))), true, false, true)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false)))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false)))), true, false, true))))) || false)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
