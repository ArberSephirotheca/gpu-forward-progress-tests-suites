#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) / 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)))) ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(926.411))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), false), true)))))))) && true))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), false, true, true)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
            barrier();
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec2(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) || false), (bool(true)) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)))), bool(bvec4(bool(_GLF_IDENTITY(bool(true), (bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))), true && (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), false || (! (! (true)))))))))))) || false)), true, false, false))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), false || (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((- 946.263))), float(injectionSwitch.y), bool(true))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y)))), false))))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), false), true)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), false), true)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), false))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(false)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(false)))), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(log(-4.4)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED((float(false))), max(_GLF_FUZZED((float(false))), _GLF_FUZZED((float(false)))))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(false)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(false)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(false)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))), false)))), true))), false, false))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), true, false))), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))))), true, false))), true, false)), true, false))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(-28740) : (0 << _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), ((0 << _GLF_IDENTITY(int(1), int(1)))) * 1), (0 << _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / (1 ^ 0)) != _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), min(int(int(1)), int(int(1)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.5)), bool(false)))))));
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_DEAD(false), false, true, true))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, abs(1.0), 0.0, 1.0, tan(0.0), 1.0, 0.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (35009 & 0)); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-64.48)), bool(false)))), (false ? _GLF_FUZZED(-7.5) : float(injectionSwitch.y)))), float(mat2(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.1)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(true)))), exp(0.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0))).y), (false ? _GLF_FUZZED(-7.5) : float(injectionSwitch.y)))), 1.0, abs(1.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false))))
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))), clamp((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))))), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-72380) : _GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))) != (6214 & 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), false, false, false)), true && (bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false, false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(max(gl_WorkGroupSize, gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec3(max(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), gl_WorkGroupSize)), max(uvec3(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), (_GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), ~ (~ (_GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(0u, 0u, 0u) ^ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))))) ^ uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(max(gl_WorkGroupSize, gl_WorkGroupSize)), (_GLF_IDENTITY(uvec3(max(gl_WorkGroupSize, gl_WorkGroupSize)), (uvec3(max(gl_WorkGroupSize, gl_WorkGroupSize))) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u) ^ (uvec3(max(gl_WorkGroupSize, gl_WorkGroupSize))))))))).x, (_GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(uvec3(gl_WorkGroupSize.x, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, (1u) << 0u))), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, uint(uint(1u))))))), 1u), (uvec3(gl_WorkGroupSize.x, 1u, 1u)) | (uvec3(gl_WorkGroupSize.x, 1u, 1u)))))) - ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(_GLF_IDENTITY(6u, (6u) | 0u), min(_GLF_IDENTITY(6u, _GLF_IDENTITY((6u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (2u) >> 0u)), uint(2u))), 1u)), (uint(uvec3(_GLF_IDENTITY((6u), clamp(_GLF_IDENTITY((6u), 0u | ((6u))), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(6u, _GLF_IDENTITY((6u) | 0u, ((6u) | 0u) << 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(6u, (6u) | 0u), min(_GLF_IDENTITY(6u, (6u) | 0u), _GLF_IDENTITY(6u, (6u) | 0u)))) ^ 0u))))), (false ? _GLF_FUZZED(clamp(num_workgroup, 89316u, subgroup_local_id)) : _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(_GLF_IDENTITY(6u, (6u) | _GLF_IDENTITY(0u, (0u) / 1u)), min(_GLF_IDENTITY(6u, _GLF_IDENTITY((6u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, clamp((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, _GLF_IDENTITY((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, uint(uvec2((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, 1u))), (uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u)), (_GLF_IDENTITY((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, clamp((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, _GLF_IDENTITY((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, uint(uvec2((uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u, 1u))), (uint(uvec3(_GLF_IDENTITY((6u), clamp((6u), (6u), (6u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) + 0u))) | 0u))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(6u, _GLF_IDENTITY((6u) | 0u, ((6u) | 0u) << 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(6u, (6u) | 0u), min(_GLF_IDENTITY(6u, (6u) | 0u), _GLF_IDENTITY(6u, (6u) | 0u)))) ^ 0u)))))))) << _GLF_IDENTITY(uint(5u), uint(5u))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((~ 10244) & 0)); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), 0 | (_GLF_IDENTITY(int(0), min(int(0), int(0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) >> 0), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) ^ 0)) ^ (0 | 0)), min(_GLF_IDENTITY(int(0), (int(0)) ^ 0), int(0))), _GLF_IDENTITY((false ? _GLF_FUZZED(max(89251, -86809)) : _GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, ~ (~ (0))))))), ((false ? _GLF_FUZZED(max(89251, -86809)) : _GLF_IDENTITY(int(0), min(int(0), int(_GLF_IDENTITY(0, ~ (~ (0)))))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) / 1)), (false ? _GLF_FUZZED(-62004) : _GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0)))), (min(int(0), int(0))) / 1)))))) / 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (0 << _GLF_IDENTITY(int(2), int(2))) | (int(0))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false) || (bool(bvec3(false, true, false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), clamp((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y, float(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y, 1.0, 1.0, 0.0, cos(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(832.007))), 0.0)), cos(0.0), 1.0, 1.0, 0.0)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((- -8.1))), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.5)), float(injectionSwitch.y), bool(true))))), float(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0))))).y, 1.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 1.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 0.0))))))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))) > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))) && true)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(36.87, 75.40)))).y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(7348.0134)), float((injectionSwitch)[0]), bool(true))), mix(float(_GLF_FUZZED(622.991)), float((injectionSwitch)[0]), bool(true))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED((9741.6579 + 9.4)), _GLF_FUZZED(vec3(-817.867, 62.21, -171.448).b)), bvec2(false, false))).y))) && true)))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))), true)), true && (bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true))))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, true, false, true))))))), true))))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8263.0486)), float(injectionSwitch.y), bool(true)))), bool(bool(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8263.0486)), float(injectionSwitch.y), bool(true)))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8263.0486)), float(injectionSwitch.y), bool(true)))), bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8263.0486)), float(injectionSwitch.y), bool(true))))))), true)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) - 0.0) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(false, false, true, true)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)) | (subgroup_id)) * subgroup_size + subgroup_local_id, clamp(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)) + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, ~ (~ (_GLF_IDENTITY((subgroup_id) / 1u, max((subgroup_id) / 1u, (subgroup_id) / 1u))))))) : subgroup_local_id)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)))))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ ((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))))))), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)) * subgroup_size))) + _GLF_IDENTITY(0u, (0u) | 0u)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))), ~ (~ ((0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) / 1u) ^ (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))) / 1u)) ^ 0u))) + subgroup_id * subgroup_size) + 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uvec4(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, (5u) | (5u))))), 1u, 1u, 0u)))), uint(5u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) : (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) & 92047u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) * 1u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), 0u ^ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size) + 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uvec4(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, (5u) | (5u))))), 1u, 1u, 0u)))), uint(_GLF_IDENTITY(5u, (5u) >> 0u)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) : (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) & 92047u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) * 1u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uint(uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size) + 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uvec4(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, (5u) | (5u))))), 1u, 1u, 0u)))), uint(5u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) : (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) & 92047u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) * 1u)), (0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) * 1u))) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))) + _GLF_IDENTITY(0u, (0u) | 0u)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))) + _GLF_IDENTITY(0u, (0u) | 0u)))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) << 0u) * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size)), workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size), uint(uvec4((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size), 0u, 0u, 1u)))))) + 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uvec4(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, (5u) | (5u))))), 1u, 1u, 0u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) | (uint(5u)))) >> 0u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) : (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) & 92047u), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(0u, 0u)))), (_GLF_IDENTITY(uint(0u), uint(0u))) * 1u)))), max((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))), (_GLF_IDENTITY(uint(0u), uint(0u))) * 1u)))), _GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 1u))), 0u))))) * 1u)))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u))))) * 1u)))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u))))) * 1u))))) ^ 0u)) + 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), 0u ^ (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(0u, 1u * (0u)) << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size) + 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uvec4(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, (5u) | (5u))))), 1u, 1u, 0u)))), uint(5u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) : (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) & 92047u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) / 1u)))), uint(0u))))) >> _GLF_IDENTITY(0u, (0u) / 1u))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) / 1u)))), uint(0u))))) >> _GLF_IDENTITY(0u, (0u) / 1u)))))) * 1u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uint(uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(31786u) : _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(uvec3(25002u, 125929u, 114778u).b) : workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, max(8u, _GLF_IDENTITY(8u, 0u ^ (8u))))), uint(8u))) ^ (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), min(min(workgroup_base, workgroup_base), min(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size) + 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), 0u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, uint(uvec4(_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, max(5u, 5u))) | (5u))))), 1u, 1u, 0u)))), uint(5u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) : (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) & 92047u), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 1u, 0u, 0u))))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), 0u + (_GLF_IDENTITY(uint(0u), (uint(0u)) << 0u))))) * 1u)))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))))))) * 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))), uint(uvec3((_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base))))) + subgroup_id * subgroup_size), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), ~ (~ (uint(4u))))))))) + 0u))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) | (workgroup_base + subgroup_id * subgroup_size)), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : workgroup_base + subgroup_id * subgroup_size))) + 0u))), ((0u << _GLF_IDENTITY(uint(5u), uint(5u))) & 92047u), (_GLF_IDENTITY((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u)) / 1u)), (uint(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size)) | 0u))), (workgroup_base + subgroup_id * subgroup_size) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) + 0u, uint(_GLF_IDENTITY(uvec3((workgroup_base + subgroup_id * subgroup_size) + 0u, 1u, (0u ^ 0u)), (uvec3((workgroup_base + subgroup_id * subgroup_size) + 0u, 1u, (0u ^ 0u))) ^ (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)), (workgroup_base + subgroup_id * subgroup_size) + 0u))), 0u, 0u, 1u))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u)) + 0u)), min(_GLF_IDENTITY(clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u)) + 0u)), (true ? clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u)) + 0u)) : _GLF_FUZZED(subgroup_local_id))), clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u)) + 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)) << _GLF_IDENTITY(uint(5u), uint(5u))), min((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)) << _GLF_IDENTITY(uint(5u), uint(5u))), _GLF_IDENTITY((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)) << _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)) << _GLF_IDENTITY(uint(5u), uint(5u))), ((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)) << _GLF_IDENTITY(uint(5u), uint(5u)))) / _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u)))) | 0u))) & 92047u), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(0u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), uint(0u)))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(false || (false), true, true, true))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (true ? vec2(injectionSwitch[0], injectionSwitch[1]) : _GLF_FUZZED(vec2(-9819.0869, 0.0))))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (true)))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(528.921) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(528.921) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), true)), ! (_GLF_IDENTITY(! (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(528.921) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), true))), ! (! (! (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(528.921) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), true)))))))))), false, true))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec4(0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0)), 0.0, round(length(normalize(1.0))))), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec4(_GLF_IDENTITY(0.0, float(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 0.0)), 0.0, round(length(normalize(1.0)))))))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, int(int(4))), _GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(bitfieldInsert(98970, 59005, 87965, 47775)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(19928, clamp(_GLF_IDENTITY(19928, _GLF_IDENTITY((19928), (_GLF_IDENTITY((19928), int(ivec2((19928), 0)))) >> 0) >> 0), 19928, 19928))) : 64)), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))) || false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (true && (false)), false, true, false)), bool(bvec4(bool(bvec4(! (true && (false)), false, true, false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true && (bool(bvec4(! (_GLF_IDENTITY(true && (false), false || (true && (false)))), false, true, false)))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, 0u + (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((read_1 + 1), 0u + ((read_1 + 1))) << 0u)))))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, max(4, 4)))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) | 0), 4)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(_GLF_IDENTITY(4, 1 * (4)), 4)))), 0 + (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))), (4) ^ 0), max(4, 4)))), (false ? _GLF_FUZZED(40608) : _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ _GLF_IDENTITY(0, ~ (~ (0)))), max(4, 4)))), clamp((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (4)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, 4)))))))))), max((~ (_GLF_IDENTITY(4, max(4, 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(max(4, 4), min(max(4, 4), max(4, 4)))))))))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(_GLF_IDENTITY(4, 1 * (4)), 4)))), 0 + (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))), (4) ^ 0), max(4, 4)))), (false ? _GLF_FUZZED(40608) : _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ _GLF_IDENTITY(0, ~ (~ (0)))), max(4, 4)))), clamp((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (4)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, 4)))))))))), max((~ (_GLF_IDENTITY(4, max(4, 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(max(4, 4), min(max(4, 4), max(4, 4)))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(_GLF_IDENTITY(4, 1 * (4)), 4)))), 0 + (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))), (4) ^ 0), max(4, 4)))), (false ? _GLF_FUZZED(40608) : _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ _GLF_IDENTITY(0, ~ (~ (0)))), max(4, 4)))), clamp((~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (4)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, 4)))))))))), max((~ (_GLF_IDENTITY(4, max(4, 4)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(max(4, 4), min(max(4, 4), max(4, 4))))))))))))), (~ (_GLF_IDENTITY(4, max(4, 4)))), (~ (_GLF_IDENTITY(4, max(4, 4)))))))))), (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))) << (0 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))) << (0 << _GLF_IDENTITY(int(7), int(7)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))) << (0 << _GLF_IDENTITY(int(7), int(7))))), max(~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))) << (0 << _GLF_IDENTITY(int(7), int(7))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))) << (0 << _GLF_IDENTITY(int(7), int(7)))))))))) | (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4))))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))) << (0 << _GLF_IDENTITY(int(7), int(7)))))), (~ (~ (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(int(4))), _GLF_IDENTITY(4, (4) | 0))))), max(4, 4)))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(int(4))), _GLF_IDENTITY(4, (4) | 0))))), max(4, 4)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(int(4))), _GLF_IDENTITY(4, (4) | 0))))), max(4, 4)))))))))) - 0))) ^ 0));
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))) || false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(read_1, (read_1) ^ 0u) + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), clamp((read_1), (read_1), (read_1))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))) << 0u)))) + 1, (read_1 + 1) | uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(trunc(482.757)) : 1.0)))) * 1.0), injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-580.817) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(trunc(482.757)) : 1.0)))) * 1.0), injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))))), (read_1 + 1) | (_GLF_IDENTITY(read_1, _GLF_IDENTITY((0u ^ 0u), max(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u), _GLF_IDENTITY((0u ^ 0u), uint(uvec4((0u ^ 0u), 0u, 1u, 1u))))) + (read_1)) + 1)), read_1 + 1)), uint(uvec3(read_1 + 1, 0u, 1u))) == read_2) + 1, min(uint(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | 0u), 0u)), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (_GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * 1u)) >> 0u)), 0u | (_GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) ^ 0u)))) - 0u))) / 1u))), 0u, 0u))) / _GLF_IDENTITY(1u, (1u) - 0u)), _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) * 1u), 1u, 1u))))))) == read_2) + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), 0 ^ (int(ivec4(1, 1, 1, 1))))))), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, (1) * 1))), (int(int(_GLF_IDENTITY(1, (1) * 1)))) ^ 0)), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))))))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec3(_GLF_IDENTITY(true && (true), true && (true && (true))), false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))), ~ (~ (uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))))))), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))), (clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))))))) / 1u))))) : _GLF_FUZZED(workgroup_size)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) + (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) + 1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) ^ 0) : _GLF_IDENTITY(_GLF_FUZZED(50815), (_GLF_IDENTITY(_GLF_FUZZED(50815), max(_GLF_IDENTITY(_GLF_FUZZED(50815), clamp(_GLF_FUZZED(50815), _GLF_FUZZED(50815), _GLF_FUZZED(50815))), _GLF_FUZZED(50815)))) / 1))))), 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0))) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))), (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))))), 0u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(num_workgroup))), read_1 + 1)), _GLF_IDENTITY(0u, (1u ^ 1u) | (_GLF_IDENTITY(0u, (0u) | 0u))), 1u)))) * 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), 0 ^ (int(ivec4(1, 1, 1, 1))))))), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, (1) * 1))), (int(int(_GLF_IDENTITY(1, (1) * 1)))) ^ 0)), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))))))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec3(_GLF_IDENTITY(true && (true), true && (true && (true))), false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))), ~ (~ (uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))))))), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))), (clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))))))) / 1u))))) : _GLF_FUZZED(workgroup_size)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) + (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) + 1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) ^ 0) : _GLF_IDENTITY(_GLF_FUZZED(50815), (_GLF_IDENTITY(_GLF_FUZZED(50815), max(_GLF_IDENTITY(_GLF_FUZZED(50815), clamp(_GLF_FUZZED(50815), _GLF_FUZZED(50815), _GLF_FUZZED(50815))), _GLF_FUZZED(50815)))) / 1))))), 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0))) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))), (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))))), 0u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(num_workgroup))), read_1 + 1)), _GLF_IDENTITY(0u, (1u ^ 1u) | (_GLF_IDENTITY(0u, (0u) | 0u))), 1u)))) * 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), 0 ^ (int(ivec4(1, 1, 1, 1))))))), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, (1) * 1))), (int(int(_GLF_IDENTITY(1, (1) * 1)))) ^ 0)), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))))))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec3(_GLF_IDENTITY(true && (true), true && (true && (true))), false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))), ~ (~ (uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))))))), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))), (clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))))))) / 1u))))) : _GLF_FUZZED(workgroup_size)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) + (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) + 1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) ^ 0) : _GLF_IDENTITY(_GLF_FUZZED(50815), (_GLF_IDENTITY(_GLF_FUZZED(50815), max(_GLF_IDENTITY(_GLF_FUZZED(50815), clamp(_GLF_FUZZED(50815), _GLF_FUZZED(50815), _GLF_FUZZED(50815))), _GLF_FUZZED(50815)))) / 1))))), 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0))) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))), (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))))), 0u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(num_workgroup))), read_1 + 1)), _GLF_IDENTITY(0u, (1u ^ 1u) | (_GLF_IDENTITY(0u, (0u) | 0u))), 1u)))) * 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), 0 ^ (int(ivec4(1, 1, 1, 1))))))), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, (1) * 1))), (int(int(_GLF_IDENTITY(1, (1) * 1)))) ^ 0)), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))))))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec3(_GLF_IDENTITY(true && (true), true && (true && (true))), false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))), ~ (~ (uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))))))), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))), (clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))))))) / 1u))))) : _GLF_FUZZED(workgroup_size)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) + (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) + 1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) ^ 0) : _GLF_IDENTITY(_GLF_FUZZED(50815), (_GLF_IDENTITY(_GLF_FUZZED(50815), max(_GLF_IDENTITY(_GLF_FUZZED(50815), clamp(_GLF_FUZZED(50815), _GLF_FUZZED(50815), _GLF_FUZZED(50815))), _GLF_FUZZED(50815)))) / 1))))), 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0))) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))), (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))))), 0u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(num_workgroup))), read_1 + 1)), _GLF_IDENTITY(0u, (1u ^ 1u) | (_GLF_IDENTITY(0u, (0u) | 0u))), 1u)))) * 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), 0 ^ (int(ivec4(1, 1, 1, 1))))))), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, (1) * 1))), (int(int(_GLF_IDENTITY(1, (1) * 1)))) ^ 0)), 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))))))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u)))) << 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec3(_GLF_IDENTITY(true && (true), true && (true && (true))), false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))), ~ (~ (uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))))))), clamp(uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u)), uint(uvec3(read_1 + 1, 0u, 1u))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)))))), (clamp(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))))))) / 1u))))) : _GLF_FUZZED(workgroup_size)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 0u, 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) + (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) + 1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) ^ 0) : _GLF_IDENTITY(_GLF_FUZZED(50815), (_GLF_IDENTITY(_GLF_FUZZED(50815), max(_GLF_IDENTITY(_GLF_FUZZED(50815), clamp(_GLF_FUZZED(50815), _GLF_FUZZED(50815), _GLF_FUZZED(50815))), _GLF_FUZZED(50815)))) / 1))))), 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))), min(read_1 + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0))) : _GLF_FUZZED(50815))), read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))), (true ? _GLF_IDENTITY(1, (1) ^ 0) : _GLF_FUZZED(50815))))), 0u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec3(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(num_workgroup))), read_1 + 1)), _GLF_IDENTITY(0u, (1u ^ 1u) | (_GLF_IDENTITY(0u, (0u) | 0u))), 1u)))) * 1u))))))))) == read_2) + 1, min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * (1 & _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))))) << 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * (1 & 1))) << 0)) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * (1 & 1))) << 0))), uint(uvec3(read_1 + 1, 0u, 1u))) == read_2), (uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * (1 & 1))) << 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(29139))), _GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(2561)))) >> 0)) * (1 & 1))) << 0))), uint(uvec3(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), 0u, 1u))) == read_2)) >> 0u), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), (0 & -64415) ^ ((1 & 1)))) | 0))) << 0), uint(uvec3(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) >> _GLF_IDENTITY(0u, (0u) << 0u)), 0u, 1u))) == read_2)) + 0u) + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)), 0u, 1u)), min(uint(uvec3(_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1)), 0u, 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-955.222)), float(injectionSwitch.y), bool(true))), (injectionSwitch.x > injectionSwitch.y) && true))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), clamp(_GLF_FUZZED(uvec3(_GLF_IDENTITY(184222u, (_GLF_IDENTITY(184222u, (184222u) | (184222u))) | (_GLF_IDENTITY(184222u, min(184222u, 184222u)))), 115511u, 47874u)), _GLF_IDENTITY(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), uvec3(uvec4(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), ~ (~ (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u))))))))))) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : read_1)), read_1)) + 1, 0u, 1u), clamp(uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u)))))), (uint(uvec3(read_1 + 1, 0u, 1u))) | (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, clamp(read_1, read_1, read_1))) | (read_1)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) | ivec2(0, 0))), 0 + (int(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)) | ivec2(0, 0), ivec2(0, 0) ^ ((ivec2(1, 1)) | ivec2(0, 0))))))))), (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, 0 ^ (1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, 0 ^ (1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec3(_GLF_IDENTITY(1, 0 ^ (1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec3(55495, -47042, 74073)))) : _GLF_FUZZED(ivec3(-15944, -38550, -49964))))))), (ivec2(1, 1)) | ivec2(0, 0))), 0 + (int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) | ivec2(0, _GLF_IDENTITY(0, 0 | (0)))))))))) / 1)))) | _GLF_IDENTITY(0, (0) >> (0 << _GLF_IDENTITY(int(5), int(5))))), 0u, 1u), uvec3(uvec3(uvec3(read_1 + 1, 0u, 1u)))))))))) == read_2, false || (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)), 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), min(uint(uvec3(_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1)), 0u, 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.1) : injectionSwitch.y))) && true))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), clamp(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), _GLF_IDENTITY(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), uvec3(uvec4(_GLF_FUZZED(uvec3(184222u, 115511u, 47874u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), _GLF_IDENTITY(115511u, (115511u) + 0u), 47874u), uvec3(uvec4(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), 1u))), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u)), max(_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u)), uvec3(0u, 0u, 0u) ^ (~ (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u)))), _GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u)), (~ (uvec3(_GLF_IDENTITY(184222u, (184222u) | 0u), 115511u, 47874u))) + uvec3(0u, 0u, 0u))))))))))))) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : read_1)), read_1)), uint(uvec2(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : read_1)), read_1)), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))))) + 1, 0u, _GLF_IDENTITY(1u, (1u) | 0u)), clamp(uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) << 0u)) << 0u) + 1, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(1u, max(1u, 1u))), (uvec3(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) << 0u)) << 0u) + 1, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(1u, max(1u, 1u)))) | uvec3(0u, 0u, 0u))))))), (uint(uvec3(read_1 + 1, 0u, 1u))) | (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), read_1, read_1))), clamp((_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), read_1, read_1))), (_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), read_1, read_1))), _GLF_IDENTITY((_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), read_1, read_1))), ((_GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(next_virtual_gid) : read_1)), read_1, read_1)))) << 0u))) | (read_1)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) | ivec2(0, 0))), 0 + (int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) | ivec2(0, 0))))))), (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) | ivec2(0, 0))), 0 + (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), ~ (_GLF_IDENTITY(~ (ivec2(1, 1)), clamp(_GLF_IDENTITY(~ (ivec2(1, 1)), ivec2(ivec2(~ (ivec2(1, 1))))), ~ (ivec2(1, 1)), _GLF_IDENTITY(~ (ivec2(1, 1)), max(~ (ivec2(1, 1)), ~ (ivec2(1, 1)))))))), (ivec2(1, 1)) | ivec2(0, _GLF_IDENTITY(0, 0 | (0)))))))))) / 1)))) | 0), 0u, 1u), uvec3(uvec3(uvec3(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) - 0), 0u, 1u)))))))))) == read_2))) + 1, (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), 0 | (clamp(1, 1, 1))), clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), (ivec4(1, 1, 1, 1)) >> ivec4(0, 0, 0, 0)))), 1, 1)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0u, 1u)) >> uvec3(0u, 0u, 0u))), min(uint(uvec3(read_1 + 1, 0u, 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-6253.6919) : injectionSwitch.x))), float(_GLF_FUZZED(6.5)), bool(false))))) > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false)) ? _GLF_FUZZED(uvec3(184222u, 115511u, 47874u)) : _GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), clamp(uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)), 1u)))))), (uint(uvec3(read_1 + 1, 0u, 1u))) | (uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), min(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), uvec3(1u, 1u, 1u) * (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)))), (uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1))))) >> 0u)), 0u, 1u))))), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(workgroup_size))), 0u, 1u)) - uvec3(0u, 0u, 0u), ((uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), (false ? _GLF_FUZZED(uvec3(99215u, 135418u, 146693u)) : uvec3(6u))), _GLF_IDENTITY(uvec3(6u), max(uvec3(6u), uvec3(6u)))))))) ^ uvec3(0u, 0u, 0u))), clamp(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), min(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), uvec3(1u, 1u, 1u) * (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)))), (uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1))))) >> 0u)), 0u, 1u))))), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(workgroup_size))), 0u, 1u)) - uvec3(0u, 0u, 0u), ((uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), (false ? _GLF_FUZZED(uvec3(99215u, 135418u, 146693u)) : uvec3(6u))), _GLF_IDENTITY(uvec3(6u), max(uvec3(6u), uvec3(6u)))))))) ^ uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), min(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), uvec3(1u, 1u, 1u) * (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)))), (uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1))))) >> 0u)), 0u, 1u))))), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(workgroup_size))), 0u, 1u)) - uvec3(0u, 0u, 0u), ((uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), (false ? _GLF_FUZZED(uvec3(99215u, 135418u, 146693u)) : uvec3(6u))), _GLF_IDENTITY(uvec3(6u), max(uvec3(6u), uvec3(6u)))))))) ^ uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), min(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), uvec3(1u, 1u, 1u) * (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)))), (uint(uint(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1))))) >> 0u)), 0u, 1u))))), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(workgroup_size))), 0u, 1u)) - uvec3(0u, 0u, 0u), ((uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), (false ? _GLF_FUZZED(uvec3(99215u, 135418u, 146693u)) : uvec3(6u))), _GLF_IDENTITY(uvec3(6u), max(uvec3(6u), uvec3(6u)))))))) ^ uvec3(0u, 0u, 0u))))))))))))) == read_2, (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), min(uint(uvec3(read_1 + 1, 0u, 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (bool(injectionSwitch.x > injectionSwitch.y))), false))))))) || false)) ? _GLF_FUZZED(uvec3(184222u, 115511u, 47874u)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(read_1)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (uint(uint(read_1)))))), (false ? _GLF_FUZZED((workgroup_size --)) : (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, uint(uint(read_1))))), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (uint(uint(read_1)))))))) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uvec4(179006u, 123273u, 101624u, 90441u).z) : _GLF_IDENTITY(0u, (0u) << 0u))))))) + 1, 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))), clamp(uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)), 1u)))), (_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (bool(injectionSwitch.x > injectionSwitch.y))), false))))))) || false)) ? _GLF_FUZZED(uvec3(184222u, 115511u, 47874u)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(read_1)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (uint(uint(read_1)))))), (false ? _GLF_FUZZED((workgroup_size --)) : (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, uint(uint(read_1))))), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (uint(uint(read_1)))))))) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uvec4(179006u, 123273u, 101624u, 90441u).z) : _GLF_IDENTITY(0u, (0u) << 0u))))))) + 1, 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))), clamp(uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)), 1u)))), ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (bool(injectionSwitch.x > injectionSwitch.y))), false))))))) || false)) ? _GLF_FUZZED(uvec3(184222u, 115511u, 47874u)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(read_1)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (uint(uint(read_1)))))), (false ? _GLF_FUZZED((workgroup_size --)) : (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(read_1, uint(uint(read_1))))), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (uint(uint(read_1)))))))) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uvec4(179006u, 123273u, 101624u, 90441u).z) : _GLF_IDENTITY(0u, (0u) << 0u))))))) + 1, 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))), clamp(uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, 0u, 1u), uvec3(read_1 + 1, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)), 1u))))) / uvec3(1u, 1u, 1u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY((uint(uvec3(read_1 + 1, 0u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((uint(uvec3(read_1 + 1, 0u, 1u))), (true ? (uint(uvec3(read_1 + 1, 0u, 1u))) : _GLF_FUZZED((subgroup_size ^ virtual_gid)))), min((uint(uvec3(read_1 + 1, 0u, 1u))), _GLF_IDENTITY((uint(uvec3(read_1 + 1, 0u, 1u))), uint(uvec2((uint(uvec3(read_1 + 1, 0u, 1u))), (1u ^ 0u))))))) | ((uint(uvec3(read_1 + 1, 0u, 1u))))) | (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, (true ? _GLF_IDENTITY(read_1, 0u | (read_1)) : _GLF_FUZZED(atomicAdd(workgroup_size, packUnorm2x16(injectionSwitch))))) + 1, 0u, 1u), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(read_1 + 1, 0u, 1u), (uvec3(read_1 + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))))))))))) == read_2) || false)) + 1) / 1u))))), _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4))))), 64, _GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false, true))))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false, true))))), ! (! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false, true)), ! (! (bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false, true)))))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))))))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -61806) | 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false))))), bool(bvec2(bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false))))), true)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! ((_GLF_IDENTITY(true, ! (! (true))))))), false, true)))) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))), (injectionSwitch.x < injectionSwitch.y)) && (! (_injected_loop_counter < 1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, bool(bvec2((false) || false, true))))))), bool(bvec4(_GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, bool(bvec2((false) || false, true))))))), false, false, true))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5487.8402)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-535.849)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec2(-151.906, -2.3).t)), bool(_GLF_IDENTITY(false, (false) && true)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.0)), vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))))), false || (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))))), ! (! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))) || _GLF_IDENTITY((false), ((false)) || false))))))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 ^ (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -22229)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), clamp(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), clamp(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), clamp(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))), false, true)))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))), (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))) && true)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), true && (bool(bvec3(false, false, true))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), true && (bool(bvec3(false, false, true)))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))))))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - 0u)], uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, false, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (read_1) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, read_1))) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (true ? _GLF_IDENTITY(read_1, ~ (~ (read_1))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(read_1, (read_1) >> 0u))), 0u | (_GLF_IDENTITY(read_1, (read_1) / 1u)))) | _GLF_IDENTITY((_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), 0u ^ ((read_1))) / 1u)))), min((_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (read_1) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, clamp(read_1, read_1, read_1)), 0u | (_GLF_IDENTITY(read_1, (read_1) / 1u)))))))) - (0u ^ 0u)) + _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(49432))) == read_2))) || false)) && true)) + 1, 4, _GLF_IDENTITY(64, (64) | (64)), 4);
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))));
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 & -48207))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || false)), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true, true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true, true)))))))))))))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec3(bvec3(bvec3(true, true, true)))))), false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(true, true, true))), false)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))), true), bvec3(bvec3(bvec3(true, true, true)))))))))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0), vec2(1.0, 1.0)), dot(vec2(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0), vec2(1.0, 1.0))), 0.0))).y)))))) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}
