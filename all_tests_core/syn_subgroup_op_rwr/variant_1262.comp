#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(28.53)), float(1.0), bool(true))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (bool((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size) >> 0u) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(3819.6367)))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (buf[virtual_gid]), min(~ (buf[virtual_gid]), ~ (buf[virtual_gid]))))), (buf[virtual_gid]) << 0u), 4, 64, 0);
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), (_GLF_DEAD(false)) || false)) || false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true))))) && true))))) || false)), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), false, false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), false, false)), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), false, false)), true, false)), true, false)))))), true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           barrier();
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, log(1.0), 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-145.090, mix(float(-145.090), float(_GLF_FUZZED((_GLF_IDENTITY(2.9, (true ? _GLF_IDENTITY(2.9, mix(float(2.9), float(_GLF_FUZZED(-259.056)), bool(false))) : _GLF_FUZZED(vec3(-35.56, -93.03, -9.7).y))) / -4166.5794))), bool(false)))))) > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 1)))))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 1)))))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), _GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 1)))))))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), false || (bool(bvec4(false, false, false, true)))))))))) || false))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(56.18)), bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))) : _GLF_FUZZED(vec2(-25.59, -9.3)))), injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) >> (-9980 & 0)), (_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) >> (-9980 & 0))) | (_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) >> (-9980 & 0)))) >> 0) != (_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1, 0u + (read_1)) + 1 == read_2) || false)) + 1, 4, 64, 4);
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       subgroupAll(false);
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), ! (_GLF_IDENTITY(! ((bool(false))), (! ((bool(false)))) && true))))))), (bool(false)) || _GLF_IDENTITY(false, (false) && true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, ! (! (true))) && (bool(false)))))), (bool(false)) || _GLF_IDENTITY(false, (false) && true))))), false), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))), (bool(false)) || _GLF_IDENTITY(false, (false) && true))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (bool(false))), true && (bool(false)))))), (bool(false)) || _GLF_IDENTITY(false, (false) && true))))), false), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))), (bool(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec4((false), true, true, false))))) && true))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))), (bool(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec4((false), true, true, false))))) && true))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))), (bool(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec4((false), true, true, false))))) && true)))) && true), false, true, true))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(mat2((injectionSwitch), 1.0, log(1.0))))[1]), vec2(_GLF_FUZZED(2.6), _GLF_FUZZED((-8563.8861 / -0.9))), bvec2(false, false))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2.6), _GLF_FUZZED((-8563.8861 / -0.9))), bvec2(false, false))).y)), false || (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2.6), _GLF_FUZZED((-8563.8861 / -0.9))), bvec2(false, false))).y)))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) && true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(6.3, -5.3).r)), bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(6.3, -5.3).r)), bvec2(true, false)))) * mat2(1.0), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(6.3, -5.3).r)), bvec2(true, false)))) * mat2(1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(6.3, -5.3).r)), bvec2(true, false)))) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(6.3, -5.3).r)), bvec2(true, false)))) * mat2(1.0))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(78.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(6.3, -5.3).r)), bvec2(true, false)))) * mat2(1.0)))).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) && true)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.4)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))), min(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))))))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.4)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))), min(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-38.20)), float(float(_GLF_IDENTITY(mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(37.31, 2.5, 9.4, 358.294, 7.2, -89.09, -44.37, 7234.3510, -946.302, -212.763, -3133.0472, -4401.4296, -674.718, 3.4, 2395.1720, -959.770)) : mat4(0.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))), 0.0, 1.0, sin(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0))))))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && _GLF_IDENTITY(true, (true) || false)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             return;
            }
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-17731 & 0)), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-17731 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (-17731 & 0))) || false), true))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
