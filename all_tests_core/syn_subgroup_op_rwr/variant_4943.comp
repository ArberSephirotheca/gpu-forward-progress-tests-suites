#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 uvec4 _f0;
 vec4 _f1;
 vec2 _f2;
 bool _f3;
 bvec2 _f4;
 ivec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 uvec3 _f1;
 uvec3 _f2;
 uvec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 float _f1;
 vec4 _f2;
 mat3 _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_11 {
 uvec3 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 vec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_8 {
 uint workgroup_base;
 float _f0;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 float _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 mat3x4 _f1;
 vec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 mat4x3 _f1;
 mat4x2 _f2;
 _GLF_struct_7 _f3;
 vec2 _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_10 _f0;
 _GLF_struct_15 _f1;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 float _f1;
 vec3 _f2;
 mat4 _f3;
 mat4x2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_2 {
 bool _f0;
 vec3 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_4 {
 uint _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 uint workgroup_size;
 uvec3 _f1;
 _GLF_struct_4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(_GLF_struct_0(mat4x2(1.0))), gl_WorkGroupSize.x, uvec3(1u), _GLF_struct_4(1u, _GLF_struct_2(true, vec3(1.0), mat3x4(1.0), bvec4(true), ivec3(1)), _GLF_struct_3(mat2x3(1.0), 1.0, vec3(1.0), mat4(1.0), mat4x2(1.0), mat3x4(1.0)), ivec3(1)));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_10(_GLF_struct_6(vec4(1.0), mat3x4(1.0), vec4(1.0), 1u), mat4x3(1.0), mat4x2(1.0), _GLF_struct_7(mat3(1.0), 1.0, bvec3(true)), vec2(1.0), _GLF_struct_8(_GLF_struct_replacement_5.workgroup_size * workgroup_id, 1.0), _GLF_struct_9(vec3(1.0), vec3(1.0), mat3(1.0))), _GLF_struct_15(_GLF_struct_11(uvec3(1u)), _GLF_struct_12(vec4(1.0), 1.0, vec4(1.0), mat3(1.0), mat4x2(1.0), ivec3(1)), _GLF_struct_13(bvec3(true), uvec3(1u), uvec3(1u), uvec3(1u), vec2(1.0)), _GLF_struct_14(uvec4(1u), vec4(1.0), vec2(1.0), true, bvec2(true), ivec4(1), uvec4(1u))));
 uint virtual_gid = _GLF_struct_replacement_16._f0._f5.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_16._f0._f5.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
  }
}
