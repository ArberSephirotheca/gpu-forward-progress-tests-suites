#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 ivec2 _f0;
 mat3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
} ;

struct _GLF_struct_14 {
 float _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 vec3 _f3;
 uint virtual_gid;
 uvec3 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 bvec4 _f1;
 int _f2;
 int _f3;
 bvec4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 bool _f1;
 int _f2;
 _GLF_struct_8 _f3;
 uvec2 _f4;
 _GLF_struct_9 _f5;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
} ;

struct _GLF_struct_11 {
 uint workgroup_size;
 ivec4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 uvec3 _f1;
 vec4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 vec2 _f1;
 mat2x3 _f2;
 float _f3;
 uvec3 _f4;
 mat2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 mat3x2 _f1;
 uint _f2;
 int _f3;
 mat2x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uint read_1;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 ivec2 _f2;
 bool _f3;
 _GLF_struct_5 _f4;
 vec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(gl_WorkGroupSize.x, ivec4(1), _GLF_struct_7(ivec3(1)), _GLF_struct_10(ivec2(1), true, 1, _GLF_struct_8(ivec3(1)), uvec2(1u), _GLF_struct_9(vec2(1.0), bvec4(true), 1, 1, bvec4(true), mat4x2(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_11.workgroup_size * workgroup_id;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_14(1.0, _GLF_struct_12(vec3(1.0)), _GLF_struct_13(ivec2(1), mat3(1.0), mat3(1.0)), vec3(1.0), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, uvec3(1u), uvec2(1u)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(_GLF_struct_0(mat4(1.0), mat3x2(1.0), 1u, 1, mat2x3(1.0), mat3x4(1.0)), atomicLoad(buf[_GLF_struct_replacement_15._f0.virtual_gid], 4, 64, 0), _GLF_struct_1(bvec3(true), vec2(1.0), mat2x3(1.0), 1.0, uvec3(1u), mat2(1.0), mat2(1.0))), _GLF_struct_3(bvec2(true), uvec3(1u), vec4(1.0), mat2x3(1.0)), ivec2(1), true, _GLF_struct_5(_GLF_struct_4(ivec4(1))), vec2(1.0));
 atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_6._f0.read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_15._f0.virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_6._f0.read_1 + 1 == read_2) + 1, 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         subgroupAll(false);
        }
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_6._f0.read_1 + 1 == read_2) + 1, 4, 64, 4);
        }
       subgroupAll(true);
      }
    }
  }
}
