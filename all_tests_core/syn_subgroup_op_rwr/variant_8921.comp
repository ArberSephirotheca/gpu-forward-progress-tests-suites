#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_21 {
 mat2x3 _f0;
 mat4x3 _f1;
 float _f2;
 bvec3 _f3;
 bvec4 _f4;
 int _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_20 {
 uint next_virtual_gid;
 int _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_22 {
 _GLF_struct_20 _f0;
 vec3 _f1;
 _GLF_struct_21 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 bvec3 _f1;
 mat3x4 _f2;
 uvec3 _f3;
 vec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_23 {
 mat3 _f0;
 _GLF_struct_19 _f1;
 bool _f2;
 _GLF_struct_22 _f3;
} ;

struct _GLF_struct_18 {
 vec4 _f0;
 uint subgroup_id;
 mat4x3 _f1;
 mat2x3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_15 {
 ivec4 _f0;
 bvec2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_14 {
 vec4 _f0;
 mat4 _f1;
 mat4 _f2;
 ivec3 _f3;
 mat2 _f4;
 vec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 uint workgroup_base;
 mat2 _f3;
 mat2x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 uint _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_11 {
 ivec4 _f0;
 uint _f1;
 mat3x2 _f2;
 int _f3;
 vec3 _f4;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 mat4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 mat2 _f2;
 float _f3;
} ;

struct _GLF_struct_17 {
 bvec2 _f0;
 vec2 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_16 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 uvec2 _f1;
 uvec2 _f2;
 uvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 mat2 _f1;
 bvec3 _f2;
 vec4 _f3;
 bool _f4;
 mat2 _f5;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 mat3 _f1;
 bvec4 _f2;
 mat3x4 _f3;
 int _f4;
 bvec2 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 float _f3;
 mat2x4 _f4;
 _GLF_struct_7 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 mat4 _f1;
 int _f2;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 bvec4 _f1;
 _GLF_struct_1 _f2;
 bvec4 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 mat4x2 _f1;
 mat4x2 _f2;
 mat3x2 _f3;
 mat3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_9 {
 uint workgroup_id;
 _GLF_struct_0 _f0;
 _GLF_struct_3 _f1;
 uvec3 _f2;
 _GLF_struct_8 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(vec4(1.0), gl_SubgroupID, mat4x3(1.0), mat2x3(1.0), mat3x2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.7)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))
  {
   for(int _injected_loop_counter = (int(54052u) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec4(_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec3(66857u, 134927u, 81453u) * uvec3(188407u, 56363u, 113212u))) : (gl_NumWorkGroups)), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec3(66857u, 134927u, 81453u) * uvec3(188407u, 56363u, 113212u))) : (gl_NumWorkGroups)), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec3(66857u, 134927u, 81453u) * uvec3(188407u, 56363u, 113212u))) : (gl_NumWorkGroups))) | uvec3(0u, 0u, 0u))) | ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec3(66857u, 134927u, 81453u) * uvec3(188407u, 56363u, 113212u))) : (gl_NumWorkGroups))))), (1u ^ 1u)))) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), min(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u))))) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u))))) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))) ^ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))))), (true ? ~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))) : _GLF_FUZZED(uvec3(133310u, 33194u, 104838u))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), min(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))), ~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ (uvec3(145062u, 32283u, 191675u) & uvec3(0u, 0u, 0u)))))) : _GLF_FUZZED(uvec3(133310u, _GLF_IDENTITY(33194u, max(33194u, 33194u)), 104838u)))))) * uvec3(1u, 1u, 1u)))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(gl_WorkGroupID.x, _GLF_struct_0(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat4x2(1.0), mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), min(0.0 + (1.0), 0.0 + (1.0))))), float(_GLF_FUZZED(3.9)), bool(false)))), mat3x2(1.0), mat3(1.0), mat4x2(1.0)), _GLF_struct_3(uvec4(_GLF_IDENTITY(1u, uint(uvec3(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)))), bvec4(true), _GLF_struct_1(_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (uvec2(1u))))), mat4(1.0), 1), bvec4(true), _GLF_struct_2(uvec4(1u), mat2x3(1.0))), uvec3(1u), _GLF_struct_8(_GLF_struct_4(mat4x3(1.0), mat3(1.0), bvec4(true), mat3x4(1.0), 1, bvec2(true), bvec4(true)), _GLF_struct_5(ivec4(1)), _GLF_struct_6(mat3(1.0), mat2(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), clamp((_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), 1.0)), 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), max(_GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), float(vec3((_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), 0.0, 1.0))), (_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))), (_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))), bvec3(true), vec4(1.0), true, mat2(1.0)), 1.0, mat2x4(1.0), _GLF_struct_7(ivec3(1), uvec2(1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) - 0u)), (uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) - 0u, ((1u) - 0u) | (_GLF_IDENTITY((1u) - 0u, (_GLF_IDENTITY((1u), ((1u)) - 0u) - 0u) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u))))))))) + uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))), mat3(1.0)), vec3(1.0)));
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false)))), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), max(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-8423.6001, 3283.5263)) : vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(-488.197, _GLF_IDENTITY(6.4, 1.0 * (6.4)))) : _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-265.778))))), 1.0), vec2(mat2x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 0.0)))))))))), float(_GLF_FUZZED(-5.3)), bool(false)))), vec2(1.0))), _GLF_struct_12(_GLF_struct_10(mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)), mix(float(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true))), float(_GLF_FUZZED((1130.1822 - -6412.4967))), bool(false)))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2973.8232)), float(1.0), bool(true))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)))))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-97.94))))), 1.0, 1.0), _GLF_IDENTITY(1.0, float(float(1.0))) * (clamp(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 1.0)))), 1.0), _GLF_IDENTITY(transpose(transpose(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)), min(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true))))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(76.93) : 1.0)), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2973.8232)), float(1.0), bool(true))), clamp(1.0, 1.0, 1.0)), 1.0))), (transpose(transpose(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)), _GLF_IDENTITY(min(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true))), (true ? min(mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-9.2)), float(1.0), bool(true))) : _GLF_FUZZED(6.5))))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(76.93) : _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2973.8232)), float(1.0), bool(true))), clamp(1.0, 1.0, 1.0)), 1.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(min(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), 1.0, length(0.0), abs(1.0), length(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), float(mat3x2(sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))), sin(0.0)))), 0.0, abs(1.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(97.87)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - length(vec2(0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), 1.0, length(0.0), abs(1.0), length(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), float(mat3x2(sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))), sin(0.0)))), 0.0, abs(1.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(97.87)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - length(vec2(0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.2, max(_GLF_IDENTITY(-9.2, mix(float(-9.2), float(_GLF_FUZZED(667.590)), bool(false))), -9.2)))), float(1.0), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), float(vec2(_GLF_IDENTITY(min(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))))), 1.0, length(0.0), abs(1.0), length(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), float(mat3x2(sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))), sin(0.0)))), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(-3116.2676) : _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(-1996.1318) : clamp(1.0, 1.0, 1.0)))))))))), float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.2, max(-9.2, -9.2)))), float(1.0), bool(true))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), min(min(float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), length(0.0), abs(1.0), length(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), float(mat3x2(sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))), sin(0.0)))), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.2, max(-9.2, -9.2)))), float(1.0), bool(true))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), _GLF_IDENTITY(min(float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9.2), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9.2), (_GLF_FUZZED(-9.2)) / 1.0)), float(_GLF_FUZZED(-5340.8976)), bool(false)))), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, tan(0.0), 1.0))), 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), 1.0, length(0.0), abs(1.0), length(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), float(mat3x2(sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))), sin(0.0)))), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.2, max(-9.2, -9.2)))), float(1.0), bool(true))), 1.0, length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), (transpose(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 0.0 + (float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), (transpose(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 1.0))), mix(float(_GLF_FUZZED(-1.0)), float(min(float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, tan(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), bool(true))), 1.0, length(0.0), abs(1.0), length(_GLF_IDENTITY(sin(0.0), max(_GLF_IDENTITY(sin(0.0), float(mat3x2(sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0))), sin(0.0)))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.6)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.2, max(-9.2, -9.2)))), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9037.1850)))), float(_GLF_FUZZED(-6.7)), bool(false)))), float(_GLF_FUZZED(423.973)), bool(false))), length(0.0), abs(1.0), length(sin(0.0)), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), _GLF_IDENTITY(bool(true), true && (bool(true))))))), 0.0)))))), mat4(1.0), bvec4(true)), _GLF_struct_11(ivec4(1), _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) | ((1u))))), mat3x2(1.0), 1, vec3(1.0)), _GLF_IDENTITY(mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0) : _GLF_FUZZED(mat2(2.6, -3.5, -82.85, 46.74)))), 1.0), _GLF_struct_16(_GLF_struct_13(mat2x3(1.0), mat3x4(1.0), uvec2(1u), workgroup_size * _GLF_struct_replacement_9.workgroup_id, mat2(1.0), mat2x3(1.0), mat3x4(1.0)), mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6854.4299) : 1.0))), bvec4(true), 1u, _GLF_struct_14(vec4(1.0), mat4(1.0), mat4(1.0), ivec3(1), mat2(1.0), vec4(1.0), 1u), _GLF_struct_15(ivec4(1), bvec2(true), bvec2(true))), mat4(1.0));
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_struct_replacement_17._f3._f0.workgroup_base + _GLF_struct_replacement_18.subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-137.382))), bool(false)))), _GLF_struct_19(bvec3(true), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true)))))), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), max((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.4) : 1.0))))), uvec3(1u), vec3(1.0), _GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(((true)) && true, ! (! ((_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), true && ((true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((true), true && ((true)))), bool(bool(! (_GLF_IDENTITY((true), true && ((true)))))))) && true))))))) && true)))) && true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))))), _GLF_struct_22(_GLF_struct_20(_GLF_struct_replacement_17._f3._f0.workgroup_base + _GLF_struct_replacement_18.subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size), 1, bvec2(true)), _GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(vec3(-709.815, -7.0, -0.1)) : _GLF_IDENTITY(vec3(1.0), mat3(1.0) * (vec3(1.0))))), _GLF_struct_21(mat2x3(1.0), mat4x3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0, _GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(true)), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(true)), false)))))))), bvec4(_GLF_IDENTITY(true, false || (true))), 1, bvec2(true)), vec3(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true, false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))) && true, true && ((_GLF_IDENTITY(false, bool(bool(false)))) && true)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))) && true, true && ((_GLF_IDENTITY(false, bool(bool(false)))) && true)))), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))) && true, true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))))) && true)))), false)), false, false, true))))) && true))
      barrier();
    }
   else
    {
    }
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) >> 0u), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) >> 0u), ~ (~ (_GLF_IDENTITY((virtual_gid), ((virtual_gid)) >> 0u))))) >> 0u))) | (virtual_gid))) << 0u)], clamp(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(max(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u & 59453u)), (virtual_gid) << 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))), ~ (_GLF_IDENTITY(~ (max(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u & 59453u)), (virtual_gid) << 0u)], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | _GLF_IDENTITY(((virtual_gid) << 0u), max(((virtual_gid) << 0u), ((virtual_gid) << 0u)))))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])))))), uint(uvec4(~ (max(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u & 59453u)), (virtual_gid) << _GLF_IDENTITY(0u, 0u ^ (0u)))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u))), (0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))) - 0u)))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u ^ (_GLF_IDENTITY((virtual_gid) << 0u, 0u | ((virtual_gid) << 0u)))))], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])))))), 0u, 0u, 0u)))))), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (_GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), _GLF_IDENTITY(1.0 * (float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), float(mat2x4(_GLF_IDENTITY(1.0 * (float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), float(_GLF_IDENTITY(mat2x3(1.0 * (float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0), (mat2x3(1.0 * (float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0)) * mat2(1.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) / 1.0))) || false), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[_GLF_struct_replacement_23._f3._f0.next_virtual_gid], uint(read_1 + 1), _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, clamp(4, 4, 4))) << (-64666 & 0)), 64, 4);
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), false || (_GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), (! ((_GLF_DEAD(false)))) && true)))))))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(false))))), ((! (_GLF_IDENTITY(false, bool(bool(false)))))) && true)))))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4, 4))) | (4)), 64, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(0, 0)), 0)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-33328) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0), (false ? _GLF_FUZZED(_GLF_IDENTITY(89058, 0 ^ (_GLF_IDENTITY(89058, (89058) - 0)))) : _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(10856, clamp(10856, _GLF_IDENTITY(10856, ~ (~ (10856))), 10856)) & 0) & (-20414 / -60293)), (true ? ((_GLF_IDENTITY(10856, clamp(10856, _GLF_IDENTITY(10856, ~ (~ (10856))), 10856)) & 0) & (-20414 / -60293)) : _GLF_FUZZED(ivec4(-54823, 62721, -23816, 27420)[0]))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), (false ? _GLF_FUZZED(ivec4(-72675, -81890, -70914, 93126)[1]) : _GLF_IDENTITY((int(0)), ((int(0))) / 1))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(max(_GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), (int(0)) / 1)), (max(_GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), (int(0)) / 1))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0)) >> 0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))) > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                {
                 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3316.7894)), vec2(_GLF_FUZZED(67.80), _GLF_IDENTITY((injectionSwitch)[1], float(mat3x4((injectionSwitch)[1], 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, log(1.0), 1.0)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(subgroup_local_id + 1 < subgroup_size)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), int(ivec3(_GLF_IDENTITY(int(8), int(8)), 1, 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, 0 + (1))); _injected_loop_counter ++)
          {
           atomicStore(buf[_GLF_struct_replacement_23._f3._f0.next_virtual_gid], uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) >> 0))), _GLF_IDENTITY(4, (4) * 1), 64, 4);
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, false))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))
              {
              }
             else
              {
               subgroupAll(false);
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true)))) || false), false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_23._f3._f0.next_virtual_gid, ~ (~ (_GLF_struct_replacement_23._f3._f0.next_virtual_gid)))], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (false ? _GLF_FUZZED(read_2) : uint(read_1 + _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) ^ 0))) == read_2))) + 1))), 4, 64, 4);
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bool((false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[0], _GLF_FUZZED(51.79)), vec2(_GLF_FUZZED(-300.877), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[1], mix(float((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[1]), float(_GLF_FUZZED(8926.6666)), bool(false)))), bvec2(false, true))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[0], _GLF_FUZZED(51.79)), vec2(_GLF_FUZZED(-300.877), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[1], mix(float((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[1]), float(_GLF_FUZZED(8926.6666)), bool(false)))), bvec2(false, true))).x) - 0.0) > injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))) || false)))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(47.48), _GLF_FUZZED(5.2)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), mix(vec2(_GLF_IDENTITY((max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(unpackHalf2x16(read_2)))))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0))))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(-4499.5631), _GLF_FUZZED(0.3)), bvec2(false, false)))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (injectionSwitch) * mat2(1.0))), mix(vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(-4499.5631), _GLF_FUZZED(0.3)), bvec2(false, false)))).x) * 1.0) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(47.48), _GLF_FUZZED(5.2)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), mix(vec2(_GLF_IDENTITY((max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(unpackHalf2x16(read_2)))))), vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-8.4))), _GLF_ZERO(0.0, injectionSwitch.x)) + ((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0))))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(-4499.5631), _GLF_IDENTITY(_GLF_FUZZED(0.3), mix(float(_GLF_FUZZED(-1.7)), float(_GLF_IDENTITY(_GLF_FUZZED(0.3), mix(float(_GLF_FUZZED(0.3)), float(_GLF_FUZZED(3325.8606)), bool(false)))), bool(true)))), bvec2(false, false)))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (injectionSwitch) * mat2(1.0))), mix(vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(-4499.5631), _GLF_FUZZED(0.3)), bvec2(false, false)))).x) * 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).y)))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))), injectionSwitch)).y))) || false))))))))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2216.9434) : injectionSwitch.x))) + (injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) - 0.0)), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true))))))
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))))))) && true))))));
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               barrier();
              }
            }
           subgroupAll(true);
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), 1.0, 1.0, 0.0, 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0))), 1.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0))), injectionSwitch.x))), clamp(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0)) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0))), 1.0, 1.0, 0.0, 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0))), 1.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0))), injectionSwitch.x))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x), max(max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x), max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), 1.0, 1.0, 0.0, 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0))), 1.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, abs(1.0), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y), cos(0.0), 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0))), injectionSwitch.x))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1276.4789)), mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(float(_GLF_FUZZED(1276.4789)), max(float(_GLF_FUZZED(1276.4789)), float(_GLF_FUZZED(1276.4789))))), bool(true))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1276.4789), mix(float(_GLF_FUZZED(-8.9)), float(_GLF_FUZZED(1276.4789)), bool(true)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-461.347) : 0.0))), 1.0, 1.0, 0.0, 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0))), 1.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.6) : 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, sqrt(0.0), 1.0, 0.0))), injectionSwitch.x))), 1.0 * (float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1276.4789)), max(float(_GLF_FUZZED(1276.4789)), float(_GLF_FUZZED(1276.4789)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0), 1.0, 1.0, 0.0, 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0))), 1.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(265.511))), sqrt(0.0), 1.0, 0.0))), injectionSwitch.x)))))))) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0)))) * 1.0))), mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)), dot(vec2(1.0, 0.0), vec2(determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), (_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), (true ? dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)) : _GLF_FUZZED(5235.7864)))) / 1.0)), float(_GLF_FUZZED(4052.8970)), bool(false))), dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(1.0, 1.0, 0.0))), 1.0, 0.0, sqrt(1.0), 1.0)), (vec2(mat3x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(determinant(mat3(1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, 1.0)), 0.0)), dot(vec2(1.0, 0.0), vec2(determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0, 0.0, sqrt(1.0), 1.0))) + vec2(0.0, 0.0))).x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true)), 1.0 * (mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))))), injectionSwitch.x))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1276.4789), max(_GLF_IDENTITY(_GLF_FUZZED(1276.4789), mix(float(_GLF_FUZZED(-6.7)), float(_GLF_FUZZED(1276.4789)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(1276.4789), 1.0 * (_GLF_FUZZED(1276.4789)))))), float(injectionSwitch.x), bool(true))), injectionSwitch.x))) - 0.0) + abs(0.0))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, tan(0.0), 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, float(mat2x3((injectionSwitch.x) * 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), bool(true))), injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(smoothstep(-7.0, vec3(71.79, -9.4, -1.8)[2], -1723.7381)))), min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(smoothstep(-7.0, vec3(71.79, -9.4, -1.8)[2], -1723.7381)))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(smoothstep(-7.0, vec3(71.79, -9.4, -1.8)[2], -1723.7381)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1276.4789)), float(injectionSwitch.x), bool(true)))) - 0.0), injectionSwitch.x))) - 0.0), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0), 1.0)), 1.0, 0.0, 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0))))), 1.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0), mat3(mat3(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0), (mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))))) > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((vec3(8.7, 2427.7306, 2.8).p / 6.9))), bool(false))) < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), max(~ (7), ~ (7)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) && true) && true, ((true) && true) && true)), false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) && true) && true, ((true) && true) && true)), false), true)))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), ((0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
