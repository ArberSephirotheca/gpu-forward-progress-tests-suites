#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_159 {
 ivec4 _f0;
 bool _f1;
 float _f2;
 int _injected_loop_counter;
 bvec4 _f3;
 mat4x2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_156 {
 bool _f0;
} ;

struct _GLF_struct_157 {
 _GLF_struct_156 _f0;
} ;

struct _GLF_struct_158 {
 _GLF_struct_157 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_153 {
 mat2x3 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 ivec2 _f3;
 bvec4 _f4;
 mat4x2 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_154 {
 mat2x4 _f0;
 _GLF_struct_153 _f1;
 mat4x2 _f2;
 mat3 _f3;
 bool _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_152 {
 mat3x4 _f0;
} ;

struct _GLF_struct_155 {
 uint _f0;
 bool _f1;
 int _injected_loop_counter;
 _GLF_struct_152 _f2;
 mat2x4 _f3;
 _GLF_struct_154 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_149 {
 uvec2 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
 uvec3 _f3;
 ivec4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_148 {
 uvec3 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_150 {
 mat3 _f0;
 _GLF_struct_148 _f1;
 int _f2;
 mat3x2 _f3;
 ivec3 _f4;
 mat3 _f5;
 _GLF_struct_149 _f6;
} ;

struct _GLF_struct_151 {
 _GLF_struct_150 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_145 {
 ivec3 _f0;
 bvec4 _f1;
 bvec4 _f2;
 int _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_144 {
 uvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_143 {
 vec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_146 {
 _GLF_struct_143 _f0;
 _GLF_struct_144 _f1;
 _GLF_struct_145 _f2;
 uvec2 _f3;
 mat3 _f4;
 int _injected_loop_counter;
 vec4 _f5;
} ;

struct _GLF_struct_141 {
 vec2 _f0;
 ivec2 _f1;
 mat3x4 _f2;
 mat3x4 _f3;
 mat3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_142 {
 vec3 _f0;
 _GLF_struct_141 _f1;
} ;

struct _GLF_struct_147 {
 bvec4 _f0;
 _GLF_struct_142 _f1;
 ivec3 _f2;
 _GLF_struct_146 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_139 {
 ivec4 _f0;
} ;

struct _GLF_struct_137 {
 mat4 _f0;
 float _f1;
 vec2 _f2;
 ivec2 _f3;
 int _f4;
 int _injected_loop_counter;
 int _f5;
 bool _f6;
} ;

struct _GLF_struct_136 {
 bvec3 _f0;
 float _f1;
} ;

struct _GLF_struct_135 {
 uvec4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_134 {
 int _f0;
 mat2x3 _f1;
 bool _f2;
} ;

struct _GLF_struct_138 {
 mat2x4 _f0;
 _GLF_struct_134 _f1;
 _GLF_struct_135 _f2;
 _GLF_struct_136 _f3;
 _GLF_struct_137 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_132 {
 mat4x3 _f0;
 uvec4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_131 {
 mat4 _f0;
 mat4x3 _f1;
 ivec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_130 {
 bool _f0;
 int _f1;
 mat4x2 _f2;
 mat3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_133 {
 mat4 _f0;
 _GLF_struct_130 _f1;
 _GLF_struct_131 _f2;
 uvec4 _f3;
 bvec3 _f4;
 _GLF_struct_132 _f5;
} ;

struct _GLF_struct_140 {
 mat4x3 _f0;
 ivec3 _f1;
 _GLF_struct_133 _f2;
 mat4x2 _f3;
 _GLF_struct_138 _f4;
 _GLF_struct_139 _f5;
} ;

struct _GLF_struct_127 {
 mat4 _f0;
 ivec3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_126 {
 vec2 _f0;
} ;

struct _GLF_struct_125 {
 mat2x3 _f0;
 uvec3 _f1;
 int _f2;
 bvec4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_128 {
 vec4 _f0;
 _GLF_struct_125 _f1;
 bvec4 _f2;
 _GLF_struct_126 _f3;
 _GLF_struct_127 _f4;
 mat3 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_124 {
 bvec4 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 uvec2 _f3;
 float _f4;
 int _f5;
} ;

struct _GLF_struct_129 {
 bvec2 _f0;
 _GLF_struct_124 _f1;
 bvec4 _f2;
 mat4x2 _f3;
 int _injected_loop_counter;
 _GLF_struct_128 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_123 {
 int _injected_loop_counter;
 ivec4 _f0;
} ;

struct _GLF_struct_120 {
 mat2 _f0;
 uvec2 _f1;
 bvec3 _f2;
 mat4 _f3;
 mat3 _f4;
 mat4x2 _f5;
 uint _f6;
} ;

struct _GLF_struct_119 {
 bvec3 _f0;
 ivec2 _f1;
 bvec3 _f2;
 uint _f3;
 mat4x3 _f4;
 uvec2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_121 {
 _GLF_struct_119 _f0;
 ivec4 _f1;
 ivec4 _f2;
 uvec4 _f3;
 mat4 _f4;
 _GLF_struct_120 _f5;
} ;

struct _GLF_struct_122 {
 uvec4 _f0;
 _GLF_struct_121 _f1;
 mat2x4 _f2;
 int _injected_loop_counter;
 ivec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_116 {
 uint _f0;
 mat3x4 _f1;
 mat2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_115 {
 int _f0;
 int _f1;
 uint _f2;
} ;

struct _GLF_struct_114 {
 mat2x3 _f0;
 mat2x4 _f1;
 uint _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_117 {
 vec4 _f0;
 _GLF_struct_114 _f1;
 _GLF_struct_115 _f2;
 mat3x4 _f3;
 _GLF_struct_116 _f4;
} ;

struct _GLF_struct_112 {
 uvec4 _f0;
} ;

struct _GLF_struct_111 {
 mat3x4 _f0;
 bvec2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_113 {
 mat4 _f0;
 _GLF_struct_111 _f1;
 _GLF_struct_112 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_118 {
 _GLF_struct_113 _f0;
 bool _f1;
 _GLF_struct_117 _f2;
 mat2x4 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_110 {
 mat2 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_107 {
 uint _f0;
 mat2 _f1;
 bool _f2;
 uvec2 _f3;
 vec3 _f4;
 ivec3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_106 {
 bvec3 _f0;
 uvec4 _f1;
 ivec3 _f2;
 uvec2 _f3;
 ivec2 _f4;
 mat3x2 _f5;
 float _f6;
} ;

struct _GLF_struct_105 {
 bvec3 _f0;
 mat4x3 _f1;
 ivec3 _f2;
 uvec3 _f3;
 mat3x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_108 {
 uvec2 _f0;
 mat2x3 _f1;
 _GLF_struct_105 _f2;
 _GLF_struct_106 _f3;
 _GLF_struct_107 _f4;
} ;

struct _GLF_struct_103 {
 uvec2 _f0;
 bool _f1;
 int _f2;
 mat3x4 _f3;
 mat3x2 _f4;
 mat4x3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_102 {
 mat2 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_101 {
 mat3x2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_100 {
 float _f0;
 mat3x4 _f1;
 bvec2 _f2;
 mat4x2 _f3;
 mat2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_104 {
 _GLF_struct_100 _f0;
 _GLF_struct_101 _f1;
 _GLF_struct_102 _f2;
 mat2 _f3;
 _GLF_struct_103 _f4;
 mat4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_109 {
 mat2x4 _f0;
 vec4 _f1;
 _GLF_struct_104 _f2;
 _GLF_struct_108 _f3;
 uint num_workgroup;
 mat2 _f4;
 mat4x2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_99 {
 int _injected_loop_counter;
 uint _f0;
} ;

struct _GLF_struct_96 {
 mat3 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_97 {
 mat2x4 _f0;
 uint _f1;
 bvec2 _f2;
 _GLF_struct_96 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_94 {
 mat3x4 _f0;
 bvec3 _f1;
 bvec4 _f2;
 float _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_93 {
 vec3 _f0;
 uint _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_95 {
 _GLF_struct_93 _f0;
 ivec3 _f1;
 _GLF_struct_94 _f2;
 bvec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_92 {
 ivec3 _f0;
} ;

struct _GLF_struct_98 {
 _GLF_struct_92 _f0;
 vec3 _f1;
 mat2x3 _f2;
 uvec2 _f3;
 int _injected_loop_counter;
 _GLF_struct_95 _f4;
 _GLF_struct_97 _f5;
} ;

struct _GLF_struct_91 {
 vec3 _f0;
 ivec2 _f1;
 vec3 _f2;
 vec2 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_88 {
 ivec2 _f0;
 bvec3 _f1;
 uvec3 _f2;
 ivec3 _f3;
 mat3x4 _f4;
 mat2 _f5;
 bvec3 _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_89 {
 mat4x2 _f0;
 mat3 _f1;
 vec3 _f2;
 bool _f3;
 _GLF_struct_88 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_86 {
 bvec4 _f0;
 uvec4 _f1;
 bvec3 _f2;
 mat2x3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_85 {
 mat3 _f0;
 vec3 _f1;
 mat3x4 _f2;
 ivec3 _f3;
 uvec2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_84 {
 uvec2 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 vec3 _f3;
 uint _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_87 {
 _GLF_struct_84 _f0;
 _GLF_struct_85 _f1;
 vec3 _f2;
 mat2x4 _f3;
 _GLF_struct_86 _f4;
} ;

struct _GLF_struct_82 {
 uint _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 ivec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_83 {
 _GLF_struct_82 _f0;
} ;

struct _GLF_struct_80 {
 uvec2 _f0;
 mat4 _f1;
 ivec2 _f2;
 mat4x3 _f3;
 mat3x2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_81 {
 _GLF_struct_80 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_90 {
 mat4x2 _f0;
 _GLF_struct_81 _f1;
 _GLF_struct_83 _f2;
 _GLF_struct_87 _f3;
 _GLF_struct_89 _f4;
} ;

struct _GLF_struct_77 {
 mat2x4 _f0;
 ivec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_76 {
 uvec2 _f0;
 vec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_75 {
 mat2x4 _f0;
} ;

struct _GLF_struct_74 {
 int _f0;
 int _f1;
} ;

struct _GLF_struct_73 {
 ivec3 _f0;
 bvec2 _f1;
 vec2 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_78 {
 _GLF_struct_73 _f0;
 _GLF_struct_74 _f1;
 _GLF_struct_75 _f2;
 _GLF_struct_76 _f3;
 int _injected_loop_counter;
 _GLF_struct_77 _f4;
} ;

struct _GLF_struct_71 {
 uvec3 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 mat3x2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_70 {
 vec3 _f0;
 bvec2 _f1;
 mat3x4 _f2;
 ivec3 _f3;
 mat4x2 _f4;
 bvec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_72 {
 vec3 _f0;
 _GLF_struct_70 _f1;
 _GLF_struct_71 _f2;
} ;

struct _GLF_struct_79 {
 _GLF_struct_72 _f0;
 _GLF_struct_78 _f1;
} ;

struct _GLF_struct_67 {
 uvec3 _f0;
} ;

struct _GLF_struct_68 {
 int _injected_loop_counter;
 _GLF_struct_67 _f0;
} ;

struct _GLF_struct_65 {
 uvec3 _f0;
 uvec4 _f1;
 vec4 _f2;
 vec3 _f3;
 ivec3 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_66 {
 _GLF_struct_65 _f0;
} ;

struct _GLF_struct_63 {
 bvec3 _f0;
 bvec2 _f1;
 mat4 _f2;
 vec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_62 {
 mat2x4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_64 {
 _GLF_struct_62 _f0;
 ivec4 _f1;
 mat3 _f2;
 mat3 _f3;
 _GLF_struct_63 _f4;
} ;

struct _GLF_struct_69 {
 _GLF_struct_64 _f0;
 ivec4 _f1;
 mat2x4 _f2;
 uint _f3;
 _GLF_struct_66 _f4;
 _GLF_struct_68 _f5;
} ;

struct _GLF_struct_59 {
 uvec3 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_60 {
 bvec4 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 ivec3 _f4;
 _GLF_struct_59 _f5;
} ;

struct _GLF_struct_61 {
 _GLF_struct_60 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_56 {
 uvec3 _f0;
 vec3 _f1;
 bool _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_57 {
 _GLF_struct_56 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_54 {
 mat4 _f0;
} ;

struct _GLF_struct_53 {
 mat3 _f0;
 vec3 _f1;
 bvec3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_52 {
 uvec2 _f0;
 int _f1;
 mat3x2 _f2;
 ivec3 _f3;
 mat2x3 _f4;
 int _f5;
} ;

struct _GLF_struct_55 {
 _GLF_struct_52 _f0;
 mat3x4 _f1;
 vec3 _f2;
 mat4 _f3;
 bvec4 _f4;
 _GLF_struct_53 _f5;
 _GLF_struct_54 _f6;
} ;

struct _GLF_struct_50 {
 uvec4 _f0;
 uint subgroup_local_id;
 uvec4 _f1;
} ;

struct _GLF_struct_51 {
 _GLF_struct_50 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 int _f3;
} ;

struct _GLF_struct_58 {
 _GLF_struct_51 _f0;
 _GLF_struct_55 _f1;
 _GLF_struct_57 _f2;
} ;

struct _GLF_struct_47 {
 bool _f0;
 mat4x2 _f1;
 float _f2;
 mat4x3 _f3;
 float _f4;
} ;

struct _GLF_struct_46 {
 bvec4 _f0;
 vec2 _f1;
 bvec3 _f2;
 mat2 _f3;
 uvec2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_48 {
 mat4x2 _f0;
 _GLF_struct_46 _f1;
 mat3x2 _f2;
 ivec3 _f3;
 int _f4;
 _GLF_struct_47 _f5;
} ;

struct _GLF_struct_45 {
 mat3x2 _f0;
} ;

struct _GLF_struct_43 {
 ivec2 _f0;
 uint virtual_gid;
 uint _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_42 {
 uint _f0;
 uvec2 _f1;
 bvec3 _f2;
 int _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_44 {
 uvec4 _f0;
 _GLF_struct_42 _f1;
 _GLF_struct_43 _f2;
} ;

struct _GLF_struct_40 {
 int _f0;
} ;

struct _GLF_struct_39 {
 vec3 _f0;
 mat3x2 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_41 {
 uint _f0;
 _GLF_struct_39 _f1;
 _GLF_struct_40 _f2;
} ;

struct _GLF_struct_49 {
 uvec3 _f0;
 vec2 _f1;
 _GLF_struct_41 _f2;
 _GLF_struct_44 _f3;
 _GLF_struct_45 _f4;
 _GLF_struct_48 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_36 {
 mat3 _f0;
 mat4x3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_35 {
 mat2x4 _f0;
 uvec3 _f1;
 uvec2 _f2;
 mat4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_37 {
 _GLF_struct_35 _f0;
 uint read_2;
 _GLF_struct_36 _f1;
} ;

struct _GLF_struct_38 {
 mat4x3 _f0;
 int _f1;
 _GLF_struct_37 _f2;
} ;

struct _GLF_struct_32 {
 mat2x3 _f0;
 uint _f1;
} ;

struct _GLF_struct_31 {
 mat4x3 _f0;
 mat4x3 _f1;
 mat3x4 _f2;
 int _f3;
 mat2x3 _f4;
 bool _f5;
} ;

struct _GLF_struct_33 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
} ;

struct _GLF_struct_29 {
 mat3x4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_28 {
 uvec4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_27 {
 uvec2 _f0;
} ;

struct _GLF_struct_26 {
 bvec4 _f0;
 uvec4 _f1;
 bool _f2;
} ;

struct _GLF_struct_30 {
 _GLF_struct_26 _f0;
 _GLF_struct_27 _f1;
 _GLF_struct_28 _f2;
 int _f3;
 uint _f4;
 _GLF_struct_29 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_34 {
 _GLF_struct_30 _f0;
 _GLF_struct_33 _f1;
 ivec2 _f2;
 uint read_1;
 mat3x4 _f3;
} ;

struct _GLF_struct_23 {
 ivec2 _f0;
 ivec2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_22 {
 ivec2 _f0;
 bvec2 _f1;
 bvec3 _f2;
 ivec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_21 {
 mat4x3 _f0;
} ;

struct _GLF_struct_20 {
 ivec3 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 bvec3 _f4;
 ivec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
 uint subgroup_size;
 mat3 _f3;
 uvec2 _f4;
 _GLF_struct_23 _f5;
} ;

struct _GLF_struct_25 {
 mat4 _f0;
 _GLF_struct_24 _f1;
 mat3x4 _f2;
 float _f3;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 mat4 _f1;
 uvec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_16 {
 vec3 _f0;
 ivec4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_15 {
 int _f0;
 mat4x3 _f1;
 int _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_18 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 uvec2 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_13 {
 float _f0;
 mat3x2 _f1;
 uvec4 _f2;
 vec3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
 bool _f1;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 mat4 _f1;
 mat2x3 _f2;
 bool _f3;
 mat4 _f4;
 mat3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 float _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 mat4x3 _f1;
 uint _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_10 {
 mat4x3 _f0;
 bvec4 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 int _f1;
 uint workgroup_id;
 float _f2;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 ivec3 _f1;
 bvec4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 ivec3 _f1;
 bvec2 _f2;
 mat2x3 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 bvec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 bool _f1;
 vec4 _f2;
 _GLF_struct_2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_4 {
 float _f0;
 uint workgroup_size;
 ivec2 _f1;
 vec3 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_3 _f4;
 mat2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(mat4(1.0), _GLF_struct_24(_GLF_struct_20(ivec3(1), mat4x2(1.0), mat2x3(1.0), mat4x3(1.0), bvec3(true), ivec2(1), vec2(1.0)), _GLF_struct_21(mat4x3(1.0)), _GLF_struct_22(ivec2(1), bvec2(true), bvec3(true), ivec4(1), 1u), gl_SubgroupSize, mat3(1.0), uvec2(1u), _GLF_struct_23(ivec2(1), ivec2(1), vec4(1.0))), mat3x4(1.0), 1.0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 _GLF_struct_58 _GLF_struct_replacement_58 = _GLF_struct_58(_GLF_struct_51(_GLF_struct_50(uvec4(1u), gl_SubgroupInvocationID, uvec4(1u)), uvec4(1u), mat3x2(1.0), 1), _GLF_struct_55(_GLF_struct_52(uvec2(1u), 1, mat3x2(1.0), ivec3(1), mat2x3(1.0), 1), mat3x4(1.0), vec3(1.0), mat4(1.0), bvec4(true), _GLF_struct_53(mat3(1.0), vec3(1.0), bvec3(true), mat4x2(1.0)), _GLF_struct_54(mat4(1.0))), _GLF_struct_57(_GLF_struct_56(uvec3(1u), vec3(1.0), true, bvec4(true)), mat3(1.0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(_GLF_struct_158 _GLF_struct_replacement_158 = _GLF_struct_158(_GLF_struct_157(_GLF_struct_156(true)), int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_158._injected_loop_counter != 0); _GLF_struct_replacement_158._injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          return;
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
              return;
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(_GLF_struct_123 _GLF_struct_replacement_123 = _GLF_struct_123(0, ivec4(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_123._injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_struct_replacement_123._injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     for(_GLF_struct_129 _GLF_struct_replacement_129 = _GLF_struct_129(bvec2(true), _GLF_struct_124(bvec4(true), uvec3(1u), mat3x4(1.0), uvec2(1u), 1.0, 1), bvec4(true), mat4x2(1.0), 1, _GLF_struct_128(vec4(1.0), _GLF_struct_125(mat2x3(1.0), uvec3(1u), 1, bvec4(true), vec2(1.0)), bvec4(true), _GLF_struct_126(vec2(1.0)), _GLF_struct_127(mat4(1.0), ivec3(1), uvec4(1u)), mat3(1.0), mat2(1.0)), ivec3(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_129._injected_loop_counter != (-78510 & 0)); _GLF_struct_replacement_129._injected_loop_counter --)
                      {
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), (int(6)) >> 0))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   continue;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 _GLF_struct_109 _GLF_struct_replacement_109 = _GLF_struct_109(mat2x4(1.0), vec4(1.0), _GLF_struct_104(_GLF_struct_100(1.0, mat3x4(1.0), bvec2(true), mat4x2(1.0), mat2(1.0), mat2x3(1.0)), _GLF_struct_101(mat3x2(1.0), bvec3(true), bvec4(true), bvec2(true)), _GLF_struct_102(mat2(1.0), mat4x3(1.0), mat3x2(1.0), mat4x3(1.0)), mat2(1.0), _GLF_struct_103(uvec2(1u), true, 1, mat3x4(1.0), mat3x2(1.0), mat4x3(1.0), vec3(1.0)), mat4(1.0), ivec2(1)), _GLF_struct_108(uvec2(1u), mat2x3(1.0), _GLF_struct_105(bvec3(true), mat4x3(1.0), ivec3(1), uvec3(1u), mat3x2(1.0), ivec3(1)), _GLF_struct_106(bvec3(true), uvec4(1u), ivec3(1), uvec2(1u), ivec2(1), mat3x2(1.0), 1.0), _GLF_struct_107(1u, mat2(1.0), true, uvec2(1u), vec3(1.0), ivec3(1), ivec3(1))), gl_NumWorkGroups.x, mat2(1.0), mat4x2(1.0), ivec4(1));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(1.0, gl_WorkGroupSize.x, ivec2(1), vec3(1.0), _GLF_struct_1(_GLF_struct_0(vec2(1.0), mat3x4(1.0))), _GLF_struct_3(ivec3(1), true, vec4(1.0), _GLF_struct_2(mat2x4(1.0), bvec3(true), mat2x4(1.0)), bvec3(true)), mat2(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(uvec4(1u), _GLF_struct_7(mat3x4(1.0), ivec3(1), bvec2(true), mat2x3(1.0), _GLF_struct_5(ivec2(1), ivec3(1), bvec4(true), mat2x3(1.0)), _GLF_struct_6(mat2x3(1.0), 1, gl_WorkGroupID.x, 1.0)), _GLF_struct_10(mat4x3(1.0), bvec4(true), _GLF_struct_8(mat4(1.0), ivec3(1)), _GLF_struct_9(uvec3(1u), mat4x3(1.0), 1u, bvec2(true))), _GLF_struct_14(_GLF_struct_11(vec3(1.0), mat4(1.0), mat2x3(1.0), true, mat4(1.0), mat3(1.0), mat3x2(1.0)), 1.0, _GLF_struct_12(uvec2(1u), true), _GLF_struct_13(1.0, mat3x2(1.0), uvec4(1u), vec3(1.0), ivec4(1))), _GLF_struct_18(_GLF_struct_15(1, mat4x3(1.0), 1, bvec3(true)), _GLF_struct_16(vec3(1.0), ivec4(1), uvec4(1u)), uvec2(1u), _GLF_struct_17(mat2(1.0), mat4(1.0), uvec2(1u), bvec2(true))));
 uint workgroup_base = _GLF_struct_replacement_4.workgroup_size * _GLF_struct_replacement_19._f1._f5.workgroup_id;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_49 _GLF_struct_replacement_49 = _GLF_struct_49(uvec3(1u), vec2(1.0), _GLF_struct_41(1u, _GLF_struct_39(vec3(1.0), mat3x2(1.0), uvec2(1u), mat2x4(1.0), vec3(1.0)), _GLF_struct_40(1)), _GLF_struct_44(uvec4(1u), _GLF_struct_42(1u, uvec2(1u), bvec3(true), 1, uvec3(1u)), _GLF_struct_43(ivec2(1), workgroup_base + subgroup_id * _GLF_struct_replacement_25._f1.subgroup_size + _GLF_struct_replacement_58._f0._f0.subgroup_local_id, 1u, mat2x4(1.0))), _GLF_struct_45(mat3x2(1.0)), _GLF_struct_48(mat4x2(1.0), _GLF_struct_46(bvec4(true), vec2(1.0), bvec3(true), mat2(1.0), uvec2(1u), mat4(1.0)), mat3x2(1.0), ivec3(1), 1, _GLF_struct_47(true, mat4x2(1.0), 1.0, mat4x3(1.0), 1.0)), mat2x4(1.0));
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 _GLF_struct_61 _GLF_struct_replacement_61 = _GLF_struct_61(_GLF_struct_60(bvec4(true), bvec4(true), mat2x4(1.0), mat2x4(1.0), ivec3(1), _GLF_struct_59(uvec3(1u), workgroup_base + subgroup_id * _GLF_struct_replacement_25._f1.subgroup_size + ((_GLF_struct_replacement_58._f0._f0.subgroup_local_id + 1) % _GLF_struct_replacement_25._f1.subgroup_size))), bvec4(true));
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           do
            {
             for(_GLF_struct_118 _GLF_struct_replacement_118 = _GLF_struct_118(_GLF_struct_113(mat4(1.0), _GLF_struct_111(mat3x4(1.0), bvec2(true), mat2x4(1.0)), _GLF_struct_112(uvec4(1u)), mat2x4(1.0)), true, _GLF_struct_117(vec4(1.0), _GLF_struct_114(mat2x3(1.0), mat2x4(1.0), 1u, bvec2(true)), _GLF_struct_115(1, 1, 1u), mat3x4(1.0), _GLF_struct_116(1u, mat3x4(1.0), mat2(1.0), ivec3(1))), mat2x4(1.0), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_118._injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _GLF_struct_replacement_118._injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                  return;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
      }
    }
  }
 _GLF_struct_34 _GLF_struct_replacement_34 = _GLF_struct_34(_GLF_struct_30(_GLF_struct_26(bvec4(true), uvec4(1u), true), _GLF_struct_27(uvec2(1u)), _GLF_struct_28(uvec4(1u), uvec3(1u)), 1, 1u, _GLF_struct_29(mat3x4(1.0), mat3x2(1.0)), mat2(1.0)), _GLF_struct_33(_GLF_struct_31(mat4x3(1.0), mat4x3(1.0), mat3x4(1.0), 1, mat2x3(1.0), true), _GLF_struct_32(mat2x3(1.0), 1u)), ivec2(1), atomicLoad(buf[_GLF_struct_replacement_49._f3._f2.virtual_gid], 4, 64, 0), mat3x4(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      continue;
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     for(_GLF_struct_140 _GLF_struct_replacement_140 = _GLF_struct_140(mat4x3(1.0), ivec3(1), _GLF_struct_133(mat4(1.0), _GLF_struct_130(true, 1, mat4x2(1.0), mat3(1.0), ivec4(1)), _GLF_struct_131(mat4(1.0), mat4x3(1.0), ivec3(1), mat3x4(1.0)), uvec4(1u), bvec3(true), _GLF_struct_132(mat4x3(1.0), uvec4(1u), uvec4(1u))), mat4x2(1.0), _GLF_struct_138(mat2x4(1.0), _GLF_struct_134(1, mat2x3(1.0), true), _GLF_struct_135(uvec4(1u), mat4x2(1.0)), _GLF_struct_136(bvec3(true), 1.0), _GLF_struct_137(mat4(1.0), 1.0, vec2(1.0), ivec2(1), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 0)))) - 0), 1, true), mat4(1.0)), _GLF_struct_139(ivec4(1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_140._f4._f4._injected_loop_counter != 1); _GLF_struct_replacement_140._f4._f4._injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = (0 & -44813); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) & -24093); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(_GLF_struct_90 _GLF_struct_replacement_90 = _GLF_struct_90(mat4x2(1.0), _GLF_struct_81(_GLF_struct_80(uvec2(1u), mat4(1.0), ivec2(1), mat4x3(1.0), mat3x2(1.0), mat4x2(1.0)), ivec3(1)), _GLF_struct_83(_GLF_struct_82(1u, mat2x4(1.0), mat3x2(1.0), ivec3(1), ivec3(1))), _GLF_struct_87(_GLF_struct_84(uvec2(1u), uvec3(1u), mat3x4(1.0), vec3(1.0), 1u, uvec4(1u)), _GLF_struct_85(mat3(1.0), vec3(1.0), mat3x4(1.0), ivec3(1), uvec2(1u), uvec2(1u)), vec3(1.0), mat2x4(1.0), _GLF_struct_86(bvec4(true), uvec4(1u), bvec3(true), mat2x3(1.0), mat2(1.0))), _GLF_struct_89(mat4x2(1.0), mat3(1.0), vec3(1.0), true, _GLF_struct_88(ivec2(1), bvec3(true), uvec3(1u), ivec3(1), mat3x4(1.0), mat2(1.0), bvec3(true), (0 & 68489)), uvec2(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_90._f4._f4._injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_90._f4._f4._injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           break;
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 for(_GLF_struct_155 _GLF_struct_replacement_155 = _GLF_struct_155(1u, true, 0, _GLF_struct_152(mat3x4(1.0)), mat2x4(1.0), _GLF_struct_154(mat2x4(1.0), _GLF_struct_153(mat2x3(1.0), mat2x3(1.0), bvec3(true), ivec2(1), bvec4(true), mat4x2(1.0), bvec4(true)), mat4x2(1.0), mat3(1.0), true, bvec4(true)), ivec3(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_155._injected_loop_counter != 1); _GLF_struct_replacement_155._injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_struct_replacement_61._f0._f5.next_virtual_gid], uint(_GLF_struct_replacement_34.read_1 + 1), 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         break;
        }
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(mat4x3(1.0), 1, _GLF_struct_37(_GLF_struct_35(mat2x4(1.0), uvec3(1u), uvec2(1u), mat4(1.0), ivec2(1)), atomicLoad(buf[_GLF_struct_replacement_49._f3._f2.virtual_gid], 4, 64, 0), _GLF_struct_36(mat3(1.0), mat4x3(1.0), mat4(1.0))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_struct_replacement_58._f0._f0.subgroup_local_id + 1 < _GLF_struct_replacement_25._f1.subgroup_size)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(_GLF_struct_159 _GLF_struct_replacement_159 = _GLF_struct_159(ivec4(1), true, 1.0, 0, bvec4(true), mat4x2(1.0), mat2x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_159._injected_loop_counter < 1); _GLF_struct_replacement_159._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = (-53892 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
               atomicStore(buf[_GLF_struct_replacement_61._f0._f5.next_virtual_gid], uint(_GLF_struct_replacement_34.read_1 + 1 == _GLF_struct_replacement_38._f2.read_2) + 1, 4, 64, 4);
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(_GLF_struct_110 _GLF_struct_replacement_110 = _GLF_struct_110(mat2(1.0), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_110._injected_loop_counter > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)))); _GLF_struct_replacement_110._injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           return;
          }
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 for(_GLF_struct_91 _GLF_struct_replacement_91 = _GLF_struct_91(vec3(1.0), ivec2(1), vec3(1.0), vec2(1.0), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_91._injected_loop_counter != (1 ^ 1)); _GLF_struct_replacement_91._injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                      }
                     break;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), ((0 | 1)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     do
                      {
                       for(_GLF_struct_69 _GLF_struct_replacement_69 = _GLF_struct_69(_GLF_struct_64(_GLF_struct_62(mat2x4(1.0), mat4x2(1.0)), ivec4(1), mat3(1.0), mat3(1.0), _GLF_struct_63(bvec3(true), bvec2(true), mat4(1.0), vec4(1.0), uvec4(1u))), ivec4(1), mat2x4(1.0), 1u, _GLF_struct_66(_GLF_struct_65(uvec3(1u), uvec4(1u), vec4(1.0), vec3(1.0), ivec3(1), uvec2(1u))), _GLF_struct_68(1, _GLF_struct_67(uvec3(1u)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_69._f5._injected_loop_counter != 0); _GLF_struct_replacement_69._f5._injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 return;
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = ((1 ^ 1) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(_GLF_struct_98 _GLF_struct_replacement_98 = _GLF_struct_98(_GLF_struct_92(ivec3(1)), vec3(1.0), mat2x3(1.0), uvec2(1u), 1, _GLF_struct_95(_GLF_struct_93(vec3(1.0), 1u, uvec4(1u)), ivec3(1), _GLF_struct_94(mat3x4(1.0), bvec3(true), bvec4(true), 1.0, bvec2(true)), bvec2(true), mat2x4(1.0)), _GLF_struct_97(mat2x4(1.0), 1u, bvec2(true), _GLF_struct_96(mat3(1.0), vec3(1.0)), bvec3(true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_98._injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_98._injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 atomicStore(buf[_GLF_struct_replacement_61._f0._f5.next_virtual_gid], uint(_GLF_struct_replacement_34.read_1 + 1 == _GLF_struct_replacement_38._f2.read_2) + 1, 4, 64, 4);
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(_GLF_struct_99 _GLF_struct_replacement_99 = _GLF_struct_99(1, 1u); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_99._injected_loop_counter != 0); _GLF_struct_replacement_99._injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               subgroupAll(true);
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(_GLF_struct_147 _GLF_struct_replacement_147 = _GLF_struct_147(bvec4(true), _GLF_struct_142(vec3(1.0), _GLF_struct_141(vec2(1.0), ivec2(1), mat3x4(1.0), mat3x4(1.0), mat3(1.0), mat3(1.0))), ivec3(1), _GLF_struct_146(_GLF_struct_143(vec2(1.0), vec4(1.0)), _GLF_struct_144(uvec3(1u), vec2(1.0)), _GLF_struct_145(ivec3(1), bvec4(true), bvec4(true), 1, uvec3(1u)), uvec2(1u), mat3(1.0), 0, vec4(1.0)), mat4x2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_147._f3._injected_loop_counter < 1); _GLF_struct_replacement_147._f3._injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5))))))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                break;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
                return;
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) << 0)); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                           return;
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
                continue;
               break;
              }
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (-65874 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(_GLF_struct_79 _GLF_struct_replacement_79 = _GLF_struct_79(_GLF_struct_72(vec3(1.0), _GLF_struct_70(vec3(1.0), bvec2(true), mat3x4(1.0), ivec3(1), mat4x2(1.0), bvec4(true), 1u), _GLF_struct_71(uvec3(1u), mat4x2(1.0), uvec4(1u), mat3x2(1.0), vec3(1.0))), _GLF_struct_78(_GLF_struct_73(ivec3(1), bvec2(true), vec2(1.0), mat2x4(1.0), bvec2(true), vec2(1.0)), _GLF_struct_74(1, 1), _GLF_struct_75(mat2x4(1.0)), _GLF_struct_76(uvec2(1u), vec2(1.0), bvec4(true)), 1, _GLF_struct_77(mat2x4(1.0), ivec3(1), mat2x4(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_79._f1._injected_loop_counter > 0); _GLF_struct_replacement_79._f1._injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
          }
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           continue;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               for(_GLF_struct_151 _GLF_struct_replacement_151 = _GLF_struct_151(_GLF_struct_150(mat3(1.0), _GLF_struct_148(uvec3(1u), uvec2(1u), ivec2(1), mat3x2(1.0), uvec4(1u)), 1, mat3x2(1.0), ivec3(1), mat3(1.0), _GLF_struct_149(uvec2(1u), mat4x2(1.0), mat2x4(1.0), uvec3(1u), ivec4(1), mat3x4(1.0))), (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_151._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_151._injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                }
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                break;
                               return;
                              }
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               do
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                       for(_GLF_struct_122 _GLF_struct_replacement_122 = _GLF_struct_122(uvec4(1u), _GLF_struct_121(_GLF_struct_119(bvec3(true), ivec2(1), bvec3(true), 1u, mat4x3(1.0), uvec2(1u), mat4x2(1.0)), ivec4(1), ivec4(1), uvec4(1u), mat4(1.0), _GLF_struct_120(mat2(1.0), uvec2(1u), bvec3(true), mat4(1.0), mat3(1.0), mat4x2(1.0), 1u)), mat2x4(1.0), int(_GLF_ONE(1.0, injectionSwitch.y)), ivec4(1), true); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_122._injected_loop_counter != 0); _GLF_struct_replacement_122._injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((88767 & 0) & 71980)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(86800) : _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | ((0 | 0) << _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter --)
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
}
