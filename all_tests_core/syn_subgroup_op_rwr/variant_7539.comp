#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 vec2 _f0;
 bvec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 mat4x2 _f1;
 bool _f2;
 vec2 _f3;
 uvec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 uvec2 _f1;
 ivec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 mat4x2 _f3;
 mat3x4 _f4;
 mat4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 uint read_1;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_11 _f2;
 mat4x3 _f3;
 mat2x4 _f4;
 _GLF_struct_12 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_5 {
 bvec3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 bvec3 _f1;
 ivec3 _f2;
 uvec4 _f3;
 vec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 _GLF_struct_3 _f1;
 uvec2 _f2;
 _GLF_struct_5 _f3;
 uint virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(_GLF_IDENTITY(39.45, clamp(39.45, 39.45, 39.45))))))) * (injectionSwitch)).y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, cos(0.0), log(1.0), 1.0, sqrt(1.0), 1.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0)), max(vec2(mat3x4(injectionSwitch, 1.0, cos(0.0), log(1.0), 1.0, sqrt(1.0), 1.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 1.0, cos(0.0), log(1.0), 1.0, sqrt(1.0), 1.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0))))).x > injectionSwitch.y)) || (false)) || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2105.7306))), 1.0)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), max(_GLF_IDENTITY(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), max(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), clamp((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (injectionSwitch)))), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, abs(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2105.7306))), 1.0)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), max(_GLF_IDENTITY(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), max(clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)), clamp((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (injectionSwitch)))), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))))))).y), float(_GLF_FUZZED(8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), abs(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (false ? _GLF_FUZZED(vec2(1.8, 10.24)) : vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(1.0, 1.0)))))) + vec2(0.0, 0.0))) * (injectionSwitch)).y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0))))), 0.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), tan(0.0))))) - 0.0), 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY((vec2(1.0, 1.0)) * mat2(1.0), min((vec2(1.0, 1.0)) * mat2(1.0), (vec2(1.0, 1.0)) * mat2(1.0))))))))) * (injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))) || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))))).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))) && true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(0.2) : injectionSwitch.x), float(mat4x3((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(0.2) : injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(abs(1.0), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(abs(1.0), 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (87234 & 0) ^ (1))], float(vec3(injectionSwitch[1], 1.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(371.052)), bool(false))))), injectionSwitch)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0))).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(509.981))), 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0))).y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1017.1740)), vec2(_GLF_FUZZED(6.5), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0)))), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0)))), true, false))))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false))));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, (false ? _GLF_FUZZED(880.692) : _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), ((int(7))) | ((int(7)))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))));
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(int((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(int(1), int(1))), (int((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))))) << _GLF_IDENTITY(int(1), int(1)))) << 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(int(1)))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true)))))), bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))), ! (_GLF_IDENTITY(! ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))), true && (! _GLF_IDENTITY(((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))), true && (_GLF_IDENTITY(((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))), bool(bvec3(_GLF_IDENTITY(((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))), bool(bvec2(((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))), true))), false, false))))))))), ! (! ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))) || false)))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), true, true))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), true, true))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))), ! (! (! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), true, true))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), true, true))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))), ! (! (! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), true, true))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true, false)), true, true)))))) || false)), true, true))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
    }
   for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, abs(sqrt(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))) | 0, ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, abs(sqrt(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))) | 0) | ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, abs(sqrt(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))) | 0))), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), max(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (int(1)) ^ 0))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0), int(1)), ~ (_GLF_IDENTITY(~ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0), int(1))), ~ _GLF_IDENTITY((~ (~ _GLF_IDENTITY((clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), int(ivec4((int(1)), 1, 1, 1))) << 0), int(1))), 0 ^ ((clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), int(ivec4((int(1)), 1, 1, 1))) << 0), int(1))))))), (false ? _GLF_FUZZED(36416) : (~ (~ _GLF_IDENTITY((clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), int(ivec4((int(1)), 1, 1, 1))) << 0), int(1))), 0 ^ ((clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), int(ivec4((int(1)), 1, 1, 1))) << 0), int(1))))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) | _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (0) ^ 0), (_GLF_IDENTITY(0, clamp(0, 0, 0)) | _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (0) ^ 0)) << 0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(74958) : _injected_loop_counter)) != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat3x4(1.0), _GLF_struct_3(_GLF_struct_0(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(min(~ (1), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), (false ? _GLF_FUZZED(54877) : min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))))))), min(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(min(~ (1), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), (false ? _GLF_FUZZED(54877) : min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ _GLF_IDENTITY((1), ~ (~ ((1)))), ~ (1))))))))), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(min(~ (1), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), (false ? _GLF_FUZZED(54877) : min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))))))))), (1) + 0), 1, 1))), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(min(~ (1), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), (false ? _GLF_FUZZED(54877) : min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))))))), min(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(min(~ (1), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), 1 * ((1))), (1)))))), (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true))))) ? _GLF_FUZZED(54877) : min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))))))), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(min(~ (1), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), (false ? _GLF_FUZZED(54877) : _GLF_IDENTITY(min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), ~ (~ (_GLF_IDENTITY(min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), min(min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))), min(~ _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ ((1)))), (1))), _GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))))))))))))))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)), 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) + 0), 1, 1))))), bvec3(true), ivec3(1), uvec4(1u), vec3(1.0), mat4(1.0)), vec4(1.0), _GLF_struct_1(vec4(1.0), vec2(1.0)), _GLF_struct_2(mat2x4(1.0)), mat4(1.0)), uvec2(1u), _GLF_struct_5(bvec3(true), _GLF_struct_4(bvec2(true), 1u)), _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_id * subgroup_size + subgroup_local_id, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_id * subgroup_size + subgroup_local_id) * 1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true))))))))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) >> 0u)) % subgroup_size);
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(mat2(1.0), _GLF_struct_7(mat4x2(1.0), atomicLoad(buf[_GLF_struct_replacement_6.virtual_gid], 4, 64, 0)), _GLF_struct_11(_GLF_struct_8(mat3x2(1.0), uvec2(1u), ivec4(1), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0))), _GLF_struct_9(ivec4(1), _GLF_IDENTITY(mat2(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((mat3x2(-993.884, 2537.1391, 3.3, -65.87, -1746.0738, -8.5) * mat2x3(-858.140, -5004.8749, -5538.7223, -2.0, -19.49, 0.4))) : mat2(1.0)))), _GLF_struct_10(vec3(1.0), mat4x2(1.0), true, vec2(1.0), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (true ? (1u) | _GLF_IDENTITY((1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (true ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(workgroup_size))) : (_GLF_IDENTITY(1u, 0u + (1u))))) : _GLF_FUZZED(workgroup_base))))) / 1u)), true), mat4x2(1.0), mat3x4(1.0), mat4(1.0), ivec4(1)), mat4x3(1.0), mat2x4(1.0), _GLF_struct_12(vec2(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), mat2(1.0)), mat3x2(1.0));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-59274) : _injected_loop_counter)) > ((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))), int(ivec4((_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))), 1, 1, 0))) ^ 0)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false)))); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_13._f1.read_1 + _GLF_IDENTITY(1, max(1, 1))), 4, 64, 4);
    }
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u), (_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u)) * 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u), (_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u)) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u), (_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u)) * 1u))), 1u, 1u, 1u)), (true ? uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_6.virtual_gid, (_GLF_struct_replacement_6.virtual_gid) | 0u), 1u, 1u, 1u)) : _GLF_FUZZED(workgroup_size))))], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, 1, 1), clamp(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(44470) : 1)), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | (clamp(1, 1, 1)))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 0)), 1, 1), ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, _GLF_IDENTITY(1, (1) << 0), 1), ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, 1, 1))))) < subgroup_size)
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_13._f1.read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) << 0u)) + 1, 4, 64, 4);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_IDENTITY(true, ! (! (true))), false, true)))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_13._f1.read_1, (_GLF_IDENTITY(_GLF_struct_replacement_13._f1.read_1, clamp(_GLF_struct_replacement_13._f1.read_1, _GLF_struct_replacement_13._f1.read_1, _GLF_IDENTITY(_GLF_struct_replacement_13._f1.read_1, uint(uvec2(_GLF_struct_replacement_13._f1.read_1, 0u)))))) | (_GLF_struct_replacement_13._f1.read_1)) + 1, (true ? _GLF_struct_replacement_13._f1.read_1 + 1 : _GLF_FUZZED(clamp(workgroup_size, next_virtual_gid, workgroup_base)))) == read_2, true && (_GLF_struct_replacement_13._f1.read_1 + 1 == read_2))) + 1, 4, 64, 4);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
          }
         else
          {
          }
         subgroupAll(_GLF_IDENTITY(true, (true) || false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) << 0)) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(1, (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, int(ivec4(0, 1, 1, (0 | 0))))) | (0), (_GLF_IDENTITY((0) | (0), ((0) | (0)) / 1)) | (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(1), int(1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_GLF_IDENTITY(89008, max(89008, _GLF_IDENTITY(89008, max(89008, 89008))))) : int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (~ (false ? _GLF_FUZZED(89008) : int(1)))))), clamp(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (~ (false ? _GLF_FUZZED(89008) : int(1)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (~ (false ? _GLF_FUZZED(89008) : int(1)))))), ~ (~ (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(89008) : int(1)), (~ (false ? _GLF_FUZZED(89008) : int(1))) << 0)))))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (~ (false ? _GLF_FUZZED(89008) : int(1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (~ (false ? _GLF_FUZZED(89008) : int(1))))), (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(89008) : int(1), ~ (~ (false ? _GLF_FUZZED(89008) : int(1)))))) << 0)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_IDENTITY(_GLF_FUZZED(89008), (_GLF_FUZZED(89008)) * 1) : int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))), (true ? _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(89008) : int(1)))) : _GLF_FUZZED(-37663)))) >> 0)))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-15039) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)), (_injected_loop_counter --) ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ _GLF_IDENTITY((_injected_loop_counter --), ~ (~ (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) / 1))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) : _GLF_FUZZED(86968))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) : _GLF_FUZZED(86968)))) >> 0)) ^ 0)) ^ (0 << _GLF_IDENTITY(int(0), int(0)))))), (0 & 50007) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ _GLF_IDENTITY((_injected_loop_counter --), ~ (~ (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) / 1))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) : _GLF_FUZZED(86968))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) : _GLF_FUZZED(86968)))) >> 0)) ^ 0)) ^ (0 << _GLF_IDENTITY(int(0), int(0)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-15039) : _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ _GLF_IDENTITY((_injected_loop_counter --), ~ (~ (_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) / 1))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) : _GLF_FUZZED(86968))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) : _GLF_FUZZED(_GLF_IDENTITY(86968, min(_GLF_IDENTITY(86968, 0 ^ (_GLF_IDENTITY(86968, (86968) | (86968)))), 86968)))))) >> 0)) ^ 0)) ^ (0 << _GLF_IDENTITY(int(0), int(0))))))))) | 0))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7028.7323)), vec2(_GLF_FUZZED(_GLF_IDENTITY(9.1, max(_GLF_IDENTITY(9.1, clamp(9.1, _GLF_IDENTITY(9.1, 0.0 + (9.1)), 9.1)), _GLF_IDENTITY(9.1, mix(float(_GLF_FUZZED(-55.50)), float(9.1), bool(true)))))), (injectionSwitch)[1]), bvec2(false, true))))).y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) ^ 0)); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(int(6), int(6))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0, 0), max(ivec3(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0, 0), ivec3(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0, 0))))), int(6))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(int(6), int(6)))) ^ 0), 1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6)))) / 1) / 1)) >> _GLF_IDENTITY(int(6), int(6))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(6, 6, 6))))) / 1)) >> _GLF_IDENTITY(int(6), int(6)))) ^ 0), 1, _GLF_IDENTITY(1, (1) | (1))), min(ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(int(6), int(6))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(ivec4(6, 0, 0, 1))))))) ^ 0), 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ~ (~ ((1))))), (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(_injected_loop_counter)))), ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(int(6), int(6))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) / 1)) >> _GLF_IDENTITY(int(6), int(6)))) ^ 0), 1, _GLF_IDENTITY(1, (1) | (1))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), max(min(_injected_loop_counter, _injected_loop_counter), _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), max(min(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) * 1)))), _injected_loop_counter), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter))))))))) / 1) != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))), true && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2)))) << 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(_injected_loop_counter), min(true ? 1 : _GLF_FUZZED(_injected_loop_counter), true ? 1 : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-736.560), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-5.8)), bvec2(true, false))), _GLF_IDENTITY(mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), clamp(mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x < injectionSwitch.y)))), max(mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0)))))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))))) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, 1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(_GLF_FUZZED(8.5), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0)) - vec2(0.0, 0.0))) * cos(vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), min(_GLF_IDENTITY(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), max(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), _GLF_IDENTITY(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), vec2(1.0, 1.0) * (vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)))))), _GLF_IDENTITY(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), _GLF_IDENTITY(vec2(vec3(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), 0.0)), clamp(vec2(vec3(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), 0.0)), vec2(vec3(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), 0.0)), vec2(vec3(vec2(((injectionSwitch))[0], _GLF_FUZZED(572.059)), 0.0))))))), vec2(_GLF_FUZZED(8.5), ((injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, 1.0, 1.0)))))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch)))) - tan(vec2(0.0, 0.0))), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.0)), float(1.0), bool(true)))))), 0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY((mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0))), 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), clamp(float(mat4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), float(mat4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))) / 1.0), 1.0, 1.0)) * mat3(1.0), (false ? _GLF_FUZZED(mat3x2(-6.2, 2.1, -66.46, -7555.8017, 6.8, -351.505)) : (mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0))), 0.0, 1.0, 1.0, 1.0)) * mat3(1.0)))))), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat2((injectionSwitch), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0))) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, exp(0.0), 0.0, 0.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, round(length(normalize(1.0))), 1.0))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, sqrt(1.0)))), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(mat3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), float(mat3x2(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0)))), abs(1.0), 1.0)))))), _GLF_IDENTITY((vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0), clamp((vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0), _GLF_IDENTITY((vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0), mat2(1.0) * ((vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0))), (vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)))))))) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 1.0)))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), max((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), (vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)))))) * mat2(1.0), 0.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], ((injectionSwitch)[0]) - 0.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(4741.9788), _GLF_FUZZED(-6.1)), bvec2(false, false))))))), (vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))), injectionSwitch))))))) - vec2(0.0, 0.0)))))) * mat2(1.0), 0.0, 0.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), clamp(vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), (vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) * vec2(1.0, 1.0)))), (_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), (vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * mat2(1.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) - vec2(0.0, 0.0)))))) * mat2(1.0), 0.0, 0.0, 1.0, 1.0))))) - vec2(0.0, 0.0)))).y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, true))))), (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, true)))))) && true)) || false)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-87.32) : injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y) || false), false)))))))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
