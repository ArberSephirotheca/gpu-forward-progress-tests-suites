#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, true)), true && (bool(bvec4(false, true, false, true)))), (bool(bvec4(false, true, false, true))) && true))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) || false)), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))) || false)))) || false)) || false)))))));
  }
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))), false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false)))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false))))))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y)))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))))), true, false)))))))), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))), _GLF_IDENTITY(true, ! (! (true)))))))), true))))), ! (! (bool(bvec3(false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))), true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))), false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false)))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false))))))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y)))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))))), true, false)))))))), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))), _GLF_IDENTITY(true, ! (! (true)))))))), true))))), ! (! (bool(bvec3(false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))), true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))), false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false)))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true)), false))))))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y)))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))))), true, false)))))))), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))), _GLF_IDENTITY(true, ! (! (true)))))))), true))))), ! (! (bool(bvec3(false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))), true)))))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.x = num_workgroup;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), ((1 & 1)) / _GLF_IDENTITY(1, (1) * 1))) | ((_GLF_IDENTITY(1 & 1, (1 & 1) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(-9.5) : injectionSwitch.y), (false ? _GLF_FUZZED(7472.4968) : _GLF_IDENTITY((false ? _GLF_FUZZED(-9.5) : injectionSwitch.y), min((false ? _GLF_FUZZED(-9.5) : injectionSwitch.y), (false ? _GLF_FUZZED(-9.5) : injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.5) : injectionSwitch.y)))), true && (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.5) : injectionSwitch.y))))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) + vec2(0.0, 0.0)).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) + vec2(0.0, 0.0)).x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, true, false)))))))
      barrier();
    }
   else
    {
    }
   GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.w = workgroup_size;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), false, true))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))) || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.y)), float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.y)), 1.0, 1.0, 0.0))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.y)), float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.y)), 1.0, 1.0, 0.0))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), _GLF_IDENTITY(vec2(mat4x3(vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(vec2(4473.9275, -3151.2094)) : vec2(mat4x3(vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0)))))))) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))))) + vec2(0.0, 0.0)).y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(determinant(mat3(1.4, -858.655, -8426.4935, -30.09, -9934.8790, -9.5, -21.84, -9.7, -795.211))))))))) && true)))))));
 uint workgroup_base = GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.w * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) * 1))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), true)))))) && true) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.z = virtual_gid;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) | 0, ((int(4)) | 0) + 0)), int(4)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), ~ (~ (_GLF_IDENTITY(int(4), (int(4)) | 0)))), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) | 0)) >> 0)), ~ (~ (int(int(4))))))), int(4))), (true ? ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4))) - 0)) >> _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(-44779))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
              barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_id * subgroup_size, 1u, 1u, 1u)), (uint(uvec4(subgroup_id * subgroup_size, 1u, 1u, 1u))) | (uint(uvec4(subgroup_id * subgroup_size, 1u, 1u, 1u))))))) + ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) | (subgroup_local_id + 1))), min((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) ^ 0), 0))), (subgroup_local_id + 1) | (subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY((subgroup_local_id + 1), max(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), (subgroup_local_id + 1))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))), max((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1))) | (subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))))), min(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))))))))))) >> (0u | 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))))))) + 0u)) % subgroup_size);
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.z], 4, 64, _GLF_IDENTITY(0, 0 | (0)));
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0))))) - 0)) << 0), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-70646)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0))))) << 0)) >> 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0))))) - 0)) << 0), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-70646)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0))))) << 0)) >> 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0))))) - 0)) << 0), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-70646)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0)))), (((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), max((int(5)), (int(5))))) + 0) / 1))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | 0))))) << 0)) >> 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), 0, 1)))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))));
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size, (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size, max(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size, GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size)))) : _GLF_FUZZED(uvec4(166714u, 4024u, 195488u, 96622u))))) | (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size)).z], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.y = read_2;
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), ! (! (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-11218)))) | (0))), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))))))), ! (_GLF_IDENTITY(! (_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), 0 | (int(0))), int(0)))))), ! (! (! (_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.y), (uint(_GLF_IDENTITY(read_1 + 1 == GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.y, bool(bvec2(read_1 + 1 == _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.y, ~ (~ (GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.y))), false))))) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) << 0u)), 0u ^ (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, max(6u, 6u))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, max(6u, 6u))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, max(6u, 6u))), (uint(_GLF_IDENTITY(6u, max(6u, 6u)))) | (uint(_GLF_IDENTITY(6u, max(6u, 6u))))), uint(_GLF_IDENTITY(6u, max(6u, 6u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, max(6u, 6u))), ~ (~ (uint(_GLF_IDENTITY(6u, max(6u, 6u))))))))))))) + 1, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, max(4, 4))))) << 0));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         subgroupAll(_GLF_IDENTITY(false, (false) || false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))) && true)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) < int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), injectionSwitch.y))) || false)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.3, 0.1)) : injectionSwitch)).y))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(796.758), _GLF_FUZZED(0.7)), bvec2(false, false))).y)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)) && (false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = (0 & 34850); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true)))))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) >> 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) >> 0)))), (~ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) >> 0))))) | (~ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) >> 0)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), 0u + (next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))))), _GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(virtual_gid) : 0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), (next_virtual_gid) / 1u)) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY((next_virtual_gid), (true ? (next_virtual_gid) : _GLF_FUZZED(num_workgroup))) | 0u, min(_GLF_IDENTITY((next_virtual_gid), (true ? (next_virtual_gid) : _GLF_FUZZED(num_workgroup))) | 0u, _GLF_IDENTITY(_GLF_IDENTITY((next_virtual_gid), (true ? (next_virtual_gid) : _GLF_FUZZED(num_workgroup))) | 0u, (_GLF_IDENTITY((next_virtual_gid), (true ? (next_virtual_gid) : _GLF_FUZZED(num_workgroup))) | 0u) << 0u))))], uint(read_1 + 1 == GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_size.y) + 1, _GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), max((4) | (4), _GLF_IDENTITY((4) | (4), int(ivec2((4) | (4), 1)))))), 64, 4);
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(44451))))) | (_GLF_IDENTITY(int(7), min(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7))), max(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (0 | 0)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (0 | 0) | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))), (true ? _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), 0 ^ (1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))), max(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) >> 0)))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), clamp(~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0)), max(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), ~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | 0)), int(7))), max(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), ~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (0 | 1) * (int(7))))) >> _GLF_IDENTITY(int(7), int(7))), max(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(99035) : _GLF_IDENTITY(int(7), min(int(7), int(7))))), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))) : _GLF_FUZZED(_injected_loop_counter)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) - 0, int(ivec3((_injected_loop_counter) - 0, 1, 1)))) > _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), min(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))))))))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), min(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))))))))), clamp(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), min(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), min(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), min(vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0)))), vec4(injectionSwitch.x, 1.0, 0.0, round(length(normalize(1.0))))))))))))))); _injected_loop_counter --)
      {
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
}
