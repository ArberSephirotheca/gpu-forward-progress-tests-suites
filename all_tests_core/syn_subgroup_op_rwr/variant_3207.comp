#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 vec2 _f0;
 bvec4 _f1;
 uvec4 _f2;
 mat2x3 _f3;
 mat4x2 _f4;
 vec4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_4 {
 uint _f0;
 mat2x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 uint _f1;
 _GLF_struct_4 _f2;
 mat3x2 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat3x2 _f1;
 bvec3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 mat2x3 _f1;
 int _f2;
 vec3 _f3;
 vec2 _f4;
 _GLF_struct_0 _f5;
} ;

struct _GLF_struct_7 {
 uint workgroup_base;
 _GLF_struct_1 _f0;
 uvec2 _f1;
 _GLF_struct_2 _f2;
 mat4x2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_6 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x = subgroup_id;
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, _GLF_struct_1(uvec4(1u), mat2x3(1.0), 1, vec3(1.0), vec2(1.0), _GLF_struct_0(bvec2(true), mat3x2(1.0), bvec3(true), mat4x3(1.0))), uvec2(1u), _GLF_struct_2(uvec3(1u), mat4(1.0)), mat4x2(1.0), _GLF_struct_3(ivec2(1)), _GLF_struct_6(vec4(1.0), 1u, _GLF_struct_4(1u, mat2x4(1.0), uvec4(1u)), mat3x2(1.0), _GLF_struct_5(vec2(1.0), bvec4(true), uvec4(1u), mat2x3(1.0), mat4x2(1.0), vec4(1.0), mat4x3(1.0))));
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w = _GLF_struct_replacement_7.workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y + subgroup_local_id;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z = virtual_gid;
 uint next_virtual_gid = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.x * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y);
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.z], 4, 64, 0);
 if(subgroup_local_id + 1 < GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_base.y)
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     subgroupAll(false);
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
  }
}
