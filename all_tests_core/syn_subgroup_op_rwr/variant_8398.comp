#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.z = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.w + subgroup_id * subgroup_size + GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.z;
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.w + subgroup_id * subgroup_size + ((GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.z + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.x = read_1;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.x + 1), 4, 64, 4);
    }
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.y = read_2;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.z + 1 < subgroup_size)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.y) + 1, 4, 64, 4);
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         subgroupAll(false);
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_17_3_1_14read_1read_2subgroup_local_idworkgroup_base.y) + 1, 4, 64, 4);
       subgroupAll(true);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
