#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat3x2 _f0;
} ;

struct _GLF_struct_10 {
 uint workgroup_base;
 bvec3 _f0;
 mat4x3 _f1;
 mat2 _f2;
 uint _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 mat2 _f1;
 _GLF_struct_11 _f2;
 mat4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 uvec2 _f1;
 int _f2;
 uint _f3;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 int _f1;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 vec3 _f1;
 bvec4 _f2;
 ivec3 _f3;
 ivec2 _f4;
 mat4 _f5;
 int _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 uvec2 _f1;
 _GLF_struct_6 _f2;
 mat4x2 _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 mat4x3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 uint subgroup_size;
 _GLF_struct_3 _f1;
 mat4 _f2;
 uvec2 _f3;
 float _f4;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat2x3 _f1;
 mat4 _f2;
 mat3x2 _f3;
 ivec2 _f4;
 vec4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 bvec4 _f1;
 _GLF_struct_0 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_8 _f2;
 ivec4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(mat3x4(1.0), bvec4(true), _GLF_struct_0(uvec4(1u), mat2x3(1.0), mat4(1.0), mat3x2(1.0), ivec2(1), vec4(1.0), mat4x3(1.0)), uvec2(1u)), _GLF_struct_4(_GLF_struct_2(mat3x4(1.0), mat3(1.0)), gl_SubgroupSize, _GLF_struct_3(mat2x3(1.0), mat4x3(1.0), ivec3(1)), mat4(1.0), uvec2(1u), 1.0), _GLF_struct_8(_GLF_struct_5(mat3x4(1.0), vec3(1.0), bvec4(true), ivec3(1), ivec2(1), mat4(1.0), 1), uvec2(1u), _GLF_struct_6(bvec3(true), 1), mat4x2(1.0), _GLF_struct_7(bvec3(true), uvec2(1u), 1, 1u)), ivec4(1));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_12(_GLF_struct_10(workgroup_size * workgroup_id, bvec3(true), mat4x3(1.0), mat2(1.0), 1u), mat2(1.0), _GLF_struct_11(mat3x2(1.0)), mat4(1.0), mat2x4(1.0)), vec2(1.0));
 uint virtual_gid = _GLF_struct_replacement_13._f0._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_9._f1.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_13._f0._f0.workgroup_base + subgroup_id * _GLF_struct_replacement_9._f1.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_9._f1.subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_9._f1.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   do
    {
     subgroupAll(true);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
