#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 int _f0;
 vec3 _f1;
 uint _f2;
 float _f3;
 bool _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
 mat2 _f1;
 bool _f2;
 vec4 _f3;
 bvec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
 mat4 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 mat4x3 _f4;
 ivec3 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 uvec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 mat2x4 _f1;
 uvec2 _f2;
 vec2 _f3;
 uvec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_5 {
 bool _f0;
 vec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 float _f1;
 mat2x4 _f2;
 mat3x4 _f3;
 uvec3 _f4;
 bool _f5;
 float _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 vec3 _f3;
 mat4 _f4;
 vec2 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 vec2 _f1;
 bool _f2;
 bool _f3;
 uvec3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 bvec3 _f1;
 mat4 _f2;
 ivec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 mat4 _f1;
 _GLF_struct_1 _f2;
 mat2x3 _f3;
 mat3x4 _f4;
 vec2 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_12 {
 int _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_11 _f3;
 bvec4 _f4;
 vec3 _f5;
 float _f6;
 uint subgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(1, _GLF_struct_3(_GLF_struct_0(mat2x3(1.0), uvec3(1u)), mat4(1.0), _GLF_struct_1(mat4x2(1.0), bvec3(true), mat4(1.0), ivec4(1), vec4(1.0)), mat2x3(1.0), mat3x4(1.0), vec2(1.0), _GLF_struct_2(bvec2(true), vec2(1.0), true, true, uvec3(1u), bvec2(true))), _GLF_struct_8(_GLF_struct_4(mat2x4(1.0), 1.0, mat2x4(1.0), mat3x4(1.0), uvec3(1u), true, 1.0), _GLF_struct_5(true, vec2(1.0), mat3x4(1.0)), _GLF_struct_6(uvec3(1u), mat2x4(1.0), uvec2(1u), vec2(1.0), uvec4(1u), ivec2(1)), vec3(1.0), mat4(1.0), vec2(1.0), _GLF_struct_7(mat4(1.0), uvec4(1u), mat3(1.0))), _GLF_struct_11(vec2(1.0), mat4(1.0), _GLF_struct_9(mat2x3(1.0), mat2(1.0), true, vec4(1.0), bvec3(true), mat4(1.0)), _GLF_struct_10(1, vec3(1.0), 1u, 1.0, true, mat2x4(1.0)), mat4x3(1.0), ivec3(1), mat2(1.0)), bvec4(true), vec3(1.0), 1.0, gl_SubgroupID);
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.w;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_12.subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_12.subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y + ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y);
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.z], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.z], 4, 64, 0);
 if(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1 < GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
  }
}
