#version 460
struct _GLF_struct_9 {
 mat4x3 _f0;
 float _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_8 {
 uvec2 _f0;
 float _f1;
} ;

struct _GLF_struct_6 {
 bvec4 _f0;
 uvec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_5 {
 bool _f0;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 vec3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 bvec3 _f1;
 uint workgroup_size;
 float _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_2 {
 uint subgroup_id;
 _GLF_struct_1 _f0;
 ivec2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(gl_SubgroupID, _GLF_struct_1(_GLF_struct_0(vec4(1.0)), mat4x3(1.0)), ivec2(1));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_4(vec2(1.0), bvec3(true), gl_WorkGroupSize.x, 1.0, _GLF_struct_3(bvec3(true))), _GLF_struct_7(ivec3(1), vec3(1.0), _GLF_struct_5(true), _GLF_struct_6(bvec4(true), uvec3(1u), mat2x4(1.0))), _GLF_struct_8(uvec2(1u), 1.0), _GLF_struct_9(mat4x3(1.0), 1.0, mat2x4(1.0)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_10._f0.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_2.subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
