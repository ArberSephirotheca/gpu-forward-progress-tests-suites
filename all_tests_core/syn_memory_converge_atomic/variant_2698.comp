#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat3x4 _f0;
 bvec3 _f1;
 mat4x3 _f2;
 mat3x2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 uvec3 _f1;
 mat2x3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_4 {
 float _f0;
 uvec3 _f1;
 float _f2;
 bool _f3;
 uvec2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 bool _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 vec2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_3 {
 uint subgroup_size;
 bvec3 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 bvec3 _f1;
 mat3 _f2;
 mat3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 int _f2;
 bool _f3;
 _GLF_struct_8 _f4;
 uvec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size;
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch, min(false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch, _GLF_IDENTITY(false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch, (false ? _GLF_FUZZED(vec2(5.5, -99.49)) : false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch)))))), injectionSwitch)))).y), true && _GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch), sin(vec2(0.0, 0.0)) + ((false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch)))), injectionSwitch)))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch), sin(vec2(0.0, 0.0)) + ((false ? _GLF_FUZZED(vec2(0.8, 278.181)) : injectionSwitch)))), injectionSwitch)))).y))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))), false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))), false, false), false))))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (false ? _GLF_FUZZED(19873) : int(int(0))))), (0) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)));
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)))))), bool(bvec2(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false)))))), true))))), false, false, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false))))), true && (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false))))))))))
  barrier();
 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z = subgroup_id;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(_GLF_struct_0(mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), false)))))), bvec3(bvec4(bvec3(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), bool(bvec2(bool(bvec4(true, true, true, false)), true))))))))))), true))), _GLF_IDENTITY(mat3(1.0), mat3(_GLF_IDENTITY(mat4(mat3(1.0)), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(mat3(1.0)))))), mat3(1.0), mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat2(-3.4, 3.5, -7.5, -70.84), mat2(mat2x4(mat2(-3.4, 3.5, -7.5, -70.84))))) : mat2(1.0, 0.0, 0.0, 1.0)))))) + log(1.0)))), mat4x2(1.0), mat2x4(1.0), bvec4(true)), _GLF_struct_3(gl_SubgroupSize, _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(bvec3(true)))), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(bvec3(true)))), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(bvec3(true)))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(bvec3(true)))), true)))), false))), true))))), _GLF_struct_2(vec3(1.0), mat4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((bvec4(_GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_IDENTITY(false, false || (false)), true) , (_GLF_IDENTITY(43126 * -83046, min(43126 * -83046, 43126 * -83046))))))), max(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 | (1)), 1)), ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), 1, 1)))), true, _GLF_struct_8(_GLF_struct_4(1.0, uvec3(1u), 1.0, true, _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), min(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), min(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(1u, (1u) | 0u))), max(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u & 1u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) | (_GLF_IDENTITY(0u, 0u ^ (0u))))) << _GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(1u, (1u) | (1u)))), uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, 0u + (1u))), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) * 1u)))) + _GLF_IDENTITY(0u, (0u) | (0u))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y))))), (uvec2(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u)) << _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), (_GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> uvec2(0u, 0u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y)))), min(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u)) << _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), (_GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> uvec2(0u, 0u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y)))), uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u)) << _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), (_GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> uvec2(0u, 0u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) | (uvec2(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), (uint(uvec3(1u, 1u, 1u))) ^ 0u))), uvec2(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(178318u), max(_GLF_FUZZED(178318u), _GLF_IDENTITY(_GLF_FUZZED(178318u), (_GLF_FUZZED(178318u)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (1u))) << 0u), min(1u, 1u)))) & uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(178318u), max(_GLF_FUZZED(178318u), _GLF_IDENTITY(_GLF_FUZZED(178318u), (_GLF_FUZZED(178318u)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (1u))) << 0u), min(1u, 1u)))), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(178318u), max(_GLF_FUZZED(178318u), _GLF_IDENTITY(_GLF_FUZZED(178318u), (_GLF_FUZZED(178318u)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (1u))) << 0u), min(1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) : _GLF_FUZZED(write_val))) & uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))))))), ~ (~ ((_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), min(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), min(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(1u, (1u) | 0u))), max(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, (1u & 1u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) | (_GLF_IDENTITY(0u, 0u ^ (0u))))) << _GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(1u, (1u) | (1u)))), uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, 0u + (1u))), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) * 1u)))) + _GLF_IDENTITY(0u, (0u) | (0u))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y))))), (uvec2(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u)) << _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), (_GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> uvec2(0u, 0u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y)))), min(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u)) << _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), (_GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> uvec2(0u, 0u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y)))), uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u)) << _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), clamp(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), (_GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> uvec2(0u, 0u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))))), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), (1u & uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) | (uvec2(uvec3(_GLF_IDENTITY(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), max(uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)), uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), _GLF_IDENTITY(uint(uvec3(1u, 1u, 1u)), (uint(uvec3(1u, 1u, 1u))) ^ 0u))), uvec2(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(178318u), max(_GLF_FUZZED(178318u), _GLF_IDENTITY(_GLF_FUZZED(178318u), (_GLF_FUZZED(178318u)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (1u))) << 0u), min(1u, 1u)))) & uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(178318u), max(_GLF_FUZZED(178318u), _GLF_IDENTITY(_GLF_FUZZED(178318u), (_GLF_FUZZED(178318u)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (1u))) << 0u), min(1u, 1u)))), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(178318u), max(_GLF_FUZZED(178318u), _GLF_IDENTITY(_GLF_FUZZED(178318u), (_GLF_FUZZED(178318u)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (1u))) << 0u), min(1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) : _GLF_FUZZED(write_val))) & uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))))))))))))) | (uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u), 1u, 1u), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u), 1u, 1u), (true ? clamp(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u), 1u, 1u) : _GLF_FUZZED(subgroup_id)))) - 0u))))), ivec2(1)), _GLF_IDENTITY(true, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (true)), _GLF_struct_5(mat3x2(1.0), mat2x3(1.0), uvec3(1u), ivec3(1)), _GLF_struct_6(mat4x3(1.0), uvec3(_GLF_IDENTITY(1u, (0u & 19415u) + (_GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) ^ 0u)))))), mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-27.97) : 1.0))), ivec3(1)), _GLF_struct_7(mat3x4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), mat4x3(1.0), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)) : _GLF_FUZZED(degrees(-6036.5175))))), mat2x4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), vec2(1.0), vec3(1.0)), uvec4(1u));
 GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x = _GLF_struct_replacement_9._f1.subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.2, 9.1)))).y)))), true && (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true))) && true)), ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))))))), (bool(_GLF_IDENTITY(false, (false) || false))) && true)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true))) && true)), ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false)))))))), bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))) || false)), false, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true)))), true))), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))), true)))))))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))))), false, false, false)))), (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec2(-0.5, 8.5), injectionSwitch)))) > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.9)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5.2) : injectionSwitch.y)))))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec2(-0.5, 8.5), injectionSwitch)))) > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.9)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5.2) : injectionSwitch.y))))))))))) || false), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), false, false, false))))) && true)))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || (false))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))), 0, 0))) > 0), false, true, true)), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))), 0, 0))) > 0), false, true, true))))))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.07, 4152.8334)))).y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - (0 & -89375)), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << 0)), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY((true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)), int(ivec4((true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)), 1, (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) + 0)), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y)), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)))))))) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch)) * mat2(1.0), clamp((false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch)) * mat2(1.0)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch))), min(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch))), max(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-6.5, -7344.5293)) : (injectionSwitch))))))) : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat3x4(injectionSwitch[1], 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, sin(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0), vec4(0.0, 1.0, 0.0, 1.0))))), 0.0))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0))))).x > injectionSwitch.y))) && true)))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0)))))); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.0), _GLF_FUZZED(32.73)), vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], mix(float(((injectionSwitch))[0]), float(_GLF_FUZZED(345.774)), bool(false))), _GLF_FUZZED((2008.0435 * 2.1))), vec2(_GLF_FUZZED(1.9), ((injectionSwitch))[1]), bvec2(false, true))), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))))[0], (injectionSwitch)[1]), bvec2(true, true)))) + _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))).y, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0))), min(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0))), (vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0)))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.0), _GLF_FUZZED(32.73)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true, true), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(true, true), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(true, true), false)))), false))))))))))) + vec2(0.0, 0.0)))).y, 0.0, 1.0, 1.0), (true ? vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0))), min(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0))), (vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) / vec3(1.0, 1.0, 1.0)))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.0), _GLF_FUZZED(32.73)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true, true), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(true, true), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(true, true), false)))), false))))))))))) + vec2(0.0, 0.0)))).y, 0.0, 1.0, 1.0) : _GLF_FUZZED(vec4(90.03, 7830.4733, 0.6, 8529.1486))))))), true, false, true))))))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), true, false, true)))))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false, _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false, true, false)), (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false, true, false)), true && (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false, true, false))))) && true)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false))))), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false))))), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7.5, 607.247)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y) || false))))), false, true)), true))))))), true, false, true))))))) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))))))))), false || (false))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            barrier();
                           barrier();
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), int(ivec4(_injected_loop_counter, 0, _GLF_IDENTITY(0, (0) / 1), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 + (int(6))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), int(int(int(6)))), int(6), int(6))), int(6)))))) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(784.319)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6344.0710) : _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-815.307)))))))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))))).x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))), vec2(_GLF_IDENTITY(mat2((injectionSwitch), 1.0, 1.0), mat2(1.0) * (mat2((injectionSwitch), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))))) + sqrt(vec2(0.0, 0.0))) * mat2(1.0)))).x, mix(float(_GLF_FUZZED(-544.922)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat2((injectionSwitch), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(672.012)), bool(false))), 1.0), mat2(1.0) * (mat2((injectionSwitch), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))))) + sqrt(vec2(0.0, 0.0))) * mat2(1.0)))).x), bool(true)))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, true))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))) || false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                        {
                        }
                       else
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))) || false)))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((-43351 & int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec3((-43351 & int(_GLF_ZERO(0.0, injectionSwitch.x))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), 0)))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))) || false))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.x = num_workgroup;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(5131.7686, 0.0 + (5131.7686)))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0))), mix(float(_GLF_FUZZED(19.29)), float((injectionSwitch.y)), bool(true))) - 0.0), injectionSwitch.y))))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, sin(0.0), log(1.0), 1.0, 0.0))), (injectionSwitch.y) - length(0.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(5131.7686), (true ? _GLF_FUZZED(5131.7686) : _GLF_FUZZED(43.39)))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), injectionSwitch.y))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(-458.974) : float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7572.7150))), 0.0)), 1.0))))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(-458.974) : float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(16.10)), float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(16.10)), float(mat3x4(float(_GLF_FUZZED(16.10)), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 0.0))), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED(16.10)), bool(false))), float(_GLF_FUZZED(-6.0)), bool(_GLF_IDENTITY(false, true && (false)))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, sqrt(determinant(mat2(0.0, 0.0, 0.0, 0.0))))), min(float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7.3))), (0.0) + 0.0), 1.0, 0.0, sqrt(determinant(mat2(0.0, 0.0, 0.0, 0.0))))), float(mat2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, _GLF_IDENTITY(sqrt(determinant(mat2(0.0, 0.0, 0.0, 0.0))), min(sqrt(determinant(mat2(0.0, 0.0, 0.0, 0.0))), sqrt(determinant(mat2(0.0, 0.0, 0.0, 0.0)))))))))), 0.0, 1.0)), (false ? _GLF_FUZZED(-458.974) : float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y)))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_IDENTITY(false, (false) || false)))))
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && true)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))))))) && true))))))))))) && true))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) + 0))), _GLF_IDENTITY((1), 0 ^ ((1))) + 0)); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, tan(0.0), 1.0), (false ? _GLF_FUZZED(vec4(-7.5, -17.53, 894.202, -670.993)) : vec4(injectionSwitch.x, 0.0, tan(0.0), 1.0)))), float(mat4x3(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, tan(0.0), 1.0), (false ? _GLF_FUZZED(vec4(-7.5, -17.53, 894.202, -670.993)) : vec4(injectionSwitch.x, 0.0, tan(0.0), 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-2597.3557 * 4631.2267))), float(injectionSwitch.y), bool(true)))))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))))))))))))))) || false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) / _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec3(uvec3(0u, 0u, 0u)))))) * uvec3(1u, 1u, 1u)))), max(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))), uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)))), max(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))), 0u)))).x, max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), uvec3(1u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, min(1u, 1u)))), 1u) * (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), _GLF_IDENTITY((_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u), uvec3(uvec3((_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u))))))), max(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (_GLF_IDENTITY(clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)))), max(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x, 0u ^ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (_GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) ^ uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)))), max(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 1, 1))), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
        {
         GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.z = _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(write_val)));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) - 0), 0 + (_GLF_IDENTITY(~ (_injected_loop_counter ++), (_GLF_IDENTITY(~ (_injected_loop_counter ++), (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) - 0)) << 0)) + 0))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) || false))), (bool(bool(_GLF_IDENTITY(true, (true) || false)))) && true)), true)))))), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.0)), bool(false))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(_GLF_IDENTITY(0.0, float(mat4x2(0.0, _GLF_ONE(1.0, injectionSwitch.y), tan(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (false), true && (! (false)))))))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, clamp(_GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uvec2(gl_WorkGroupID.x, 1u), (uvec2(gl_WorkGroupID.x, 1u)) | (_GLF_IDENTITY(uvec2(gl_WorkGroupID.x, 1u), (false ? _GLF_FUZZED(uvec2(49689u, 47756u)) : uvec2(gl_WorkGroupID.x, 1u))))))), gl_WorkGroupID.x, gl_WorkGroupID.x))) | 0u), clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x))) | 0u)) ^ 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.z * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, true, true))), bool(bvec2(! (bool(bvec3(true, true, true))), false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, true, true))), bool(bvec2(! (bool(bvec3(true, true, true))), false))))), ! (! (_GLF_IDENTITY(bool(bvec3(true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, true, true))), bool(bvec2(! (bool(bvec3(true, true, true))), false)))))))))))))
  {
   do
    {
     GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ~ (~ (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))))) << 0u);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size, uvec3(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size[0], GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size[1], GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size[2])).x + subgroup_local_id, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z) | 0u) * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id, clamp(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z) | 0u) * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id, GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z) | 0u) * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z) | 0u) * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id, ~ (~ (GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z) | 0u) * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id))))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y + GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id, (true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size, min(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size, (GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size, (GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size) | (GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size)), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size), min(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size), ~ (~ (_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size), ((GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size)) << uvec3(0u, 0u, 0u))))), (GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size)))))))).y + GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size, uvec3(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size[0], GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size[1], GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size[2])).y + GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y, (GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y) << 0u), GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.y)) + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid) / ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(5u), _GLF_IDENTITY(uvec4(5u), (uvec4(5u)) | (uvec4(5u))))) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).z, uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.z) ^ 0u), 1u))))) * GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size.x + subgroup_local_id));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 1.0, determinant(mat2(0.0, 0.0, 1.0, abs(0.0))), 0.0, 0.0, 1.0, 1.0)), (float(mat4x2(injectionSwitch.x, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 1.0, determinant(mat2(0.0, 0.0, 1.0, abs(0.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 1.0))) * 1.0)) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), true))), false, false, true))));
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))) | (_GLF_IDENTITY(6, max(6, 6))))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(6)), 1 * (_GLF_IDENTITY(~ (int(6)), max(~ (int(6)), _GLF_IDENTITY(~ (int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(~ (int(6)), 0, 0), max(ivec3(~ (int(6)), 0, 0), ivec3(~ (int(6)), 0, 0)))), (int(ivec3(~ (int(6)), 0, 0))) | 0))))))), ~ (~ (_GLF_IDENTITY(~ (~ (int(6))), int(int(~ _GLF_IDENTITY((~ (int(6))), min((~ (int(6))), (~ (_GLF_IDENTITY(int(6), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(6), max(int(6), int(6)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(6), max(int(6), int(6)))), max((_GLF_IDENTITY(int(6), max(int(6), int(6)))), (_GLF_IDENTITY(int(6), max(int(6), int(6))))))) | ((_GLF_IDENTITY(int(6), max(int(6), int(6))))))))))))))))))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.w = virtual_gid, 0u ^ (GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.w = virtual_gid));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))))), injectionSwitch, injectionSwitch)).y)))))))
                  barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, cos(0.0), cos(0.0), 1.0, log(1.0), 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(mat2x4(injectionSwitch, 1.0, cos(0.0), cos(0.0), 1.0, log(1.0), 1.0)) : _GLF_FUZZED(vec2(-6.2, 1285.2084))))).y))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), true))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) << (0 >> _GLF_IDENTITY(int(2), int(2)))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) - 0)) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, tan(0.0), 0.0, exp(0.0), sin(0.0), 1.0, 1.0, 1.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat4x3(injectionSwitch, 1.0, tan(0.0), 0.0, exp(0.0), sin(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) - 0.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))).y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                {
                 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), ((1 & 1)) | ((1 & _GLF_IDENTITY(1, (1) >> (0 << _GLF_IDENTITY(int(7), int(7)))))))) | ((1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), ! (_GLF_IDENTITY(! (! (! (! (false)))), ! (! (! (! (! (! (false))))))))))))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             atomicStore(write_val, uint(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.w), 4, 64, 0);
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(float(true), (false ? _GLF_FUZZED(80.76) : float(true))))), bool(false))) < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false)))))))));
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false))));
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))))) != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8)), _GLF_IDENTITY(int(_GLF_IDENTITY(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))), int(ivec2(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (int(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))))) - 0)), int(int(_GLF_IDENTITY((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8)), _GLF_IDENTITY(int(_GLF_IDENTITY(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))), int(ivec2(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (int(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))))) - 0))))))), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY((_GLF_IDENTITY(int(8), _GLF_IDENTITY((int(8)), min(_GLF_IDENTITY((int(8)), ((int(8))) * 1), (int(8)))) ^ 0)) | (int(8)), _GLF_IDENTITY(int(int((_GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), (int(8)) ^ 0)) | (int(8)))), (int(int((_GLF_IDENTITY(int(8), (int(8)) ^ 0)) | (int(8))))) - 0))))) | 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))) > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false)))), float(_GLF_FUZZED(-498.689)), bool(false)))) * 1.0), (false ? _GLF_FUZZED(length(vec3(75.73, 2.1, 483.911))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false)))), float(_GLF_FUZZED(-498.689)), bool(false)))) * 1.0))) > injectionSwitch.y))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false)))), float(_GLF_FUZZED(-498.689)), bool(false)))) * 1.0), (false ? _GLF_FUZZED(length(vec3(75.73, 2.1, 483.911))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.9)), bool(false)))), float(_GLF_FUZZED(-498.689)), bool(false)))) * 1.0))) > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (0 | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))) / ((1 & 1) | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) + 0)); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 0, int(_GLF_IDENTITY(ivec4(0 | 0, 0, 1, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))))), (ivec4(0 | 0, 0, 1, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))))) | ivec4(0, 0, 0, 0)))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), mat2(1.0) * (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-13.61), 1.0 * (_GLF_FUZZED(-13.61))) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0)), clamp(_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0)), (vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0))) * mat2(1.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0)), vec2(mat3x2(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0)), 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0)), mat2(1.0) * (vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), min(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(vec4(injectionSwitch, 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(365.523), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-7128.7028)), bvec2(true, false)))), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x)) > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-4.9), max(_GLF_IDENTITY(_GLF_FUZZED(-4.9), clamp(_GLF_IDENTITY(_GLF_FUZZED(-4.9), mix(_GLF_IDENTITY(float(_GLF_FUZZED(float(81172))), clamp(float(_GLF_FUZZED(float(81172))), float(_GLF_FUZZED(float(81172))), float(_GLF_FUZZED(float(81172))))), float(_GLF_IDENTITY(_GLF_FUZZED(-4.9), min(_GLF_FUZZED(-4.9), _GLF_FUZZED(-4.9)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(true))))), _GLF_FUZZED(-4.9), _GLF_FUZZED(-4.9))), _GLF_FUZZED(-4.9)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9582.5122), float(vec4(_GLF_FUZZED(-9582.5122), _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-41.55))) : _GLF_FUZZED(7.4))), 1.0))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9582.5122), float(float(_GLF_IDENTITY(_GLF_FUZZED(-9582.5122), (true ? _GLF_IDENTITY(_GLF_FUZZED(-9582.5122), (_GLF_FUZZED(-9582.5122)) - 0.0) : _GLF_FUZZED(-1.9)))))), float(vec4(_GLF_FUZZED(-9582.5122), _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0))))), (_GLF_IDENTITY(_GLF_FUZZED(-9582.5122), float(vec4(_GLF_FUZZED(-9582.5122), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(cos(0.0), mix(float(_GLF_IDENTITY(cos(0.0), float(mat2(cos(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(-4590.8231)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), min(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))) / 1.0) : _GLF_FUZZED(trunc(-2.7)))), (injectionSwitch)[1]), bvec2(false, true))))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(cos(injectionSwitch)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(cos(injectionSwitch)), mix(vec2((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))), false, false)))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(cos(injectionSwitch)))[0], _GLF_FUZZED((9892.7814 / 757.884))), vec2(_GLF_FUZZED(-6.1), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(cos(injectionSwitch)))[1]), bvec2(false, true))))), vec2(1.0, 1.0) * (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(cos(injectionSwitch)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(cos(injectionSwitch)), mix(vec2((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(cos(injectionSwitch)))[0], _GLF_FUZZED((9892.7814 / 757.884))), vec2(_GLF_FUZZED(-6.1), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false))))))) ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(cos(injectionSwitch)))[1]), bvec2(false, true))))))))))).y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), int(ivec2(0, (1 & _GLF_IDENTITY(1, min(1, 1)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))
    barrier();
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, (0 >> _GLF_IDENTITY(int(1), int(1))), 1))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ _GLF_IDENTITY((~ (int(8))), min((~ (int(8))), (~ (int(8)))))), int(8))) | _GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))))), _GLF_IDENTITY(((1 & 1)) ^ (1 ^ 1), (((1 & 1)) ^ (1 ^ 1)) + (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) * 1)) + (1 ^ (0 ^ 1))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.y = read_val;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (5))), int(5)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((0 ^ (0 >> _GLF_IDENTITY(int(5), int(5)))), 0 | ((0 ^ (0 >> _GLF_IDENTITY(int(5), int(5)))))), 0, 0)), (false ? _GLF_FUZZED(-73364) : _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((0 ^ (0 >> _GLF_IDENTITY(int(5), int(5)))), 0 | ((0 ^ (0 >> _GLF_IDENTITY(int(5), int(5)))))), 0, 0)), (int(ivec3(_GLF_IDENTITY((0 ^ (0 >> _GLF_IDENTITY(int(5), int(5)))), 0 | ((0 ^ (0 >> _GLF_IDENTITY(int(5), int(5)))))), 0, 0))) / (0 ^ 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7059.4416) : _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0)), dot(vec4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9781.2581)), bool(false))), 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), max(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), 1.0)))))))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - sin(0.0)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (_GLF_IDENTITY(false ? _GLF_FUZZED(-9752.6069) : -311.515, _GLF_ONE(1.0, injectionSwitch.y) * (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)))[0]), (float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (_GLF_IDENTITY(false ? _GLF_FUZZED(-9752.6069) : -311.515, _GLF_ONE(1.0, injectionSwitch.y) * (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)))[0])) - 0.0))), injectionSwitch[1]), clamp(vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, 0 ^ (0))], float(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(((_GLF_IDENTITY(false, (false) && true) ? 575.278 : -3153.1326)))), float(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(max((injectionSwitch)[1], (injectionSwitch)[1]), (max((injectionSwitch)[1], (injectionSwitch)[1])) / 1.0))), bool(true)))), _GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), clamp((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), _GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), (_GLF_IDENTITY((vec2((injectionSwitch)[_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0))], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), vec2(mat4x3((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0)))) + vec2(0.0, 0.0))))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, _GLF_IDENTITY(false, ! (! (false)))))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? (-833.427 + _GLF_IDENTITY(-535.516, (-535.516) + 0.0)) : -0.9)), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))))[0], clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? (-833.427 + _GLF_IDENTITY(-535.516, (-535.516) + 0.0)) : -0.9)), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))))[0], mix(float(_GLF_FUZZED(-670.663)), float((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? (-833.427 + _GLF_IDENTITY(-535.516, (-535.516) + 0.0)) : -0.9)), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))))[0]), bool(true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? (-833.427 + _GLF_IDENTITY(-535.516, (-535.516) + 0.0)) : -0.9)), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))))[0], (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? (-833.427 + _GLF_IDENTITY(-535.516, (-535.516) + 0.0)) : -0.9)), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))))[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)), 0.0 + (_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), _GLF_IDENTITY((vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))) * mat2(1.0), (true ? _GLF_IDENTITY((vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))), vec2(0.0, 0.0) + ((vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))))) * mat2(1.0) : _GLF_FUZZED(vec2(-2.6, -16.15))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), vec2(mat3(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : _GLF_IDENTITY(-311.515, max(-311.515, -311.515)))))), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)))) + vec2(0.0, 0.0))))[0], float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(((false ? 575.278 : -3153.1326)))), float(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bool(true))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))[1], mix(float(_GLF_FUZZED(((false ? 575.278 : -3153.1326)))), float(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bool(true))) : _GLF_FUZZED(cos(56.23))))), _GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), clamp((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), _GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(220.479)), vec2(_GLF_FUZZED(8.2), (vec2(1.0, 1.0))[1]), bvec2(false, true)))), (_GLF_IDENTITY((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), vec2(mat4x3((vec2((injectionSwitch)[0], (injectionSwitch)[1])) / abs(vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))) + vec2(0.0, 0.0))))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? (-833.427 + -535.516) : -0.9)), _GLF_FUZZED(-0.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), (vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) + 0.0)), _GLF_FUZZED(_GLF_IDENTITY(-311.515, _GLF_IDENTITY((false ? _GLF_FUZZED(-9752.6069) : -311.515), min((false ? _GLF_FUZZED(-9752.6069) : -311.515), (false ? _GLF_FUZZED(-9752.6069) : -311.515))))))) * mat2(1.0)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-1.8)), float(-311.515), bool(_GLF_IDENTITY(true, (true) || false)))))))), vec2(mat3(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), (vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (-9.4) + 0.0)), _GLF_FUZZED(_GLF_IDENTITY(-311.515, _GLF_IDENTITY((false ? _GLF_FUZZED(-9752.6069) : -311.515), min((false ? _GLF_FUZZED(-9752.6069) : -311.515), (false ? _GLF_FUZZED(-9752.6069) : -311.515))))))) * mat2(1.0)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-1.8)), float(-311.515), bool(_GLF_IDENTITY(true, (true) || false)))))))), vec2(mat3(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)))))) + vec2(0.0, 0.0))))[0], 0.0, _GLF_IDENTITY(dot(vec2(1.0, abs(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, abs(0.0)), vec2(1.0, 0.0))))))))), injectionSwitch[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0)))[0], float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(mat3x4(vec2((injectionSwitch)[0], (injectionSwitch)[1]), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2((injectionSwitch)[0], (injectionSwitch)[1]) : _GLF_FUZZED(vec2(vec4(9.4, 4912.4155, 25.64, -34.39))))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, max(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(13.84) : -311.515)), _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-84.16)), float(-311.515), bool(true))))), (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(mat3x4(vec2((injectionSwitch)[0], (injectionSwitch)[1]), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2((injectionSwitch)[0], (injectionSwitch)[1]) : _GLF_FUZZED(vec2(vec4(9.4, 4912.4155, 25.64, -34.39))))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, max(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(13.84) : -311.515)), _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-84.16)), float(-311.515), bool(true))))), (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))))[0]))), (_GLF_IDENTITY(false ? _GLF_FUZZED(dot(-602.487, fma(1453.6200, 0.8, -717.691))) : _GLF_IDENTITY(injectionSwitch[0], float(float(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bool(! (true))))), true && (! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? vec2((injectionSwitch)[0], (injectionSwitch)[1]) : _GLF_FUZZED(vec2(vec4(9.4, 4912.4155, _GLF_IDENTITY(25.64, clamp(_GLF_IDENTITY(25.64, clamp(25.64, 25.64, 25.64)), 25.64, 25.64)), -34.39))))), vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (false ? _GLF_FUZZED(-6.7) : -9.4))), max(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(-9.4), float(mat4x3(_GLF_FUZZED(-9.4), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4376.6584)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4376.6584)), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4376.6584)), bool(false))))), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat4x2(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.1)), bool(false))), 1.0)))))))))), 0.0, 1.0, 0.0))))), _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, max(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(_GLF_IDENTITY(13.84, (_GLF_IDENTITY(13.84, _GLF_IDENTITY(float(mat3x4(13.84, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), mat4(1.0) * (mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))) - 0.0))) - 0.0)) : -311.515)), _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-84.16)), float(-311.515), bool(_GLF_IDENTITY(true, (true) && true)))))), (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[0]))), (false ? _GLF_FUZZED(dot(-602.487, fma(1453.6200, 0.8, -717.691))) : _GLF_IDENTITY(injectionSwitch[0], float(float(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch)))[0], (injectionSwitch)[1]), _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), bool(bvec3(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false, false))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-1.3, -58.76))))))[0], (injectionSwitch)[1]) : _GLF_FUZZED(vec2(vec4(9.4, 4912.4155, 25.64, -34.39)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), bool(bvec3(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false, false))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-1.3, -58.76))))))[0], (injectionSwitch)[1]) : _GLF_FUZZED(vec2(vec4(9.4, 4912.4155, 25.64, -34.39))))))), vec2(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), clamp(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))), _GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))), float(mat4x3(_GLF_FUZZED(-9.4), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4376.6584)), bool(false))), 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0)))))), transpose(transpose(mat4x2(0.0, sqrt(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.2)))), 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0)))))))), 0.0, 1.0, 0.0))))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, max(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(_GLF_IDENTITY(13.84, (_GLF_IDENTITY(13.84, _GLF_IDENTITY(float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))) - 0.0))) - 0.0)) : -311.515)), _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-84.16)), float(-311.515), bool(_GLF_IDENTITY(true, (true) && true)))))), (false ? _GLF_FUZZED(-9752.6069) : -311.515))), float(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, max(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(_GLF_IDENTITY(13.84, (_GLF_IDENTITY(13.84, _GLF_IDENTITY(float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))) - 0.0))) - 0.0)) : -311.515)), _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-84.16)), float(-311.515), bool(_GLF_IDENTITY(true, (true) && true)))))), (false ? _GLF_FUZZED(-9752.6069) : -311.515))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, max(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(_GLF_IDENTITY(13.84, (_GLF_IDENTITY(13.84, _GLF_IDENTITY(float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0)), (float(mat3x4(13.84, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0))) - 0.0))) - 0.0)) : -311.515)), _GLF_IDENTITY(-311.515, mix(float(_GLF_FUZZED(-84.16)), float(-311.515), bool(_GLF_IDENTITY(true, (true) && true)))))), (false ? _GLF_FUZZED(-9752.6069) : -311.515)))) * 1.0))))), bvec2(false, false)))[0])))) / 1.0))), injectionSwitch[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[0]))), (_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), (vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))) * mat2(1.0)), bvec2(false, false))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), (vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))) * mat2(1.0)), bvec2(false, false)))))[0]), mix(float(_GLF_FUZZED(9.8)), float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[0])), bool(true)))))) + 0.0), injectionSwitch[1])))).y, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, determinant(mat4(1.0, log(1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), sin(0.0), 1.0, 0.0))), mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))), (injectionSwitch)))[0], float(vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), vec2(_GLF_IDENTITY(mat3((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), 0.0, sin(0.0), 1.0, tan(0.0), 0.0, 0.0, 1.0), (mat3((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), 0.0, sin(0.0), 1.0, tan(0.0), 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (injectionSwitch)))[0], 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))[0]))), injectionSwitch[1]), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(acos(6860.9192)) : injectionSwitch[0])), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(vec2(-9958.4930, -1948.9597).y), _GLF_IDENTITY((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]))[1], float(mat3x4((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]))[1], 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), log(1.0), 0.0)))), vec2((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]))[0], _GLF_FUZZED(float(false))), bvec2(true, false))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0))], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch), (injectionSwitch))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(injectionSwitch)) : (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[_GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * (0)), 0, 0))) / 1), (0) | 0), 0))], (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(injectionSwitch)) : (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))[_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0))] : _GLF_FUZZED(_GLF_IDENTITY(6.2, (6.2) - 0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(1.7)), (float(_GLF_FUZZED(1.7))) - 0.0), bool(false)))))), injectionSwitch[1]), vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY((bvec3(true) , _GLF_IDENTITY(40630, (40630) ^ 0)), ((bvec3(true) , _GLF_IDENTITY(40630, (40630) ^ 0))) + (0 >> _GLF_IDENTITY(int(3), int(3)))))))], float(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), min(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), min(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), clamp(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), 1.0 * (_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))) * mat2(1.0)))), (_GLF_IDENTITY(mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), min(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(vec2((injectionSwitch))))[1]), min(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, min(-311.515, -311.515)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-9752.6069), (true ? _GLF_FUZZED(-9752.6069) : _GLF_FUZZED(8.3))) : -311.515))), clamp(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), 1.0 * (_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-55172) : 1))]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))) * mat2(1.0))))) - vec2(0.0, 0.0)))[0]))), injectionSwitch[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (_GLF_IDENTITY(false ? _GLF_FUZZED(-9752.6069) : -311.515, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, false)), ! (! (bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, false)))))))) ? _GLF_FUZZED(-9752.6069) : -311.515, 0.0), (vec2(false ? _GLF_FUZZED(-9752.6069) : -311.515, 0.0)) * vec2(1.0, 1.0)))))))), bvec2(_GLF_IDENTITY(false, false || (false)), false)))[_GLF_IDENTITY(0, (0) << 0)]))), injectionSwitch[1])))).y, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.7)), float(1.0), bool(true)))), (false ? _GLF_FUZZED(mat2(mat2x3(8.1, 5.0, -6.7, 67.86, -270.733, -0.4))) : mat2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, determinant(mat4(1.0, log(1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), sin(0.0), 1.0, 0.0))), mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))), (injectionSwitch)))[0], float(vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), vec2(_GLF_IDENTITY(mat3((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), 0.0, sin(0.0), 1.0, tan(0.0), 0.0, 0.0, 1.0), (mat3((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch))), 0.0, sin(0.0), 1.0, tan(0.0), 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (injectionSwitch)))[0], 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))[0]))), injectionSwitch[1]), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(acos(6860.9192)) : injectionSwitch[0])), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(vec2(-9958.4930, -1948.9597).y), _GLF_IDENTITY((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]))[1], float(mat3x4((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]))[1], 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), log(1.0), 0.0)))), vec2((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))) : (injectionSwitch)))[0], (injectionSwitch)[1]))[0], _GLF_FUZZED(float(false))), bvec2(true, false))), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0))], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch), (injectionSwitch))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(injectionSwitch)) : (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)))[_GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * (0)), 0, 0))) / 1), (0) | 0), 0))], (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(injectionSwitch)) : (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))[_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0))] : _GLF_FUZZED(_GLF_IDENTITY(6.2, (6.2) - 0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(1.7)), (float(_GLF_FUZZED(1.7))) - 0.0), bool(false)))))), injectionSwitch[1]), vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY((bvec3(true) , _GLF_IDENTITY(40630, (40630) ^ 0)), ((bvec3(true) , _GLF_IDENTITY(40630, (40630) ^ 0))) + (0 >> _GLF_IDENTITY(int(3), int(3)))))))], float(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), min(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), min(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), clamp(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), 1.0 * (_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))) * mat2(1.0)))), (_GLF_IDENTITY(mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), min(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(vec2((injectionSwitch))))[1]), min(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-9.4), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-311.515, min(-311.515, -311.515)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-9752.6069), (true ? _GLF_FUZZED(-9752.6069) : _GLF_FUZZED(8.3))) : -311.515))), clamp(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))), 1.0 * (_GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515))))), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))))), bvec2(false, false)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-55172) : 1))]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (false ? _GLF_FUZZED(-9752.6069) : -311.515)))), bvec2(false, false))) * mat2(1.0))))) - vec2(0.0, 0.0)))[0]))), injectionSwitch[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(_GLF_IDENTITY(-311.515, (_GLF_IDENTITY(false ? _GLF_FUZZED(-9752.6069) : -311.515, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, false)), ! (! (bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, false)))))))) ? _GLF_FUZZED(-9752.6069) : -311.515, 0.0), (vec2(false ? _GLF_FUZZED(-9752.6069) : -311.515, 0.0)) * vec2(1.0, 1.0)))))))), bvec2(_GLF_IDENTITY(false, false || (false)), false)))[_GLF_IDENTITY(0, (0) << 0)]))), injectionSwitch[1])))).y, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.7)), float(1.0), bool(true))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))) || false)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))) || false))))))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((0 & -51058) & -49484); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true, false)), (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true, false))) && true)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       buf[GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_11num_workgroupread_valsubgroup_idvirtual_gid.y));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 ^ (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, ~ (~ (0))))))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
