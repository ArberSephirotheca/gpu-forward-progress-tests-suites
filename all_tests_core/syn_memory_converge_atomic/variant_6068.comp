#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), (_GLF_IDENTITY(int(7), int(int(int(7))))) >> 0)))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-93.79))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), injectionSwitch.y), min(min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-93.79))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), injectionSwitch.y), min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-93.79))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), injectionSwitch.y))))))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), ~ (~ (0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-99081) : 0))), int(7))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, false, false, true)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x), (true ? _GLF_IDENTITY((gl_NumWorkGroups.x), ~ (~ ((gl_NumWorkGroups.x)))) | (gl_NumWorkGroups.x) : _GLF_FUZZED(162333u)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (false ? _GLF_FUZZED((bvec2(false, true) , 130937u)) : _GLF_FUZZED(subgroup_id)))) | (_GLF_FUZZED(subgroup_id))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)) : _GLF_FUZZED(subgroup_id)), 1u * ((true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)) : _GLF_FUZZED(subgroup_id))))), min(_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)) : _GLF_FUZZED(subgroup_id))))) : _GLF_FUZZED((write_val * subgroup_size)))) : _GLF_FUZZED(192006u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, true && (true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true)))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0 * (injectionSwitch.y), max(1.0 * (injectionSwitch.y), 1.0 * (injectionSwitch.y))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), true))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))), min((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0)))))))) | (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), min(~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)), ~ (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) ^ 0)))))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), ~ (~ (_GLF_IDENTITY(1, (1) << 0))))) - 0), 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, 0 | (0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(3)))), max(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))), 1 * ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))))))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3))), (int(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)))) | (int(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)))))))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), ((0)) * ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 0))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), 0 + ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) * (int(3)))), max(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) * 1)) | (_GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, clamp(7, 7, 7)), int(ivec4(_GLF_IDENTITY(7, clamp(7, 7, 7)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))), int(7))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, clamp(7, 7, 7)))))))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, clamp(7, 7, 7))))))))) | (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, clamp(7, 7, 7)))))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))), _GLF_IDENTITY(1, (1) + (0 ^ 0)) * ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))))))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), int(ivec4(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), _GLF_IDENTITY(1, min(1, 1)), 1, 0)))), max(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), int(ivec4(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), _GLF_IDENTITY(1, min(1, 1)), 1, 0)))), int(_GLF_IDENTITY(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), int(ivec4(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), _GLF_IDENTITY(1, min(1, 1)), 1, 0))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(3, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (3)), ~ (~ (_GLF_IDENTITY(3, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (true ? (0 << _GLF_IDENTITY(int(8), int(8))) : _GLF_FUZZED(_injected_loop_counter))))) ^ (_GLF_IDENTITY(3, ~ (~ (3)))))))))))))))))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0))) / 1)), int(ivec3(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0))) / 1)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> _GLF_IDENTITY(int(3), int(3))), min(1 & (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(_injected_loop_counter)))), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), ~ (~ (int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (3) / 1), 3, 3))))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))), 0 ^ (_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), (true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(_injected_loop_counter)))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | (~ (int(3))))) / 1)))), ~ (~ ((_GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) | (~ (int(3))))) / 1))))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, clamp(3, 3, 3))) / 1)))))))))))), 0))) / 1)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) + (0 >> _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(1 & (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0))) / 1)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))), (_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))))) ^ (0 << _GLF_IDENTITY(int(5), int(5)))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))))), clamp(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))))), 1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))))), 1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))))), 0))) / 1))) - (-95208 & 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))), min(1 & (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0))) / 1)), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (int(3))), ((~ (int(3)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), clamp((~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), (true ? (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), clamp((~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))) : _GLF_FUZZED(_injected_loop_counter))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0))) / 1))))) >> _GLF_IDENTITY(int(3), int(3))), 1 & (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))), ~ (~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), (~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))) | (~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))))), 0)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), (int(int(int(3)))) | 0)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), ~ (~ (int(3))))))))))), 0))) / 1)) >> _GLF_IDENTITY(int(3), int(3))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), true, true))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec4((false) || false, true, false, false)), (bool(bvec4((false) || false, true, false, false))) && true)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec2((false), true))) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || false), true))) || _GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(true, (true) && true)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(false, ! (! (false))), false, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), bool(bvec2((false), true))) || _GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, ! (! (false))), false, false)), false, true))), false, false)), true && (bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bvec2((false), true))) || _GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bvec3((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY((false), bool(bvec3((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY((false), bool(bvec2((false), true))) || _GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true)))), false, false)), false, true))), false, false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(sqrt(vec2(0.0, 0.0)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(sqrt(vec2(0.0, 0.0)))))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.6)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), min(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) : _GLF_FUZZED(uint(true)))) + subgroup_local_id) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-4.7, 55.94), clamp(vec2(-4.7, 55.94), vec2(-4.7, 55.94), vec2(-4.7, 55.94)))))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((7875.2209 - vec2(-48.61, 4764.7074))))).y))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), max((1 << _GLF_IDENTITY(int(3), int(3))), (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) ^ 0))) : _GLF_FUZZED(ivec4(-42805, 78144, 48328, 62463).x)))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) / 1, ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))), int(3))), int(3)))) / 1) + 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, sin(0.0), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), mat4(1.0) * (mat3x4(injectionSwitch.x, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, sin(0.0), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))))))) + (int(5))), int(5))), int(ivec2((_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> _GLF_IDENTITY(0, max(0, 0)))), int(3))), _GLF_IDENTITY(int(int((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> _GLF_IDENTITY(0, max(0, 0)))), int(3))))), _GLF_IDENTITY(int(ivec2(int(int((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> _GLF_IDENTITY(0, max(0, 0)))), int(3))))), 1)), 0 + (int(ivec2(int(int((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> _GLF_IDENTITY(0, max(0, 0)))), int(3))))), 1)))))) >> _GLF_IDENTITY(int(3), int(3)))) / _GLF_IDENTITY(1, min(1, 1))) << _GLF_IDENTITY(int(5), int(5))), 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), int(ivec2(int(5), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), true)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false)))))), (false) || false))))))), false || (_GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), true)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false)))))), (false) || false))))))), true && ((! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), true)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false)))))), (false) || false)))))))))))))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, (false) && true)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (_GLF_IDENTITY(false, (false) && true))))))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), false, true))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-782.214), _GLF_FUZZED(299.072)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(asin(-4.9)) : injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, false)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, false)), false)))), true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(! (! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec3(! (! (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, false)))))))))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
    {
    }
   else
    {
     atomicStore(write_val, _GLF_IDENTITY(uint(virtual_gid), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), _GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), min(_GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), 0u ^ (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(write_val), 1u * (_GLF_FUZZED(write_val))) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), (false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid))) >> 0u)))))))), clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)))))) << 0u, _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(uint(virtual_gid), _GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), min(_GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(uint(8.6)))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), (false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid))) >> 0u))))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), (false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid))) >> 0u)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)))))) << 0u, (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) ^ 0u))) ^ 1u), 1u)), ~ (~ (uint(uvec3((_GLF_IDENTITY(uint(virtual_gid), _GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), min(_GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) | (virtual_gid)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), 0u ^ (_GLF_IDENTITY(false ? _GLF_FUZZED(write_val) : _GLF_IDENTITY(clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), min(clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(write_val, (_GLF_IDENTITY(write_val, min(write_val, write_val))) | (write_val))) : clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)), (false ? _GLF_FUZZED(write_val) : clamp(uint(virtual_gid), _GLF_IDENTITY(uint(virtual_gid), (uint(virtual_gid)) | 0u), uint(virtual_gid))) >> 0u)))))))), clamp(uint(virtual_gid), uint(virtual_gid), uint(virtual_gid)))))) << 0u, (_GLF_IDENTITY(1u, (1u) >> 0u) ^ 1u), 1u))))))), 4, 64, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))));
    }
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, 4, 64, _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), (false ? _GLF_FUZZED(ivec2(2121, 88485)) : ivec2(0, 0))))));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (false))), false, false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false)))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false))), bool(bvec2(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false))), true))))))), true && (! _GLF_IDENTITY(((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false))))))), ! (! (((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false))))))))))))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)), false || (bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3(! (_GLF_WRAPPED_IF_TRUE(true)), false, false))))))
    {
     buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, clamp(read_val, read_val, read_val))));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))) || false))))));
      }
    }
  }
}
