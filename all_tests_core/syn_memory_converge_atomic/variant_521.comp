#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))), false || (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))), bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)), ! (! (bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), clamp((1 ^ 1), (1 ^ 1), (1 ^ 1)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base;
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), true && (false || (_GLF_IDENTITY(false, true && (false))))))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, clamp(5, 5, 5)), 5, _GLF_IDENTITY(5, max(5, 5))))), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))), false || (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, clamp(5, 5, 5)), 5, _GLF_IDENTITY(5, max(5, 5))))), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), min(ivec4(5, 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(ivec4(5, 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec4(5, 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(5, 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(5, 0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true))))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y = subgroup_size;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (false ? _GLF_FUZZED(3.6) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (false ? _GLF_FUZZED(641.681) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.5)), vec2(_GLF_FUZZED(-1.9), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x), float(_GLF_FUZZED(-3.3)), bool(false))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     _GLF_IDENTITY(GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.y = subgroup_local_id, _GLF_IDENTITY((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.y = subgroup_local_id) | 0u, 1u * (_GLF_IDENTITY((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.y = subgroup_local_id) | 0u, 0u ^ ((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.y = subgroup_local_id) | 0u)))));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false), bool(bool(! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u))), 1u)))))), gl_NumWorkGroups.x)))) / 1u, max((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))).x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, min((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | 0u)) * 1u))), gl_NumWorkGroups.x)))) / 1u)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u))), 1u)))))), gl_NumWorkGroups.x)))) / 1u, max((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))).x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, min((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | 0u)) * 1u))), gl_NumWorkGroups.x)))) / 1u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u))), 1u)))))), gl_NumWorkGroups.x)))) / 1u, max((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))).x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, min((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | 0u)) * 1u))), gl_NumWorkGroups.x)))) / 1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u))), 1u)))))), gl_NumWorkGroups.x)))) / 1u, max((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))).x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, min((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | 0u)) * 1u))), gl_NumWorkGroups.x)))) / 1u))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u))), 1u)))))), gl_NumWorkGroups.x)))) / 1u, max((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))).x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, min((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | 0u)) * 1u))), gl_NumWorkGroups.x)))) / 1u))))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 0u))), 1u)))))), gl_NumWorkGroups.x)))) / 1u, max((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))).x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, min((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u))))))) | 0u)) * 1u))), gl_NumWorkGroups.x)))) / 1u))))))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), 0u | (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - (_GLF_IDENTITY(0u | 0u, 1u * (_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, ~ (~ (0u))))) | 0u)))), gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))))), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)).x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[0], uint(uint(gl_NumWorkGroups[0]))), gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 1u))), gl_NumWorkGroups))[_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, 2))))])).x, gl_NumWorkGroups.x))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u)))).x, gl_NumWorkGroups.x))), (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((subgroup_local_id >> subgroup_local_id)) : gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, min(1u, 1u)))))))))), gl_NumWorkGroups.x)))) / _GLF_IDENTITY(1u, (1u) | 0u)), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))), (~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), (_GLF_IDENTITY(~ (gl_NumWorkGroups), (~ (gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))), (_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(uvec3(45756u, 96977u, 157456u)) : _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, 1u * (1u)), 1u)))).x, 1u))))) - (uvec2(1u, 1u) ^ uvec2(1u, 1u))))), gl_NumWorkGroups.x))))) | 0u)), ((_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))), (~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), (_GLF_IDENTITY(~ (gl_NumWorkGroups), (~ (gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)))).x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))), (_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(uvec3(45756u, 96977u, 157456u)) : _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, _GLF_IDENTITY(1u, 1u * (1u)), 1u)))).x, 1u))))) - (uvec2(1u, 1u) ^ uvec2(1u, 1u))))), gl_NumWorkGroups.x))))) | 0u))) | 0u))) / 1u) : _GLF_FUZZED(_GLF_IDENTITY(write_val, ~ (~ (write_val))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((subgroup_local_id >> subgroup_local_id)) : gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((subgroup_local_id >> subgroup_local_id)) : gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u, ((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((subgroup_local_id >> subgroup_local_id)) : gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u) | ((~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((subgroup_local_id >> subgroup_local_id)) : gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))) / 1u))) << 0u)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, 1u))), _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))))), gl_NumWorkGroups.x)))), (~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(gl_NumWorkGroups.x, 1u)))), (_GLF_IDENTITY(uvec2(gl_NumWorkGroups.x, 1u), ~ (~ (uvec2(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(45756u, 96977u, 157456u)) : _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)))).x, 1u))))) - (uvec2(1u, 1u) ^ uvec2(1u, 1u))))), gl_NumWorkGroups.x))))) | 0u)))) / 1u) : _GLF_FUZZED(write_val))))) - (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) / 1u))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))), 0u | (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)))).x))))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  return;
 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x = num_workgroup;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u ^ (gl_WorkGroupID.x));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size) | (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x, clamp(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, clamp(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, cos(0.0), 1.0, sqrt(1.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, log(1.0), 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, log(1.0), 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y)))).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec3(1, 0, 1)))))), ~ (~ (int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 1) & 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))) || false)))))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.z = workgroup_base;
 uint virtual_gid = GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.z + subgroup_id * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y + _GLF_IDENTITY(GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base, ~ (~ _GLF_IDENTITY((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base), clamp((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base), (GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base), _GLF_IDENTITY((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base), min((GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base), (GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base))))))).y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(asin(injectionSwitch)) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(vec2(57.25, 7.5)))), injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-65.12, _GLF_IDENTITY(0.2, (true ? 0.2 : _GLF_FUZZED(cosh(2949.0670)))))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 1), ~ (~ (ivec3(_injected_loop_counter, 1, 1)))))) < int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       barrier();
      }
    }
   GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.x = read_val;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) ^ 1)); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, 0 | (0))], _GLF_FUZZED(-7.5)), vec2(_GLF_FUZZED((_GLF_IDENTITY(-672.631, (-672.631) / 1.0) / 9027.0799)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * round(length(normalize(vec3(1.0, 1.0, 1.0)))))), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0)))), bvec2(false, true))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9190.4228, 718.057)))))), injectionSwitch)).y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.x)), (_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.x)), (uint(subgroupAllEqual(GLF_merged3_0_1_8_1_1_17_2_1_14read_valsubgroup_local_idworkgroup_base.x))) >> 0u)) - 0u);
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (int(1)) ^ (-83476 & 0))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))).y))))
      return;
    }
  }
}
