#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat3 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 mat3 _f3;
 uvec2 _f4;
 bvec4 _f5;
 bvec4 _f6;
 uint workgroup_id;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 mat4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 ivec4 _f1;
 bool _f2;
 mat4x3 _f3;
 vec3 _f4;
 int _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 bvec3 _f1;
 mat4 _f2;
 uint workgroup_size;
 _GLF_struct_2 _f3;
 mat2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > ((-8256 * -4347) & 0), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter > ((-8256 * -4347) & 0)), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > ((-8256 * -4347) & 0)), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter > ((-8256 * -4347) & _GLF_IDENTITY(0, (0) | (0)))), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > ((-8256 * -4347) & 0)), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter > ((-8256 * -4347) & _GLF_IDENTITY(0, (0) | (0)))), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > ((-8256 * -4347) & 0)), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0)))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter > ((-8256 * -4347) & 0)), true && (! (_injected_loop_counter > _GLF_IDENTITY(((-8256 * -4347) & 0), clamp(((-8256 * -4347) & 0), _GLF_IDENTITY(((-8256 * -4347) & 0), (((-8256 * -4347) & 0)) | (((-8256 * -4347) & 0))), _GLF_IDENTITY(((-8256 * -4347) & 0), (((-8256 * -4347) & 0)) | (((-8256 * -4347) & 0)))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > ((-8256 * -4347) & 0)), true && (! (_injected_loop_counter > ((-8256 * -4347) & 0)))))))))))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(bool(bvec4(false, true, false, false)), false, false))))));
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1736.6676) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4998.4470)), float(injectionSwitch.x), bool(true))))), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))) && true)))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, true, false)))) && true)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) | 0) & int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, (0) | (0))))); _injected_loop_counter --)
        {
         do
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -80535), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter > (0 & -80535)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter > (0 & -80535)), true, false, false))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) / 1)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false)), false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(! (! (bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (_GLF_IDENTITY(bool((! (false))), (bool((! (false)))) || false))))))))))), ! (! (! (! (bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), false, true))))), (bool(_GLF_IDENTITY(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), false, true)))))) || false)))), (bool((! (false)))) || false))))))))))))))))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (~ (0))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = (0 ^ (0 & (-65503 + -18678))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, false, false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)) || false), bool(bool(_GLF_IDENTITY(true, (true) || false))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         do
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(true ? (+ -3.6) : 9.3, max(_GLF_IDENTITY(true ? (+ -3.6) : 9.3, min(true ? (+ -3.6) : 9.3, true ? (+ -3.6) : 9.3)), true ? (+ -3.6) : 9.3))))), float(1.0), bool(true))), injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                }
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), mix(vec3(_GLF_FUZZED(-4.2), _GLF_FUZZED(1.0), (vec3(0.0, 1.0, 0.0))[2]), vec3((vec3(0.0, 1.0, 0.0))[0], (vec3(0.0, 1.0, 0.0))[1], _GLF_FUZZED(4276.0810)), bvec3(true, true, false))))) * (injectionSwitch.x)), (false ? _GLF_FUZZED(cosh(-6.3)) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) * (injectionSwitch.x)))) > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), min(1 << _GLF_IDENTITY(int(2), int(2)), 1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), ! (! ((_GLF_IDENTITY(! (false), (! (false)) || false))))))));
                }
               else
                {
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), _GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))), _GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY(transpose(_GLF_IDENTITY(_GLF_IDENTITY(transpose(mat4(1.0)), (transpose(mat4(1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, _GLF_IDENTITY(0.0, abs(1.0) * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.4))))), 0.0, 0.0)), (_GLF_IDENTITY(transpose(mat4(1.0)), (_GLF_IDENTITY(transpose(mat4(1.0)), transpose(_GLF_IDENTITY(transpose(transpose(mat4(1.0))), transpose(_GLF_IDENTITY(transpose(transpose(transpose(mat4(1.0)))), (true ? transpose(transpose(transpose(mat4(1.0)))) : _GLF_FUZZED(mat4(2.0, 59.21, -1.9, 44.99, 1117.6821, -3355.6678, -9.3, 6.2, _GLF_IDENTITY(5776.8878, mix(float(5776.8878), float(_GLF_FUZZED(-3.4)), bool(false))), 4.4, 9.7, 35.85, -4.1, 0.0, -11.41, -1847.6434))))))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)))) + (0.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, _GLF_IDENTITY(0.0, abs(1.0) * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.4))))), 0.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (true ? transpose(_GLF_IDENTITY(transpose(mat4(1.0)), (transpose(mat4(1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, _GLF_IDENTITY(0.0, abs(1.0) * (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.4))))), 0.0, 0.0))) : _GLF_FUZZED(mat4(-47.02, -2.7, -1.9, 18.64, -5.8, -711.655, 3.3, -7962.7998, -3850.8592, -40.57, _GLF_IDENTITY(6.3, min(6.3, 6.3)), 3.9, -9195.7129, -9207.8646, 3491.7682, 6856.0746))))), gl_WorkGroupSize.x, _GLF_struct_2(_GLF_struct_0(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, max(1u, 1u)))), 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(_GLF_IDENTITY(write_val, ~ (~ (_GLF_IDENTITY(write_val, max(write_val, write_val)))))) : 1u)))))))), (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) * uvec3(1u, 1u, 1u))) | uvec3(0u, _GLF_IDENTITY(0u, uint(uint(0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) | (0u)))), (_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) | (0u))))) / 1u))), ivec4(1), true, mat4x3(1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), min(vec3(1.0), vec3(1.0))), 1), _GLF_struct_1(mat4x2(1.0), mat4(1.0), ivec3(1)), ivec4(1)), mat2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat3(1.0), mat2x3(1.0), mat2x4(1.0), mat3(1.0), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) ^ 0u), _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u)))), 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), clamp(_GLF_IDENTITY(1u, _GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), _GLF_IDENTITY((_GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)) | (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)) | (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), ((_GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))))), 1u), (min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (_GLF_IDENTITY(1u, min(1u, 1u)))), 1u)) | (min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), ((1u) | (1u)) - 0u)), 1u))))) | ((_GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)) | (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))))))) ^ 0u) << 0u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((_GLF_IDENTITY(1u, max(1u, 1u)))) ^ 0u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u)))) | (1u)), 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), clamp(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u))), ~ (~ ((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) | (1u)))), 1u)))))) | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u)))))))) ^ 0u), 1u)), clamp(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u))), ~ (~ ((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(1u, 0u ^ (1u)) * (1u))))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))), ((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))) - 0u)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(write_val) : (1u))), (1u))) | (1u)), 1u)), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (1u)), (1u) | (1u)), 1u)), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))) | 0u))), clamp(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), clamp(_GLF_IDENTITY((1u) | (1u), clamp(_GLF_IDENTITY((1u) | (1u), ((1u) | (1u)) / 1u), (1u) | _GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), (1u) | (1u))), (1u) | (1u), (1u) | (1u)))), 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u), (min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u)) - 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u), (min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u)) - 0u)), (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u), (min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u)) - 0u))) | 0u)) * 1u))))), ~ (~ ((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (0u ^ 0u) ^ (_GLF_IDENTITY((1u), max((1u), (1u))))) | (1u)), 1u)))))) | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u | (1u)))), 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) >> 0u), min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), clamp(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(1u * (1u), 1u * (1u * (1u))))) | (1u)), 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (1u) | (1u)), 1u))), ~ (~ ((_GLF_IDENTITY(1u, _GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), (_GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u), (min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)) - 0u)) + 0u)))))) | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))))))), max(min(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), clamp(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) | (1u)))))), 1u, (0u | 0u))))) << (_GLF_IDENTITY(14144u & 0u, ~ (~ (_GLF_IDENTITY(14144u & 0u, max(14144u & 0u, 14144u & 0u))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED((++ (subgroup_id))))), 1u), max(min(1u, 1u), min(1u, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) | (_GLF_IDENTITY(~ (~ (1u)), 0u + (~ (~ (1u)))))))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, 0u + (1u)))))), 1u, 1u)), (uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u))) * 1u)), 1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), ((_GLF_IDENTITY(1u, ~ (~ (1u))))) - 0u), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u)), (uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u))) * 1u)), 1u))), (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), (~ (1u)) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), (~ (_GLF_IDENTITY(~ (1u), (~ (1u)) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))) | (~ (_GLF_IDENTITY(~ (1u), (~ (1u)) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u)), _GLF_IDENTITY((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), min((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), _GLF_IDENTITY((~ (~ (1u))) / 1u, uint(uvec2(_GLF_IDENTITY((~ (~ (1u))) / 1u, ((~ (~ (1u))) / 1u) | 0u), 1u)))))))), 1u, 1u))), (uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1u), ((1u)) | 0u)), (~ (~ (_GLF_IDENTITY(1u, max(1u, 1u))))) / 1u))))), 1u, 1u))))) * 1u)), 1u))), (0u | 0u) | _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((~ (1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((~ (1u)))) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), uint(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((~ (1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((~ (1u)))) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), min(~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((~ (1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((~ (1u)))) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((~ (1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((~ (1u)))) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), uint(uvec4((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u, 0u))))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1u, (1u) - 0u), 1u)))), _GLF_IDENTITY((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), min((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ (1u))))), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), clamp(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u), (_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u)) << 0u))))), 1u, 1u), max(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), max((1u), (1u)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(111191u), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(111191u)), 0u + (_GLF_IDENTITY(~ (_GLF_FUZZED(111191u)), (~ (_GLF_FUZZED(111191u))) ^ 0u))))) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), _GLF_IDENTITY((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u)), max((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u)), _GLF_IDENTITY((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u)), ((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))) | ((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))))))), 1u, 1u))), uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))))))) * 1u)), 1u)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((~ (1u)), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ~ (_GLF_IDENTITY(~ ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))), clamp(~ ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))), ~ ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))), ~ ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))))))) ^ ((~ _GLF_IDENTITY((1u), 1u * ((1u)))))) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), ~ (~ (1u)))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), max(_GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(1u, (1u) - 0u), 1u)))), _GLF_IDENTITY((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), _GLF_IDENTITY((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u)), ((false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1u, 1u))), min((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ _GLF_IDENTITY((1u), ((1u)) / 1u))))), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), clamp(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), max(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(0u, 0u) ^ (uvec2(1u, 1u))))), 1u), uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1u), uint(uint(_GLF_IDENTITY((1u), ~ (~ ((1u)))))))), (~ (~ (1u))) / 1u))))), 1u, 1u))))))) * 1u)), 1u)))), (false ? _GLF_FUZZED(subgroup_local_id) : (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (~ (_GLF_FUZZED(num_workgroup)))) : _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((~ (1u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((~ (1u)))) + (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), ~ (~ (1u)))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1u, (1u) - 0u), 1u)))), _GLF_IDENTITY((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), min((uint(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ (1u))))), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u)) + 0u))))))))), _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(write_val))))), 1u), clamp(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), max(uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u), uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), min(~ (1u), _GLF_IDENTITY(~ (1u), (~ (1u)) ^ 0u)))), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))), uvec3((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1u, max(1u, 1u)))), (false ? _GLF_FUZZED(111191u) : _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) / 1u))))), 1u, 1u))))))) * 1u)), 1u))))))) >> 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id))) : _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), uint(uvec2(_GLF_IDENTITY(~ (1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (1u))), 1u)))), ~ (~ (_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ (1u)))))), ~ (~ (~ (_GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ (1u))))))))))), ~ (~ (1u))))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u)), (uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u))) * 1u)), 1u))), _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((1u), 0u ^ ((1u)))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((1u), max((1u), (1u))), 0u ^ ((1u))))) >> ((0u | 0u) << _GLF_IDENTITY(uint(6u), uint(6u)))), (~ (~ (1u))) | 0u))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), 1u, _GLF_IDENTITY(1u, 1u * (1u)))), (uint(uvec3((_GLF_IDENTITY(1u, ~ (~ (1u)))), 1u, 1u))) * 1u)), 1u))))) | (1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, 1u), (_GLF_IDENTITY(min(1u, 1u), clamp(min(1u, 1u), min(1u, 1u), min(1u, 1u)))) ^ 0u)), (1u) | (1u)) : _GLF_FUZZED(num_workgroup))), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, uint(uvec3(false ? _GLF_FUZZED(104405u) : 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) ^ 0u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, 1u * (false ? _GLF_FUZZED(104405u) : 0u)), false ? _GLF_FUZZED(104405u) : 0u, false ? _GLF_FUZZED(104405u) : 0u)), 0u, (1u ^ 1u))), max(uint(uvec3(false ? _GLF_FUZZED(104405u) : 0u, 0u, (1u ^ 1u))), uint(uvec3(false ? _GLF_FUZZED(104405u) : 0u, 0u, (1u ^ 1u))))))))))), _GLF_IDENTITY(~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), min(_GLF_IDENTITY(~ _GLF_IDENTITY((~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), max((~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))))), clamp(~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))))))), (true ? _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 1u)))))), ((1u)) / 1u) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u))), (1u) | (_GLF_IDENTITY(1u, uint(uvec2(1u, _GLF_IDENTITY(1u, 1u * (1u))))))), 1u), 0u | (min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, uint(uvec3(false ? _GLF_FUZZED(104405u) : 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) ^ 0u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(104405u) : 0u, 1u * (false ? _GLF_FUZZED(104405u) : 0u)), false ? _GLF_FUZZED(104405u) : 0u, false ? _GLF_FUZZED(104405u) : 0u)), 0u, (1u ^ 1u))), max(uint(uvec3(false ? _GLF_FUZZED(104405u) : 0u, 0u, (1u ^ 1u))), uint(uvec3(false ? _GLF_FUZZED(104405u) : 0u, 0u, (1u ^ 1u))))))))))), _GLF_IDENTITY(~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), min(_GLF_IDENTITY(~ _GLF_IDENTITY((~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), max((~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))))), clamp(~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104405u) : 0u))))))))))), (true ? _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 1u)))))), ((1u)) / 1u) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u))), (1u) | (_GLF_IDENTITY(1u, uint(uvec2(1u, _GLF_IDENTITY(1u, 1u * (1u))))))), 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), (1u) | (1u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u))) * (1u)))), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | (1u)))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(1u, (1u) | (1u))))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))))))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))))))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u)) / 1u)), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))))))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))))))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u)) / 1u)), 0u + ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))))))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))))))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u)) / 1u)))), 0u))), ~ (~ (((~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), (_GLF_IDENTITY((1u) | (1u), (_GLF_IDENTITY((1u) | (1u), (true ? (1u) | (1u) : _GLF_FUZZED(subgroup_id)))) << 0u)) | ((1u) | (1u)))))))))) : _GLF_FUZZED(subgroup_size))), (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(1u, (1u) | (1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))) | ((1u))) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))), max((_GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) ^ 0u), (1u) | (1u))))))))) >> 0u)), ~ (~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) : _GLF_FUZZED(subgroup_size)))) >> ((0u >> _GLF_IDENTITY(uint(4u), uint(4u))) | 0u))))), 1u, 1u), (clamp(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))))), (1u) | (1u)))), ~ (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)))), (1u) | (1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(write_val) : _GLF_IDENTITY((1u), (true ? (1u) : _GLF_FUZZED(packHalf2x16(vec2(86.01, 68.82)))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY((1u), ((1u)) / 1u))), (~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u)), ~ (~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) : _GLF_FUZZED(subgroup_size)))))), 1u, 1u)) >> 0u), (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), 0u ^ ((1u))) | (1u)))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(1u, (1u) | (1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), 0u + (_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_IDENTITY(1u, (1u) | (1u))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), 0u + (_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_IDENTITY(1u, (1u) | (1u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), 0u + (_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_IDENTITY(1u, (1u) | (1u))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), 0u + (_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_IDENTITY(1u, (1u) | (1u))))))))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (1u))), (~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) | (1u))))))) >> 0u)), ~ (~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) : _GLF_FUZZED(subgroup_size))), (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(1u, (1u) | (1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (1u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) | (1u)))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) << 0u)) | 0u))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))) >> 0u)), ~ _GLF_IDENTITY((~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u))))))), ((~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) | ((~ (((~ (_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), ~ (~ ((1u))))))))))))) : _GLF_FUZZED(subgroup_size)))) >> (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))) | 0u, uint(uvec4((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u), uint(4u))) | 0u, 0u, 1u, 0u)))))))), 1u, 1u), _GLF_IDENTITY((clamp(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | (1u)))), ~ (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) | (uint(8u))))))) : _GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (1u) | 0u), 0u))))))), (1u) | (1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(write_val) : (1u)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (1u))), _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) * 1u))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u)))) >> 0u)), ~ (~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) : _GLF_FUZZED(subgroup_size)))))), 1u, 1u)) >> 0u, 0u ^ ((clamp(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | (1u)))), ~ (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (1u) | 0u), 0u))))))), (1u) | (1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), (~ (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), (1u) | (1u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(write_val) : (1u)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (1u))), _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u)))), ((~ (_GLF_IDENTITY(1u, (1u) | (1u)))) | (~ (_GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u)))) >> 0u)), ~ (~ (((~ (_GLF_IDENTITY(1u, (1u) | (1u)))))))) : _GLF_FUZZED(subgroup_size)))))), 1u, 1u)) >> 0u))) : _GLF_FUZZED(36125u)))), _GLF_IDENTITY((1u), min((1u), (1u))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u + (1u))) / 1u))), 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))), 1u)), min(1u, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) - 0u), _GLF_IDENTITY(0u + ((1u)), 0u ^ (0u + ((1u)))))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) << 0u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u)), 1u), (_GLF_IDENTITY(min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), _GLF_IDENTITY(0u + ((1u)), 0u ^ (0u + ((1u)))))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u)), 1u), (min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), _GLF_IDENTITY(0u + ((1u)), 0u ^ (0u + ((1u)))))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + _GLF_IDENTITY(((1u)), 0u + (((1u))))))) << 0u))))) | (1u)), 1u)) | (min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), _GLF_IDENTITY(0u + ((1u)), 0u ^ (0u + ((1u)))))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u)), 1u)))) | (min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), _GLF_IDENTITY(0u + ((1u)), 0u ^ (0u + ((1u)))))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u)), 1u))), (_GLF_IDENTITY(min(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, 0u + (1u)) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + _GLF_IDENTITY(((1u)), ~ (~ (((1u)))))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))), (uint(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), uint(uint(_GLF_IDENTITY((1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (1u)))))))))) << 0u))))) | (1u)), 1u), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(clamp(subgroup_size, subgroup_local_id, subgroup_local_id)))) ^ (min(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u), (false ? _GLF_FUZZED(atomicMax(subgroup_local_id, clamp(subgroup_local_id, subgroup_id, num_workgroup))) : _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u))), (_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) - 0u))))), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))) | (1u)) | (_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u))))), uint(uint(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((_GLF_IDENTITY(1u, (1u) ^ 0u))))), (uint(_GLF_IDENTITY((1u), 0u + ((1u))))) << 0u)), 0u ^ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((1u), 0u + ((1u)))), (uint(_GLF_IDENTITY((1u), _GLF_IDENTITY(0u + ((1u)), (0u + ((1u))) + 0u)))) << 0u)))))))) | (1u)))), 1u)))) << 0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY((1u), min((1u), (1u)))))), 1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 1u * (_GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) ^ 0u)), 0u + _GLF_IDENTITY((_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))), uint(uvec4((_GLF_IDENTITY(uint(0u), 1u * _GLF_IDENTITY((uint(0u)), (_GLF_IDENTITY((uint(0u)), (false ? _GLF_FUZZED(atomicExchange(subgroup_size, subgroup_local_id)) : (uint(0u))))) + 0u))), 1u, 0u, 0u)))) << 0u))))))))) | (1u)), min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((1u) | (1u), ((1u) | (1u)) ^ _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) / 1u) : _GLF_FUZZED(num_workgroup)))))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) | (uint(uint(_GLF_IDENTITY((1u) | (1u), _GLF_IDENTITY(((1u) | (1u)) ^ 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((1u) | (1u)) ^ 0u))))))))), 1u)), _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) + 0u))), (_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY((1u) | (1u), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY((1u) | _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))), (false ? _GLF_FUZZED(subgroup_size) : (1u) | (1u))))))))), 1u)), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max((1u), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) << 0u), 1u))))) | (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED((mat2x3(-7.7, -2.5, -89.18, -2780.2980, 704.497, 9.3) , subgroup_size)) : 1u)))), 1u), min(_GLF_IDENTITY(min(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), max((1u), (1u))) | (1u), (_GLF_IDENTITY((1u), max((1u), (1u))) | _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) ^ 0u)))), max(_GLF_IDENTITY((1u), ((1u)) << 0u), (1u)))) | 0u)), 1u), min(min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max((1u), (1u))) | _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), clamp((1u), (1u), (1u)))))) | ((1u)))), 1u), min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max((1u), (1u))) | (1u)), 1u))), min(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max((1u), (1u))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), max(max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))), _GLF_IDENTITY(0u, 0u + (0u)) | (_GLF_IDENTITY(max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), uint(uvec4(max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), 0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))))))))), 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | 0u)))) | (1u)))), _GLF_IDENTITY(1u, (1u) << 0u))), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) >> 0u), 1u)), (1u) | (1u)), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | 0u)))) | (1u)))), _GLF_IDENTITY(1u, (1u) << 0u))), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) >> 0u), 1u)), (1u) | (1u)), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | 0u)))) | (1u)))), _GLF_IDENTITY(1u, (1u) << 0u))), (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) >> 0u), 1u)), (1u) | (1u)), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))))))) << 0u)))))), bvec4(true), bvec4(_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) ^ (~ (~ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))))))))) * uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) + 0u)))) / uvec3(1u, 1u, 1u)), max((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(_GLF_IDENTITY(1u, (1u) + 0u), 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), _GLF_IDENTITY((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))), (_GLF_IDENTITY((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))), ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)))) - uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(uvec3(0u, 0u, 0u)), (uvec3(uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), clamp(uvec3(_GLF_IDENTITY(uvec3(uvec3(0u, 0u, 0u)), _GLF_IDENTITY((uvec3(uvec3(0u, 0u, 0u))), uvec3(uvec3((uvec3(uvec3(0u, 0u, 0u)))))) >> uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(uvec3(0u, 0u, 0u)), (uvec3(uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(uvec3(0u, 0u, 0u)), (uvec3(uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)))))))), gl_WorkGroupID)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))) ^ uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))))))) / uvec3(1u, 1u, 1u), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID)))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))))) / uvec3(1u, 1u, 1u)) ^ uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(0u, 0u | (0u)), 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))), max(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))), (false ? _GLF_FUZZED(uvec3(34363u, 15284u, 113089u)) : _GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ _GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), _GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))) * (uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(1u, 1u, 1u) : _GLF_FUZZED(uvec3(134897u, 188862u, 177927u)))) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(1u, min(1u, 1u)), 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (gl_WorkGroupID)), (gl_WorkGroupID) - uvec3(0u, 0u, 0u))) ^ (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))))), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), max(_GLF_IDENTITY(clamp(uint(uvec3(0u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), (clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) >> 0u), clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))), (_GLF_IDENTITY(clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), max(_GLF_IDENTITY(clamp(uint(uvec3(0u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), (clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) >> 0u), clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))) << 0u))), ((_GLF_IDENTITY(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), _GLF_IDENTITY(clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), max(_GLF_IDENTITY(clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) / 1.0)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), (clamp(uint(uvec3(_GLF_IDENTITY(0u, (0u) / 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) << 0u)), clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (_GLF_IDENTITY(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec3(0u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u))), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u + (uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0u)), uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u) ^ _GLF_IDENTITY(_GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(_GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u)), max(_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uint(false)) : 0u)), ~ (~ (0u)))) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)), uvec3(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u) * ((_GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, (31121u & 0u)))), 1u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) >> 0u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), 0u)), 0u, 0u)), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) + 0u), (_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0u)), ~ (~ ((~ (0u)))))), (~ (_GLF_IDENTITY((~ (0u)), ~ (~ ((~ (0u))))))) | (~ (_GLF_IDENTITY((~ (0u)), ~ (~ ((~ (0u)))))))))))) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))))))))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 0u, 1u)))))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u)), _GLF_IDENTITY(1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (gl_WorkGroupID))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), clamp(_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), max(_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), clamp((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))))), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))))), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), ((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(subgroup_size)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u))))))))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + ((gl_WorkGroupID))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) * 1u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_FUZZED(uvec3(162804u, 117186u, 176833u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) ^ 0u)), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))))), _GLF_IDENTITY(1u, min(1u, 1u))), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u))), 0u + _GLF_IDENTITY((1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))), clamp(_GLF_IDENTITY((1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))), uint(uvec3((1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))), 1u, 1u))), (1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))), _GLF_IDENTITY((1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))), min((1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))), (1u * (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))), ((_GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (gl_WorkGroupID)))), _GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))), (uvec3(102990u, 2638u, 78872u) & uvec3(0u, 0u, 0u)) + (_GLF_IDENTITY((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), max((_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))))))))) | uvec3(0u, 0u, 0u))) / (uvec3(1u, 1u, 1u) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(58751u, 453u, 5249u)) : gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))), 0u)))), _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, _GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) + _GLF_IDENTITY(((gl_WorkGroupID)), (((gl_WorkGroupID))) | (((gl_WorkGroupID))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))) : _GLF_FUZZED(subgroup_local_id))), uint(0u))), 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(162804u, 117186u, 176833u)), (_GLF_FUZZED(uvec3(162804u, 117186u, 176833u))) / uvec3(1u, 1u, 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(_GLF_IDENTITY(0u, (0u) * 1u)), 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 1u * (_GLF_IDENTITY(uint(0u), uint(0u))))), 1u))), clamp(uvec3(0u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), uvec3(0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), uint(0u)), 0u | (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 0u)))))))), 1u))))))))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))) / 1u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (1u)))))))))))))) | (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(130636u, 166600u, 4972u)) : gl_WorkGroupID))), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(((gl_WorkGroupID)), (_GLF_IDENTITY(_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))), clamp(_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))), _GLF_IDENTITY(_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID)))), (_GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(((gl_WorkGroupID)), min(((gl_WorkGroupID)), ((gl_WorkGroupID))))))) ^ uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(write_val) : 0u))))) / uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u)), max((_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) | ((gl_WorkGroupID))))) / uvec3(1u, _GLF_IDENTITY(1u, min(1u, 1u)), 1u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u), 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(35784u, 182246u, 58460u), (uvec3(35784u, 182246u, 58460u)) << uvec3(0u, 0u, 0u))) : _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), (_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, (0u) << 0u))) ^ ((gl_WorkGroupID))) + (uvec3(155299u, 83970u, 186111u) & (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u)))))) / uvec3(1u, 1u, 1u))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))), uvec3(uvec4(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))), ~ (~ (~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)))))))), 1u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))), max(~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))), ~ (~ (_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)))))))))) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) << uvec3(0u, 0u, 0u)))) / uvec3(1u, 1u, 1u), 0u)) / uvec4(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u))), 1u, 1u, 1u))), (false ? _GLF_FUZZED(uvec3(65340u, 110852u, 36703u)) : uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) ^ 0u)), (uint(_GLF_IDENTITY(0u, (0u) ^ 0u))) << 0u)))) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u), 0u), (uvec4(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))) / uvec3(1u, 1u, 1u), 0u)) / uvec4(1u, 1u, 1u, 1u))))))), (_GLF_IDENTITY((gl_WorkGroupID), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), min(_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID)))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) ^ ((gl_WorkGroupID))))) / uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((_injected_loop_counter)))) != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_struct_replacement_3.workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, ~ (~ (_GLF_struct_replacement_4.workgroup_id)))) << 0u), (_GLF_struct_replacement_4.workgroup_id) - 0u), min(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_struct_replacement_4.workgroup_id) - 0u, 0u ^ ((_GLF_struct_replacement_4.workgroup_id) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), min(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), _GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_4.workgroup_id) - 0u, 0u ^ ((_GLF_struct_replacement_4.workgroup_id) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), min(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), _GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_4.workgroup_id) - _GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | (0u)))), uint(uvec3(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | (0u)))), max(uint(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | (0u)))), uint(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | (0u)))))), 0u, 0u)))) ^ ((_GLF_struct_replacement_4.workgroup_id) - 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), min(_GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, (_GLF_struct_replacement_4.workgroup_id) - 0u), _GLF_IDENTITY(_GLF_struct_replacement_4.workgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_4.workgroup_id) - 0u, 0u ^ ((_GLF_struct_replacement_4.workgroup_id) - 0u)))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_base)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, min(1, 1)), 1, 1, 1)), (true ? int(ivec4(_GLF_IDENTITY(1, min(1, 1)), 1, 1, 1)) : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / (1 | 0))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)))))), false, true))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(! (true), false || (! (true))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))), bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), true, false, false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(6.5), 0.0 + (_GLF_IDENTITY(_GLF_FUZZED(6.5), (_GLF_FUZZED(6.5)) * 1.0)))), bool(false))) > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-2890.4057, 23.36)) : injectionSwitch)).x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false))))), true, false)))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(true))))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                            {
                             barrier();
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = ((1 | (1 & 1)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (20399 & 0)); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     buf[virtual_gid] = uint(subgroupAllEqual(read_val));
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                  {
                                                   barrier();
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) < (1 & (1 & 1))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                          }
                                        }
                                       else
                                        {
                                        }
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                                          {
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (! (false)), false || (! (! (false)))), true, true, _GLF_IDENTITY(false, bool(bool(false))))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(! (! (false)), false || (! (! (false)))), true, true, _GLF_IDENTITY(false, bool(bool(false))))), false, true))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (false)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, ! (! (false))))))))))))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), mix(vec2(_GLF_FUZZED(-46.46), _GLF_FUZZED(5209.4755)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))[1]))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x < injectionSwitch.y))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))))))) || false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(trunc(-6281.3295)) : injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(trunc(-6281.3295)) : injectionSwitch.x))) + 0.0) > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(30.37))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)) * (injectionSwitch)).y)), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = _GLF_IDENTITY(((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 | (1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 | (1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                              barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(false), (bool(false)) && true)), (false || (bool(false))) && true)))), false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(false), (bool(false)) && true)), (false || (bool(false))) && true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-941.197), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.3)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.7) : injectionSwitch.y))))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = ((_GLF_IDENTITY((1 | 1), ((1 | 1)) | ((1 | 1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), ~ (~ (int(_GLF_IDENTITY(5, (5) | (5)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), (~ (max(_injected_loop_counter, _injected_loop_counter))) - 0)) | (~ (max(_injected_loop_counter, _injected_loop_counter)))))))) * 1) != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))).y))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, 6)), _GLF_IDENTITY(6, int(ivec3(6, 1, 1))), 6))), int(6))), 0 | ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)))), clamp(_GLF_IDENTITY(6, clamp(6, 6, 6)), _GLF_IDENTITY(6, int(ivec3(6, 1, 1))), 6))), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (0 >> _GLF_IDENTITY(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         barrier();
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + log(1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), (true ? _GLF_IDENTITY(max(0.0, 0.0), min(max(0.0, 0.0), _GLF_IDENTITY(max(0.0, 0.0), (false ? _GLF_FUZZED(-4605.2361) : max(0.0, 0.0))))) : _GLF_FUZZED(-9.4)))), 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))))), (_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), injectionSwitch)).x)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0)), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0)), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0)), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0))), float(_GLF_FUZZED(-39.50)), bool(false)))))) - 0.0)) > injectionSwitch.y))));
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)))), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, false)))), false, true))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-92104 & 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                        }
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
