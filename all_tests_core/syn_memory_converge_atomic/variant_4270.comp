#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(9890.1316, -114.293).s), _GLF_FUZZED(40.87)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat4x2((injectionSwitch)[1], log(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), bvec2(true, true))).y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)) < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), clamp(float(mat4(injectionSwitch.y, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 0.0))), _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.2)), float(1.0), bool(true))), 1.0, 1.0)), mix(float(1.0), float(_GLF_FUZZED(-6.4)), bool(false)))), float(_GLF_FUZZED(float(-15722))), bool(false))), injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat4(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), clamp(float(mat4(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))) || false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) | (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true, false)), (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true, false))) || false)))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))), mat3(1.0) * (mat2x3(injectionSwitch, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, log(1.0), 0.0, 1.0, log(1.0), length(vec2(0.0, 0.0)), 1.0), mat4(1.0) * (mat2x4(injectionSwitch.y, 0.0, log(1.0), 0.0, 1.0, log(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-943.011)), bool(false)))), length(vec2(0.0, 0.0)), 1.0)))), float(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, log(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(26.87) : _GLF_IDENTITY(1.0, (1.0) / 1.0)))), 0.0, 1.0, log(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.3)))) / 1.0)), length(vec2(0.0, 0.0)), 1.0), mat4(1.0) * (mat2x4(injectionSwitch.y, 0.0, log(1.0), 0.0, 1.0, log(1.0), length(vec2(0.0, 0.0)), 1.0)))), (true ? float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, log(1.0), 0.0, 1.0, log(1.0), length(vec2(0.0, 0.0)), 1.0), mat4(1.0) * (mat2x4(injectionSwitch.y, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.38)), bool(false))) : _GLF_FUZZED(-755.056))), 1.0, log(1.0), length(vec2(0.0, 0.0)), 1.0)))) : _GLF_FUZZED(-3115.0906))), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, cos(0.0), 1.0, 0.0, 1.0)))))), (injectionSwitch.x > injectionSwitch.y) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, true))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4214.0498))))), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (~ -25017))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          return;
         barrier();
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(966.056)), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_IDENTITY(false, true && (false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.9)), vec2(_GLF_FUZZED(-442.797), (injectionSwitch)[1]), bvec2(false, true))).x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), float(_GLF_FUZZED(-4.8)), bool(_GLF_IDENTITY(false, ! (! (false)))))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), clamp(float(_GLF_FUZZED(5322.6238)), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), float(mat3x4(float(_GLF_FUZZED(5322.6238)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), exp(0.0)))), float(_GLF_FUZZED(5322.6238)))), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (false ? _GLF_FUZZED(8.8) : _GLF_IDENTITY(_GLF_FUZZED(5322.6238), max(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), min(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238))), _GLF_FUZZED(5322.6238)))))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) && true), true)))), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (0.0) + 0.0)))), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), mix(float(_GLF_FUZZED(57.91)), float(_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x))), (false ? _GLF_FUZZED(-3.7) : _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x))), (_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), abs(1.0) * (float(_GLF_FUZZED(5322.6238)))), bool(false))))), injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), clamp(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), (float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0))) - 0.0), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)))), 0.0, determinant(mat2(tan(0.0), 0.0, 0.0, 0.0)), 0.0)), min(float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), clamp(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), (float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0))) - 0.0), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)))), 0.0, determinant(mat2(tan(0.0), 0.0, 0.0, 0.0)), 0.0)), float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), clamp(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)), (float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0))) - 0.0), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), (_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))) - 0.0)))), 0.0, determinant(mat2(tan(0.0), 0.0, 0.0, 0.0)), 0.0))))), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), false, false))))))))))))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)), clamp(_GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)), max(_GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)), (false ? _GLF_FUZZED(1.1) : mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)))), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)))), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))))), float(_GLF_FUZZED(5322.6238)), bool(false)), _GLF_IDENTITY(min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))), (_GLF_IDENTITY(min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))), (false ? _GLF_FUZZED(4.6) : _GLF_IDENTITY(min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))), (min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), min(float(_GLF_FUZZED(5322.6238)), float(_GLF_FUZZED(5322.6238)))), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false)))) / 1.0)))) * 1.0))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), float(mat2x3(float(_GLF_FUZZED(5322.6238)), 1.0, 1.0, 1.0, 1.0, log(1.0)))), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), 0.0 + (_GLF_FUZZED(5322.6238)))), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), _GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)) ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-918.418) : injectionSwitch.x))))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x)))) * 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, true && (true)) && (bool(false)))), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), _GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(451.291) : mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(5322.6238)), bool(false))) - 0.0)))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(_GLF_IDENTITY(-3.4, clamp(-3.4, _GLF_IDENTITY(-3.4, (true ? -3.4 : _GLF_FUZZED(5.1))), _GLF_IDENTITY(_GLF_IDENTITY(-3.4, (-3.4) / 1.0), float(mat2(_GLF_IDENTITY(-3.4, (-3.4) / 1.0), exp(0.0), 1.0, 0.0))))), -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(_GLF_IDENTITY(5322.6238, _GLF_IDENTITY(float(vec3(5322.6238, 1.0, 1.0)), max(_GLF_IDENTITY(float(vec3(5322.6238, 1.0, 1.0)), (float(vec3(5322.6238, 1.0, 1.0))) + 0.0), float(vec3(5322.6238, 1.0, 1.0))))))), bool(false))))), injectionSwitch.x), mix(float(_GLF_FUZZED(57.91)), float(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), min(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, _GLF_IDENTITY(-5.5, max(_GLF_IDENTITY(-5.5, clamp(_GLF_IDENTITY(-5.5, float(vec2(-5.5, 0.0))), _GLF_IDENTITY(-5.5, (-5.5) + 0.0), -5.5)), -5.5)), 5.5))) : float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(23.88, -3.2)) : injectionSwitch)), injectionSwitch)).x), (_GLF_IDENTITY(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, _GLF_IDENTITY(-5.5, max(_GLF_IDENTITY(-5.5, clamp(_GLF_IDENTITY(-5.5, float(vec2(-5.5, 0.0))), _GLF_IDENTITY(-5.5, (-5.5) + 0.0), -5.5)), -5.5)), 5.5))) : float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(23.88, -3.2)) : injectionSwitch)), injectionSwitch)).x), max(_GLF_IDENTITY(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, _GLF_IDENTITY(-5.5, max(_GLF_IDENTITY(-5.5, clamp(_GLF_IDENTITY(-5.5, float(vec2(-5.5, 0.0))), _GLF_IDENTITY(-5.5, (-5.5) + 0.0), -5.5)), -5.5)), 5.5))) : float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(23.88, -3.2)) : injectionSwitch)), injectionSwitch)).x), min(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, _GLF_IDENTITY(-5.5, max(_GLF_IDENTITY(-5.5, clamp(_GLF_IDENTITY(-5.5, float(vec2(-5.5, 0.0))), _GLF_IDENTITY(-5.5, (-5.5) + 0.0), -5.5)), -5.5)), 5.5))) : float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(23.88, -3.2)) : injectionSwitch)), injectionSwitch)).x), false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, _GLF_IDENTITY(-5.5, max(_GLF_IDENTITY(-5.5, clamp(_GLF_IDENTITY(-5.5, float(vec2(-5.5, 0.0))), _GLF_IDENTITY(-5.5, (-5.5) + 0.0), -5.5)), -5.5)), 5.5))) : float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(23.88, -3.2)) : injectionSwitch)), injectionSwitch)).x))), false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, _GLF_IDENTITY(-5.5, max(_GLF_IDENTITY(-5.5, clamp(_GLF_IDENTITY(-5.5, float(vec2(-5.5, 0.0))), _GLF_IDENTITY(-5.5, (-5.5) + 0.0), -5.5)), -5.5)), 5.5))) : float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(23.88, -3.2)) : injectionSwitch)), injectionSwitch)).x)))) + 0.0))), float(_GLF_FUZZED(5322.6238)), bool(false))))), injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.7), _GLF_FUZZED(-8036.6834)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x), float(_GLF_FUZZED(5322.6238)), _GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(451.291), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4821.6238) : _GLF_FUZZED(451.291))) : mix(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false)), (_GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, max(5.5, _GLF_IDENTITY(5.5, min(5.5, _GLF_IDENTITY(5.5, (false ? _GLF_FUZZED(6.6) : 5.5))))))))) : float(injectionSwitch.x), min(_GLF_IDENTITY(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, max(5.5, _GLF_IDENTITY(5.5, min(5.5, _GLF_IDENTITY(5.5, (false ? _GLF_FUZZED(6.6) : 5.5))))))))) : float(injectionSwitch.x), min(_GLF_IDENTITY(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, max(5.5, _GLF_IDENTITY(5.5, min(5.5, _GLF_IDENTITY(5.5, (false ? _GLF_FUZZED(6.6) : 5.5))))))))) : float(injectionSwitch.x), float(mat3(false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, max(5.5, _GLF_IDENTITY(5.5, min(5.5, _GLF_IDENTITY(5.5, (false ? _GLF_FUZZED(6.6) : 5.5))))))))) : float(injectionSwitch.x), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, max(5.5, _GLF_IDENTITY(5.5, min(5.5, _GLF_IDENTITY(5.5, (false ? _GLF_FUZZED(6.6) : 5.5))))))))) : float(injectionSwitch.x))), false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, max(5.5, _GLF_IDENTITY(5.5, min(5.5, _GLF_IDENTITY(5.5, (false ? _GLF_FUZZED(6.6) : 5.5))))))))) : float(injectionSwitch.x))))), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), clamp(float(_GLF_FUZZED(5322.6238)), float(_GLF_FUZZED(5322.6238)), float(_GLF_FUZZED(5322.6238)))), bool(false)), (false ? _GLF_FUZZED(log(-975.068)) : mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), _GLF_IDENTITY(vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, clamp(5.5, 5.5, 5.5))), (true ? vec4(-3.4, -51.59, -5.5, _GLF_IDENTITY(5.5, clamp(5.5, 5.5, 5.5))) : _GLF_FUZZED(vec4(-8126.0472, 4526.6617, -220.075, 28.61)))))) : float(injectionSwitch.x))), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), max(float(_GLF_FUZZED(5322.6238)), float(_GLF_FUZZED(5322.6238)))), bool(false))))) / 1.0)))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false)), (false ? _GLF_FUZZED(92.43) : mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))))), float(_GLF_FUZZED(_GLF_IDENTITY(5322.6238, float(_GLF_IDENTITY(mat3x2(5322.6238, length(vec2(0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x))), transpose(transpose(mat3x2(5322.6238, length(vec2(0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), bool(false)), min(_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(5322.6238, (5322.6238) + abs(0.0)))), _GLF_IDENTITY(bool(false), false || (bool(false)))), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), clamp(_GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238), _GLF_FUZZED(5322.6238)))), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(_GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec2((injectionSwitch) * mat2(1.0))))).x), min(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x)))) - 0.0))), float(_GLF_FUZZED(5322.6238)), bool(false))))) - 0.0), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x), (false ? _GLF_FUZZED(distance(vec4(_GLF_IDENTITY(-1.1, _GLF_IDENTITY(float(float(-1.1)), 0.0 + (float(float(-1.1))))), -107.758, -8.3, -90.97), vec4(-3.4, -51.59, -5.5, 5.5))) : float(injectionSwitch.x))), float(_GLF_FUZZED(5322.6238)), bool(false))))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-4.8)), bool(false))), float(_GLF_FUZZED(5322.6238)), bool(false)), min(_GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) * 1.0), float(_GLF_FUZZED(_GLF_IDENTITY(5322.6238, tan(0.0) + (_GLF_IDENTITY(5322.6238, clamp(_GLF_IDENTITY(5322.6238, (false ? _GLF_FUZZED(-72.22) : 5322.6238)), 5322.6238, 5322.6238)))))), bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(5322.6238)), bool(false))))), (_GLF_IDENTITY((_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), 1.0 * (_GLF_FUZZED(5322.6238)))), bool(false)), (false ? _GLF_IDENTITY(_GLF_FUZZED(451.291), _GLF_IDENTITY(float(mat3x4(_GLF_FUZZED(451.291), log(1.0), tan(0.0), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0)), max(float(mat3x4(_GLF_FUZZED(451.291), log(1.0), tan(0.0), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0)), float(mat3x4(_GLF_FUZZED(451.291), log(1.0), tan(0.0), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0))))) : mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(5322.6238)), bool(false))))), clamp((_GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) / 1.0), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(5322.6238)), bool(false))))), (_GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), float(mat3(_GLF_FUZZED(5322.6238), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0))))) * 1.0)), 1.0)))), max(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), float(mat3(_GLF_FUZZED(5322.6238), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0))))) * 1.0)), 1.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), float(mat3(_GLF_FUZZED(5322.6238), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0))))) * 1.0)), 1.0)))), sqrt(1.0) * (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), float(mat3(_GLF_FUZZED(5322.6238), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0))))) * 1.0)), 1.0)))), min(float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), float(mat3(_GLF_FUZZED(5322.6238), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0))))) * 1.0)), 1.0)))), float(_GLF_IDENTITY(_GLF_FUZZED(5322.6238), float(mat3(_GLF_FUZZED(5322.6238), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 0.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, log(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0))))) * 1.0)), 1.0)))))))))), bool(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(451.291), (_GLF_FUZZED(451.291)) + tan(0.0)) : mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), max(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), float(_GLF_FUZZED(5322.6238)), bool(false))))), (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(5322.6238)), bool(false)), (false ? _GLF_FUZZED(451.291) : mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(5322.6238)), bool(false)))))))) / 1.0) - 0.0), mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec4(-1.1, -107.758, -8.3, -90.97), vec4(-3.4, _GLF_IDENTITY(-51.59, min(-51.59, -51.59)), -5.5, _GLF_IDENTITY(5.5, clamp(_GLF_IDENTITY(5.5, min(5.5, 5.5)), _GLF_IDENTITY(5.5, 1.0 * (5.5)), 5.5))))) : float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x) + 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(5322.6238)), (float(_GLF_FUZZED(5322.6238))) / 1.0), bool(_GLF_IDENTITY(false, false || (false))))))), injectionSwitch.x)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, sqrt(1.0), 0.0), _GLF_IDENTITY((vec4(injectionSwitch, sqrt(1.0), 0.0)) * mat4(1.0), ((vec4(injectionSwitch, sqrt(1.0), 0.0)) * mat4(1.0)) - vec4(0.0, 0.0, 0.0, 0.0))))).y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(971.873)), float(injectionSwitch.y), bool(true))))), false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)) && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, false))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec4(6.6, 88.93, 7547.8829, 8.8), (_GLF_IDENTITY(vec4(6.6, 88.93, 7547.8829, 8.8), max(_GLF_IDENTITY(vec4(6.6, 88.93, 7547.8829, 8.8), max(vec4(6.6, 88.93, 7547.8829, 8.8), vec4(6.6, 88.93, 7547.8829, 8.8))), _GLF_IDENTITY(vec4(6.6, 88.93, 7547.8829, 8.8), vec4(mat2x3(vec4(6.6, 88.93, 7547.8829, 8.8), 1.0, 0.0)))))) - vec4(0.0, 0.0, 0.0, 0.0)).ra) : injectionSwitch)).x, (false ? _GLF_FUZZED(acosh(3.2)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec4(6.6, 88.93, 7547.8829, 8.8).ra) : injectionSwitch)).x)) > injectionSwitch.y)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.8)), bool(false)), mix(float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.8)), bool(false))), float(_GLF_FUZZED(5.2)), bool(false)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (1u ^ 1u) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), (subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (true ? _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))) >> 0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_FUZZED(-6527.0129), _GLF_FUZZED(float(false))), bvec2(false, false))), 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_ZERO(0.0, injectionSwitch.x))))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(0, min(0, 0)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, _GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, max(64, 64)), 64)), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) * 1))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7769.1990, 8.3)) : injectionSwitch)))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), ((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))).x > injectionSwitch.y))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   _GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(read_val, _GLF_IDENTITY(read_val, ~ (~ (_GLF_IDENTITY(read_val, ~ (~ (read_val)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) ^ 0u)) | 0u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) ^ 0u)) | 0u, ~ (~ ((_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) ^ 0u)) | 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) - 0u)) / 1u, ((buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), 0u | (uint(subgroupAllEqual(read_val))))) / 1u) ^ 0u));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, clamp(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, _GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(vec2(_GLF_FUZZED(-3.9), _GLF_FUZZED((+ -4721.2437))), vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0)))))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) && true), _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)) && true, false || (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)) && true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8660.7876), _GLF_FUZZED(5.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)) && ((! (injectionSwitch.x > injectionSwitch.y)) && true)))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-51.95 * -9.8))), float(injectionSwitch.y), bool(true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), false || (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(! (false), false || (! (false)))), true, true)))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5.9) : injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-12906 & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_DEAD(false), true)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_DEAD(false), true)), false))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0), (mat4x2(injectionSwitch, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0)) * mat4(1.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0), (mat4x2(injectionSwitch, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0)) * mat4(1.0)))))).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}
