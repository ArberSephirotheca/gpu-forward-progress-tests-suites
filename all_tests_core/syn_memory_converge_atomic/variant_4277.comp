#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uvec2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
 bvec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 ivec4 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_0 {
 float _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 uvec2 _f1;
 mat2 _f2;
 _GLF_struct_0 _f3;
 vec4 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 uint virtual_gid;
 vec3 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_6 _f3;
 mat2x4 _f4;
 _GLF_struct_7 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     for(int _injected_loop_counter = (1 ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), int(_GLF_IDENTITY(ivec4(1 << _GLF_IDENTITY(int(6), int(6)), 1, 0, 0), ~ (~ (ivec4(1 << _GLF_IDENTITY(int(6), int(6)), 1, 0, 0))))))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) << 0) | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), ~ (~ ((0 | 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(abs(injectionSwitch)))) / vec2(1.0, 1.0)).y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false))))))) && true, ! (! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), vec2(_GLF_FUZZED(9177.5154), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(sqrt(vec2(0.0, 0.0)))).y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))))))) && true, ! (! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), false || ((! ((injectionSwitch.x > injectionSwitch.y))))) && true)))) || _GLF_IDENTITY(false, true && (false)))))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), true))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true))))))), true, false, false)), (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true))))))), true, false, false))) || false)))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(mat4x2(-375.986, -968.436, -9.3, -893.690, -575.663, -5.9, -3.2, 1540.2750)[0]))).y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))) >> (0 | 0))))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 1 * (0))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, false))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true)))))))), ! (! ((false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(true, true, false), true)), true)))), true))))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))) || false))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), (bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))) || false)), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), (bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))) || false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-96.43)), bool(false))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))) + (injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.7) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0)), 1.0))) + (injectionSwitch.y)))))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), clamp(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), (true ? vec4(injectionSwitch, 1.0, 1.0) : _GLF_FUZZED(vec4(-7.1, 81.53, -50.28, 3.9)))), vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), bool(bvec2((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), true))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), bool(bvec2((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), true))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), bool(bvec2((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))), true))), false, false)))), true)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))) && true)), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y) || false, (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))) || false) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(445.241, -773.911)) : injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(445.241, -773.911)) : injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)) && true))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y)), true))))), true, false, true))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], uint(uvec4(gl_WorkGroupSize[0], 1u, 1u, 0u))), gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(tan(vec2(0.0, 0.0)), max(tan(vec2(0.0, 0.0)), tan(vec2(0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || _GLF_IDENTITY((bool(bool(false))), ! (! (_GLF_IDENTITY((bool(bool(false))), bool(bool((bool(bool(false)))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0))), int(0))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), int(ivec2(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 1)))), (_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(max(int(0), int(0)), 0 ^ (max(int(0), int(0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), max(int(0), int(0)))), (1 | 1) * (~ (_GLF_IDENTITY(int(0), max(int(0), int(0))))))))), 0, 1), ~ (_GLF_IDENTITY(~ (ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1)), ivec3(0, 0, 0) + (~ (ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1))))))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1), ~ (~ (ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, min(0, 0))), int(0)))), 0, 1))))), max(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1), ivec3(ivec3(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1)))))))), int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1), ~ (~ (ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1))))))))))), 0 | ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(max(int(0), int(0)), 0 ^ (max(int(0), int(0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), max(int(0), int(0)))), (1 | 1) * (~ (_GLF_IDENTITY(int(0), max(int(0), int(0))))))))), 0, 1), ~ (_GLF_IDENTITY(~ (ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1)), ivec3(0, 0, 0) + (~ (ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1))))))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1), ~ (~ (ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, min(0, 0))), int(0)))), 0, 1))))), max(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1), ivec3(ivec3(ivec3(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1)))))))), int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1), ~ (~ (ivec3(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(0), max(int(0), int(0)))), 0, 1)))))))))))))) || false))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, (false) && true))))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))))) >> 0u) + subgroup_local_id, _GLF_IDENTITY(vec3(1.0), vec3(mat4(vec3(1.0), 1.0, 1.0, 1.0, 1.0, tan(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0))), _GLF_struct_2(vec4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), min(_GLF_IDENTITY(float(1.0), (float(1.0)) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(float(1.0), (float(1.0)) - _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(97.86) : _GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(false ? _GLF_FUZZED(97.86) : 1.0), float(_GLF_FUZZED(2.2)), bool(false))))))))))))), float(_GLF_FUZZED((- _GLF_IDENTITY(9.5, clamp(9.5, 9.5, _GLF_IDENTITY(9.5, clamp(9.5, 9.5, 9.5))))))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, abs(1.0)))))), min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))))) - _GLF_IDENTITY(0.0, (0.0) / 1.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(75.38)), bool(false))), 1.0, determinant(mat4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 1.0)), 0.0, _GLF_IDENTITY(cos(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0))), _GLF_IDENTITY(mat2x3(mat4(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0))))), mat2x3(mat4(mat2x3(mat4(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0))))))))))), 1.0), vec3(0.0, 0.0, 0.0)))), mix(float(cos(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec3(1.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-36.39)), bool(false))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(_GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) / cos(vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(1.0, 0.0), vec2(0.0, 0.0) + (vec2(1.0, 0.0))), vec2(1.0, 0.0))), vec2(1.0, 0.0)))), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), round(length(normalize(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(float(1.0)))))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-472.252)), float(1.0), bool(true))), 1.0)), 1.0, determinant(mat4(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 1.0)), 0.0, cos(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, sin(0.0) + (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4909.4548)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), 1.0), _GLF_IDENTITY(vec3(mat2x3(vec3(1.0, _GLF_IDENTITY(1.0, sin(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.0)))) + (_GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0), 0.0, 1.0, 0.0)), min(vec3(mat2x3(vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-83.66)), float(sin(0.0)), bool(true))) + (1.0)), 1.0), 0.0, 1.0, 0.0)), vec3(mat2x3(vec3(1.0, _GLF_IDENTITY(1.0, sin(0.0) + (1.0)), 1.0), 0.0, 1.0, 0.0))))), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2376.9276) : 0.0))))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), (mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), round(length(normalize(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(float(1.0)))))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-472.252)), float(1.0), bool(true))), 1.0)), 1.0, determinant(mat4(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 1.0)), 0.0, cos(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, sin(0.0) + (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4909.4548)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), 1.0), _GLF_IDENTITY(vec3(mat2x3(vec3(1.0, _GLF_IDENTITY(1.0, sin(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.0)))) + (_GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0), 0.0, 1.0, 0.0)), min(vec3(mat2x3(vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-83.66)), float(sin(0.0)), bool(true))) + (1.0)), 1.0), 0.0, 1.0, 0.0)), vec3(mat2x3(vec3(1.0, _GLF_IDENTITY(1.0, sin(0.0) + (1.0)), 1.0), 0.0, 1.0, 0.0))))), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2376.9276) : 0.0))))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), (true ? min(1.0, 1.0) : _GLF_FUZZED(-52.67))))))))), uvec2(1u), mat2(1.0), _GLF_struct_0(1.0, ivec4(1)), _GLF_IDENTITY(vec4(1.0), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(1.0))), _GLF_struct_1(vec4(1.0), _GLF_IDENTITY(mat3(1.0), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat3(1.0))))), _GLF_struct_6(_GLF_struct_3(bvec3(true), ivec4(1), uvec2(_GLF_IDENTITY(1u, 0u | (1u))), mat2x4(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bvec2(true), mat4x3(1.0)), _GLF_struct_4(vec3(1.0), mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2x4(1.0), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(bvec3(bvec2(true), true))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true), true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true), true)), bvec3(bvec4(bvec3(bvec3(bvec2(true), true)), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true), true)), bvec3(bvec4(bvec3(bvec3(bvec2(true), true)), true)))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(bvec3(bvec2(true), true))))), false)))), true)))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), true, true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_IDENTITY(true, false || (true))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_IDENTITY(true, false || (true))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_IDENTITY(true, false || (true)))))))))))))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))))), false))))))))), false)), false, false))))), ivec3(1)), _GLF_struct_5(ivec2(_GLF_IDENTITY(1, max(1, 1))), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))), uvec2(1u))), mat2x4(1.0), _GLF_struct_7(uvec2(1u), ivec2(1)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec3(0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.6), _GLF_FUZZED(vec2(-517.875, 19.72).x)), bvec2(false, false))).x > injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0), 0 + (_injected_loop_counter --)))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, sqrt(0.0), cos(0.0), 1.0)), (true ? vec2(mat3x2(injectionSwitch, 1.0, sqrt(0.0), cos(0.0), 1.0)) : _GLF_FUZZED(injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))))), (injectionSwitch))) - abs(vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-0.6)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-0.6)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-0.6)), (float(_GLF_FUZZED(-0.6))) * 1.0), float(_GLF_FUZZED(-0.6)))), float(_GLF_FUZZED(-0.6)))), bool(false)))))))).y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-757.749))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-944.657)), bool(false))), 0.0))))).y)), (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))))).y))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(exp(8584.6820)))))).x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), mix(vec3(_GLF_FUZZED(-1.5), _GLF_FUZZED(1.5), _GLF_FUZZED(-0.8)), vec3((vec3(injectionSwitch, 0.0))[0], (vec3(injectionSwitch, 0.0))[1], (vec3(injectionSwitch, 0.0))[2]), bvec3(true, true, true)))), min(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), mix(vec3(_GLF_FUZZED(-1.5), _GLF_FUZZED(1.5), _GLF_FUZZED(-0.8)), vec3((vec3(injectionSwitch, 0.0))[0], (vec3(injectionSwitch, 0.0))[1], (vec3(injectionSwitch, 0.0))[2]), bvec3(true, true, true)))), vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), mix(vec3(_GLF_FUZZED(-1.5), _GLF_FUZZED(1.5), _GLF_FUZZED(-0.8)), vec3((vec3(injectionSwitch, 0.0))[0], (vec3(injectionSwitch, 0.0))[1], (vec3(injectionSwitch, 0.0))[2]), bvec3(true, true, true))))))).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1, int(ivec4(1, 0, 0, int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.9)), bool(false))), 1.0)), injectionSwitch.y))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((1)) | ((1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)))))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != (0 & ivec2(40973, -59578).r)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
   do
    {
     atomicStore(write_val, _GLF_IDENTITY(uint(_GLF_struct_replacement_8.virtual_gid), max(uint(_GLF_struct_replacement_8.virtual_gid), _GLF_IDENTITY(uint(_GLF_struct_replacement_8.virtual_gid), (uint(_GLF_struct_replacement_8.virtual_gid)) * 1u))), 4, 64, 0);
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.5)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-714.414)), float(1.0), bool(true)))), bool(true))), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), (true ? float(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)) : _GLF_FUZZED(-7.8)))))), 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-0.1)))) - 0.0) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3((false) && true, false, false)))), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3((false) && true, false, false))))) && true), true, true, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0)))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (31931 & int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (31931 & int(_GLF_ZERO(0.0, injectionSwitch.x))))) || false); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))))))), false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))))))), false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true)))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))))))), false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true)))), false)), false))))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), false || (bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(false, ! (! (false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             return;
            }
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0)), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0))) - vec2(0.0, 0.0))))).y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                {
                 return;
                }
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) ^ 1), 0 + (((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), ~ (~ (_GLF_IDENTITY(int(8), int(8)))))) ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) << 0)))))))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))))), true, true)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(true, (true) || false)), true)), true))))) && _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3((true), false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false), true)))))))))))))) && true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) || false), false), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true)) || false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
    }
   buf[_GLF_struct_replacement_8.virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read_val, (read_val) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u)) >> (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (8u) | (8u))), uint(8u)), (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (8u) | (8u))), uint(8u))) / 1u)) ^ (read_val))), ((_GLF_IDENTITY(read_val, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(8u), uint(8u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(8u), uint(8u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) >> 0u)))) ^ (read_val)))) << (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), uint(uvec4(uint(1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 1u * (1u)))), 1u, 0u)))))) | 0u)));
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
}
