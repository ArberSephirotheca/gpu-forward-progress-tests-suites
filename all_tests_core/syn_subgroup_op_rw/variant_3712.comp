#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0))), injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ (clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)))) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(_GLF_IDENTITY(uvec3(57982u, 108510u, 106116u), uvec3(uvec3(uvec3(57982u, 108510u, 106116u)))))))) | uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) * ((_GLF_IDENTITY(uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(184404u, 135240u, 191703u)) : uvec3(1u, 1u, 1u))) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(27255u, 92111u, 39494u)) : (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u)))), ((clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))), ((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u)))))) * uvec3(1u, 1u, 1u)) | uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ (clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)))) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(27255u, 92111u, 39494u), uvec3(0u, 0u, 0u) ^ (uvec3(27255u, 92111u, 39494u)))) : (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))))), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)))), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u)))), ((clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ (clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), clamp(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) >> uvec3(0u, 0u, 0u)), uvec3(1u), _GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))))), uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - 0u)) >> 0u)))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)))) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, _GLF_IDENTITY(108510u, (_GLF_IDENTITY(108510u, (108510u) ^ 0u)) + 0u), 106116u))))) | uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(27255u, 92111u, 39494u)) : (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u)))), ((clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((_GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (uvec3(1u, 1u, 1u))) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ _GLF_IDENTITY((17410u), (_GLF_IDENTITY((17410u), ~ (~ ((17410u))))) / 1u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(2u), uvec3(2u))) ^ (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_IDENTITY(_GLF_FUZZED(uvec3(57982u, 108510u, 106116u)), (_GLF_FUZZED(uvec3(57982u, 108510u, 106116u))) - uvec3(0u, 0u, 0u))))) | uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ (clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)))) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))))) ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2330.5640) : injectionSwitch.y)))) ? _GLF_FUZZED(uvec3(27255u, 92111u, 39494u)) : (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(_GLF_IDENTITY(17410u, (17410u) | (17410u)), ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u)))), ((clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) << 0u))), 1u, 1u))), _GLF_IDENTITY(uvec3(1u), uvec3(uvec3(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u)))))))))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))), _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(157553u, _GLF_IDENTITY(17410u, ~ (~ (17410u))), 188826u)) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(57982u, 108510u, 106116u))))) | uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))))))))))) >> uvec3(0u, 0u, 0u)).x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : workgroup_size * workgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : workgroup_size * workgroup_id, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : workgroup_size * workgroup_id, 1u * (false ? _GLF_FUZZED(subgroup_size) : workgroup_size * workgroup_id)), false ? _GLF_FUZZED(subgroup_size) : workgroup_size * workgroup_id))) / 1u)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(findLSB(ivec3(62139, -78833, 12649)).s))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))))) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-34665 & 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))), injectionSwitch)).x < injectionSwitch.y), (bool(injectionSwitch.x < injectionSwitch.y)) && true)), ! (! (bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)) && _GLF_IDENTITY(true, (true) && true))))))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(injectionSwitch.x < injectionSwitch.y)) && true)), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), bool(bvec3(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), true, true)))))) && true))), true && ((bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), bool(bvec3(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), true, true)))))) && true)))))))))))), false || ((! (bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), (bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), true, true)))))) && true))))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = (0 & (43160 / _GLF_IDENTITY(72386, 1 * (72386)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), false || (bool(_GLF_WRAPPED_LOOP(false))))))), false || (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), false || (bool(_GLF_WRAPPED_LOOP(false)))))))))));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) || false)), (_GLF_WRAPPED_LOOP(false)) || false));
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & -15630) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))), true))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, 1u * (workgroup_base + subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), 0 ^ (min(1, 1))))) + 0)) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) % subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) % subgroup_size)))) * 1u)) << (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u))))))) / _GLF_IDENTITY(1u, ~ (~ (1u))));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(virtual_gid, 1u), _GLF_IDENTITY(uvec2(uvec2(uvec2(virtual_gid, 1u))), max(uvec2(uvec2(uvec2(virtual_gid, 1u))), uvec2(uvec2(uvec2(virtual_gid, 1u)))))))), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) | (virtual_gid))) | 0u)], buf[virtual_gid])), 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-6484.4390 - -5.4))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))) * vec2(1.0, 1.0))).y))));
    }
   else
    {
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))) && (true)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), max(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))), (vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), max(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))) + vec2(0.0, 0.0))).x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), true, true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), _GLF_IDENTITY(true, true && (true))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), false))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), false)))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), false)))), false)))), false)))), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), true))))))))))))));
  }
 else
  {
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2), ~ (~ ((subgroup_local_id % 2)))) == _GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(1), int(1)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat2(0.0, 0.0, 1.0, 0.0))))) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         subgroupAll(false);
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), clamp((1 ^ 1), _GLF_IDENTITY((1 ^ 1), min(_GLF_IDENTITY((1 ^ 1), max((1 ^ 1), (1 ^ 1))), (1 ^ 1))), (1 ^ 1)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) - 0))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))))) && true))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((-77987 >> 93657) & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(62417))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(48466))), 1, 0)))), 0 ^ (~ (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(48466))), 1, 0))))))))), 4, 64, 4);
    }
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(709.037)), vec2(_GLF_FUZZED(144.720), (injectionSwitch)[1]), bvec2(false, true))).y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4470.1543) : injectionSwitch.y)), injectionSwitch.y))))))), true, false))) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED((true ? -779.496 : 9615.1343)), (vec3(0.0, 1.0, 1.0))[1], (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], _GLF_FUZZED(9246.4594), _GLF_FUZZED(-306.724)), bvec3(true, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, sqrt(0.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false, false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED((true ? -779.496 : 9615.1343)), (vec3(0.0, 1.0, 1.0))[1], (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], _GLF_FUZZED(9246.4594), _GLF_FUZZED(-306.724)), bvec3(true, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, sqrt(0.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false, false)))) || false), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), float(0.0))))), cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 0.0)), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED((true ? -779.496 : 9615.1343)), (vec3(0.0, 1.0, 1.0))[1], (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], _GLF_FUZZED(9246.4594), _GLF_FUZZED(-306.724)), bvec3(true, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, sqrt(0.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), float(0.0))))), cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 0.0)), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED((true ? -779.496 : 9615.1343)), (vec3(0.0, 1.0, 1.0))[1], (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], _GLF_FUZZED(9246.4594), _GLF_FUZZED(-306.724)), bvec3(true, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, sqrt(0.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false, false))))), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), float(0.0))))), cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 0.0)), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED((true ? -779.496 : 9615.1343)), (vec3(0.0, 1.0, 1.0))[1], (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], _GLF_FUZZED(9246.4594), _GLF_FUZZED(-306.724)), bvec3(true, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, sqrt(0.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false, false))))), true && (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), float(0.0))))), cos(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 0.0)), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))))), 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED((true ? -779.496 : 9615.1343)), (vec3(0.0, 1.0, 1.0))[1], (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], _GLF_FUZZED(9246.4594), _GLF_FUZZED(-306.724)), bvec3(true, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, sqrt(0.0), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false, false)))))))))))) || false)))))))
        {
        }
       else
        {
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))), (_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY((_GLF_IDENTITY(4, min(4, 4))), ((_GLF_IDENTITY(4, min(4, 4)))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, min(4, 4))), ((_GLF_IDENTITY(4, min(4, 4)))) * 1))) / 1)) | 0), 64, 4);
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))))))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(41283, (41283) ^ 0) & 0)); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, exp(0.0), 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))) * mat2(1.0))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, exp(0.0), 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.9)), float(_GLF_IDENTITY(0.0, round(length(normalize(1.0))) * (0.0))), bool(true))), 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))) * mat2(1.0))).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, determinant(mat4(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-663.320))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, exp(0.0), 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 0.0)))))) - 0.0))), 1.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))))) * mat2(1.0))).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) + sin(0.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2(0.0, exp(0.0), 0.0, 0.0)), (float(mat2(0.0, exp(0.0), 0.0, 0.0))) * sqrt(1.0))), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)), 1.0, determinant(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, 0.0, abs(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(8050.6402))), 0.0))) * mat2(1.0))).x > injectionSwitch.y)), false, false, false))))))))))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, ! (! (false)))))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, ! (! (false)))))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-4.3)), bool(false))) > injectionSwitch.y)) || ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))) && true))))) || false)))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
  }
 else
  {
  }
}
