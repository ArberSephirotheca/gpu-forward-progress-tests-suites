#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(unpackSnorm2x16(11153u)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & (((1 & 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y)))) || _GLF_IDENTITY(false, bool(bvec2(false, true)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(19.64), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[_GLF_IDENTITY(1, clamp(1, 1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(8.4)), _GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), 0.0))).x < injectionSwitch.y)) && (true))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)) : 1)), true && (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)) : 1)), (_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, _injected_loop_counter)) : 1))) && true)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, (6) | 0))))))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = _GLF_IDENTITY((35004 & 0), int(ivec3((35004 & 0), 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))))))) && true)))
                    {
                     return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(3.7)))) - 0.0), sin(0.0), 0.0, 1.0))))), mix(_GLF_IDENTITY(float(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 0.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0)))))), clamp(float(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0))))), (true ? float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0))))) : _GLF_FUZZED(1532.4422)))), float(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.4, 784.585)) : injectionSwitch)).x)), injectionSwitch.x)), 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0)))))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(sqrt(-1.6)))), sin(0.0), 0.0, 1.0)))))), float(mat4(_GLF_IDENTITY(float(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), injectionSwitch)).x)), 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), sin(0.0), 0.0, 1.0)))))), (float(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)), 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0))))))) / 1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1565.1562), float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(-1565.1562), (true ? _GLF_FUZZED(-1565.1562) : _GLF_FUZZED(1.7))), 0.0, sqrt(1.0), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0))), _GLF_IDENTITY(max(_GLF_FUZZED(-1565.1562), _GLF_IDENTITY(_GLF_FUZZED(-1565.1562), min(_GLF_FUZZED(-1565.1562), _GLF_FUZZED(-1565.1562)))), 0.0 + (max(_GLF_FUZZED(-1565.1562), _GLF_IDENTITY(_GLF_FUZZED(-1565.1562), min(_GLF_FUZZED(-1565.1562), _GLF_FUZZED(-1565.1562)))))))), bool(false)))) > injectionSwitch.y))));
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, false))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true)) || false)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = (1 ^ (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))) || false))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))).x < injectionSwitch.y))))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))) || false)))))))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))))), false, true)))), (false) && true)))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec3(bool(bvec2(true, _GLF_IDENTITY(true, (true) && true))), true, false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), int(6))), (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ((! (! (false)))) && true)))))) && true) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), false || (! (_GLF_IDENTITY((false), true && ((false))))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                  barrier();
                }
              }
             barrier();
            }
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3)))))); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false, false, false)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(true, true && (true)) && (injectionSwitch.x > injectionSwitch.y)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0) < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(float((-- subgroup_size))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), sin(0.0), 0.0)))), float(_GLF_FUZZED(-24.26)), bool(false))) > injectionSwitch.y))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false, false, false))))) && true))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-47642 & 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))))), ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), false, true, false))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))) && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
              barrier();
             return;
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true))), false)))), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))) && true))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(0 | 1, (0 | 1) << 0)) & 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), min((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), min((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y)))))), true))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               continue;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(13.44))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(13.44))) > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u), gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))) * _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(23.59, max(23.59, 23.59)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))) * _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(23.59, max(23.59, 23.59)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))) * _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(23.59, max(23.59, 23.59)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, true), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))) * _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(23.59, max(23.59, 23.59)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))) * _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(23.59, max(23.59, 23.59)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, true), true))))) || false))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(1, (1) << 0))) | 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.8)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x))), bool(true))) > injectionSwitch.y)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), min(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(0.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-10848) : 0)), 0)) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(7, 7)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(7), int(7))) >> 0), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> 0), 0, 1, 0)))) << 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))), true && (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), (float(float(injectionSwitch.y))) - 0.0))), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u)) / 1u) + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base))) << 0u)) / _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) * 1u), 1u, 1u))) + subgroup_base) | 0u) + subgroup_local_id, (true ? _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), 0u | (_GLF_IDENTITY(1u, 0u | (1u)))) * (workgroup_base)) + subgroup_base + subgroup_local_id : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))) | (subgroup_size))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u), _GLF_FUZZED(subgroup_size)), min(clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u), _GLF_FUZZED(subgroup_size)), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) ^ 0u), _GLF_FUZZED(subgroup_size)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).x > injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) ^ 0)))))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2))))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9496.1581)), _GLF_FUZZED(-1193.6724)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), workgroup_base))) + (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(0u))) | (~ (uint(0u)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(_GLF_IDENTITY(0u, (0u) ^ 0u)))) | (~ (uint(0u)))), 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), (uvec4(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(0u))) | (~ (uint(0u)))), 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) / uvec4(1u, 1u, 1u, 1u)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) - 0u), uint(3u))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, min(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, clamp(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, clamp(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u)), ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (true ? 0u >> _GLF_IDENTITY(uint(3u), uint(3u)) : _GLF_FUZZED(workgroup_size))))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u))))))))), (true ? _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) - 0u)) >> _GLF_IDENTITY(0u, 0u ^ (0u)))))), 0u | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) - 0u)) >> _GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) | 0u)))))))), _GLF_IDENTITY(((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), max(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), 0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), max((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) | _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))), (((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))) | (_GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))), ~ (~ (((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u), max(((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(_GLF_IDENTITY(3u, (3u) | (3u)), _GLF_IDENTITY(3u, _GLF_IDENTITY((3u) ^ 0u, uint(uvec2(_GLF_IDENTITY((3u) ^ 0u, 0u | ((3u) ^ 0u)), 1u))))))))), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ _GLF_IDENTITY(0u, (0u) | (0u))))))))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))), (_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))) ^ 0u))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u), ((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (3u) ^ 0u), 0u | (_GLF_IDENTITY(3u, (3u) ^ 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), ~ (~ ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))))) << 0u), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, ~ (~ (3u)))) + 0u), (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) | ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))) | (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u)))), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, ~ (~ ((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, ~ (~ (0u)))))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))))) / 1u))) >> 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / _GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u, _GLF_IDENTITY(max((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u), uint(uint(max((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u))))), (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))), min(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))), _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u))) | _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | (max(0u, 0u))))))) : _GLF_FUZZED(subgroup_id))) + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), workgroup_base))) + (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(0u))) | (~ (uint(0u)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(_GLF_IDENTITY(0u, (0u) ^ 0u)))) | (~ (uint(0u)))), 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), (uvec4(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(0u))) | (~ (uint(0u)))), 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) / uvec4(1u, 1u, 1u, 1u)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) - 0u), uint(3u))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, min(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, clamp(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, clamp(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u)), ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (true ? 0u >> _GLF_IDENTITY(uint(3u), uint(3u)) : _GLF_FUZZED(workgroup_size))))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u))))))))), (true ? _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) - 0u)) >> _GLF_IDENTITY(0u, 0u ^ (0u)))))), 0u | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) - 0u)) >> _GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) | 0u)))))))), _GLF_IDENTITY(((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), max(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), 0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), max((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) | _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))), (((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))) | (_GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))), ~ (~ (((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u), max(((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(_GLF_IDENTITY(3u, (3u) | (3u)), _GLF_IDENTITY(3u, _GLF_IDENTITY((3u) ^ 0u, uint(uvec2(_GLF_IDENTITY((3u) ^ 0u, 0u | ((3u) ^ 0u)), 1u))))))))), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ _GLF_IDENTITY(0u, (0u) | (0u))))))))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))), (_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))) ^ 0u))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u), ((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (3u) ^ 0u), 0u | (_GLF_IDENTITY(3u, (3u) ^ 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), ~ (~ ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))))) << 0u), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, ~ (~ (3u)))) + 0u), (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) | ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))) | (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u)))), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, ~ (~ ((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, ~ (~ (0u)))))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))))) / 1u))) >> 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / _GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u, _GLF_IDENTITY(max((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u), uint(uint(max((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u))))), (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))), min(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))), _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u))) | _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | (max(0u, 0u))))))) : _GLF_FUZZED(subgroup_id))) + subgroup_base, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), workgroup_base))) + (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(0u))) | (~ (uint(0u)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(_GLF_IDENTITY(0u, (0u) ^ 0u)))) | (~ (uint(0u)))), 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), (uvec4(_GLF_IDENTITY(~ (uint(0u)), (~ (uint(0u))) | (~ (uint(0u)))), 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) / uvec4(1u, 1u, 1u, 1u)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) - 0u), uint(3u))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, min(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, clamp(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, clamp(((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u)), ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (true ? 0u >> _GLF_IDENTITY(uint(3u), uint(3u)) : _GLF_FUZZED(workgroup_size))))) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u))))))))), (true ? _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) - 0u)) >> _GLF_IDENTITY(0u, 0u ^ (0u)))))), 0u | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) - 0u)) >> _GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) | 0u)))))))), _GLF_IDENTITY(((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), max(0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), 0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), max((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) | _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))), (((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))) | (_GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))), ~ (~ (((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(3u, (3u) / 1u))), min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u), max(((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(_GLF_IDENTITY(3u, (3u) | (3u)), _GLF_IDENTITY(3u, _GLF_IDENTITY((3u) ^ 0u, uint(uvec2(_GLF_IDENTITY((3u) ^ 0u, 0u | ((3u) ^ 0u)), 1u))))))))), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ _GLF_IDENTITY(0u, (0u) | (0u))))))))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))), (_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))) ^ 0u))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u), ((workgroup_base) + _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (3u) ^ 0u), 0u | (_GLF_IDENTITY(3u, (3u) ^ 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))), ~ (~ ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))))))) << 0u), ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, ~ (~ (3u)))) + 0u), (3u) ^ 0u))))))) | ((0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) | ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))) | (_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u)))), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, ~ (~ ((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, ~ (~ (0u)))))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))))) / 1u))) >> 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / _GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u, _GLF_IDENTITY(max((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u), uint(uint(max((_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u, (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u))))), (_GLF_IDENTITY((workgroup_base) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((workgroup_base) + (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))), min(_GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))), _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u)))))))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / 1u))) >> 0u))) | _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | (max(0u, 0u))))))) : _GLF_FUZZED(subgroup_id))) + subgroup_base, 0u, 0u)))) | 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | ((subgroup_local_id + 1) % subgroup_size)));
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), (~ (64)) | (~ (64)))))) + int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x))), (64) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0)))))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)), min(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)), _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(_GLF_IDENTITY(6, clamp(6, 6, 6)))) ^ _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0, (0) | (0)), 0), max(ivec2(_GLF_IDENTITY(0, (0) | (0)), 0), ivec2(_GLF_IDENTITY(0, (0) | (0)), 0))))), max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))) | (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((int(6)), (1 & 1) * ((int(6)))) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)))))))))), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), false || (bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))))) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false)))))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min(_GLF_IDENTITY((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, max((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, (_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0)), _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED(86071) : (int(6)))) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)))))))))) : _GLF_FUZZED(-27418)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_FUZZED(40569), (_GLF_FUZZED(40569)) | 0) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0, 1, 0, 1), (ivec4(0, 1, 0, 1)) / ivec4(1, 1, 1, 1))), max(int(_GLF_IDENTITY(ivec4(0, 1, 0, 1), (ivec4(0, 1, 0, 1)) / ivec4(1, 1, 1, 1))), int(_GLF_IDENTITY(ivec4(0, 1, 0, 1), (ivec4(0, 1, 0, 1)) / ivec4(1, 1, 1, 1))))))) >> 0) | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319))), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319))), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) | (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))))) >> (0 << _GLF_IDENTITY(int(6), int(6))))) ^ 0) ^ 0))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))))) - 0), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 | (6))) * 1))))), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((int(6)), max((int(6)), (int(6)))) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, ((int(6)) ^ 0) | ((int(6)) ^ 0))))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)), clamp(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)), int(ivec4(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0)), 0, 0, 1))), _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, ((int(6)) ^ 0) | ((int(6)) ^ 0)), min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(mix(ivec2(15227, 76153).t, -17149, false)))), 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)), (1 ^ 1) | (_GLF_IDENTITY(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)), clamp(_GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)), _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0)), _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))))) - 0)))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY((false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))), ((false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767))))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) << 0) | (_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (6) | (6)))) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-69735))), max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), ~ (~ (int(6))))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0), (_GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED((+ 77012)) : _GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6 : _GLF_FUZZED(75767)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), (int(6)) >> 0)))) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), min(false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((int(6)), int(ivec4(_GLF_IDENTITY((int(6)), int(int((int(6))))), 0, 0, 1))) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, (int(6)) ^ 0))))), false ? _GLF_FUZZED(40569) : _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) ^ 0, min((int(6)) ^ 0, _GLF_IDENTITY((int(6)) ^ 0, max((int(6)) ^ 0, _GLF_IDENTITY((int(6)), (_GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(-90319)))) ^ 0) ^ 0))))))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6)))))))), 2), _GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) - 0u) | (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid]))), min(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid]))), _GLF_IDENTITY(buf[virtual_gid], uint(uint(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | 0u))))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u))))), 0u | (_GLF_IDENTITY(0u, ~ (~ (0u))))), ((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid]))), min(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(packSnorm2x16(vec2(269.583, -77.43))) : virtual_gid))]))), _GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid])))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u | (_GLF_IDENTITY(0u, ~ (~ (0u)))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid]))), min(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid]))), _GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid])))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u | (_GLF_IDENTITY(0u, ~ (~ (0u)))))))), 4, 64, 2)));
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if((subgroup_local_id % 2) == 0)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 0) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 1 * (6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 0) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, _GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) >> 0) + (3)), clamp(_GLF_IDENTITY(3, _GLF_IDENTITY(0 + (3), (0 + (3)) | 0)), _GLF_IDENTITY(3, 0 + (3)), _GLF_IDENTITY(3, 0 + (3))))))), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, _GLF_IDENTITY(3, 0 + (3))))), int(3))) ^ 0, int(ivec3((_GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, _GLF_IDENTITY(3, 0 + (3))))), int(3))) ^ 0, (0 | 0), 1))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))), bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))))))))))))))))))), true && (bool(bvec4(false, false, _GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))), ! (! ((_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))))))), false)))))))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
                    barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))), bool(bvec2(false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))), false)))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), false, true)))))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0))), (_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(ivec2(0, 1)))))), int(0)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), (false) || false))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))), bool(_GLF_IDENTITY(bool(! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))), true && (bool(! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))))))))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                        barrier();
                       barrier();
                      }
                    }
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(exp2(692.071)))) > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                   continue;
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && (false))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     return;
                    }
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) || false); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(int(int(6))), (int(int(int(6)))) | (_GLF_IDENTITY(int(int(int(6))), (int(int(int(6)))) >> 0)))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, 0))), (true ? _GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, (0) / ((0 | 0) ^ 1))))) : _GLF_FUZZED(_injected_loop_counter)))))
      {
       for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(false);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)), ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))) << 0) + 0), (0 >> _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)), ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))) << 0) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)), ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))) << 0) + 0), (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)), ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))) << 0) + 0)) | (0 << _GLF_IDENTITY(int(8), int(8))))) ^ 0))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), max(uint(1), uint(1))), 4, 64, 4);
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), bool(bool(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_DEAD(false))))) && true))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))), (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))));
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))))));
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0))))), int(ivec2(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0))))), 0))), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0)))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 0.0, log(1.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 0.0, log(1.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat4x3(injectionSwitch, 1.0, 0.0, log(1.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 1))), int(4))), int(4)), (_GLF_IDENTITY(int(4), int(4))) * 1), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), injectionSwitch.y)))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), false, true, false)))) && true)), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), false, true, false)))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false), false, true, false)))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(14.00) : injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-830.594)), float(injectionSwitch.y), bool(true))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-830.594)), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-830.594)), float(injectionSwitch.y), bool(true)))))))) * 1.0))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), 1.0))))))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), 1.0))))))), false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         for(int _injected_loop_counter = (1 | (0 << _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(ivec3(_injected_loop_counter, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec3(_injected_loop_counter, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec3(-50900, 26121, 95596)))), ivec3(_injected_loop_counter, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))) != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter / _injected_loop_counter))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
      {
       for(int _injected_loop_counter = (1 ^ (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * mat2(1.0)).x)) | (0 >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))), ~ (~ ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6)))))))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), ~ (~ (int(6))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 0 ^ ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, (0) << (0 ^ 0)) + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 0 ^ ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))), (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) * 1)), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 0 ^ ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)), 6))), 0 | (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (0 | 0) | (~ (int(6))))))))))))) * 1)) >> 0))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false, true, false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, determinant(mat4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-15.09) : 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sqrt(0.0), 0.0, abs(1.0))), 0.0, 0.0))) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     break;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0))) | 0)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(false || (_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false)))), bool(bvec3(false || (_GLF_IDENTITY(true && (false), bool(bvec3(true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                          barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false)))))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))))
              {
               barrier();
              }
             else
              {
              }
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-1.8, -84.39)))), injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((- -7.7)), _GLF_FUZZED((false ? -4087.8116 : -6.9))), vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-1.8, -84.39)))), injectionSwitch, injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-1.8, -84.39)))), injectionSwitch, injectionSwitch)))[1]), bvec2(true, true))).x, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-1.8, -84.39), mix(vec2(_GLF_FUZZED(1.5), _GLF_FUZZED(-6.7)), vec2((vec2(-1.8, -84.39))[0], (vec2(-1.8, -84.39))[1]), bvec2(true, true)))))), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-1.8, -84.39)))), injectionSwitch, injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y) / cos(0.0), clamp((_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) / 1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) / cos(0.0), _GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(cos(0.0), mix(float(cos(0.0)), float(_GLF_FUZZED(-5.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), min((injectionSwitch.y) / cos(0.0), (injectionSwitch.y) / cos(0.0))), (injectionSwitch.y) / cos(0.0))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) & 26704)); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), min(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), (float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0))))) / 1.0)))) < injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), min(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), (float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0))))) / 1.0)))) < injectionSwitch.y)), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), min(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))), (float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0))))) / 1.0)))) < injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0)), 1.0 * (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), max(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), 1.0 * (max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) - 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec3(bool(bvec4(true, false, false, false)), false, true)))))))), bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))) && true, bool(bvec3((! (false)) && true, true, true))))))), bool(bool(_GLF_DEAD(false))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))
          barrier();
        }
       else
        {
        }
       continue;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))), false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))), false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))), true, false)), false || (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ((false)) || false), true, true))), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))))))))))))), true, false)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (! ((false)))), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (false), (false || (false)) || false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, false || ((false || (false)) || false))))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))), ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, false || ((false || (false)) || false))))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))), ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), true, true, true)), bool(bvec3(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, false || ((false || (false)) || false))))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))), ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) || false))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), true, true, true)), true, false))))))))), true, false)), false || (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), true, true))), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))))))), (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), (false || (false)) && true), false, false, true))), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (false || (false))), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))))))))) || false))))))), true, false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (false || (false)) || false))), _GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))), ! (! (false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))), ! (! (false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))), ! (! (false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))), false), true, true)))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec2((false) || false, true)))))) || false)))) || false)))))))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false)), bvec2(bvec4(bvec2(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false)), true, true)))))), true && (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false)), bvec2(bvec4(bvec2(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (false || (false)) || false))))), false)), true, true))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ((false)) || false), true, true))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, (_GLF_IDENTITY((false || (false)) || false, ! (! (_GLF_IDENTITY((false || (false)), bool(bool((false || (false))))) || false)))) && true))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))))))))), bool(bvec4(! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))))))))), true, false, false)))))))), true, _GLF_IDENTITY(false, (false) || false))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), _GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), (false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))) && true), false, false)))), ! (! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), _GLF_IDENTITY((false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))) && true))), false, false)))))))))), false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))), bool(bvec3(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))), false, true)))) || false))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))))), _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, (_GLF_IDENTITY(_GLF_IDENTITY((false || (false)), ! (! ((false || (false))))), ! (! ((false || (false))))) || false) && true)))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)), false || (_GLF_IDENTITY((false || (false)), ((false || (false))) && true))) || false))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((_GLF_IDENTITY(false, (false) && true)))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), true && (! ((false))))), ((_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)))))))))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)), bool(bvec2(false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))))), false || (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))))), false || ((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))), true, false)), false || (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))) || (false), (false || (false)) || false))))), false || _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ((false)) || false), true, true))), false || _GLF_IDENTITY((_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false)))), ! (! ((_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false)))))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) || false), (false || (false)) || false)))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), true && (false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(false, false || (false))), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(false, false || (false))), true))))))), _GLF_IDENTITY((false || (false)) || false, ! (! (_GLF_IDENTITY((false || (false)), false || ((false || (false)))) || false))))))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false), (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)), ! (! ((false || (false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))) || false)) && true)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), bool(_GLF_IDENTITY(bvec2(bool(bool((false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(bool((false))), true), false), bvec3(bvec3(bvec3(bvec2(bool(bool((false))), true), false))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, ! (! (false))))) || false))))))))))))))))), ((_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((false)) || false), true, true))), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))) && ((false || (false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), true && (false || (false))), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), bool(bvec2(bool(bool((false))), true)))), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))), ! (! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), bool(bvec2(bool(bool((false))), true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (false), (false || (_GLF_IDENTITY(false, (false) && true))) || false))))))))))))))))))))) || false)), true, false))))))), bool(bool((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), _GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), (false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))) && true), false, false)))), ! (! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)), _GLF_IDENTITY((false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))) && true))), false, false)))))))))), false || (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))), bool(bvec3(false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))), false, true)))) || false))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))))), _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, (_GLF_IDENTITY(_GLF_IDENTITY((false || (false)), ! (! ((false || (false))))), ! (! ((false || (false))))) || false) && true)))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)), false || (_GLF_IDENTITY((false || (false)), ((false || (false))) && true))) || false))), (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((_GLF_IDENTITY(false, (false) && true)))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), true && (! ((false))))), ((_GLF_IDENTITY(! ((false)), true && (! ((false)))))) || false)))))))))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)), bool(bvec2(false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))))), false || (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false)))))))))), false || ((! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || (false), (false || (false)) || false))), _GLF_IDENTITY((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false), true && (! ((_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! ((! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(false, (false) || false))) || false)))) || false))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))), true, false)), false || (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))) || (false), (false || (false)) || false))))), false || _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ((false)) || false), true, true))), false || _GLF_IDENTITY((_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false)))), ! (! ((_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false)))))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) || false), (false || (false)) || false)))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), true && (false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(false, false || (false))), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(false, false || (false))), true))))))), _GLF_IDENTITY((false || (false)) || false, ! (! (_GLF_IDENTITY((false || (false)), false || ((false || (false)))) || false))))))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false), (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)), ! (! ((false || (false))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))) || false)) && true)))))), ! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), bool(_GLF_IDENTITY(bvec2(bool(bool((false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(bool((false))), true), false), bvec3(bvec3(bvec3(bvec2(bool(bool((false))), true), false))))))))), false || (_GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, ! (! (false))))) || false))))))))))))))))), ((_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((false)) || false), true, true))), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) || false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false || (false)) || false), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))) && ((false || (false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), true && (false || (false))), (false || (false)) || false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), bool(bvec2(bool(bool((false))), true)))), false || (_GLF_IDENTITY(false || (false), (false || (false)) || false))))))), ! (! (! (((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), bool(bvec2(bool(bool((false))), true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (false), (false || (_GLF_IDENTITY(false, (false) && true))) || false))))))))))))))))))))) || false)), true, false)))))))))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false, false))), true)))))), true)))), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (_GLF_DEAD(false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false))))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true)), ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), true, false)))) && true))));
       for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(~ (~ (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), (int(3)) | 0)))))), 0 + (_GLF_IDENTITY(~ (~ (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), (int(3)) | 0)))))), (~ (~ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3)))) | 0)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3)))) | 0))), (false ? _GLF_FUZZED(findLSB(_injected_loop_counter)) : _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (0) >> 0) ^ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), ~ (~ (int(3)))), int(3)))) | 0))))))) / 1)))) / 1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))), 0 | (((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(4), int(4))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < 1, true, true)), (bool(bvec3(_injected_loop_counter < 1, true, true))) || false))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0), (_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)) && true), true, true)))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true))))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), false || (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), false || (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), false || (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), false || (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))), false))), false, true))))))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 1.0, exp(0.0), 1.0, abs(1.0), 0.0, 0.0))) > injectionSwitch.y)))))))), false))))))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)) && true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, true, false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) || false))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(296.028)), bvec2(true, false))).y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     atomicStore(buf[virtual_gid], read, 4, 64, 4);
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(299.212, 5.6)) : injectionSwitch)))).x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(mat2x4(vec2((injectionSwitch)[0], (injectionSwitch)[1]), 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), (vec2(mat2x4(vec2((injectionSwitch)[0], (injectionSwitch)[1]), 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))) * mat2(1.0))), vec2(_GLF_FUZZED(1.1), _GLF_FUZZED(74.58)), bvec2(false, false))).y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
