#version 460
struct _GLF_struct_2 {
 ivec3 _f0;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_4 {
 uint workgroup_base;
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(ivec4(1), _GLF_struct_0(mat2x3(1.0), bvec4(true)), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(workgroup_size * workgroup_id, _GLF_struct_3(ivec4(1), _GLF_struct_2(ivec3(1))));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_struct_replacement_4.workgroup_base + subgroup_base + _GLF_struct_replacement_1.subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_4.workgroup_base + subgroup_base + ((_GLF_struct_replacement_1.subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((_GLF_struct_replacement_1.subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
}
