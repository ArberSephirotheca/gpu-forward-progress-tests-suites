#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 int _f0;
 float _f1;
 mat3x4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_7 {
 bool _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_4 {
 int _f0;
 bvec2 _f1;
 bvec3 _f2;
 ivec3 _f3;
 mat2x3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 bvec2 _f1;
 uvec2 _f2;
 uvec4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_10 {
 uint workgroup_id;
 mat4x3 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 uint subgroup_size;
 mat4x2 _f3;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 uvec2 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 _GLF_struct_0 _f4;
 mat3x4 _f5;
 _GLF_struct_2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat2x3(1.0), mat2x3(1.0), mat2x4(1.0), mat2x4(1.0), _GLF_struct_0(mat2x4(1.0), bvec3(true)), mat3x4(1.0), _GLF_struct_2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))), (mat4(1.0)) + mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((true ? _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))), 1.0, 0.0)), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), clamp(_GLF_IDENTITY(min(0.0, 0.0), max(min(0.0, 0.0), min(0.0, 0.0))), min(0.0, 0.0), min(0.0, 0.0))))) + 0.0), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) + 0.0), 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(8448u))), bool(false))))), 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0))))))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.9) : 0.0))), 1.0, tan(0.0), determinant(mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(sin(93.34)) : 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))))))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(_GLF_IDENTITY(0.0, (0.0) + determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 1.0, tan(0.0), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat3(630.688, -6274.9908, 6.1, 7150.9356, 34.44, -9716.0428, -4893.9195, -15.82, -78.67))))), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(3.6)), bool(false))))), 1.0, 0.0))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, _GLF_IDENTITY(tan(0.0), 0.0 + (tan(0.0))), determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.2) : _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * _GLF_IDENTITY((mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), mat2(1.0) * (mat2(1.0, 1.0, 0.0, 1.0))))))), 0.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), (false ? _GLF_FUZZED(mat4(17.22, 9068.5312, 158.034, -53.89, 2.8, 581.301, -501.841, -9.3, 57.77, -8.7, -7.3, 3953.6084, -2.1, 829.727, 5.8, -4296.7289)) : _GLF_IDENTITY((mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, sqrt(0.0), 1.0, 1.0)), max(float(vec4(0.0, sqrt(0.0), 1.0, 1.0)), float(vec4(0.0, sqrt(0.0), 1.0, 1.0))))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), tan(0.0), 1.0, _GLF_IDENTITY(tan(0.0), clamp(_GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0), _GLF_IDENTITY(tan(0.0), float(mat4(tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))), (true ? (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))) : _GLF_FUZZED(mat4(93.69, _GLF_IDENTITY(-4.0, mix(float(-4.0), float(_GLF_FUZZED(7.0)), bool(false))), -112.665, -0.1, -4501.1439, -9504.7863, -2.1, -7646.3867, -3230.3186, -6.5, -2.6, -846.369, 6.5, 518.145, -9454.4043, 2.9)))))))))), (false ? _GLF_FUZZED(-26.81) : float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), _GLF_IDENTITY(0.0, 0.0 + (0.0)))))))), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)))))))))))) : _GLF_FUZZED(0.4)), mix(float(_GLF_FUZZED(5745.6507)), float((true ? _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))), 1.0, 0.0)), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), clamp(_GLF_IDENTITY(min(0.0, 0.0), max(min(0.0, 0.0), min(0.0, 0.0))), min(0.0, 0.0), min(0.0, 0.0))))) + 0.0), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) + 0.0), 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(8448u))), bool(false))))), 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0))))))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.9) : 0.0))), 1.0, tan(0.0), determinant(mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(sin(93.34)) : 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))))))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(_GLF_IDENTITY(0.0, (0.0) + determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 1.0, tan(0.0), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat3(630.688, -6274.9908, 6.1, 7150.9356, 34.44, -9716.0428, -4893.9195, -15.82, -78.67))))), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), max(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), mix(float(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(3.6)), bool(false))))), 1.0, 0.0))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, _GLF_IDENTITY(tan(0.0), 0.0 + (tan(0.0))), determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.2) : _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * _GLF_IDENTITY((mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), mat2(1.0) * (mat2(1.0, 1.0, 0.0, 1.0))))))), 0.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), (false ? _GLF_FUZZED(mat4(17.22, 9068.5312, 158.034, -53.89, 2.8, 581.301, -501.841, -9.3, 57.77, -8.7, -7.3, 3953.6084, -2.1, 829.727, 5.8, -4296.7289)) : _GLF_IDENTITY((mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, sqrt(0.0), 1.0, 1.0)), max(float(vec4(0.0, sqrt(0.0), 1.0, 1.0)), float(vec4(0.0, sqrt(0.0), 1.0, 1.0))))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), tan(0.0), 1.0, _GLF_IDENTITY(tan(0.0), clamp(_GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0), _GLF_IDENTITY(tan(0.0), float(mat4(tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))), (true ? (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0))) : _GLF_FUZZED(mat4(93.69, _GLF_IDENTITY(-4.0, mix(float(-4.0), float(_GLF_FUZZED(7.0)), bool(false))), -112.665, -0.1, -4501.1439, -9504.7863, -2.1, -7646.3867, -3230.3186, -6.5, -2.6, -846.369, 6.5, 518.145, -9454.4043, 2.9)))))))))), (false ? _GLF_FUZZED(-26.81) : float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), 0.0), mat4x3(_GLF_IDENTITY(mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), _GLF_IDENTITY(0.0, 0.0 + (0.0)))))))), mat4(1.0) * (mat4(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, tan(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)))))))))))) : _GLF_FUZZED(0.4))), bool(true)))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.1)), bool(false))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x, mix(float(_GLF_FUZZED(2.6)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 0.0, 0.0))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), uvec2(1u), _GLF_struct_1(mat2(1.0), ivec3(1), mat3x2(1.0), gl_SubgroupSize, mat4x2(1.0))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x, mat4x3(1.0), ivec2(1), mat4x2(1.0), _GLF_struct_6(_GLF_struct_4(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (_GLF_IDENTITY(true, ! (! (true))) ? int(int(1)) : _GLF_IDENTITY(_GLF_FUZZED(-21063), clamp(_GLF_FUZZED(-21063), _GLF_FUZZED(-21063), _GLF_FUZZED(-21063))))), min(_GLF_IDENTITY(int(int(1)), (_GLF_IDENTITY(true, ! (! (true))) ? int(int(1)) : _GLF_IDENTITY(_GLF_FUZZED(-21063), clamp(_GLF_FUZZED(-21063), _GLF_FUZZED(-21063), _GLF_FUZZED(-21063))))), _GLF_IDENTITY(int(int(1)), (_GLF_IDENTITY(true, ! (! (true))) ? int(int(1)) : _GLF_IDENTITY(_GLF_FUZZED(-21063), clamp(_GLF_FUZZED(-21063), _GLF_FUZZED(-21063), _GLF_FUZZED(-21063)))))))), bvec2(true), bvec3(true), ivec3(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) >> 0), 0, 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(1, (1) >> 0), 0, 1, 0)))))), mat2x3(1.0), ivec4(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), (ivec3(1, 0, 0)) << ivec3(0, 0, 0)))))), bvec2(true), uvec2(1u), uvec4(1u), _GLF_struct_5(mat2x3(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0))), uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(max(_GLF_IDENTITY(143620u, ~ (_GLF_IDENTITY(~ (143620u), ~ (~ (~ (143620u)))))), 91686u)) : 1u))))), _GLF_struct_9(_GLF_struct_7(true), _GLF_struct_8(1, 1.0, mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(max(1.0, 1.0), (true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(415.131)), bool(false))), 0.0, 0.0)), min(_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(max(1.0, 1.0), (true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(415.131)), bool(false))), 0.0, 0.0)), (false ? _GLF_FUZZED(4.3) : float(mat2(_GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) + 0.0), 1.0), (true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(415.131)), bool(false))), 0.0, 0.0)))), float(mat2(_GLF_IDENTITY(max(1.0, 1.0), (_GLF_IDENTITY(true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387), (false ? _GLF_FUZZED(float(-45083)) : _GLF_IDENTITY(true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387), clamp(true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387), true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387), true ? max(1.0, 1.0) : _GLF_FUZZED(-4047.9387))))))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(415.131)), bool(false))), 0.0, 0.0))))))), mat4x3(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, 1, 1))), ~ (~ (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) - 0)))))), _GLF_IDENTITY(ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec3(1, 0, (1 | 0))))))), max(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), min(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))))))))))), (ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), max(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(1), int(1))) | (1))))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), min(ivec3(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(1862) : 1)), 1))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, 1, 1))), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))))) - ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_10.workgroup_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << (0 | 0)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), true, false, true))))), true, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(false, true, false, true)))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), true))), bool(bvec4(! (false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), false)))))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              return;
            }
           else
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 1) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         return;
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_3._f6._f2.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), ((_GLF_struct_replacement_3._f6._f2.subgroup_size)) | 0u), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))), 0u | (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))))), _GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))))), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))), _GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))))), _GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (_GLF_IDENTITY(~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)), min(_GLF_IDENTITY(~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)), (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))) | 0u), ~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))))))), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), _GLF_IDENTITY((~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))) >> _GLF_IDENTITY(0u, (0u) ^ 0u))))))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), max((_GLF_struct_replacement_3._f6._f2.subgroup_size), (_GLF_struct_replacement_3._f6._f2.subgroup_size))))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), _GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_struct_replacement_3._f6._f2.subgroup_size))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), _GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)), ((_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))) | 0u) >> 0u)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uvec2(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (0u ^ 0u)))), ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), max(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), max(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) / 1u), ~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))), ~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))), (false ? _GLF_FUZZED(packHalf2x16(log(vec2(46.82, -6.7)))) : uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), max(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, max(_GLF_struct_replacement_3._f6._f2.subgroup_size, _GLF_struct_replacement_3._f6._f2.subgroup_size))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) / 1u), ~ _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), ((_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))), ~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), max((_GLF_struct_replacement_3._f6._f2.subgroup_size), (_GLF_struct_replacement_3._f6._f2.subgroup_size))))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), _GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), _GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))), 0u | (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), (1u & (1u | 1u)))), ~ (_GLF_IDENTITY(~ (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))), 0u | (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), (1u & (1u | 1u))))), 0u | (~ (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))), 0u | (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), (1u & (1u | 1u)))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))), (true ? ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))) : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))), (true ? ~ (~ (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))) : _GLF_FUZZED(workgroup_base)))) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), 0u | ((_GLF_struct_replacement_3._f6._f2.subgroup_size))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_struct_replacement_3._f6._f2.subgroup_size), max((_GLF_struct_replacement_3._f6._f2.subgroup_size), (_GLF_struct_replacement_3._f6._f2.subgroup_size))))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))))))))), (_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))))))))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))))))))), 0u + (_GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u))))))))))))))), _GLF_IDENTITY(_GLF_struct_replacement_3._f6._f2.subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), min(~ (_GLF_struct_replacement_3._f6._f2.subgroup_size), ~ (_GLF_struct_replacement_3._f6._f2.subgroup_size))))), (~ (_GLF_struct_replacement_3._f6._f2.subgroup_size)) >> 0u)))))))))) + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))) >> 0)) << ((0 << _GLF_IDENTITY(int(7), int(7))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))) >> 0)) << ((0 << _GLF_IDENTITY(int(7), int(7))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))) >> 0)) << ((0 << _GLF_IDENTITY(int(7), int(7))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))) >> 0)) << ((0 << _GLF_IDENTITY(int(7), int(7))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))) >> 0)) << ((0 << _GLF_IDENTITY(int(7), int(7))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))) >> 0)) << ((0 << _GLF_IDENTITY(int(7), int(7))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) % _GLF_struct_replacement_3._f6._f2.subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true, ((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true) || false))))) && true), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true))))))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), int(ivec4((0), 0, 0, 0)))) | 0) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 for(int _injected_loop_counter = (0 & int(-905.078)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) || false)) || false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-18.03)), min((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(mod(vec2(-545.084, 13.22), _GLF_IDENTITY(-84.58, (false ? _GLF_FUZZED(4.4) : -84.58))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mod(vec2(-545.084, 13.22), -84.58), 0.0, 1.0), max(vec4(mod(vec2(-545.084, 13.22), -84.58), 0.0, 1.0), vec4(mod(vec2(-545.084, 13.22), -84.58), 0.0, 1.0))), min(vec4(mod(vec2(-545.084, 13.22), -84.58), 0.0, 1.0), vec4(mod(vec2(-545.084, 13.22), -84.58), 0.0, 1.0))))) * mat2(-3178.7154, 4.9, 67.00, 98.15))))).x) : _GLF_FUZZED(-18.03), (_GLF_IDENTITY(true ? _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((mod(vec2(-545.084, 13.22), -84.58) * mat2(_GLF_IDENTITY(-3178.7154, mix(float(_GLF_FUZZED(74.95)), float(-3178.7154), bool(true))), 4.9, 67.00, 98.15))))).x) : _GLF_FUZZED(-18.03), (true ? _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.8, -98.16)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)) : _GLF_FUZZED((mod(vec2(-545.084, 13.22), -84.58) * mat2(-3178.7154, 4.9, 67.00, 98.15))))).x) : _GLF_FUZZED(_GLF_IDENTITY(-18.03, clamp(-18.03, -18.03, -18.03)))) / 1.0)) * 1.0)), (true ? _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED(-18.03)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), ~ (_GLF_IDENTITY(~ (int(3)), (_GLF_IDENTITY(~ (int(3)), max(~ (int(3)), ~ (int(3))))) << 0))), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                continue;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           continue;
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(subgroup_local_id + 1 < _GLF_struct_replacement_3._f6._f2.subgroup_size)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))) >> 0))
              {
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(8148.1424))), _GLF_FUZZED(1.1)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-57.62, (-57.62) - 0.0)), (injectionSwitch)[1]), bvec2(false, true))).y))))
                      return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), log(1.0) + (_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 return;
                }
              }
            }
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec4(-14.62, 470.817, -28.94, 391.388)[1]))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, false || (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec4(-14.62, _GLF_IDENTITY(470.817, max(_GLF_IDENTITY(470.817, clamp(470.817, 470.817, 470.817)), 470.817)), -28.94, 391.388)[1]))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y)))), bool(bvec3(! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y)))), true, true))))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u << _GLF_IDENTITY(uint(7u), uint(7u))))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (virtual_gid) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u << _GLF_IDENTITY(uint(7u), uint(7u))))))))], read, 4, 64, 4);
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   subgroupAll(true);
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), true)), bool(bvec3(bool(bvec2(_GLF_WRAPPED_LOOP(false), true)), false, true)))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))) | 0, _GLF_IDENTITY(int(ivec2((0 >> _GLF_IDENTITY(int(1), int(1))) | 0, 0)), min(int(ivec2((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) + 0)) | _GLF_IDENTITY(0, (0) << 0), 0)), _GLF_IDENTITY(int(ivec2((0 >> _GLF_IDENTITY(int(1), int(1))) | 0, 0)), _GLF_IDENTITY(0, (0) ^ 0) + (int(ivec2((_GLF_IDENTITY(0, int(ivec2(0, 0))) >> _GLF_IDENTITY(int(1), int(1))) | 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(954.249)))) / 1.0) > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (43485 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.1) : injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           else
            {
             return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
