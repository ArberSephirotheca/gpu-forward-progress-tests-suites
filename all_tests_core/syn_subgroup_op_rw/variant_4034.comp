#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))))))))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) / 1) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), 0 ^ (int(_GLF_IDENTITY(2, max(2, 2)))))) / 1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), max(1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), bool(bool(! (! (true))))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) && _GLF_IDENTITY(true, ! (! (true)))))), _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_IDENTITY(false, ! (! (false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, (1 ^ 1), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (ivec4(0, 0, (1 ^ 1), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) >> (ivec4(0, 0, 0, 0) | ivec4(0, 0, 0, 0))))) & -33787); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true)))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true)), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true)))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true), true)), true && _GLF_IDENTITY((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))), bool(bool((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false))))))))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))), false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))).x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(65.16))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, round(length(normalize(1.0))), 1.0))) > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bool(true))))))), false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)))), false))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false))), true, false)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.2), _GLF_FUZZED(1.4)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 1.0, 1.0), mat2x3(mat2x4(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 1.0, 1.0))))))), bvec2(true, true))).x > injectionSwitch.y, true, true))))))), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.2), _GLF_FUZZED(1.4)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 1.0, 1.0), mat2x3(mat2x4(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 1.0, 1.0))))))), bvec2(true, true))).x > injectionSwitch.y, true, true))))))), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.2), _GLF_FUZZED(1.4)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 1.0, 1.0), mat2x3(mat2x4(mat2x3((injectionSwitch)[1], 1.0, 0.0, 0.0, 1.0, 1.0))))))), bvec2(true, true))).x > injectionSwitch.y, true, true))))))), true)), false))))), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))), false || ((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, cos(0.0), 1.0, 0.0))) > injectionSwitch.y)), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(81.58), _GLF_FUZZED(-97.47)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x < injectionSwitch.y))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))), true), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))), false)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false)))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), false)))), true))), false)))))))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(584.557)))) - 0.0))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), true))))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(584.557)))) - 0.0))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), true))))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), false))), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y) && true)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (true ? _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(595.704, -68.14, -82.10)) : vec3(1.0, 0.0, 1.0))) : _GLF_FUZZED(vec3(2448.0867, -253.798, -4846.8263)))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0)), 1.0), vec3(0.0, 1.0, 0.0))), 0.0))), injectionSwitch.x)) > injectionSwitch.y) && true))))))))))) && true), true), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / 1.0))))), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / 1.0)))))) || false))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, false))))), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0)))) : _GLF_FUZZED(-923.634)))))))))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, injectionSwitch.y, injectionSwitch.y)) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), max(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))))))))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3175.2387), _GLF_FUZZED(-8.7)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-93.23) : (injectionSwitch)[1]))), bvec2(true, true)))) * abs(vec2(1.0, 1.0))).x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-2.9), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED((9547.8662))), bvec2(true, false))), vec2(1.0, sqrt(1.0))))))))))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true)), true, false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.3) : injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)), max((true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))), vec2(mat4(_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)), max((true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, length(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 1.0, 1.0, 1.0, 0.0, 1.0)))).y))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, false || (true)), false || ((false) && _GLF_IDENTITY(true, false || (true))))))))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
              barrier();
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0))) / _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(injectionSwitch)))).y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0))) / _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0), mat2x3(_GLF_IDENTITY(mat3(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0)), (mat3(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0))) / _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(injectionSwitch)))))).y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])).x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id, (_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u)))) * workgroup_id, (_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), _GLF_IDENTITY(uint(uvec4(~ (workgroup_size), 1u, 1u, 1u)), (uint(uvec4(~ (workgroup_size), 1u, 1u, 1u))) - 0u)))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) | (workgroup_id))) - 0u)) + 0u), _GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u))) * workgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) && true))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))) || false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(_GLF_IDENTITY(vec2(0.0, 0.0), sqrt(vec2(1.0, 1.0)) * (vec2(0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(sinh(_GLF_IDENTITY(95.06, min(_GLF_IDENTITY(95.06, (95.06) * 1.0), 95.06))))), mix(float((true ? injectionSwitch.y : _GLF_FUZZED(sinh(_GLF_IDENTITY(95.06, min(_GLF_IDENTITY(95.06, (95.06) * 1.0), 95.06)))))), float(_GLF_FUZZED((436.699 + (-3.0 - 335.945)))), bool(false))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.7)), bool(_GLF_IDENTITY(false, (false) && true))))), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y), false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false)))) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (_GLF_IDENTITY(true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-22.18)), bool(false)))), float(_GLF_FUZZED((- -5067.2162))), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)), _GLF_IDENTITY(float(mat3x2(true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-22.18)), bool(false)))), float(_GLF_FUZZED((- -5067.2162))), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)), 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), (true ? float(mat3x2(true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-22.18)), bool(false)))), float(_GLF_FUZZED((- -5067.2162))), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)), 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(916.425)))))))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, 1.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), min(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), (float(_GLF_FUZZED(95.69))) / 1.0), float(_GLF_FUZZED(95.69)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false)))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, 1.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), min(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), (float(_GLF_FUZZED(95.69))) / 1.0), float(_GLF_FUZZED(95.69)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false)))), false || ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, 1.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), min(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), (float(_GLF_FUZZED(95.69))) / 1.0), float(_GLF_FUZZED(95.69)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false))))))) || false) && true))))), ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false)))) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (_GLF_IDENTITY(true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-22.18)), bool(false)))), float(_GLF_FUZZED((- -5067.2162))), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)), _GLF_IDENTITY(float(mat3x2(true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-22.18)), bool(false)))), float(_GLF_FUZZED((- -5067.2162))), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)), 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), (true ? float(mat3x2(true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-22.18)), bool(false)))), float(_GLF_FUZZED((- -5067.2162))), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)), 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(916.425)))))))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, 1.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), min(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), (float(_GLF_FUZZED(95.69))) / 1.0), float(_GLF_FUZZED(95.69)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false)))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, 1.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), min(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), (float(_GLF_FUZZED(95.69))) / 1.0), float(_GLF_FUZZED(95.69)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false)))), false || ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(95.69, float(mat3(95.69, 1.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), min(_GLF_IDENTITY(float(_GLF_FUZZED(95.69)), (float(_GLF_FUZZED(95.69))) / 1.0), float(_GLF_FUZZED(95.69)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)), (true ? float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - 0.0), 0.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0)) : _GLF_FUZZED((1.0 / 32.02)))))), false))))))) || false) && true)))))) && true)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))), true && ((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))))))), true, false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))))))), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, tan(0.0), 0.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0)), 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), false, true), bvec3(bvec3(bvec3(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), false, true)))), true)))))))), true, false, false))) && true, bool(bvec2(_GLF_IDENTITY((bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), _GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) * 1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.7)), bool(false)))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.7)), bool(false)))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true))))), bool(bool((! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.7)), bool(false)))) / 1.0), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(42.52) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.7)), bool(false)))) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(7.7)), bool(false)))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true)))))))))), true, false, false))) && true, true && ((bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), clamp(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) < injectionSwitch.y)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), clamp(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0))), 0.0)), clamp(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))), _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.4) : 0.0)), 0.0, 0.0)))))), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-10.20) : 0.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.3))))))))) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(95.69)), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(float(mat2x4(1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat2x4(1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat2x4(1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, false, false))) && true)), true)))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) << 0u))))) | (subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | 0u, min(_GLF_IDENTITY((subgroup_size) | 0u, (_GLF_IDENTITY((subgroup_size) | 0u, 0u | ((subgroup_size) | 0u))) ^ 0u), (subgroup_size) | 0u))))), (uint(uint(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))) >> (_GLF_IDENTITY(0u ^ 0u, min(0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, clamp(_GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) - (0u | 0u)), 0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, clamp(0u ^ 0u, _GLF_IDENTITY(0u ^ 0u, (false ? _GLF_FUZZED(workgroup_size) : 0u ^ 0u)), 0u ^ 0u))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y)) ? _GLF_FUZZED(uint(int(true))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(1, 0 ^ (1))))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) * 1), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), _GLF_IDENTITY(1u, (1u) + 0u) * ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(uint(_GLF_IDENTITY(int(true), (_GLF_IDENTITY(int(true), 0 ^ (int(true)))) >> 0))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), 0u | ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y)) ? _GLF_FUZZED(uint(int(true))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), clamp(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), clamp(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))))))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size)) + 0u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), min(1, 1)), (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), int(int(_GLF_IDENTITY(_GLF_IDENTITY(min(1, 1), 0 ^ _GLF_IDENTITY((min(1, 1)), max((min(1, 1)), _GLF_IDENTITY((min(1, 1)), ~ (~ ((min(1, 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(min(1, 1), 0 ^ _GLF_IDENTITY((min(1, 1)), max((min(1, 1)), _GLF_IDENTITY((min(1, 1)), ~ (~ ((min(1, 1)))))))), int(ivec3(_GLF_IDENTITY(min(1, 1), 0 ^ _GLF_IDENTITY((min(1, 1)), max((min(1, 1)), _GLF_IDENTITY((min(1, 1)), ~ (~ ((min(1, 1)))))))), 1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), 0 | (int(2)))))), int(2)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) - 0), (false ? _GLF_FUZZED(-11199) : _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) - _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-59370))))))), (true ? int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) - 0), (false ? _GLF_FUZZED(-11199) : _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) - _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-59370))))))) : _GLF_FUZZED(-4053))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(false, ! (! (false))) || ((_GLF_DEAD(false)))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec3(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) && true))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false)))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) && true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && ((_GLF_WRAPPED_LOOP(false)) && true))));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), clamp(uint(_GLF_IDENTITY(1, (1) / (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)) & _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1))))))), _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED((usubBorrow(workgroup_base, subgroup_id, next_virtual_gid) / num_workgroup)) : uint(1))), uint(1), uint(1))), _GLF_IDENTITY(uint(1), (uint(1)) - _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(distance(vec2(79.49, 27.29), vec2(-806.479, -160.710))) : 0.0)), injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)))))), 4, 64, 4);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id))))), subgroup_local_id)) + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), ! (! (bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))))))
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       else
        {
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-57.39) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)), mix(float(_GLF_FUZZED(float((31634 & -91039)))), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-57.39) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))), bool(true)))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-435.135), _GLF_FUZZED(8325.7376)), clamp(vec2(_GLF_FUZZED(_GLF_IDENTITY(-435.135, max(-435.135, -435.135))), _GLF_FUZZED(8325.7376)), vec2(_GLF_FUZZED(-435.135), _GLF_FUZZED(8325.7376)), vec2(_GLF_FUZZED(-435.135), _GLF_FUZZED(_GLF_IDENTITY(8325.7376, 0.0 + (8325.7376)))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))), false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), _GLF_IDENTITY(bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-12.32)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0)) >> 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false))), false, false, true))) || false), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false), _GLF_IDENTITY(false, ! (! (false))), false, true))) || false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false), false, false, true))) || false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))) || false))), ! (! (! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))), false, false, true))) || false))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))) || false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))) || false))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, ! (! (false))), true)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))) || false, bool(bool((bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))) || false))))))), ! (! (! ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))) || false))))))))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.2)))) / 1.0)) / 1.0) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, false)))))))) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, injectionSwitch.y))))))
        {
        }
       else
        {
         do
          {
           atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, (read) | _GLF_IDENTITY((read), clamp((read), _GLF_IDENTITY((read), ((read)) | (_GLF_IDENTITY((read), 0u ^ ((read))))), (read))))))), clamp(_GLF_IDENTITY(read, 1u * (read)), read, read)), _GLF_IDENTITY(0u + (_GLF_IDENTITY(read, (read) ^ 0u)), max(0u + (read), _GLF_IDENTITY(0u + (read), (0u + (read)) | (0u + (_GLF_IDENTITY(read, (read) | (_GLF_IDENTITY(read, ~ (~ (read))))))))))), _GLF_IDENTITY(read, max(read, read)), _GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), min(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), (_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(read, (read) | (read))))) - 0u), _GLF_IDENTITY(read, (read) | (read)))))), _GLF_IDENTITY((_GLF_IDENTITY(read, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(subgroup_id))), 0u + (read)), _GLF_IDENTITY(read, max(_GLF_IDENTITY(read, _GLF_IDENTITY((read) | 0u, ((read) | 0u) | (_GLF_IDENTITY((read) | 0u, ~ (~ ((read) | 0u)))))), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, clamp(read, read, read))) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(read, (read) | (read))))), ((_GLF_IDENTITY(read, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(subgroup_id))), 0u + (read)), _GLF_IDENTITY(read, max(_GLF_IDENTITY(read, _GLF_IDENTITY((read) | 0u, ((read) | 0u) | (_GLF_IDENTITY((read) | 0u, ~ (~ ((read) | 0u)))))), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, clamp(read, read, read))) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(read, (read) | (read)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))) / (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u ^ (1u)), (_GLF_IDENTITY(1u, 0u ^ (1u))) ^ 0u) ^ 0u)), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))) != (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1, 0 ^ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))), 0, 0), (ivec3(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))), 0, 0)) * ivec3(1, 1, 1)))), _GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))))) != _GLF_IDENTITY((0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, (1) - 0)), 0 | (max(1, _GLF_IDENTITY(1, (1) - 0))))) | 1, 0 ^ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1)))), min((0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, (1) - 0)), 0 | (max(1, _GLF_IDENTITY(1, (1) - 0))))) | 1, 0 ^ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1)))), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, (1) - 0)), 0 | (max(1, _GLF_IDENTITY(1, (1) - 0))))) | 1, 0 ^ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (~ (int(_injected_loop_counter)))))) != (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1, 0 ^ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0))) | 1)))))) || false), true, false, true))); _injected_loop_counter ++)
      {
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), false)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), true && ((! (false))))) && true))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (! (true))), false), true, true))))))) || false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4610.7504)), vec2(_GLF_FUZZED(5191.5508), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}
