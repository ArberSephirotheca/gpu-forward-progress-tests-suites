#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id;
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), false))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bool(! (false))))), false || (_GLF_IDENTITY((! (false)), ((! (false))) && true))), ((! (false))) || false))) && true)), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), false))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bool(! (false))))), false || (_GLF_IDENTITY((! (false)), ((! (false))) && true))), ((! (false))) || false))) && true)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), false))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bool(! (false))))), false || (_GLF_IDENTITY((! (false)), ((! (false))) && true))), ((! (false))) || false))) && true)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8.8) : injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-60.45)), vec2(_GLF_FUZZED(37.42), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(false))
      return;
     GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y = subgroup_id;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false, true, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false, true, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      break;
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, true)))) && true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec4(bool(bvec4(false, true, true, false)), true, true, false))), true && (bool(bvec4(false, true, true, false)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(ivec2(_GLF_IDENTITY(16350, int(ivec4(16350, 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), -23507).t) : _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x = subgroup_size;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), false, true, true)))))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-59161) : _injected_loop_counter --)), (_injected_loop_counter --) * 1))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) << 0))); _injected_loop_counter --)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))));
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / 1), 2, _GLF_IDENTITY(2, int(ivec4(2, 0, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED((++ _injected_loop_counter)) : int(2))), int(2)))) | (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(3.5, 7.4)))).x, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x : _GLF_IDENTITY(_GLF_FUZZED(3.7), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(3.7), _GLF_IDENTITY(float(mat4x3(_GLF_FUZZED(3.7), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(acosh(-0.3)) : _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)), 0.0 + (float(mat4x3(_GLF_FUZZED(3.7), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(acosh(-0.3)) : _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)))))))))), _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, sqrt(0.0)))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_ZERO(0.0, injectionSwitch.x))).x;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), int(int(int(0)))), int(0))))) * 1)) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) | 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.x = num_workgroup, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.x = num_workgroup) / (1u & 1u), 0u | ((GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.x = num_workgroup) / (1u & 1u))));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)))) ^ uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)))) ^ uvec3(0u, 0u, 0u)).x, (0u | 0u), 1u, 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)))) ^ uvec3(0u, 0u, 0u)).x, (0u | 0u), 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)))) ^ uvec3(0u, 0u, 0u)).x, (0u | 0u), 1u, 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)))) ^ uvec3(0u, 0u, 0u)).x, (0u | 0u), 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) << 0u));
 GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.z = workgroup_size;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), max(_GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), clamp(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), (((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))))), ((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), max(_GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), clamp(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), (((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))))), ((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), max(_GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), clamp(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), (((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))))), ((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))), 0u)), ~ (~ (uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), max(_GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), clamp(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), ((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), (((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))))), ((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))), 0u))))))))).x;
 do
  {
   _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = workgroup_id, _GLF_IDENTITY((true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) | (workgroup_id), uint(uvec4(_GLF_IDENTITY((workgroup_id) | (workgroup_id), ~ (~ ((workgroup_id) | _GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(max((workgroup_id), (workgroup_id)), clamp(max((workgroup_id), (workgroup_id)), max((workgroup_id), (workgroup_id)), max((workgroup_id), (workgroup_id)))))))), 1u, 0u, 0u)))), 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) + 0u)))) ^ _GLF_IDENTITY(0u, ~ (~ (0u)))) : _GLF_FUZZED(subgroup_local_id)), ((true ? _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) | (workgroup_id), uint(uvec4(_GLF_IDENTITY((workgroup_id) | (workgroup_id), ~ (~ ((workgroup_id) | _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id)))))), 1u, 0u, 0u)))), ~ (~ (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) | (workgroup_id), uint(uvec4(_GLF_IDENTITY((workgroup_id) | (workgroup_id), ~ (~ ((workgroup_id) | _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id)))))), 1u, 0u, 0u))))))), 0u ^ (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))))) ^ _GLF_IDENTITY(0u, ~ (~ (0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u)))) * (1u & 1u)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
      barrier();
    }
  }
 uint workgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.z * GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.z;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) * ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 0u + (~ (workgroup_base)))))) + 0u)) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), workgroup_base, workgroup_base)))), 0u | ((uint(workgroup_base)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), workgroup_base, workgroup_base)))), 0u | ((uint(workgroup_base)))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), workgroup_base, workgroup_base)))), 0u | ((uint(workgroup_base))))) + 0u)))) - 0u))) + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y, (GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y) / (uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(((+ -23.92) + -50.14))), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) & (0u ^ 1u))) * GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x + subgroup_local_id;
 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y = virtual_gid;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x, (GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)))).x) | (GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x)), min(workgroup_base + GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x) | 0u))), workgroup_base + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y, min(GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y, GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y)), GLF_merged3_0_1_13_1_1_11_2_1_14num_workgroupsubgroup_idworkgroup_size.y)) * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id) | _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id), clamp(_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id), uvec3(uvec3((GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)))), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id), (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)))))), GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x)) + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1))) ^ 0u)) % GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.x);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y], max(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y], _GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y], _GLF_IDENTITY((buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y]) << 0u, ~ (_GLF_IDENTITY(~ ((buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y]) << _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(129717u)))), (~ ((buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y]) << 0u)) ^ 0u)))), (_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y], _GLF_IDENTITY((buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y]) << 0u, ~ (_GLF_IDENTITY(~ ((buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y, uint(uint(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y)))))]) << 0u), (~ ((buf[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))).y]) << 0u)) ^ 0u))))) << 0u))), 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u)], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1))))), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-86165))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) / 1), 7, 7))))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), true && ((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-722.801), _GLF_FUZZED(2327.8381)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.9, -1.8)))), injectionSwitch)))))[0], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-6.7)), bvec2(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))))))) - vec2(0.0, 0.0)).y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(subgroup_local_id + 1 < _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, max(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id, GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id))) | (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id)).x)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y), uint(_GLF_IDENTITY(uvec4(~ (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y), 0u, 0u, 1u), (uvec4(~ (GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y), 0u, 0u, 1u)) >> uvec4(0u, 0u, 0u, 0u))))))], read, 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           return;
          }
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       barrier();
                      }
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                  return;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7865.5402), _GLF_FUZZED(-30.16)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-7865.5402, (_GLF_IDENTITY(-7865.5402, min(-7865.5402, -7865.5402))) * 1.0)), _GLF_FUZZED(-30.16)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y) || false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bvec3(bool(_GLF_IDENTITY(false, false || (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), true && ((_GLF_IDENTITY(true, (true) || false)))))), (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec2((false), true))))), bool(bvec3(bool(_GLF_IDENTITY(false, false || (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y)))))), (bool(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (false))), bool(bvec3(bool(_GLF_IDENTITY(false, false || (false))), false, _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.2)), bool(false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y))))))) || false)) && true))), ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))))))))))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : 1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))))))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))), false || (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))), (_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))), clamp(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))), false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))), false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))))))))) || false)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-44313))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 1 * (1))), int(1)))))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), 0 ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), 0 >> _GLF_IDENTITY(int(1), int(1)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), 0 ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), 0 >> _GLF_IDENTITY(int(1), int(1)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (0) | (0)) >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))))))))))))))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(int(4))), 4))), int(4)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1543) : _GLF_IDENTITY(int(4), int(4))))))) | 0))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
                break;
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 atomicStore(buf[GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id.y], _GLF_IDENTITY(read, ~ (_GLF_IDENTITY(~ (read), clamp(~ (read), ~ (read), ~ (read))))), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), int(ivec4(_GLF_IDENTITY(4, clamp(4, 4, 4)), 1, 1, 1)))) | 0), 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY((0 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))), ((0 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))) != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(7), int(7))) << 0))); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))), false || (bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, false))))))))))), false || (bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(int(int(1)), int(ivec4(int(int(1)), 0, 0, 1))))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       else
        {
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), min(dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, exp(0.0)))))), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))), sin(0.0), 0.0))).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true)), bool(bvec2(bool(bvec2(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true)), true)))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}
