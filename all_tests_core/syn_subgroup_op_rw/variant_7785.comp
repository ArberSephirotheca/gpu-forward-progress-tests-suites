#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 uvec3 _f0;
 uvec4 _f1;
 mat4x2 _f2;
 mat3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_14 {
 ivec2 _f0;
 bool _f1;
 vec4 _f2;
 mat2 _f3;
 vec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
 vec4 _f1;
 mat3x4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 bvec4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_11 {
 uvec3 _f0;
 uvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 mat4x3 _f1;
 _GLF_struct_12 _f2;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 vec3 _f1;
 ivec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 vec4 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
 vec2 _f4;
 uvec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 float _f1;
 _GLF_struct_8 _f2;
 bool _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_18 {
 ivec3 _f0;
 uint workgroup_base;
 _GLF_struct_10 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_15 _f3;
 _GLF_struct_17 _f4;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 bvec4 _f1;
 uint workgroup_size;
 ivec4 _f2;
 mat2 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_3 {
 uint _f0;
 vec2 _f1;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 mat3x2 _f1;
 uvec2 _f2;
 ivec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 _GLF_struct_2 _f0;
 mat4 _f1;
 vec4 _f2;
 _GLF_struct_3 _f3;
 mat3 _f4;
 mat3x2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat4 _f1;
 float _f2;
 vec3 _f3;
 mat2x3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 bool _f1;
 bvec2 _f2;
 _GLF_struct_4 _f3;
 vec3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(_GLF_struct_0(ivec3(1), mat4(1.0), 1.0, vec3(1.0), mat2x3(1.0), mat4x2(1.0)), bvec3(true)), true, bvec2(true), _GLF_struct_4(gl_SubgroupSize, _GLF_struct_2(mat4(1.0), mat3x2(1.0), uvec2(1u), ivec3(1), mat2x4(1.0)), mat4(1.0), vec4(1.0), _GLF_struct_3(1u, vec2(1.0)), mat3(1.0), mat3x2(1.0), mat4(1.0)), vec3(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(bvec3(true), bvec4(true), gl_WorkGroupSize.x, ivec4(1), mat2(1.0), mat3(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(ivec3(1), _GLF_struct_replacement_6.workgroup_size * workgroup_id, _GLF_struct_10(_GLF_struct_7(uvec2(1u), vec4(1.0), mat3x4(1.0), mat3x2(1.0), vec2(1.0), uvec3(1u), mat4(1.0)), 1.0, _GLF_struct_8(mat2x4(1.0), uvec4(1u), mat3x2(1.0), ivec2(1)), true, _GLF_struct_9(ivec3(1), vec3(1.0), ivec4(1), 1u)), _GLF_struct_13(_GLF_struct_11(uvec3(1u), uvec4(1u), uvec2(1u)), mat4x3(1.0), _GLF_struct_12(ivec3(1), ivec3(1), mat3x2(1.0), bvec4(true), uvec3(1u))), _GLF_struct_15(_GLF_struct_14(ivec2(1), true, vec4(1.0), mat2(1.0), vec4(1.0), mat2x3(1.0)), vec4(1.0), mat3x4(1.0), vec4(1.0)), _GLF_struct_17(_GLF_struct_16(uvec3(1u), uvec4(1u), mat4x2(1.0), mat3(1.0), bvec4(true)), vec2(1.0)));
 uint virtual_gid = _GLF_struct_replacement_18.workgroup_base + subgroup_id * _GLF_struct_replacement_5._f3.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_18.workgroup_base + subgroup_id * _GLF_struct_replacement_5._f3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_5._f3.subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(subgroup_local_id + 1 < _GLF_struct_replacement_5._f3.subgroup_size)
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
         subgroupAll(false);
        }
       else
        {
         atomicStore(buf[virtual_gid], read, 4, 64, 4);
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(true);
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))));
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
}
