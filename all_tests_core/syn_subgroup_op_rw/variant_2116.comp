#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(3652.5087)), min(_GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(3652.5087)), mix(float((true ? 1.0 : _GLF_FUZZED(3652.5087))), float(_GLF_FUZZED(vec4(-13.23, -1.6, -2.2, -400.698).a)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (true ? 1.0 : _GLF_FUZZED(3652.5087))))), injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
    {
     GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz = GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_id;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         continue;
        }
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz = _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid, _GLF_IDENTITY(uvec3(uvec4(GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid, 1u)), ~ (~ (uvec3(uvec4(GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid, 1u))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size, ~ (~ (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) >> 0)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(700.868)), bool(false)))))))) ^ 0)); _injected_loop_counter --)
  {
   do
    {
     GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.w = _GLF_IDENTITY(GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup, clamp(_GLF_IDENTITY(GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup, (true ? GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup : _GLF_FUZZED(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup))), GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup, GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup)).w;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    break;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)), bool(bvec3(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.y = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.w;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false))))), (bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false)))))) && true))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false))))), (bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false)))))) && true))), (bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false))))), (bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false)))))) && true)))) || false))))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), bool(bvec3(false, false, true))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), bool(bvec3(false, false, true))), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), bool(bvec3(false, false, true))), false)), _GLF_IDENTITY(false, (false) || false))), (bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), bool(bvec3(false, false, true))), false)), false))) || false))) && true), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false)), false))))))
  return;
 GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.z = workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, max(0, 0))))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.z, (true ? GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.z : _GLF_FUZZED(subgroup_local_id)));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u) * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z, (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z) << 0u), GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.z));
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y = workgroup_base;
 uint subgroup_base = subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y;
 for(int _injected_loop_counter = ((0 | 0) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), min(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), max(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), false || ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), min(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), max(((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))), ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), clamp(_GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 + (2)))) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))), _GLF_IDENTITY(int(2), (int(2)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))))), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), (int(_GLF_IDENTITY(2, max(2, 2)))) + 0), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), min(clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))))), ~ (~ ((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), clamp((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2)))), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), int(2))))))))))) >> _GLF_IDENTITY(int(2), int(2))))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), max(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-7.5, (-7.5) - 0.0), 6.6))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, sqrt(1.0)))))))[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_IDENTITY(_GLF_FUZZED(-9.2), (true ? _GLF_FUZZED(_GLF_IDENTITY(-9.2, (-9.2) - 0.0)) : _GLF_FUZZED(-9.4)))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(_GLF_IDENTITY(-9.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-9.2, (-9.2) * 1.0) : _GLF_FUZZED(45.17))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)), min(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (0)))])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))), (injectionSwitch)[1]))), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(25.27) : (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (false ? _GLF_FUZZED(34.41) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), max(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-7.5, (-7.5) - 0.0), 6.6))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, sqrt(1.0)))))))[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_IDENTITY(_GLF_FUZZED(-9.2), (true ? _GLF_FUZZED(_GLF_IDENTITY(-9.2, (-9.2) - 0.0)) : _GLF_FUZZED(-9.4)))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(_GLF_IDENTITY(-9.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-9.2, (-9.2) * 1.0) : _GLF_FUZZED(45.17))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)), min(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (0)))])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))), (injectionSwitch)[1]))), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(25.27) : (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (false ? _GLF_FUZZED(34.41) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), max(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-7.5, (-7.5) - 0.0), 6.6))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, sqrt(1.0)))))))[1]), bvec2(true, _GLF_IDENTITY(true, bool(bool(true)))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_IDENTITY(_GLF_FUZZED(-9.2), (true ? _GLF_FUZZED(_GLF_IDENTITY(-9.2, (-9.2) - 0.0)) : _GLF_FUZZED(-9.4)))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(_GLF_IDENTITY(-9.2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-9.2, (-9.2) * 1.0) : _GLF_FUZZED(45.17))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)), min(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(0, ~ (~ (0)))])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))), (injectionSwitch)[1]))), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(25.27) : (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(-9.2)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (false ? _GLF_FUZZED(34.41) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, true))).y)), 0.0)))))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)))))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x = subgroup_base;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y, max(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y, GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y)) + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x) ^ 0u, clamp((GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x) ^ 0u, (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x) ^ 0u, (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.x) ^ 0u))) + _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, _GLF_IDENTITY(max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x), (_GLF_IDENTITY(max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x), min(max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x), max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x)))) ^ 0u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.y = virtual_gid;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))), true, false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))) && true)), ! (! ((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))))) && true))))))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))), (max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)))) / 1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z = GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.y;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id.y + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id, min(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id, uvec3(0u, 0u, 0u) + (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id)), GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_baseworkgroup_baseworkgroup_id)).x + (_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, uint(uvec3((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, 0u, 0u))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     return;
    }
  }
 GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.x = next_virtual_gid;
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.x = _GLF_IDENTITY(GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.x, min(GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.x, GLF_merged2_0_3_71_3_1_13GLF_merged3_0_1_16_1_1_11_2_1_12next_virtual_gidvirtual_gidworkgroup_idnum_workgroup.xyz.x));
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(88932) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = _GLF_IDENTITY(atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2), (_GLF_IDENTITY(atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2), (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2), max(_GLF_IDENTITY(atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2), clamp(_GLF_IDENTITY(atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2), 0u ^ (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2))), atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup, (false ? _GLF_FUZZED((GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup + subgroup_id)) : GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup)).xyz.z], 4, 64, 2), atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, max((2) << 0, (2) << 0)))))), atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2))), _GLF_IDENTITY(_GLF_IDENTITY(0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)), clamp(0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)), _GLF_IDENTITY(0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)), (0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2))) - 0u), 0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)))), 0u | (_GLF_IDENTITY(0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)), clamp(0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)), _GLF_IDENTITY(0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)), (0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2))) - 0u), 0u | (atomicLoad(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], 4, 64, 2)))))))) / 1u)) / 1u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2) == 0)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       subgroupAll(false);
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       do
        {
         atomicStore(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.x], uint(1), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1538.7694) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)), false, false))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
       do
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(89761))), 1))) - 0) | 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 | 1, clamp(_GLF_IDENTITY(1 | 1, int(_GLF_IDENTITY(int(1 | 1), int(int(int(1 | 1)))))), 1 | 1, 1 | 1)))))); _injected_loop_counter ++)
          {
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       atomicStore(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.x], uint(1), 4, 64, _GLF_IDENTITY(4, (4) | 0));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(true, true && (true)))), bool(bool(bool(bvec4(false, false, true, true)))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), true, true)), true && (bool(bvec4(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), true, true)))), bool(bool(bool(bvec4(false, false, true, true)))))), (! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true))))))) || false), true, true, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))), (! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true))))))) || false), true, true, false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))), true, false)))))), bool(bool(bool(bvec4(false, false, true, true)))))), (! (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, true)), bool(bool(bool(bvec4(false, false, true, true))))))) || false), true, true, false)))) && true))), true && (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true)))))), (! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bool(bool(bvec4(false, false, true, true))))))) || false), true, _GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bool((true))))), false || (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bool((true))))))), false)))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 subgroupBarrier();
 atomicStore(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidnum_workgroup.xyz.z], read, 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) ^ 1) & (-27853 | -46991))); _injected_loop_counter --)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, cos(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 0.0, 0.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
}
