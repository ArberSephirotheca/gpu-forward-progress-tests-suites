#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))), (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 1), _GLF_IDENTITY(int(int((1 ^ 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(int((1 ^ 1)))), int(ivec2(int(int(int((1 ^ 1)))), 1)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(int((1 ^ 1)))), int(ivec2(int(int(int((1 ^ 1)))), 1)))), (int(_GLF_IDENTITY(int(int(int((1 ^ 1)))), int(ivec2(int(int(int((1 ^ 1)))), 1))))) | 0) : _GLF_FUZZED(-95784))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(6), ~ (~ (int(6)))))), ~ (~ ((~ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), ~ (~ (int(6)))))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4069.6511)), float(injectionSwitch.y), bool(true)))) + 0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u + _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), gl_NumWorkGroups.x, gl_NumWorkGroups.x))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_NumWorkGroups.x), (_GLF_IDENTITY((gl_NumWorkGroups.x), ~ (~ ((gl_NumWorkGroups.x))))) + 0u))), (uint(uint(_GLF_IDENTITY((gl_NumWorkGroups.x), (_GLF_IDENTITY((gl_NumWorkGroups.x), ~ (~ ((gl_NumWorkGroups.x))))) + 0u)))) - 0u)), (0u + (gl_NumWorkGroups.x)) ^ 0u));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(float(-32228), (float(-32228)) / 1.0))), vec2(_GLF_FUZZED(vec3(-5.7, _GLF_IDENTITY(808.034, clamp(_GLF_IDENTITY(808.034, (808.034) - 0.0), 808.034, 808.034)), 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, min(_GLF_IDENTITY(-32228, int(int(-32228))), -32228))))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y))))))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-37.14)), bool(false))))), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-37.14)), bool(false))))), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))), ((! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-37.14)), bool(false))))), false || (! ((injectionSwitch.x < injectionSwitch.y))))))))) || false)))))), bvec2(bvec4(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y))))))))))), true, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y))))))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-37.14)), bool(false))))), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-37.14)), bool(false))))), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))), ((! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-37.14)), bool(false))))), false || (! ((injectionSwitch.x < injectionSwitch.y))))))))) || false)))))), bvec2(bvec4(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y))))))))))), true, true)))))), true))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(5.2) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0), clamp(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, _GLF_IDENTITY((vec3(-5.7, 808.034, 4.5).g), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2((vec3(-5.7, 808.034, 4.5).g), 1.0, 1.0, 1.0), (mat2((vec3(-5.7, 808.034, 4.5).g), 1.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), 0.0 + (float(_GLF_IDENTITY(mat2((vec3(-5.7, 808.034, 4.5).g), 1.0, 1.0, 1.0), (mat2((vec3(-5.7, 808.034, 4.5).g), 1.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) * 1.0), (_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0)) + 0.0), _GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0)))), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(7.3), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), abs(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))) * (mix(vec2(((injectionSwitch))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-92.28)), float(1.0), bool(true)))), float(_GLF_FUZZED(-84.39)), bool(false)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-8.8, 6.1)) : (injectionSwitch) * mat2(1.0)), vec2(vec4((false ? _GLF_FUZZED(vec2(-8.8, 6.1)) : (injectionSwitch) * mat2(1.0)), 1.0, 1.0)))))))))[1]), vec2(_GLF_FUZZED(7.3), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-615.363), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6012.9808)), bvec2(true, false))), injectionSwitch, injectionSwitch)).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))) < injectionSwitch.y)))))))).y, 1.0 * (false ? _GLF_FUZZED(5.2) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0), clamp(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0), (_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0)) + 0.0), _GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0)))), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(7.3), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), abs(vec2(1.0, 1.0)) * (mix(vec2(((injectionSwitch))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0))), (false ? _GLF_FUZZED(vec2(-8.8, 6.1)) : _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(685.495), _GLF_FUZZED(-7624.6018)), vec2(_GLF_IDENTITY(((injectionSwitch))[0], (true ? _GLF_IDENTITY(((injectionSwitch))[0], mix(float(_GLF_FUZZED(7428.1258)), float(((injectionSwitch))[0]), bool(true))) : _GLF_FUZZED(-79.06))), ((injectionSwitch))[1]), bvec2(true, true))) * mat2(1.0))))))))[1]), vec2(_GLF_FUZZED(7.3), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))) < injectionSwitch.y)))))))).y)), mix(float(_GLF_FUZZED(65.50)), float(false ? _GLF_FUZZED(5.2) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5).g, (vec3(-5.7, 808.034, 4.5).g) * 1.0)), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ (0 | 0))) | 0)], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(7.3), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.5)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))) < injectionSwitch.y)))))))).y), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (-32228))))), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5), min(_GLF_IDENTITY(vec3(-5.7, 808.034, 4.5), mix(vec3((vec3(-5.7, 808.034, 4.5))[0], _GLF_IDENTITY((vec3(-5.7, 808.034, 4.5))[1], min((vec3(-5.7, 808.034, 4.5))[1], (vec3(-5.7, 808.034, 4.5))[1])), (vec3(-5.7, 808.034, 4.5))[2]), vec3(_GLF_FUZZED(18.23), _GLF_FUZZED(6.9), _GLF_FUZZED(5.0)), bvec3(false, false, false))), vec3(-5.7, 808.034, 4.5))).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) * 1)], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))), mat2(1.0) * (vec2(injectionSwitch[_GLF_IDENTITY(0, 1 * (0))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((1) * 1, min((1) * 1, _GLF_IDENTITY((1) * 1, ((1) * 1) ^ 0))))], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))))))), max((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mat2(1.0) * (vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-34.03), _GLF_FUZZED(vec3(-6.5, -976.059, 66.57).y)), bvec2(false, _GLF_IDENTITY(false, (false) && true))))[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))))))[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(vec4(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, sin(0.0), 1.0)))))), min(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0))))) < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(vec4(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, sin(0.0), 1.0)))))), min(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0))))) < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(-32228, (-32228) << 0)))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(((injectionSwitch.x < injectionSwitch.y))))))))))))))))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), clamp(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(7), int(7))))) / 1)], _GLF_FUZZED(float(-32228))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((4.1 - 0.6))), float(injectionSwitch.y), bool(true))), false || (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (true ? vec2(injectionSwitch) : _GLF_FUZZED(vec2(-22.85, 716.599)))))).x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))).y)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-32228))), vec2(_GLF_FUZZED(vec3(-5.7, 808.034, 4.5).g), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))).y))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(62.57) : injectionSwitch.y))))))
                continue;
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
          {
           do
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) >> 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) | 0))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-4.8)), float((injectionSwitch)[1]), bool(true)))), vec2(_GLF_FUZZED(vec3(-452.425, -686.449, -4.6).r), _GLF_FUZZED(0.3)), bvec2(false, false))).y)), false))) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u ^ (subgroup_size)) : _GLF_FUZZED(subgroup_local_id)), ~ (~ ((_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u ^ _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(105545u) : (subgroup_size)))) : _GLF_FUZZED(subgroup_local_id)))))), subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) >> 0u) ^ (subgroup_id * subgroup_size))) ^ _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u), (~ ((_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u)) - 0u))))), uint(uvec3(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), (~ (3u)) >> (0u | 0u))))), max(uint(_GLF_IDENTITY(3u, (3u) >> 0u)), uint(3u)))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))) : _GLF_FUZZED(num_workgroup))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(max(uint(3u), uint(3u)), uint(_GLF_IDENTITY(uvec2(max(uint(3u), uint(3u)), 0u), (uvec2(max(uint(3u), uint(3u)), 0u)) << (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u))))))) : _GLF_FUZZED(num_workgroup))), 1u, 1u)))), ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) | ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), ~ (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))))), _GLF_IDENTITY(uint(3u), min(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uint(1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uint(1u))), 0u ^ (_GLF_IDENTITY(1u, uint(uint(1u)))))), (false ? _GLF_FUZZED(num_workgroup) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uint(1u))), 0u ^ (_GLF_IDENTITY(1u, uint(uint(1u)))))))))), 1u, _GLF_IDENTITY(1u, min(1u, 1u)))) * (uint(3u)))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u))) | (0u)), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, uint(uint(0u))))))))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u)), uint(uvec3(0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(3u), max(uint(_GLF_IDENTITY(3u, (3u) >> 0u)), uint(3u)))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) | ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), ~ (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, max(_GLF_IDENTITY(3u, (3u) | (3u)), _GLF_IDENTITY(3u, 1u * (3u))))), min(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(3u), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, clamp(3u, 3u, 3u)), (_GLF_IDENTITY(3u, ~ (~ (3u)))) >> 0u)), uint(3u)))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), clamp(uint(3u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u))), uint(3u))), max(uint(3u), uint(3u)))), ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) | ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), ~ (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))))), min(_GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(3u), max(uint(_GLF_IDENTITY(3u, (3u) >> 0u)), uint(3u)))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) | ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), ~ (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))))), _GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(3u), max(uint(_GLF_IDENTITY(3u, (3u) >> 0u)), uint(3u)))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(max(uint(3u), uint(3u)), min(max(uint(3u), uint(3u)), max(uint(3u), uint(3u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) ^ 0u), max(uint(3u), uint(_GLF_IDENTITY(3u, (3u) / 1u)))))) | ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), ~ (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))))))), _GLF_IDENTITY(uint(3u), min(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))))))) * 1u), 0u, 0u))))) | ((_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))) * (uint(3u)))) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u)), max(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u)), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) | 0u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))) >> 0u)))), uint(uvec3(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(3u), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(3u, (3u) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, min(3u, 3u))) * 1u)) | 0u), (_GLF_IDENTITY(3u, max(_GLF_IDENTITY(3u, min(3u, 3u)), 3u))) >> 0u)), uint(3u)))), min(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))), ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))) | ((_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))), ~ (_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u)))))))), _GLF_IDENTITY(uint(3u), min(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u * (uint(3u)), 0u + (1u * (uint(3u)))))))), 0u, 0u)))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(workgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base)), 0u)), max(uint(uvec2(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base), (uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base)) / 1u)) / 1u)), 0u)), uint(uvec2(_GLF_IDENTITY(workgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base)), 0u))))) + _GLF_IDENTITY(subgroup_base, uint(uint(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u), 1u * (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) | 0u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | 0u);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_id) : buf[virtual_gid])), 4, 64, 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, abs(0.0), exp(0.0), 0.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat4x2(6856.3014, -52.33, 6.1, -584.430, 46.26, -7025.6595, -9.5, 8419.9645)) : mat4x2(injectionSwitch, 0.0, abs(0.0), exp(0.0), 0.0, 1.0, 1.0))))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 0.0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))), true))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) && true)))))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), bool(bvec3(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))) && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) && true)))))))), (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))), (subgroup_local_id), (subgroup_local_id))) >> 0u), subgroup_local_id)) % 2), ((subgroup_local_id % 2)) + 0u) == 0)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(7.4))), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(7.4))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(7.4))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(7.4)))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bool(! (false))))) || false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))), true))))), ! (! (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true)))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(4.9))) > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true)))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(4.9))) > injectionSwitch.y))))))), ! (! (bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(4.9))) > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-6.1), max(_GLF_FUZZED(-6.1), _GLF_IDENTITY(_GLF_FUZZED(-6.1), min(_GLF_IDENTITY(_GLF_FUZZED(-6.1), clamp(_GLF_FUZZED(-6.1), _GLF_FUZZED(-6.1), _GLF_FUZZED(-6.1))), _GLF_FUZZED(-6.1))))), _GLF_FUZZED(-99.79)), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(step(176.696, injectionSwitch)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], float(_GLF_IDENTITY(mat2x4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.5, 191.625).rg) : injectionSwitch)))), max(injectionSwitch, injectionSwitch)))[1], 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), 1.0, 1.0), transpose(transpose(mat2x4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))), bvec2(_GLF_IDENTITY(true, ! (! (true))), true))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(-99.79)), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) / vec2(1.0, 1.0))[1], float(_GLF_IDENTITY(mat2x4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), 1.0, 1.0), transpose(transpose(mat2x4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1], 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))), bvec2(_GLF_IDENTITY(true, ! (! (true))), true))).x) / 1.0) < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(147938u)), _GLF_FUZZED(12.74)), mix(vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY(_GLF_FUZZED(float(147938u)), max(_GLF_FUZZED(float(147938u)), _GLF_IDENTITY(_GLF_FUZZED(float(147938u)), (_GLF_FUZZED(float(147938u))) - 0.0))), _GLF_FUZZED(12.74)))[_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0, 0), min(ivec2(0, 0), ivec2(0, 0)))), _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(0, 0), min(ivec2(0, 0), ivec2(0, 0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_IDENTITY(ivec2(0, 0), min(ivec2(0, 0), ivec2(0, 0))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | ivec2(0, 0)), min(ivec2(0, 0), ivec2(0, 0)))))))], ((vec2(_GLF_FUZZED(float(147938u)), _GLF_FUZZED(12.74)))[0]) / 1.0), (vec2(_GLF_FUZZED(float(147938u)), _GLF_FUZZED(12.74)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-7202.4723, (-7202.4723) - _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_FUZZED(float((95515)))), bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, exp(0.0), sqrt(1.0), abs(0.0), 0.0))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, exp(0.0), sqrt(1.0), abs(0.0), 0.0))) > injectionSwitch.y), true, true)), false || (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, exp(0.0), sqrt(1.0), abs(0.0), 0.0))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, exp(0.0), sqrt(1.0), abs(0.0), 0.0))) > injectionSwitch.y)))), true, true)))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0)))), 0.0, 1.0, _GLF_IDENTITY(exp(0.0), abs(0.0) + (exp(0.0))), sqrt(1.0), abs(0.0), 0.0))) > injectionSwitch.y))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), (0.0) + 0.0), 0.0, 0.0)))), 0.0, 1.0, exp(0.0), sqrt(1.0), abs(0.0), 0.0))) > injectionSwitch.y)))))), false))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, true && (true)), true))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), true, true))))), _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, true && (true)), true))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), true, true))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), true, true))))), false))), _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(false, ! (! (false))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), true && (true)), true))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), true, true))))), _GLF_IDENTITY(true, ! (! (true)))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, true && (true)), true))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), true, true))))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), true, true))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), true, true))))))), false)))), _GLF_IDENTITY(true, ! (! (true)))))), false)), true, true)))))))))).x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), (0 ^ 0) + (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
              {
               if(_GLF_DEAD(false))
                return;
               subgroupAll(false);
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) || ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(_GLF_IDENTITY(2, 0 ^ (2)))))) >> 0))), max((1 << _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), max(int(_GLF_IDENTITY(2, (2) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(ivec4(int(_GLF_IDENTITY(2, (2) - 0)), 0, 0, 0))), 1, 0))))), int(2))), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(2))), clamp((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(2))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(2))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(2))))) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_IDENTITY(_GLF_FUZZED(-78639), (_GLF_FUZZED(-78639)) ^ 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(2), int(2))), (true ? (_GLF_IDENTITY(int(2), int(2))) : _GLF_FUZZED(-50769))), (_GLF_IDENTITY((_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))), (true ? (_GLF_IDENTITY(int(2), int(2))) : _GLF_FUZZED(-50769)))) ^ 0)), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(2), int(2)))), ((~ (_GLF_IDENTITY(int(2), int(2))))) | ((~ (_GLF_IDENTITY(int(2), int(2)))))), (~ (~ (_GLF_IDENTITY(int(2), int(2))))) | _GLF_IDENTITY(0, (0) + 0)), ~ (~ (_GLF_IDENTITY(int(2), int(2)))), ~ (~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), (int(2)) >> 0))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), max(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) - 0u), 1u, 1u)))) * (next_virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(subgroup_local_id)))) ^ 0u))), (uint(1)) ^ 0u), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false))))));
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, (0) | 0), 1, 0, 0), max(ivec4(_GLF_IDENTITY(0, (0) | 0), 1, 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, (0) | 0), 1, 0, 0), (ivec4(_GLF_IDENTITY(0, (0) | 0), 1, 0, 0)) ^ ivec4(0, 0, 0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), _GLF_IDENTITY(float(mat3x2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, ((injectionSwitch.x) - 0.0) - 0.0))), abs(1.0), _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 1.0))), 1.0, 1.0, log(1.0))), float(mat4(float(mat3x2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-90.45)), bool(false))))), abs(1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, log(1.0))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 0.0)))) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))), (! (_GLF_WRAPPED_LOOP(false))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))), (! (_GLF_WRAPPED_LOOP(false))) || false), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))), (! (_GLF_WRAPPED_LOOP(false))) || false), false))) || false))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true))))))) || false)))), bool(bvec4(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))), (! (_GLF_WRAPPED_LOOP(false))) || false)))), true, true, true))))));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, false || (false)))), false)), ! _GLF_IDENTITY((! (bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)))))))), false)))), bool(bvec4((! (bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)))))))), false)))), false, false, true))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true)))))), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true))))))), true, false, true))))))
        break;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))), false || ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))), true && ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), true && ((_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))) || false))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, false))))))) && _GLF_IDENTITY((false), false || ((false))), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))), ! (! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), (injectionSwitch) * mat2(1.0)).x, injectionSwitch.x)) < injectionSwitch.y))))) && (false), _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, false)))) && true), bool(bool((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), false, false)))));
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))));
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true)));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y))))))))))), true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y))))))), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))) && true)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0), (vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)) + tan(vec4(0.0, 0.0, 0.0, 0.0)))), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, 1.0 * (0.0))), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))), true), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))), min((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))), (float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))))) : _GLF_FUZZED(min(cosh(-5.5), tanh(-42.54))))) - 0.0)) > injectionSwitch.y)))))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-104.547, 4065.3149)))).x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, float(mat4x2((injectionSwitch.x) + 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0))))))), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))), true), true)))))))))))), ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y))))))))))), true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y))))))), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))) && true)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0), (vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)) + tan(vec4(0.0, 0.0, 0.0, 0.0)))), (float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, 1.0 * (0.0))), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))), true), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))), min((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))), (float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0))))) : _GLF_FUZZED(min(cosh(-5.5), tanh(-42.54))))) - 0.0)) > injectionSwitch.y)))))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0)), (float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-104.547, 4065.3149)))).x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, float(mat4x2((injectionSwitch.x) + 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0))))))), 1.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))), true), true))))))))))))) && true) && true)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) - (0 << _GLF_IDENTITY(int(4), int(4)))), 64)), _GLF_IDENTITY(64, (64) << 0))), (64) ^ 0), 4);
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-59796) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(3), (int(3)) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((1 & 1), (1 & 1) * ((1 & 1))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(ivec3(_GLF_IDENTITY(int(3), (int(3)) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & 1))) : _GLF_FUZZED(_injected_loop_counter))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(217.900), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(6.2)), (vec2((injectionSwitch)[0], _GLF_FUZZED(6.2))) / vec2(1.0, 1.0)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(true, false)))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(true, false)))))))))), true)))))))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(217.900), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(6.2)), (vec2((injectionSwitch)[0], _GLF_FUZZED(6.2))) / vec2(1.0, 1.0)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(true, false)))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(true, false)))))))))), true)))))))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(217.900), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(6.2)), (vec2((injectionSwitch)[0], _GLF_FUZZED(6.2))) / vec2(1.0, 1.0)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(true, false)))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(true, false)))))))))), true)))))))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y)), true), true, true)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))
              return;
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(cos(0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) ^ 0)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(vec4(8.5, -2812.0453, 57.04, 2.5)).y), _GLF_FUZZED(0.2)), bvec2(false, false))).x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))) && true, false || (_GLF_IDENTITY((false), ! (! ((false)))) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) / 1.0)))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(-76212, min(_GLF_IDENTITY(-76212, (false ? _GLF_IDENTITY(_GLF_FUZZED(33259), (_GLF_FUZZED(33259)) ^ (0 >> _GLF_IDENTITY(int(0), int(0)))) : -76212)), -76212)) & 0), ((_GLF_IDENTITY(_GLF_IDENTITY(-76212 & 0, int(ivec2(_GLF_IDENTITY(-76212 & 0, ~ (~ (-76212 & 0))), 1))), _GLF_IDENTITY((_GLF_IDENTITY(-76212 & 0, (_GLF_IDENTITY(-76212 & 0, max(-76212 & 0, -76212 & 0))) / 1)), ~ (~ ((_GLF_IDENTITY(-76212 & 0, (_GLF_IDENTITY(-76212 & 0, max(-76212 & 0, -76212 & 0))) / 1))))) ^ 0))) << 0), min(_GLF_IDENTITY((-76212 & _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))), ((-76212 & 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), clamp(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), _GLF_IDENTITY((-76212 & 0), _GLF_IDENTITY(((-76212 & 0)) << 0, int(ivec3(_GLF_IDENTITY(((-76212 & 0)) << 0, min(((-76212 & 0)) << 0, ((-76212 & 0)) << 0)), 1, 1)))), _GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), clamp(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), _GLF_IDENTITY((-76212 & 0), _GLF_IDENTITY(((-76212 & 0)) << 0, int(ivec3(_GLF_IDENTITY(((-76212 & 0)) << 0, min(((-76212 & 0)) << 0, ((-76212 & 0)) << 0)), 1, 1)))), _GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0))), min(_GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), clamp(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), _GLF_IDENTITY((-76212 & 0), _GLF_IDENTITY(((-76212 & 0)) << 0, int(ivec3(_GLF_IDENTITY(((-76212 & 0)) << 0, min(((-76212 & 0)) << 0, ((-76212 & 0)) << 0)), 1, 1)))), _GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), clamp(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), _GLF_IDENTITY((-76212 & 0), _GLF_IDENTITY(((-76212 & 0)) << 0, int(ivec3(_GLF_IDENTITY(((-76212 & 0)) << 0, min(((-76212 & 0)) << 0, ((-76212 & 0)) << 0)), 1, 1)))), _GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0))))), _GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), clamp(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), _GLF_IDENTITY((-76212 & 0), _GLF_IDENTITY(((-76212 & 0)) << 0, int(ivec3(_GLF_IDENTITY(((-76212 & 0)) << 0, min(((-76212 & 0)) << 0, ((-76212 & 0)) << 0)), 1, 1)))), _GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0))), _GLF_IDENTITY(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), clamp(_GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0), _GLF_IDENTITY((-76212 & 0), _GLF_IDENTITY(((-76212 & 0)) << 0, int(ivec3(_GLF_IDENTITY(((-76212 & 0)) << 0, min(((-76212 & 0)) << 0, ((-76212 & 0)) << 0)), 1, 1)))), _GLF_IDENTITY((-76212 & 0), ((-76212 & 0)) << 0)))))) + (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) - 0), bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) - 0), true, true, false))), false || (_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, ~ (~ (1))))) - 0)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++))) ^ 0)) - 0))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0)), mix(vec2((_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(reflect(injectionSwitch, injectionSwitch)) : vec2(mat2x4(injectionSwitch, exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0)))))[0], _GLF_FUZZED(794.005)), vec2(_GLF_FUZZED(-4.1), _GLF_IDENTITY((vec2(mat2x4(injectionSwitch, exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0)))[1], float(vec3((vec2(mat2x4(injectionSwitch, exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0))), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), 1.0 * (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0)))[1], 0.0, 1.0)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))).y))))
    break;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0))))), injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) / cos(vec2(0.0, 0.0))), max(injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0))), vec2(mat4x3(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), max(injectionSwitch, injectionSwitch))))) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(6371.5260, 5.0, -11.99, -9.3, -2.8, 136.999, -3661.1667, -1.4, 8.8, -30.11, 7685.5106, 5.0)) : _GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0)))))))))), 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 1.0, 1.0, 0.0, exp(0.0), 0.0)))).x > injectionSwitch.y)) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))) || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-863.311)), bvec2(true, _GLF_IDENTITY(false, false || (false))))).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true))))) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((false ? 976.684 : 9.5))), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y)), true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(4990.9178)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))) || (injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) - vec2(0.0, 0.0)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))).x > injectionSwitch.y)) && true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(false)))), ! (! ((! (bool(bool(false))))))))) || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false), bool(bvec3(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), true, false, false))), true))))) && true), ! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))) || (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.8, -6.3)) : injectionSwitch)))))), mix(vec2(_GLF_FUZZED(7.0), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-6.5)), bvec2(true, false))).y))) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.7)), bool(false))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    continue;
   if(_GLF_DEAD(false))
    break;
   atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), 0, 0)), (_GLF_IDENTITY(int(ivec4(4, (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), 0, 0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : int(ivec4(4, (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), 0, 0))))) | (int(ivec4(4, (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))), 0, 0))))))), 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))) && true)))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(vec4(injectionSwitch, 1.0, 0.0))).y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mat3(1.0) * (vec3(1.0, 0.0, 0.0)))))), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4465.1014)), bvec2(true, false))))), injectionSwitch)), mix(vec2(_GLF_FUZZED((1.3 + 20.39)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))[1], (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-8.8))))), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))) / 1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))[1], ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), (min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))) * vec3(1.0, 1.0, 1.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)))), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.9) : 1.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.66), _GLF_FUZZED(-191.326)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0)), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-98.01, -9.0)))))))))))[1]) * 1.0) : _GLF_FUZZED(85.38)))), vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))), (true ? _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)) : _GLF_FUZZED(-6.5))), 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))) : _GLF_FUZZED(vec3(7.7, -1.5, -6.9)))))), 1.0, 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))[0], _GLF_FUZZED(7.0)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), abs(0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)).y, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(3.0) : float(vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))), (vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)))) * vec2(1.0, 1.0)))), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, 1.0))), clamp((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(3.0) : float(vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))), (vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)))) * vec2(1.0, 1.0)))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))), (vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)))) * vec2(1.0, 1.0))))) * mat2(1.0), ((_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))), (vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)))) * vec2(1.0, 1.0))))) * mat2(1.0)) * vec2(1.0, 1.0))), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))), min(max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, 1.0))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(3.0) : float(vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3011.4819))))), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), clamp(max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))))), 1.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))), (vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)))) * vec2(1.0, 1.0)))), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, 1.0))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(3.0) : float(vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5500.7753)), float(1.0), bool(true)))) / 1.0), 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(mat2x3(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 1.0)), max(vec3(mat2x3(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 1.0)), vec3(mat2x3(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 1.0))))))))), 1.0, 1.0, 0.0))), (vec2(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0)))) * vec2(1.0, 1.0)))), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), max(float(float(0.0)), float(float(0.0)))))), vec3(1.0, 0.0, 0.0)), float(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-54.50)), float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), bool(true)))))), 1.0, 1.0, 0.0))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, 1.0)))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0)).y, false || (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}
