#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true)));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3)))) | (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY(int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))), 0, 1)), max(int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))), 0, 1)), int(ivec3((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))), 0, 1))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), false))), bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, sqrt(1.0), 0.0))), true, true), false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), true))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), false))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).y), float(_GLF_FUZZED(78.41)), bool(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))], 1.0 * ((injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))])), (injectionSwitch)[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(clamp(bitfieldReverse(28), 8723, -49637))))]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.6)), bvec2(true, false))).y)))) && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))))), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true)))), false)))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))))), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) >> uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, ~ (~ (1)))))], gl_WorkGroupSize[2]))))) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))))), uvec3(uvec4((false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, ~ (~ (1)))))], gl_WorkGroupSize[2]))))) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), min(_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) >> uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u))[2]), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (0u)), _GLF_IDENTITY(0u, max(0u, 0u)))), 0u)))) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, ~ (~ (1)))))], gl_WorkGroupSize[2]))))) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))), (true ? (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) : _GLF_FUZZED(uvec3(154586u, 179409u, 49822u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u)) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, ~ (~ (1)))], gl_WorkGroupSize[2])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(3), int(3))))], gl_WorkGroupSize[2])), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), max(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))) >> uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) ^ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, ~ (~ (1)))))], gl_WorkGroupSize[2]))))) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) >> uvec3(0u, 0u, 0u))) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u))), (false ? _GLF_FUZZED(uvec3(148364u, 99143u, 97503u)) : _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u)))), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))) - (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))) | uvec3(0u, 0u, 0u))) ^ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, ~ (~ (1)))))], gl_WorkGroupSize[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) >> 0)) - (0 | 0))]))))) * _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) + _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))))))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))) - uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), 0u ^ (min(0u, 0u)))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), 1u, 1u)), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), ((0u | 0u) | 0u)), (uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), ((0u | 0u) | 0u))) ^ (uvec2(1u, 1u) ^ uvec2(1u, 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), ((0u | 0u) | 0u)), (uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), ((0u | 0u) | 0u))) ^ (uvec2(1u, 1u) ^ uvec2(1u, 1u)))), 1u * (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), ((0u | 0u) | 0u)), (uvec2(_GLF_IDENTITY(0u, min(0u, 0u)), ((0u | 0u) | 0u))) ^ (uvec2(1u, 1u) ^ uvec2(1u, 1u))))))) ^ 0u)), 1u, 1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u * (min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 1u, 1u)), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 1u, 1u)))), (uint(uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 1u, 1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)) << (0u ^ _GLF_IDENTITY(0u, (0u) - 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.59)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))]), vec2(_GLF_IDENTITY(mat2x4(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))]), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) * 1.0), 1.0, 1.0, 1.0, abs(0.0), 1.0), mat2x4(mat3x4(mat2x4(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))]), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) * 1.0), 1.0, 1.0, 1.0, abs(0.0), 1.0))))))), injectionSwitch)).x > injectionSwitch.y) || false)))))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))) ^ 0u)))))))), ~ (~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))))))) * 1u) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(_GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uaddCarry(subgroup_id, num_workgroup, subgroup_id) ^ 165122u)) : workgroup_size)), workgroup_size))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size)))), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))) << 0u)))))), _GLF_IDENTITY(max(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(max(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))), uint(uvec3(max(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))), 0u, 0u)))), (~ (max(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), 0u | (min(workgroup_size, workgroup_size))), ~ (~ (min(workgroup_size, workgroup_size))))))))) >> 0u)))))), ~ (~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))))))) * 1u) * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), workgroup_size))))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ _GLF_IDENTITY((min(workgroup_size, workgroup_size)), clamp((min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size)))))))), max(~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ _GLF_IDENTITY((min(workgroup_size, workgroup_size)), clamp((min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size)))))))), ~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ _GLF_IDENTITY((min(workgroup_size, workgroup_size)), clamp((min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size))))))))))))))) * 1u) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))), workgroup_size), ~ (~ _GLF_IDENTITY((min(workgroup_size, workgroup_size)), max((min(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), _GLF_IDENTITY((_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) | 0u)), _GLF_IDENTITY(min((min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size))), uint(uint(min((min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size)))))))))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ _GLF_IDENTITY((min(workgroup_size, workgroup_size)), (_GLF_IDENTITY((min(workgroup_size, workgroup_size)), min((min(workgroup_size, workgroup_size)), (min(workgroup_size, workgroup_size))))) | (_GLF_IDENTITY((min(workgroup_size, workgroup_size)), min((min(workgroup_size, workgroup_size)), _GLF_IDENTITY((min(workgroup_size, workgroup_size)), ((min(workgroup_size, workgroup_size))) << 0u)))))))), ~ (~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))))))) * 1u) * workgroup_id, _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u)) - 0u)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (min(workgroup_size, workgroup_size)) << 0u)) - 0u)))) : _GLF_FUZZED(uvec4(32097u, 111089u, 114586u, 44764u)[0])))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))), ~ (~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), ~ (~ (min(workgroup_size, workgroup_size))))))))))) * 1u) * workgroup_id))));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) - 0u) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) * 1u)) / 1u), (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) * 1u)) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), uint(uvec2(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), 1u)))) * 1u)) / 1u), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) * 1u)) / 1u, (true ? (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) * 1u)) / _GLF_IDENTITY(1u, (1u) - ((0u | 0u) >> _GLF_IDENTITY(uint(8u), uint(8u)))) : _GLF_FUZZED(subgroup_local_id))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) * 1u)) / 1u), (true ? _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) * 1u)) / 1u) : _GLF_FUZZED(102247u))))))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))) >> 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-83839), (_GLF_FUZZED(-83839)) >> 0) : _GLF_IDENTITY(1, clamp(1, 1, 1))))) >> 0)) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(ivec3(1, 1, 0))))), 1, 1)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-83839), (_GLF_FUZZED(-83839)) | 0) : _GLF_IDENTITY(1, clamp(1, 1, 1))))) >> 0)) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-83839) : _GLF_IDENTITY(1, clamp(1, 1, 1))))) >> 0)) % subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * subgroup_size) | (subgroup_id * subgroup_size)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (true ? uint(8u) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, 0u | (8u))))))) << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (subgroup_local_id)) + 1), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(subgroup_local_id, ((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), (_GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(uint(8u), uint(8u))))) << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (subgroup_local_id)) + 1), _GLF_IDENTITY(1u, (1u) | 0u), 0u)), ~ (~ (uint(uvec3((_GLF_IDENTITY(subgroup_local_id, ((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), (_GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(uint(8u), uint(8u))))) << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (subgroup_local_id)) + 1), 1u, 0u)))))) % _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (0u | 0u) + ((subgroup_local_id + 1)))))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (0u | 0u) + ((subgroup_local_id + 1)))))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (0u | 0u) + ((subgroup_local_id + 1)))))) % subgroup_size)))))), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) + _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(((workgroup_base)), _GLF_IDENTITY(~ (~ (((workgroup_base)))), (~ (~ (((workgroup_base))))) >> 0u)), clamp(((workgroup_base)), ((workgroup_base)), ((workgroup_base)))) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u + _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | (uint(6u))))))) % subgroup_size), ~ _GLF_IDENTITY((~ (((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))) + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 ^ (1))), clamp(~ (_GLF_IDENTITY(1, 0 ^ (1))), ~ (_GLF_IDENTITY(1, 0 ^ (1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))))) ^ (1)), _GLF_IDENTITY(0 ^ (1), (0 ^ (1)) | (0 ^ (1)))))))))) % subgroup_size))), uint(_GLF_IDENTITY(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), _GLF_IDENTITY(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), max(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), _GLF_IDENTITY(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), min(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))))), uint(uvec4((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(((workgroup_base)), _GLF_IDENTITY(~ (~ (((workgroup_base)))), (~ (~ (((workgroup_base))))) >> 0u)), clamp(((workgroup_base)), ((workgroup_base)), ((workgroup_base)))) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u + _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | (uint(6u))))))) % subgroup_size), ~ _GLF_IDENTITY((~ (((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))) + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 ^ (1))), clamp(~ (_GLF_IDENTITY(1, 0 ^ (1))), ~ (_GLF_IDENTITY(1, 0 ^ (1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))))) ^ (1)), _GLF_IDENTITY(0 ^ (1), (0 ^ (1)) | (0 ^ (1)))))))))) % subgroup_size))), uint(_GLF_IDENTITY(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), _GLF_IDENTITY(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), max(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), _GLF_IDENTITY(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), min(min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), min(uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), uvec4((~ (((subgroup_local_id + 1) % subgroup_size))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))))))))), 1u, 0u, 0u)))), _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : workgroup_base, (false ? _GLF_FUZZED(virtual_gid) : workgroup_base) - 0u)))) - 0u), (workgroup_base) / 1u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) / 1u, (_GLF_IDENTITY((workgroup_base) / 1u, 1u * (_GLF_IDENTITY((workgroup_base) / 1u, ~ (~ ((workgroup_base) / 1u)))))) / (1u ^ 0u))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)))))), (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)))))), 0u + ((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))))))))))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(num_workgroup, uint(_GLF_IDENTITY(uvec4(num_workgroup, 1u, 1u, 1u), (true ? uvec4(num_workgroup, 1u, 1u, 1u) : _GLF_FUZZED(uvec4(99534u, 168407u, 110163u, 90726u))))))) | (_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (1u ^ 1u)), clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))) | 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(uint(0u), uint(0u))))) / 1u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) : _GLF_FUZZED(129326u))))) + ((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)) | 0u))))) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1) % subgroup_size))), 0u ^ ((~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)) % subgroup_size)))))), 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))))))))) | _GLF_IDENTITY(0u, (0u ^ 0u) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), max((0u), (0u))) >> 0u))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))))))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), clamp(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), clamp(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0))))))))) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), clamp(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)), (~ (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) - 0))))))))))))), (_GLF_IDENTITY((int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, 0 | (4)))))))), ((int(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4), _GLF_IDENTITY((clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)) << 0, max((clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)) << 0, (clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4)) << 0))))))) / 1)) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + sqrt(0.0)))))) >> 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 0), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false), false))); _injected_loop_counter --)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.1) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), clamp(vec3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), vec3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), vec3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0)))), (true ? vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log2(injectionSwitch)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log2(injectionSwitch)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), vec3(mat4x2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log2(injectionSwitch)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), 0.0, 0.0, 1.0, 0.0, 1.0)))) / vec3(1.0, 1.0, 1.0)), clamp(vec3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))) * mat2(1.0)), 1.0)))) : _GLF_FUZZED(vec2(-139.437, -172.627))))), injectionSwitch)).y)))) && true)) || false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]), vec2(_GLF_IDENTITY(mat4x2(_GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), _GLF_IDENTITY(mat4x2(mat4(mat4x2(_GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), (mat4x2(mat4(mat4x2(_GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0)))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))))), vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]) : _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0))))), 0.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), mat2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.3)))), (false ? _GLF_FUZZED(mat2(mat3x4(55.47, 700.736, 6304.6324, 3.2, -4.7, 992.300, 4.6, -0.4, 8.0, 2.5, 4.8, -144.804))) : mat2(injectionSwitch, 0.0, 0.0)))), (mat2x4(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(mat3x4(55.47, 700.736, 6304.6324, _GLF_IDENTITY(3.2, float(mat4x2(_GLF_IDENTITY(3.2, max(3.2, 3.2)), 1.0, 1.0, abs(0.0), 1.0, 1.0, sqrt(0.0), 1.0))), -4.7, 992.300, 4.6, _GLF_IDENTITY(-0.4, float(mat4(-0.4, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x)))), 8.0, 2.5, 4.8, -144.804))) : mat2(injectionSwitch, 0.0, 0.0))))) * mat2(1.0)))))))), vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat4x2(-786.923, -773.544, 1.3, -2111.2140, -7.7, -413.073, 4225.8276, 292.266)[3]) : _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))))), 0.0, 0.0)))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   do
    {
     do
      {
       atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), (_GLF_IDENTITY(5, ~ (~ (5)))) + 0)), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(4, 1, 0)), (int(ivec3(4, 1, 0))) | (1 ^ 1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(4, 1, 0), ~ (~ (_GLF_IDENTITY(ivec3(4, 1, 0), clamp(ivec3(4, 1, 0), ivec3(4, 1, 0), ivec3(4, 1, 0))))))), (int(ivec3(4, 1, 0))) | (1 ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, _GLF_IDENTITY(1, (1) | 0)))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.2)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4025.7024) : 0.0)), 0.0)), injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) * 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-847.669)), bool(false))), injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), true && (bool(bvec4(true, true, false, true)))))))), bool(bool(_GLF_IDENTITY(true, bool(bool(true))))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), false, true, false))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(612.280)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       atomicStore(buf[virtual_gid], read, 4, _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))), 4);
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(injectionSwitch, injectionSwitch)).y))), bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))); _injected_loop_counter ++)
          {
           subgroupAll(true);
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))));
  }
}
