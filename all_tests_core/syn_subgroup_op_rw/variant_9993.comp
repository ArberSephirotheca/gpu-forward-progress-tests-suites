#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 bool _f0;
 mat2x4 _f1;
 int _f2;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 mat2x4 _f3;
 float _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
 uint _f1;
 mat4x3 _f2;
 float _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_7 {
 float _f0;
 uint _f1;
 bvec4 _f2;
 mat2 _f3;
 uint _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
 uint workgroup_id;
 uvec4 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
 uvec2 _f5;
 _GLF_struct_10 _f6;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat4 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 _GLF_struct_5 _f1;
 bvec3 _f2;
 mat2x3 _f3;
 bvec3 _f4;
 mat2x3 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 mat2x3 _f1;
 mat3 _f2;
 mat4x3 _f3;
 mat4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 mat2 _f1;
 mat4x3 _f2;
 bvec3 _f3;
 uvec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 bool _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 _GLF_struct_1 _f2;
 bvec4 _f3;
 uvec3 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_11 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_4_1_1_13readsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(float(true))), bool(false))) < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), false)))) && true)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), false))))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), false || (! (! (_GLF_IDENTITY(false, ! (! (false))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.6)), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) || false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 0, (true ? 1 ^ 0 : _GLF_FUZZED(56511)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1])).y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false, true && ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-9.9, (_GLF_IDENTITY(-9.9, (-9.9) + 0.0)) * 1.0))), float(injectionSwitch.y), bool(true)))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_4_1_1_13readsubgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w = subgroup_local_id;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         break;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, 0 ^ (1)) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = (0 & -87091); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.y = num_workgroup;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(7), (int(7)) - 0)), min(_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(7), (int(7)) - 0)), (0 + (_GLF_IDENTITY(int(7), (int(7)) - 0))) ^ 0), 0 + (_GLF_IDENTITY(int(7), (int(7)) - 0))))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (1 ^ 0), true, false), bvec3(bvec3(bvec3(_injected_loop_counter != (1 ^ 0), true, false))))))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(-89093) : _injected_loop_counter ++)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(radians(injectionSwitch)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)))))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_3(_GLF_struct_0(mat3x2(1.0), true, _GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(bvec2(bvec2(true)), true, true)))))), mat2x4(1.0), _GLF_struct_1(_GLF_IDENTITY(uvec2(1u), ~ (_GLF_IDENTITY(~ (uvec2(1u)), clamp(~ (uvec2(1u)), ~ (uvec2(1u)), ~ (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u)))))))))), _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), mat2(mat3(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat2(-8.7, -67.75, -6703.1556, 6.6)))), mat4x3(1.0), bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))) || false)), uvec4(1u), bvec2(true)), bvec4(true), uvec3(1u), _GLF_struct_2(mat3x2(1.0), mat2x4(1.0))), _GLF_struct_4(ivec4(1), mat2x3(1.0), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, round(length(normalize(sqrt(1.0)))) * (1.0)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1.4)), float(1.0), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-1.4)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(-1.4)), float(1.0), bool(true))) / 1.0), mix(float(_GLF_FUZZED(-1.4)), float(1.0), bool(true)))))), mat4x3(1.0), mat4(1.0), mat3x4(1.0)), _GLF_struct_6(mat4(1.0), _GLF_struct_5(mat2(1.0), mat4(1.0), mat3x2(1.0), mat4x3(1.0), ivec3(1)), bvec3(_GLF_IDENTITY(true, true && (true))), mat2x3(1.0), bvec3(true), mat2x3(1.0), mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_struct_11(mat4x2(1.0), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID))) >> uvec3(0u, 0u, 0u)).x, uvec4(_GLF_IDENTITY(1u, (1u) | 0u)), _GLF_struct_7(1.0, 1u, bvec4(true), mat2(1.0), _GLF_IDENTITY(1u, (1u) ^ 0u), mat3x4(1.0)), _GLF_struct_8(mat4x3(1.0), 1u, mat4x3(1.0), 1.0, mat2x3(1.0)), _GLF_struct_9(bvec4(true), mat4x3(1.0), bvec4(true), mat2x4(1.0), 1.0, uvec3(1u)), uvec2(1u), _GLF_struct_10(true, mat2x4(1.0), _GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, clamp(0, 0, 0))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_12._f3.workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec2(3, 1)), 0 + (_GLF_IDENTITY(int(ivec2(3, 1)), (true ? int(ivec2(3, 1)) : _GLF_FUZZED(90547))))))))))))) - (0 << _GLF_IDENTITY(int(7), int(7))))) & 1)); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), false || (bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))), false, true, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 0), (false ? _GLF_FUZZED(7875) : (_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 0)))), (false ? _GLF_FUZZED(mix(-9204, 27514, false)) : ~ (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 0), (false ? _GLF_FUZZED(7875) : (_GLF_IDENTITY(0, clamp(0, 0, 0)) ^ 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) || false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true, false, false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))) || false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, (1 & 1) | 0)) | (1 & 1)))); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (1 ^ 0))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, (true ? 1 & 1 : _GLF_FUZZED(93993)))) << 0)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), _GLF_IDENTITY(int(6), (false ? _GLF_IDENTITY(_GLF_FUZZED(-53434), (_GLF_FUZZED(-53434)) | 0) : int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                    barrier();
                  }
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + log(1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))))), (injectionSwitch.y) + log(1.0))) && true)))));
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))).y : _GLF_FUZZED(-7.0)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))))))))))).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))), clamp(vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))), mix(vec2((vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))[0], _GLF_FUZZED(-692.669)), vec2(_GLF_FUZZED(-16.01), (vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch))))))[1]), bvec2(false, true))), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))))), (_GLF_IDENTITY(true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch)), (true ? (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))) : _GLF_FUZZED((- injectionSwitch))) + sin(vec2(0.0, 0.0))))), _GLF_IDENTITY((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), min((false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2((injectionSwitch)))), vec2((injectionSwitch)))))))), (false ? _GLF_FUZZED(reflect(mod(injectionSwitch, injectionSwitch), vec2(-575.568, 8.7))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec2((injectionSwitch)), min(_GLF_IDENTITY(vec2((injectionSwitch)), min(vec2((injectionSwitch)), vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), vec2(mat2((injectionSwitch), 0.0, 1.0)))))) - vec2(0.0, 0.0))))), vec2((injectionSwitch))))))))))))).y : _GLF_FUZZED(-7.0))))))) && true))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))) || false))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)), true, true)))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), (workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u)) ^ 0u))))) | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u)), uint(uint(~ (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u))))))), _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (_GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y))) / 1u), (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))) * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u))))) | (workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u)), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u))))) | _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (_GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (subgroup_id)) * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u)), 0u + ((workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y, (_GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (subgroup_id)) * GLF_merged2_0_1_4_1_1_13readsubgroup_size.y) << 0u))))) << 0u)) | 0u)) + _GLF_IDENTITY(((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1) % GLF_merged2_0_1_4_1_1_13readsubgroup_size.y), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), clamp(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-527.524)), vec2(_GLF_FUZZED(-7.3), _GLF_IDENTITY((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1], ((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]) + 0.0)), bvec2(false, true))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, max(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], sqrt(1.0), length(0.0))))), vec2(_GLF_FUZZED(2.7), _GLF_FUZZED(5.5)), bvec2(false, false))))))).y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, sin(0.0))))), clamp(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-13.62)), bool(false)))) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), clamp(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y))))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) << (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) : _GLF_IDENTITY(((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1) % _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (GLF_merged2_0_1_4_1_1_13readsubgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (uvec2(0u, 0u) ^ uvec2(0u, 0u)) ^ (GLF_merged2_0_1_4_1_1_13readsubgroup_size)))).y), min(((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1) % _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (GLF_merged2_0_1_4_1_1_13readsubgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (uvec2(0u, 0u) ^ uvec2(0u, 0u)) ^ (GLF_merged2_0_1_4_1_1_13readsubgroup_size)))).y), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1) % _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (GLF_merged2_0_1_4_1_1_13readsubgroup_size) | (_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (_GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))))) ^ uvec2(0u, 0u)) ^ (GLF_merged2_0_1_4_1_1_13readsubgroup_size)))).y)))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | 0))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | 0))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x = next_virtual_gid;
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((true ? _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << 0u) : _GLF_FUZZED(subgroup_size)), ((true ? _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << 0u) : _GLF_FUZZED(subgroup_size))) << 0u)), 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   GLF_merged2_0_1_4_1_1_13readsubgroup_size.x = read;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))))))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z = _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_size, (GLF_merged2_0_1_4_1_1_13readsubgroup_size) * uvec2(1u, 1u)).x;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false) && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false, bool(bvec2(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false, bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false, ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false))), false, false, false))), false)))))))
    barrier();
  }
 else
  {
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), (int(7)) | (int(7))), int(ivec3(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), 0, 0))) : _GLF_FUZZED(12507))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, sin(0.0), 1.0, determinant(mat2(0.0, abs(0.0), 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(vec4(-86.03, 4.6, -790.286, 6.5)))))).y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1109.8634)), vec2(_GLF_FUZZED(-94.61), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), injectionSwitch)).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) - sqrt(vec2(0.0, 0.0))).y)))) && true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mat4x2(-490.459, 4.0, -25.78, -6374.9458, 4.0, -7613.4039, -2.9, 8217.5652)[3]) : injectionSwitch)))).x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) ^ (1 ^ 1))) | (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), ~ (~ (int(5))))))))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      return;
                     barrier();
                    }
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(32036)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))) || (false), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), true))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, true)))))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))) || (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                    barrier();
                  }
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1 < GLF_merged2_0_1_4_1_1_13readsubgroup_size.y)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true, false)))))))
          barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z, 4, _GLF_IDENTITY(64, min(64, 64)), 4);
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.2)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)), true && (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) - 0.0) < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y))))))))
      {
       subgroupAll(false);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))) && true))))))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, true))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, true)))) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (55872 & 0)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                 barrier();
                }
               else
                {
                }
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), true)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))), false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) + 0))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.6), _GLF_FUZZED(-572.178)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y)))) && true))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))), injectionSwitch.y))))))))
                continue;
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), bool(bool(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))) && true)))))) || false))))
              break;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(-93758, ~ (~ (-93758))), (true ? _GLF_IDENTITY(-93758, ~ (~ _GLF_IDENTITY((-93758), max((-93758), (-93758))))) : _GLF_FUZZED(int(num_workgroup)))) & (1 ^ 1))); _injected_loop_counter --)
              {
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.6)), float(0.0), bool(true))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, 1.0), transpose(transpose(mat3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.6)), float(0.0), bool(true))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, 1.0)))))), 0.0)), 1.0, sin(0.0), 0.0))), injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, min(0, 0))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(8.5, (8.5) * 1.0))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)) || false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-9.4))), float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true)))))))).x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y))), (! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(_GLF_IDENTITY(274.244, (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + sin(0.0)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y)))) || false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x)) > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (! (false)))))))))))))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-9.4))), float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true)))))))).x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y))), (! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(_GLF_IDENTITY(274.244, (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + sin(0.0)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y)))) || false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x)) > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (! (false)))))))))))))))), (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-9.4))), float(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-1.6, 2620.5368).s)), bvec2(true, false))))[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0))))], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false))))).x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1], 0.0)))), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true))))), true))), true, false)))))).x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y))), (! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(_GLF_IDENTITY(274.244, (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + sin(0.0)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_IDENTITY(((injectionSwitch))[1], min(((injectionSwitch))[1], ((injectionSwitch))[1]))), vec2(_GLF_FUZZED(-8748.4711), _GLF_FUZZED(-6487.0007)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))[1], 0.0)))), bvec2(_GLF_IDENTITY(true, (true) && true), true))).x > injectionSwitch.y)))) || false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), max(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), max(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))))))), bvec2(true, true))))).x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(mat3x2((injectionSwitch)[1], 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))))), float(vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(102.736), (vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)))[1]), vec2((vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)))[0], _GLF_FUZZED(417.142)), bvec2(true, false))))), min((injectionSwitch), (injectionSwitch)))[1], min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(102.736), (vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)))[1]), vec2((vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)))[0], _GLF_FUZZED(417.142)), bvec2(true, false))))), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(102.736), (vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)))[1]), vec2((vec2(mat3(vec2(mat3x2((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0)))[0], _GLF_FUZZED(417.142)), bvec2(true, false))))), min((injectionSwitch), (injectionSwitch)))[1])), float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((true) && true, bool(bvec4((true) && true, false, false, true))))))))))))), bvec2(true, true))).x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (! (false))))))))))))))))) && true)) && true), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-9.4))), float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, float(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-9.4))), float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, 1.0, exp(tan(0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), float(mat4x3(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), sin(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), bvec2(true, true)), min(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), float(mat4x3(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), sin(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), bvec2(true, true)), mix(vec2((mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), float(mat4x3(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), sin(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), bvec2(true, true)))[0], _GLF_FUZZED(-1.5)), vec2(_GLF_FUZZED(530.342), (mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), float(mat4x3(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), sin(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), bvec2(true, true)))[1]), bvec2(false, true))), mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), float(mat4x3(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), sin(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), bvec2(true, true))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), max(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))))), bvec2(true, true))).x)) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(0.6), _GLF_IDENTITY(_GLF_FUZZED(274.244), (_GLF_IDENTITY(_GLF_FUZZED(274.244), mix(float(_GLF_IDENTITY(_GLF_FUZZED(274.244), (false ? _GLF_FUZZED(25.71) : _GLF_FUZZED(274.244)))), float(_GLF_FUZZED(3739.7420)), bool(false)))) / 1.0)), (true ? vec2(_GLF_FUZZED(0.6), _GLF_IDENTITY(_GLF_FUZZED(274.244), (_GLF_IDENTITY(_GLF_FUZZED(274.244), mix(float(_GLF_IDENTITY(_GLF_FUZZED(274.244), (false ? _GLF_FUZZED(25.71) : _GLF_FUZZED(274.244)))), float(_GLF_FUZZED(3739.7420)), bool(false)))) / 1.0)) : _GLF_FUZZED(vec2(-266.931, -9762.7412)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(true, true), false, true))), bvec2(bvec3(bvec2(bvec2(bvec4(bvec2(true, true), false, true))), false))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, false || (true))), false, true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, false || (true))), false, true)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(bvec2(bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, false || (true))), false, true)))), false)), false))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(true, true), false, true))))), false, true))), true))), false, true)))))).x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y) && true)))), (! (! (! (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(0.6, (false ? _GLF_FUZZED(5420.1788) : 0.6))), _GLF_FUZZED(_GLF_IDENTITY(274.244, (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true)))))), max(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(0.6, (false ? _GLF_FUZZED(5420.1788) : 0.6))), _GLF_FUZZED(_GLF_IDENTITY(274.244, (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), (_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true)))) / 1.0)))), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(atan(vec2(-883.829, -2.1))) : vec2(_GLF_FUZZED(_GLF_IDENTITY(0.6, (false ? _GLF_FUZZED(5420.1788) : 0.6))), _GLF_FUZZED(_GLF_IDENTITY(274.244, (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), (_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true)))) / 1.0)))))), vec2(_GLF_FUZZED(_GLF_IDENTITY(0.6, (false ? _GLF_FUZZED(5420.1788) : 0.6))), _GLF_FUZZED(_GLF_IDENTITY(274.244, _GLF_IDENTITY((_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), clamp((_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))))), (_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true))), mix(float(_GLF_FUZZED(-327.256)), float((_GLF_IDENTITY(274.244, max(_GLF_IDENTITY(274.244, mix(float(_GLF_FUZZED(90.10)), float(274.244), bool(true))), 274.244))) + _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(6487.9375)), float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(485.265) : sin(0.0)))))), bool(true)))), bool(true)))))))))), vec2((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-3.2)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])))[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y)))) || false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), bvec2(true, true))).x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0)))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.5, 4.2)))))))[_GLF_IDENTITY(0, ~ (~ (0)))], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) && true))))))))), (true) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) && true))))))))), (true) && true)))))))))), bvec2(true, true))).x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ -3.7))), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true)))))))) / vec2(1.0, 1.0)), bvec2(true, true))).x, (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), (vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244))) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0)))), (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 0.0))))) / vec2(1.0, 1.0)), bvec2(true, true))).x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2227.8625)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-34.59), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_FUZZED(-34.59), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0))), max(mat2(1.0) * (vec2(_GLF_FUZZED(-34.59), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0))), mat2(1.0) * (vec2(_GLF_FUZZED(-34.59), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)))))), bvec2(false, true))).y), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]) + 0.0), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1])), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], 1.0, 0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-9690.9292)), float(float(mat2x3(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], 1.0, 0.0, 0.0, 0.0, 0.0))), bool(true)))))), float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y))), ((! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(274.244)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]) + 0.0), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1])), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], 1.0, 0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-9690.9292)), float(float(mat2x3(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], 1.0, 0.0, 0.0, 0.0, 0.0))), bool(true)))))), float(vec2((injectionSwitch)[1], _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(92293))), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))))))), bvec2(true, true))).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))))))))))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, ~ (~ (0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-16291 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-16291 & 0))) || false); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (0 | 0) | (_GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.4)), bool(false)))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   atomicStore(buf[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z, 4, 64, 4);
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         subgroupAll(true);
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0), int(3)))), int(ivec4(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0), int(3)))), 1, 0, (0 | 0))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), 1 * (int(3)))))), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))))))), false))), false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(599.668, 313.853)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-919.664, -6.3)))))).x > injectionSwitch.y))), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(228.503)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), true, true, true))))))
                    return;
                   barrier();
                  }
                }
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))) || _GLF_IDENTITY(false, (false) && true)))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (! (true))), false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) || false))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)));
  }
}
