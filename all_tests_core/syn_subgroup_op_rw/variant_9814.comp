#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 bvec4 _f0;
 ivec4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 uvec4 _f1;
 mat3x4 _f2;
 mat4 _f3;
 int _f4;
 ivec4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 _GLF_struct_10 _f1;
 int _f2;
 uint _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_8 {
 mat2x3 _f0;
 bool _f1;
 bvec2 _f2;
 ivec4 _f3;
 uvec4 _f4;
 mat2x4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 vec2 _f3;
 mat4x3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_6 {
 uint _f0;
 vec2 _f1;
 bvec4 _f2;
 mat3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_5 {
 bool _f0;
 mat3x2 _f1;
 vec2 _f2;
 bool _f3;
 mat4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 vec3 _f2;
 _GLF_struct_7 _f3;
 bvec4 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
 uint workgroup_id;
 mat2x3 _f1;
 mat4x2 _f2;
 mat4x2 _f3;
 _GLF_struct_9 _f4;
 mat3x4 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 bvec4 _f1;
 uvec2 _f2;
 float _f3;
 float _f4;
 vec3 _f5;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_0 {
 uint _f0;
 ivec2 _f1;
 mat3 _f2;
 bool _f3;
 vec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 mat4x2 _f3;
 uint _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(_GLF_struct_0(1u, ivec2(1), mat3(1.0), true, vec3(1.0), mat4(1.0)), _GLF_struct_1(mat3x4(1.0), bvec3(true)), _GLF_struct_2(bvec4(true), bvec4(true), uvec2(1u), 1.0, 1.0, vec3(1.0)), mat4x2(1.0), 1u), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(uvec3(1u), gl_WorkGroupID.x, mat2x3(1.0), mat4x2(1.0), mat4x2(1.0), _GLF_struct_9(_GLF_struct_5(true, mat3x2(1.0), vec2(1.0), true, mat4(1.0), mat4x3(1.0)), _GLF_struct_6(1u, vec2(1.0), bvec4(true), mat3(1.0), ivec2(1)), vec3(1.0), _GLF_struct_7(mat3(1.0), ivec2(1), mat4x2(1.0), vec2(1.0), mat4x3(1.0), bvec4(true)), bvec4(true), _GLF_struct_8(mat2x3(1.0), true, bvec2(true), ivec4(1), uvec4(1u), mat2x4(1.0), ivec3(1))), mat3x4(1.0), _GLF_struct_12(vec2(1.0), _GLF_struct_10(mat3x2(1.0), uvec4(1u), mat3x4(1.0), mat4(1.0), 1, ivec4(1), mat4(1.0)), 1, 1u, _GLF_struct_11(bvec4(true), ivec4(1), mat4x2(1.0))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_13.workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_4.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_4.subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((_GLF_struct_replacement_4.subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(false);
      }
     else
      {
      }
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   subgroupBarrier();
  }
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
}
