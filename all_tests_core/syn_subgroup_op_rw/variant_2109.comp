#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 float _f0;
 mat4x3 _f1;
 mat2x3 _f2;
 uvec4 _f3;
 uvec3 _f4;
 vec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 uint subgroup_size;
 _GLF_struct_1 _f1;
 uint _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))), 0.0))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0))).y)) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(635.711) : injectionSwitch[0])), injectionSwitch[1])).x)) > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     barrier();
    }
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat3x4(1.0), gl_SubgroupSize, _GLF_struct_1(mat2x4(1.0), _GLF_struct_0(1.0, mat4x3(1.0), mat2x3(1.0), uvec4(1u), _GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), 0u), min(uvec4(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))), 0u), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u))))), 0u), (uvec4(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))), 0u)) / uvec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), clamp(uvec3(1u), uvec3(1u), uvec3(1u))), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u))), (uvec4(_GLF_IDENTITY(uvec3(1u), clamp(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u))))), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u), min(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), max((uvec3(1u)), _GLF_IDENTITY((uvec3(1u)), uvec3(1u, 1u, 1u) * ((uvec3(1u)))))) | uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 0u, 0u)), uvec3(1u))))), 0u)) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(_GLF_IDENTITY(1u, (1u) | (1u))), uvec3(1u), uvec3(1u))), 0u))))), vec4(1.0), mat3x2(1.0))), 1u);
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0)), clamp((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0))) << 0), (true ? (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0)) : _GLF_FUZZED(-78696))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), exp(0.0), 1.0, length(0.0), abs(1.0), 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), injectionSwitch[1])).y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), exp(0.0), 1.0, length(0.0), abs(1.0), 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), injectionSwitch[1])).y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), exp(0.0), 1.0, length(0.0), abs(1.0), 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), injectionSwitch[1])).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), exp(0.0), 1.0, length(0.0), abs(1.0), 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0))), injectionSwitch[1])).y))) >> 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0)), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), (int(_GLF_IDENTITY(0, (0) ^ 0))) + (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))), int(0)), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0))) | 0)) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))), ! (! (_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false)))))))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))), ! (! (_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))))))))) || false)))) ? gl_NumWorkGroups.x : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id << subgroup_id, max(subgroup_id << subgroup_id, subgroup_id << subgroup_id)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_id << subgroup_id, max(subgroup_id << subgroup_id, subgroup_id << subgroup_id)), 1u, 1u)), (uint(uvec3(_GLF_IDENTITY(subgroup_id << subgroup_id, max(subgroup_id << subgroup_id, subgroup_id << subgroup_id)), 1u, 1u))) / 1u))))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))), clamp((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) << uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))))) | uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) | uvec3(0u, 0u, 0u)))).x, 0u ^ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u)), gl_WorkGroupID))) | uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))), clamp((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))), (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))), (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))))) | uvec3(0u, 0u, 0u)))).x)), ~ (~ (gl_WorkGroupID.x)))));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ _GLF_IDENTITY((~ (_GLF_FUZZED(num_workgroup))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(workgroup_size) : _GLF_FUZZED(num_workgroup))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_FUZZED(num_workgroup))), ((~ (_GLF_FUZZED(num_workgroup)))) / 1u), ((~ (_GLF_FUZZED(num_workgroup)))) * 1u)) - 0u), (~ (_GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_FUZZED(num_workgroup))), ((~ (_GLF_FUZZED(num_workgroup)))) | ((~ (_GLF_FUZZED(num_workgroup))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_FUZZED(num_workgroup)), clamp(~ (_GLF_FUZZED(num_workgroup)), ~ (_GLF_FUZZED(num_workgroup)), ~ (_GLF_FUZZED(num_workgroup))))), ((~ (_GLF_FUZZED(num_workgroup)))) | ((~ (_GLF_FUZZED(num_workgroup))))))))))), min(_GLF_IDENTITY(true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (~ (_GLF_FUZZED(num_workgroup)))), 0u | (true ? _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (~ (_GLF_FUZZED(num_workgroup)))))), _GLF_IDENTITY(true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), ~ (~ (_GLF_FUZZED(num_workgroup)))), (false ? _GLF_FUZZED(subgroup_local_id) : true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(workgroup_size)))), ~ (~ (_GLF_FUZZED(num_workgroup)))))))))) * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_2.subgroup_size;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) && true))), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(true && ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), (true && ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))) && true)), false || (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), false, false, false)))), true && ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.9), _GLF_FUZZED((- -1.6))), bvec2(false, false))).y)))))))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) || false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, max(_GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_struct_replacement_2.subgroup_size) / 1u)))), max(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size), ~ (~ (((subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size)))), ((subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))) - 0u), ((subgroup_local_id + 1)) >> _GLF_IDENTITY((_GLF_IDENTITY(83849u & 0u, max(83849u & 0u, 83849u & 0u))), ((_GLF_IDENTITY(83849u & 0u, max(83849u & 0u, 83849u & 0u)))) >> 0u)) % _GLF_struct_replacement_2.subgroup_size), 0u | (((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 0u))), subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))), (_GLF_IDENTITY(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(virtual_gid))), clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), subgroup_local_id, subgroup_local_id))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(virtual_gid))), clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(subgroup_base))), _GLF_IDENTITY((true ? 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))), uint(uvec4(subgroup_local_id, 1u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(packUnorm4x8(vec4(3.9, -5.8, 5.1, 7.1))) : 0u)), 0u))), subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(190572u) : subgroup_local_id))))) : _GLF_FUZZED(126116u)), (0u & _GLF_IDENTITY(33616u, uint(uvec4(33616u, 1u, 0u, 0u)))) ^ ((_GLF_IDENTITY(true ? 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 0u))), subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(126116u), _GLF_IDENTITY(uint(uvec3(true ? 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 0u))), subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(126116u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), _GLF_IDENTITY(1u, 0u | (1u)))), uint(_GLF_IDENTITY(uint(uint(uvec3(true ? 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 0u))), subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(126116u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), _GLF_IDENTITY(1u, 0u | (1u))))), (uint(uint(uvec3(true ? 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 0u))), subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(126116u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), _GLF_IDENTITY(1u, 0u | (1u)))))) | (uint(uint(uvec3(true ? 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 0u))), subgroup_local_id, subgroup_local_id))) : _GLF_FUZZED(126116u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), _GLF_IDENTITY(1u, 0u | (1u))))))))))))))) / 1u)) + 1) % _GLF_struct_replacement_2.subgroup_size)))) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_id)))], (buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_id)))]) * 1u)), ((buf[virtual_gid]) | (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_id)))], (buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_id)))]) * 1u))) >> 0u)), _GLF_IDENTITY(4, min(4, 4)), 64, 2);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), 0 | (int(7))))), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), bool(bvec4(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), false, true, true))))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), injectionSwitch)).y), false, true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (! (false))), true))) && true)) || false), false, true, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))))))))))) || false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), false || (! (! _GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))))))) || false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))), true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) || false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, false || (false))), false, false)), true)))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))), false, false)), true)))))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) % 2) == 0, false || _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2) == 0, ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2) == 0) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2) == 0, ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2) == 0) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)), false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false)))))))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) + 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(41464) : 1 << _GLF_IDENTITY(int(0), int(0)))), (false ? _GLF_FUZZED(65439) : _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) ^ 0)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) ^ 0)))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) ^ 0))))) << 0)) / 1), max(1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) - (0 ^ 0)))), 1 << _GLF_IDENTITY(int(0), int(0)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec3(0, 1, 0)))), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1354.8175), _GLF_FUZZED(8.3)), bvec2(false, false))).y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (_GLF_IDENTITY(false, (false) && true))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         subgroupAll(false);
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), false || (! (true)))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x) + sqrt(sqrt(0.0))) > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(uint(next_virtual_gid)))], uint(1), 4, 64, 4);
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0))), ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec2(-46539, 52727)[1]) : 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(28325) : _GLF_IDENTITY(0, (0) << 0)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) | (1))), (false ? _GLF_FUZZED(_injected_loop_counter) : clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), 0 ^ ((1))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) || false))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(36.45))) > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-2.5)), bool(false))))), int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ (0 << _GLF_IDENTITY(int(8), int(8))))) | 0) & 59572); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) & 1), (false ? _GLF_FUZZED(bitCount(-24748)) : _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) & 1), 0 + ((int(_GLF_ONE(1.0, injectionSwitch.y)) & 1))))), false || (_injected_loop_counter < (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) & _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)))))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), false)))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   subgroupAll(false);
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), (_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), min(_GLF_FUZZED(float(-6496)), _GLF_FUZZED(float(-6496))))) + 0.0), _GLF_FUZZED(-340.045)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), (_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), min(_GLF_FUZZED(float(-6496)), _GLF_FUZZED(float(-6496))))) + 0.0), _GLF_FUZZED(-340.045)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), (_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), min(_GLF_FUZZED(float(-6496)), _GLF_FUZZED(float(-6496))))) + 0.0), _GLF_FUZZED(-340.045)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), (_GLF_IDENTITY(_GLF_FUZZED(float(-6496)), min(_GLF_FUZZED(float(-6496)), _GLF_FUZZED(float(-6496))))) + 0.0), _GLF_FUZZED(-340.045)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, false, true)))))), false, true)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), false || ((! (injectionSwitch.x > injectionSwitch.y))))), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, true))))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, bool(bvec2(false, true))))))))), ! (! (bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y))))))))));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, max(6, 6)), 6, _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 + (6))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 + (6))), (~ (_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, clamp(6, 6, 6)), 6, 6)))))) | (~ (_GLF_IDENTITY(6, 0 + (6)))))), int(ivec2(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 + (6))), (~ (_GLF_IDENTITY(6, 0 + (6)))) | (~ (_GLF_IDENTITY(6, 0 + (6)))))), 1)))))))))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-69972) : _injected_loop_counter)) != 1), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-69972) : _injected_loop_counter)) != 1))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(2), int(2)), (false ? _GLF_FUZZED(-77681) : (1 & 1) << _GLF_IDENTITY(int(2), int(2))))) | (_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(2), int(2)), min((1 & 1) << _GLF_IDENTITY(int(2), int(2)), (1 & 1) << _GLF_IDENTITY(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), (_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ((true)) && true))) && true)) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! (! ((_GLF_IDENTITY(true, false || (true))))))) || false)) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true)))), ! (! (((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), (false || (true)) || false)) || false)))))))) || false)), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false))), ! (_GLF_IDENTITY(! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (_GLF_IDENTITY(true, false || (true))) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))), false || (! _GLF_IDENTITY((false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))), ((false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false))))) || false)))), ! (! (! (_GLF_IDENTITY(! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))), false || (! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) || false), (_GLF_IDENTITY(true, false || (true))) || false))))))))))))))), false, false, true))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y)) && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, 0.0, 1.0, 0.0, determinant(mat3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0)), 0.0, 0.0, log(1.0)), (_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, 0.0, 1.0, 0.0, determinant(mat3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0)), 0.0, 0.0, log(1.0)), mat4(1.0) * (mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, 0.0, 1.0, 0.0, determinant(mat3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0)), 0.0, 0.0, log(1.0))))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) > injectionSwitch.y))))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.4)), bvec2(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))), false))).y)) || (! _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), true)), false || (bool(bvec2((false), true))))), bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), true)), false || (bool(bvec2((false), true))))), true)))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-9.4), clamp(_GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_IDENTITY(_GLF_FUZZED(-9.4), float(mat2x4(_GLF_FUZZED(-9.4), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_FUZZED(-9.4))), _GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)))), bvec2(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))), false))).y)) || (! _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), true)), false || (bool(bvec2((false), _GLF_IDENTITY(true, (true) && true)))))), bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), true)), false || (bool(bvec2((false), true))))), true)))))))))))
                          {
                           do
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, tan(0.0))))), 0.0)).y))))
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           barrier();
                          }
                        }
                       else
                        {
                        }
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), true)))))) || (false))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0)))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))), bool(bvec4(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))), false, true, false))))), false || (! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))), (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), ! (! (! ((false))))), bool(bvec2(! ((false)), true)))))))))), false || (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), bool(bvec2(! ((false)), true)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))), ((_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))) || false))))))), ! (! (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true)))))), (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false)))))), true))))))) && true)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))))))))))))))))))) && true))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true)))))), true && (false))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || false)));
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - sin(0.0)), 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))) || false)), false, false, false))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(1.0))) * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * exp(0.0))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-71467) : int(0))))) >> _GLF_IDENTITY(int(0), int(0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - (0 << _GLF_IDENTITY(int(3), int(3)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true)))))), (bool(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true))))))) || false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), ! (! (bool(bvec3(_GLF_DEAD(false), false, true))))))))), false)))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(202.482)), float(injectionSwitch.y), bool(true)))) / _GLF_IDENTITY(cos(0.0), min(cos(0.0), _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))))))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), sqrt(0.0), _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-895.056)))), 1.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), sqrt(0.0), _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-895.056)))), 1.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))) || false)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), (_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, 0, _GLF_IDENTITY(0, (0) << 0), 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, _GLF_IDENTITY(0, max(0, 0)), 0, 0))), max(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, int(ivec3(0, (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))) + (0 | 0))))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, int(ivec3(0, (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))) + (0 | 0))))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0, 0, 1))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, int(ivec3(0, (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))) + (0 | 0))))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, int(ivec3(0, (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))) + (0 | 0))))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), 0, 0, 1))))) | ivec4(0, 0, 0, 0)))) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(_injected_loop_counter))), 1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), (true ? ivec4(_injected_loop_counter, 0, 0, 1) : _GLF_FUZZED(ivec4(-71819, 68413, 22712, 58869)))), clamp(ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, _GLF_IDENTITY(1, min(1, 1))), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, 0, 0, 0))))), (false ? _GLF_FUZZED((vec4(vec3(7.7, 1614.5250, 9.5), -9.8) , 12637)) : _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, 0, _GLF_IDENTITY(0, (0) << 0), 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, _GLF_IDENTITY(0, max(0, 0)), 0, 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-87429, -52553, 60128, -90707)) : (_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, 0, _GLF_IDENTITY(0, (0) << 0), 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, _GLF_IDENTITY(0, max(0, 0)), 0, 0))))), max(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), _GLF_IDENTITY(0, int(ivec3(0, (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec2(2, 0)), (int(ivec2(2, 0))) - 0))))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))), ivec4(1, 1, 1, 1) * ((_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), _GLF_IDENTITY(0, int(ivec3(0, (0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec2(2, 0)), (int(ivec2(2, 0))) - 0))))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))))) ^ ivec4(0, 0, 0, 0))), int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), (_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), clamp(_GLF_IDENTITY(min(1, 1), int(int(min(1, 1)))), min(1, 1), min(1, 1))))), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, 0, 0, 0))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), (_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) << 0), 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (true ? _GLF_IDENTITY(0, max(0, 0)) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 85775)))), 0, 0))), max(int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(9633) : _GLF_IDENTITY(1, (1) >> 0)))), (_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (0) - 0), (0 >> _GLF_IDENTITY(int(2), int(2))), 0))), 0, 1), ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(_GLF_IDENTITY(0, (0) - 0), 0, 0, 0))), int(_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), (_GLF_IDENTITY(ivec4(_injected_loop_counter, 0, 0, 1), clamp(ivec4(_injected_loop_counter, 0, 0, 1), ivec4(_injected_loop_counter, 0, 0, _GLF_IDENTITY(1, min(1, 1))), ivec4(_injected_loop_counter, 0, 0, 1)))) ^ ivec4(0, 0, 0, 0)))))) ^ 0)))) != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(sqrt(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(449.416)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y)) || false))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(vec3(_GLF_IDENTITY(-1339.2905, max(-1339.2905, -1339.2905)), 3.1, -6.6).z)), bool(false)))), bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 0.0))).y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(vec3(_GLF_IDENTITY(-1339.2905, max(-1339.2905, -1339.2905)), 3.1, -6.6).z)), _GLF_IDENTITY(bool(false), true && (bool(false)))))), true, false, false)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (injectionSwitch), clamp(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (injectionSwitch), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY((mat2(1.0)), (false ? _GLF_FUZZED(mat2(3076.0661, 5.2, -2.6, 87.16)) : _GLF_IDENTITY((mat2(1.0)), (false ? _GLF_FUZZED(mat2(-27.14, -1.6, 8529.9945, 741.914)) : (mat2(1.0)))))) * mat2(1.0)) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (injectionSwitch)))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) || false))), false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false, false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
