#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.x = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w, max(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w, (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w) - 0u), GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w, GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false)))))))
  return;
 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z + subgroup_id * subgroup_size + GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z + subgroup_id * subgroup_size + (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1) % subgroup_size, (true ? (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1) % subgroup_size : _GLF_FUZZED(subgroup_local_id))), (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1) % subgroup_size)));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   subgroupAll(_GLF_IDENTITY(true, (true) && true));
   if(_GLF_DEAD(false))
    return;
  }
}
