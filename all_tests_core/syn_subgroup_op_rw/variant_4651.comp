#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7420.0923)), float(injectionSwitch.y), bool(true)))) * 1.0))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(0 + (0), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0 + (0), clamp(0 + (0), 0 + (0), 0 + (0))), 1), min(ivec2(_GLF_IDENTITY(0 + (0), clamp(0 + (0), 0 + (0), 0 + (0))), 1), ivec2(_GLF_IDENTITY(0 + (0), clamp(0 + (0), 0 + (0), 0 + (0))), 1))))))), int(int((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), 0 + (0)))))))), (_GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, _GLF_IDENTITY(0 + (0), 0 ^ (_GLF_IDENTITY(0 + (0), (0 + (0)) | (0 + (_GLF_IDENTITY(0, (0) ^ (0 ^ 0))))))))))), clamp((1 ^ _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 + (0))))), (1 ^ _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) + (1 ^ 1)), 0 + (0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) + (1 ^ 1)), 0 + (0)))))))), (_GLF_IDENTITY(1, max(1, 1)) ^ _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 + (0)))))))) + 0)); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.z = subgroup_id, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.z = subgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.z = subgroup_id), (true ? ~ (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.z = subgroup_id) : _GLF_FUZZED(113331u)))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) << 0))
      {
       GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), (_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), 0u ^ (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))))) << 0u)), max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), (_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), 0u ^ (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))))) << 0u)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), (_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), 0u ^ (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))))) << 0u)))), min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)) + 0u)) | (subgroup_local_id))), max(_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) + 0u)) | _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) * 1u))))), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ~ (~ ((0u)))), (~ (0u)) + 0u))))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ~ (~ ((0u)))), (~ (0u)) + 0u))))))) | (subgroup_local_id)))) >> 0u), _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))) | (_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), 0u ^ (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))), ~ (~ (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))), (uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)))) | 0u))))), (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id, subgroup_local_id)), (subgroup_local_id) + 0u)) | (subgroup_local_id))), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)))) | (subgroup_local_id)))) - 0u), (true ? _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)))) | (subgroup_local_id))), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)))) | (subgroup_local_id)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)), clamp((subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)), (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)), (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)))))) | (subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(36267u))), 1u, 0u))) << 0u)))) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)))) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u))), 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 1u, 0u)), (uint(uvec3(0u, 1u, 0u))) << 0u)))))) | (subgroup_local_id)))))))) - 0u) : _GLF_FUZZED(subgroup_size))), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), subgroup_local_id))) + 0u, ((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), subgroup_local_id))) + 0u) | 0u))) | (subgroup_local_id))), 0u | _GLF_IDENTITY((clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (1u ^ 1u))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uint(true)) : _GLF_IDENTITY(0u, (0u) | (0u)))), ((subgroup_local_id) << 0u) | ((subgroup_local_id) << 0u))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ~ (_GLF_IDENTITY(~ ((subgroup_local_id)), clamp(~ ((subgroup_local_id)), ~ ((subgroup_local_id)), ~ ((subgroup_local_id)))))) + 0u)) | (subgroup_local_id)))), 0u ^ ((_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), (clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, min(0u, 0u)))) | (subgroup_local_id)))) - 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))))), _GLF_IDENTITY((clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))) ^ 0u, clamp(_GLF_IDENTITY((clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))) ^ 0u, ((clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))) ^ 0u) | 0u), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))) ^ 0u, (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id)))) ^ 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), (_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), ~ (~ (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))))))) | (_GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), max(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id))))))), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)))) ^ 0u), subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | 1u) * (subgroup_local_id)), (subgroup_local_id) + 0u)) | (subgroup_local_id)))) ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) + 0u, uint(uvec2((subgroup_local_id) + 0u, 1u))))) | (subgroup_local_id))), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id), uint(uvec3((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) | (subgroup_local_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))) ^ 0u))))));
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))), false, false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.x = num_workgroup, (false ? _GLF_FUZZED(subgroup_local_id) : GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.x = num_workgroup)), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), ~ (~ (uint(uint(0u)))))) ^ _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.x = num_workgroup), ((GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.x = num_workgroup)) << 0u));
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))), false || ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5282.6189) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(129508u)), _GLF_FUZZED(8.8)), bvec2(false, false))).x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(129508u)), _GLF_FUZZED(8.8)), bvec2(false, false))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(129508u)), _GLF_FUZZED(8.8)), bvec2(false, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(129508u)), _GLF_FUZZED(8.8)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(129508u)), _GLF_FUZZED(8.8)), bvec2(false, false))).x))), float(_GLF_FUZZED(-0.4)), bool(false))) : _GLF_FUZZED(distance(vec2(9.2, 15.50), floor(injectionSwitch))))))), injectionSwitch.x)), injectionSwitch.x))) + 0.0) > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAdd(num_workgroup, subgroup_size)) : uint(0u))))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAdd(num_workgroup, subgroup_size)) : uint(0u), 0u + (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAdd(num_workgroup, subgroup_size)) : uint(0u)))))))))))).x, max(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID))) | (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID))))) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))), ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)))) | ((_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))))) >> uvec3(0u, 0u, 0u)).x));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) && true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u), workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u, (0u & 86867u) | (1u)) * (workgroup_size)), clamp(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (1u)) * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u)) * (workgroup_size) : _GLF_FUZZED(num_workgroup)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), ~ (~ (max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u * (workgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), ~ (~ (max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u * (workgroup_size))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), ~ (~ (max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u * (workgroup_size))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), ~ (~ (max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u * (workgroup_size))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), ~ (~ (max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u * (workgroup_size))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), ~ (~ (max(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u * (workgroup_size)))))))))))) / 1u) : _GLF_FUZZED(num_workgroup)))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(1u * (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))) ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), (_GLF_IDENTITY(1u * (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), (1u * (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * _GLF_IDENTITY((workgroup_size), uint(uvec3((workgroup_size), 0u, 1u))))))), 1u * (workgroup_size)))))) - 0u)) | (_GLF_IDENTITY(1u * (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), (_GLF_IDENTITY(1u * (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), (1u * _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), ~ (~ ((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size)))))))), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size))))), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(1u * (workgroup_size), max(_GLF_IDENTITY(1u * (workgroup_size), 0u | (_GLF_IDENTITY(1u * (workgroup_size), (false ? _GLF_FUZZED(subgroup_size) : 1u * (workgroup_size))))), 1u * (workgroup_size)))))))) / 1u)) * 1u)))))), workgroup_size)) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), clamp(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u)) * 1u), _GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), _GLF_IDENTITY(workgroup_id, (workgroup_id) * _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(1u)), _GLF_IDENTITY(clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u))), (clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))) | (1u ^ (0u ^ 1u)))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(uint(1u)), _GLF_IDENTITY(clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u))), (clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))) | (1u ^ (0u ^ 1u)))), 0u, 0u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(uint(1u)), _GLF_IDENTITY(clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u))), (clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))) | (1u ^ (0u ^ 1u)))), 0u, 0u), (uvec3(_GLF_IDENTITY(uint(uint(1u)), _GLF_IDENTITY(clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u))), (clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))) | (1u ^ (0u ^ 1u)))), 0u, 0u)) ^ uvec3(0u, 0u, 0u))) | (uvec3(_GLF_IDENTITY(uint(uint(1u)), _GLF_IDENTITY(clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u))), (clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))) | (1u ^ (0u ^ 1u)))), 0u, 0u)))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), bool(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((false), ! (! ((false)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((false), ! (! ((false)))), true), bvec2(bvec2(bvec2(! _GLF_IDENTITY((false), ! (! ((false)))), true)))), false, true))))), false || (! (false)))), ! (! (! (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))))))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7551.8747)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-33.82)), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true)), bool(bvec2(bool(bvec3(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true)), false))))))))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED((mat3x2(-2775.1467, 9.9, 6258.8746, -1725.2453, -763.975, -37.44) * vec3(-6.2, 7.7, -7973.9896))))) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))], injectionSwitch[1]))), (true ? min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, exp(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (injectionSwitch))[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1]))) / _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))))) : _GLF_FUZZED(injectionSwitch)))).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), bool(bvec4(! (! (true)), false, false, false))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), _GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(_injected_loop_counter)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1)))); _injected_loop_counter ++)
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), false))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), false))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec3((! (true)), true, true))))), false))), false)), true))), false)))))))))))) && true)))
                              barrier();
                            }
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.z * subgroup_size, uint(uint(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.z * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, false), false))))))) && (false))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u), clamp(subgroup_base, subgroup_base, subgroup_base))) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))), ((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u), clamp(subgroup_base, subgroup_base, subgroup_base))) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))))))) | 0u)), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), max(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))) + GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(3), int(3))), max(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(3), int(3))), (((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(3), int(3)))) >> 0), ((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(3), int(3)))))) / 1)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u)) << 0u) + ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id) / _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u), min(uvec4(1u, 1u, 1u, 1u), uvec4(1u, 1u, 1u, 1u)))).w + 1) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) && true)))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.y = read;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), injectionSwitch.y))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         do
          {
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w) ^ 0u) % 2, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w, (false ? _GLF_FUZZED(workgroup_base) : GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w)) % 2) - 0u)) == _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)))), 0 ^ (0))) - 0), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w) | 0u)))) >> (0u ^ (87113u & 0u))) % _GLF_IDENTITY(2, (2) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), _GLF_IDENTITY(int(1), clamp(int(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), 0 ^ (_GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), max((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), (true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)))))))) | (_GLF_IDENTITY(1, (1) - 0)), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), 0 ^ (_GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), max((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), (true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)))))))) | (_GLF_IDENTITY(1, (1) - 0)), (0 ^ 1) * ((_GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), 0 ^ (_GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), max((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), (true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)))))))) | (_GLF_IDENTITY(1, (1) - 0))))))))), int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))))))), (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w % _GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(16111) : 2))) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w) >> (0u ^ (87113u & 0u))) % _GLF_IDENTITY(2, (2) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), _GLF_IDENTITY(int(1), clamp(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_IDENTITY(_GLF_FUZZED(55271), (_GLF_FUZZED(55271)) | 0)), 0 ^ (_GLF_IDENTITY((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(_GLF_IDENTITY(55271, ~ (~ (55271))))), max((true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)), (true ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(55271)))))))) | (_GLF_IDENTITY(1, (1) - 0)))), int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))))))), _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w % _GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(16111) : 2))) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)), max((GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w % _GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(16111) : 2))) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)), (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id.w % _GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(16111) : 2))) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u))))))) >> 0u) == 0) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       subgroupAll(false);
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) - 0)) >> _GLF_IDENTITY(int(0), int(0)), (true ? (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(87208)))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), (_GLF_IDENTITY((0) | (0), 0 | ((0) | (0)))) | 0)), 0, 0)), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) - 0)) >> _GLF_IDENTITY(int(0), int(0)), (true ? (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(87208)))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), (_GLF_IDENTITY((0) | (0), 0 | ((0) | (0)))) | 0)), 0, 0)), 0), (ivec4(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) - 0)) >> _GLF_IDENTITY(int(0), int(0)), (true ? (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(87208)))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), (_GLF_IDENTITY((0) | (0), 0 | ((0) | (0)))) | 0)), 0, 0)), 0)) | ivec4(0, 0, 0, 0))) | (ivec4(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) - 0)) >> _GLF_IDENTITY(int(0), int(0)), (true ? (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(87208)))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), (_GLF_IDENTITY((0) | (0), 0 | ((0) | (0)))) | 0)), 0, 0)), 0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-15445, -4605, 58172, 77366)) : ivec4(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))), int(0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(bitfieldInsert(-92812, -84150, 50819, -75789)))))) >> _GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)), 0 | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) / 1), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), int(0))) >> _GLF_IDENTITY(int(0), int(0))) | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))) : _GLF_FUZZED(_GLF_IDENTITY(87208, int(int(_GLF_IDENTITY(87208, (true ? 87208 : _GLF_FUZZED(48810)))))))))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, 0)), 0)))))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_IDENTITY(_GLF_FUZZED(32485), min(_GLF_FUZZED(32485), _GLF_FUZZED(32485))) : _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))), max(ivec4(4, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec4(4, 1, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))))))), max(4, _GLF_IDENTITY(4, (4) / 1))));
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, false))); _injected_loop_counter ++)
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(! (! (((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false || (! (! (((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))) && true))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)))));
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), false || ((! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), false || ((! (false)))), false || (_GLF_IDENTITY((! (false)), false || ((! (false))))))) && true)))))));
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(1), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   subgroupBarrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0)))))))))
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_IDENTITY(false, bool(bool(false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true, false)))) || false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) * 1.0) < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 & (_GLF_IDENTITY(32324, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(bitfieldInsert(41859, 7597, 16607, -86403)) : _GLF_IDENTITY(32324, (32324) >> 0))) << 43264)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(_GLF_IDENTITY(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true)), false || (_GLF_IDENTITY(bool(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true)), ! (! (bool(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true))))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))) && true, bool(bvec4((_GLF_IDENTITY(true, true && (true))) && true, false, false, false))), (_GLF_IDENTITY((true), ((true)) && true) && true) && true))))
              {
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), sqrt(1.0) * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))
                  {
                   atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) - 0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(0u, 0u)))))), (1u ^ 0u), 0u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (1u ^ 0u), 0u)), max((uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (1u ^ 0u), 0u)), (uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (1u ^ 0u), 0u)))) << uvec3(0u, 0u, 0u))), max(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (1u ^ 0u), 0u), (uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (1u ^ 0u), 0u)) << uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (1u ^ 0u), 0u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)), (true ? _GLF_IDENTITY((virtual_gid) - 0u, min((virtual_gid) - 0u, (virtual_gid) - 0u)) : _GLF_FUZZED(subgroup_id))), (1u ^ 0u), 0u)) << uvec3(0u, 0u, 0u))))))), virtual_gid))], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id) | (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_17num_workgroupreadsubgroup_idsubgroup_local_id)).y, 4, 64, 4);
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, true, false))) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))), false, true)))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)) || false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), cos(0.0), log(1.0), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)), (float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), cos(0.0), log(1.0), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
}
