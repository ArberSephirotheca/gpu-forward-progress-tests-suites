#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x)), float(mat4x3(min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(sin(0.0), 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(sin(0.0), 1.0, 1.0))), 1.0, 1.0, 1.0, log(1.0)))))) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false))), false || (bool(! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false)), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || false))))))))), true && (bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED((- -83.74)) : min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || false))), false || (bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y)) || false))))))))))))))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bool(bool(bvec2(true, false)))))), true))), true, false, false)), ! (! (bool(bvec4(true, true, false, false))))))))), true)))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))) / _GLF_ONE(1.0, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))) / _GLF_ONE(1.0, injectionSwitch.y))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x = subgroup_local_id;
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x) | (gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))))), false))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), min(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0))))), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), min(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), min(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)))))) / vec2(1.0, 1.0)), 1.0, 1.0, 1.0, determinant(mat3(exp(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), min(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), min(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)))))) / vec2(1.0, 1.0)), 1.0, 1.0, 1.0, determinant(mat3(exp(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))))))) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), max(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-3651.0485)), clamp(float(_GLF_FUZZED(-3651.0485)), float(_GLF_FUZZED(-3651.0485)), float(_GLF_FUZZED(-3651.0485)))), (_GLF_IDENTITY(float(_GLF_FUZZED(-3651.0485)), max(_GLF_IDENTITY(float(_GLF_FUZZED(-3651.0485)), (false ? _GLF_FUZZED(-2.4) : float(_GLF_FUZZED(-3651.0485)))), float(_GLF_FUZZED(-3651.0485))))) - 0.0), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(vec3(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, abs(1.0)))), cos(0.0)))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) / 1.0)), 1.0)).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0)))) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-7.6 / injectionSwitch)))).x > injectionSwitch.y) && true))))), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y) && true))))), max(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-3651.0485, clamp(_GLF_IDENTITY(-3651.0485, (false ? _GLF_FUZZED(77.50) : -3651.0485)), _GLF_IDENTITY(-3651.0485, min(-3651.0485, -3651.0485)), -3651.0485)))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))) / 1.0)), 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0)))) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-7.6 / injectionSwitch)))).x > injectionSwitch.y) && true))))), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y) && true))))), max(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-3651.0485, clamp(_GLF_IDENTITY(-3651.0485, (false ? _GLF_FUZZED(77.50) : -3651.0485)), _GLF_IDENTITY(-3651.0485, min(-3651.0485, -3651.0485)), -3651.0485)))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))) / 1.0)), 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true)), false), bvec2(bvec4(bvec2(bool(bvec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0)))) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-7.6 / injectionSwitch)))).x > injectionSwitch.y) && true))))), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y) && true))))), max(mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(-3651.0485)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4923.5832) : 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-3651.0485, clamp(_GLF_IDENTITY(-3651.0485, (false ? _GLF_FUZZED(77.50) : -3651.0485)), _GLF_IDENTITY(-3651.0485, min(-3651.0485, -3651.0485)), -3651.0485)))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))) / 1.0)), 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true)), false), true, true)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), true)))))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), true))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), injectionSwitch.y)))), true, false)))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(-3.6)), max(float(_GLF_FUZZED(-3.6)), float(_GLF_FUZZED(-3.6)))), bool(false)))))))
  barrier();
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.z = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.z * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), workgroup_id));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), false || (bool(_GLF_IDENTITY(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_base = subgroup_id * GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) && true) ? injectionSwitch.y : _GLF_FUZZED(-98.71)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))));
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, ~ (~ (1 & _GLF_IDENTITY(1, ~ (~ (1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 1 * (0))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! ((! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x, ~ (~ (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x)))) - 0u, ((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x, ~ (~ _GLF_IDENTITY((GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x), clamp((GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x), (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x), (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x)))))) - 0u) | 0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, 0u ^ (workgroup_base + subgroup_base)) + ((GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x + _GLF_IDENTITY(1, (1) >> 0)) % GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.y);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(false, true && (false))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).y), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y), false, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_IDENTITY(false, true && (false)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = _GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 2), min(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 2), max(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 2))), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 2)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x % 2, (_GLF_IDENTITY(true ? _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x, (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x)) % 2 : _GLF_FUZZED(subgroup_local_id), 0u ^ (true ? GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_size.x % _GLF_IDENTITY(2, 0 ^ (2)) : _GLF_FUZZED(subgroup_local_id)))))) == _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x)) ^ (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) | 0))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false)))) && true))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     barrier();
    }
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))) || false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(vec3(-18.28, -31.46, 941.070)[0]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(vec3(-18.28, -31.46, 941.070), min(vec3(-18.28, -31.46, 941.070), _GLF_IDENTITY(vec3(-18.28, -31.46, 941.070), min(vec3(-18.28, -31.46, 941.070), vec3(-18.28, -31.46, 941.070)))))[0]) : _GLF_FUZZED(8.4)))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), bool(bvec4((_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true, false, true)))))) || _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.4) : injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))), false)), false))), true)))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, false || (true))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, false || (true))))), true, true))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.3) : injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.8) : injectionSwitch.y)), true, false, false)))))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(0, 0 + (0)) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(5, 5, 5)))), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)), (0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1))) ^ 0), max(_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)), (0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)), (true ? 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), 0, 1, 1)))) : _GLF_FUZZED(66014))), int(int(0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)))))))))))) >> _GLF_IDENTITY(int(5), int(5)), min(0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(5)))), int(_GLF_IDENTITY(5, _GLF_IDENTITY((true ? 5 : _GLF_FUZZED(sign(35844))), (true ? (true ? 5 : _GLF_FUZZED(sign(35844))) : _GLF_FUZZED(-72391)))))))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) / 1), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0), int(5))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), 0 ^ ((0 >> _GLF_IDENTITY(int(5), int(5)))))), max(~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), 0 ^ ((0 >> _GLF_IDENTITY(int(5), int(5)))))), ~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), 0 ^ ((0 >> _GLF_IDENTITY(int(5), int(5)))))))))) - 0))) : _GLF_FUZZED(-13857)))), int(ivec2((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(0, 0 + (0)) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(5, 5, 5)))), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)), (0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1))) ^ 0), max(_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)), (0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)), (true ? 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), 0, 1, 1)))) : _GLF_FUZZED(66014))), int(int(0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) * 1)))))))))))) >> _GLF_IDENTITY(int(5), int(5)), min(0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(5)))), int(_GLF_IDENTITY(5, _GLF_IDENTITY((true ? 5 : _GLF_FUZZED(sign(35844))), (true ? (true ? 5 : _GLF_FUZZED(sign(35844))) : _GLF_FUZZED(-72391)))))))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) / 1), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0), int(5))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), 0 ^ ((0 >> _GLF_IDENTITY(int(5), int(5)))))), max(~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), 0 ^ ((0 >> _GLF_IDENTITY(int(5), int(5)))))), ~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), 0 ^ ((0 >> _GLF_IDENTITY(int(5), int(5)))))))))) - 0))) : _GLF_FUZZED(-13857)))), (0 ^ 0)))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (! (bool(bvec4(true, false, true, true)))))))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) || false))), false, _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true))), true)))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false))), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), true, true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), bool(bvec4(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), true, true, false))), false)), (bool(bvec2(_GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), bool(bvec4(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), true, true, false))), false))) && true)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, false, false)))) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))))) != 1), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) || false) || false), false, true), true)), false))))))))) || _GLF_IDENTITY(false, (false) || false)), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)))))))))))), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false))), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec2(! (false), false))))), true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) != 1)) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))))) != 1), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true), true)), false))))))))) || false), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true))))))))), true)), true)), (bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false))), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, true, true)), true, false)), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false))) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(1, (1) - 0) * (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))))) != 1), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_IDENTITY(false, (false) && true)), false, true), true)), false))))))))) || false), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, _GLF_IDENTITY(true, ! (! (true))))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), (bool(bvec3(bool(bvec4(false, false, true, true)), true, false))) && true))))))))), true)), true))) && true))); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false, true))))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, 1.0, exp(0.0), sqrt(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), mat2x4(mat4(mat2x4(injectionSwitch.y, 0.0, 1.0, exp(0.0), sqrt(1.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)))))), 0.0 + (injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter != 1), true && (bool(_injected_loop_counter != 1)))), (bool(_GLF_IDENTITY(bool(_injected_loop_counter != 1), true && (bool(_injected_loop_counter != 1))))) && true))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), false))))) || false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && true) || _GLF_IDENTITY((false), bool(bvec4((false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))
        {
         for(int _injected_loop_counter = (0 & _GLF_IDENTITY(23744, (_GLF_IDENTITY(23744, ~ (~ (_GLF_IDENTITY(23744, int(ivec4(23744, _GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), _GLF_IDENTITY(1, clamp(1, 1, 1))))))))) | (23744))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_IDENTITY(false, (false) && true))), bool(bvec4(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true, true)))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > _GLF_IDENTITY((5571 & 0), ((5571 & 0)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(ivec2(-28467, -60883).y, (true ? ivec2(-28467, -60883).y : _GLF_FUZZED(-76328))) & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), (~ (~ (_injected_loop_counter))) | 0)) != 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), (~ (~ (_injected_loop_counter))) | 0)) != 1, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), (~ (~ (_injected_loop_counter))) | 0)) != 1, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)); _injected_loop_counter ++)
      {
       subgroupAll(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(false, false), false, false)))))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), true, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), true, false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, sqrt(1.0), 0.0, sin(0.0)), (true ? mat3x2(injectionSwitch, 1.0, sqrt(1.0), 0.0, sin(0.0)) : _GLF_FUZZED(mat3x2(162.987, 214.727, -4218.7535, 37.06, -9048.7646, 367.527)))))).y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((3)), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / 1)), ~ (~ ((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))) - (0 & -54610)))), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / _GLF_IDENTITY(1, (1) - 0)))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((3)), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / 1)), ~ (~ ((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))) - (0 & -54610)))), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / _GLF_IDENTITY(1, (1) - 0)))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((3)), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / 1)), ~ (~ ((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))) - (0 & -54610)))), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / _GLF_IDENTITY(1, (1) - 0)))))))), (int(_GLF_IDENTITY(3, _GLF_IDENTITY((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((3)), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / 1)), ~ (~ ((3) | (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(int((_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))) - (0 & -54610)))), max(_GLF_IDENTITY(int((3)), max(int((3)), int((3)))), int((3)))))) / 1)) / _GLF_IDENTITY(1, (1) - 0))))))))) - 0)) >> 0)) | (0 & 8925)))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY((3) * _GLF_IDENTITY(1, 0 ^ (1)), max((3) * 1, (3) * 1))), max(_GLF_IDENTITY(3, _GLF_IDENTITY((3) * 1, max((3) * 1, (3) * 1))), _GLF_IDENTITY(3, _GLF_IDENTITY((3) * 1, max((_GLF_IDENTITY(3, 0 | (3))) * 1, (3) * 1))))))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(vec4(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), 0.0, 0.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)))) * 1.0)))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (! (! (_GLF_IDENTITY(false, false || (false))))))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-532.726) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-532.726) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))))), false), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-532.726) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))))), false))))), (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-532.726) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))))), false), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-532.726) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))))), false)))))) && true)))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(1), _GLF_IDENTITY(4, (4) >> 0), 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(faceforward(vec2(5578.9182, 219.518), injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != 1); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(8249.0496), _GLF_FUZZED(7.9)), bvec2(false, false))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), float(_GLF_FUZZED(float(-15846))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))) && true)))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec3(-0.5, 0.1, -5.7).b)), bool(false))))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false), true, false))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))), true, false)), true, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * 1.0)), float(_GLF_FUZZED(8.6)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(false)) && true))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513)))), mix(float(_GLF_FUZZED(8.3)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513))))), bool(true))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (false ? _GLF_FUZZED(-65.44) : float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))) / 1.0), float(_GLF_IDENTITY(_GLF_FUZZED(8.5), (false ? _GLF_FUZZED((4.3 - -13.09)) : _GLF_FUZZED(8.5)))), bool(_GLF_IDENTITY(false, (false) && true)))), abs(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.1)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513)))), mix(float(_GLF_FUZZED(8.3)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513))))), bool(true))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (false ? _GLF_FUZZED(-65.44) : float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))) / 1.0), float(_GLF_IDENTITY(_GLF_FUZZED(8.5), (false ? _GLF_FUZZED((4.3 - -13.09)) : _GLF_FUZZED(8.5)))), bool(_GLF_IDENTITY(false, (false) && true)))), abs(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.1)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513)))), mix(float(_GLF_FUZZED(8.3)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513))))), bool(true))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (false ? _GLF_FUZZED(-65.44) : float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))) / _GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(8.5), (false ? _GLF_FUZZED((4.3 - -13.09)) : _GLF_FUZZED(8.5)))), bool(_GLF_IDENTITY(false, (false) && true)))), abs(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0), (false ? _GLF_FUZZED(vec3(5.1, 1367.7896, 1.9)) : vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0)))), max(float(_GLF_IDENTITY(vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0), (false ? _GLF_FUZZED(vec3(5.1, 1367.7896, 1.9)) : vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0)))), float(_GLF_IDENTITY(vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0), (false ? _GLF_FUZZED(vec3(5.1, 1367.7896, 1.9)) : vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0))))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.1)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(0.0, (0.0) * cos(log(1.0))), 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), (vec4(0.0, 1.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513)))), mix(float(_GLF_FUZZED(8.3)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-5795.8513))))), bool(true))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), (false ? _GLF_FUZZED(-65.44) : float(_GLF_IDENTITY(0.0, (0.0) + 0.0))))) / _GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(8.5), (false ? _GLF_FUZZED((4.3 - -13.09)) : _GLF_FUZZED(8.5)))), bool(_GLF_IDENTITY(false, (false) && true)))), abs(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0), (false ? _GLF_FUZZED(vec3(5.1, 1367.7896, 1.9)) : vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0)))), max(float(_GLF_IDENTITY(vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0), (false ? _GLF_FUZZED(vec3(5.1, 1367.7896, 1.9)) : vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0)))), float(_GLF_IDENTITY(vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0), (false ? _GLF_FUZZED(vec3(5.1, 1367.7896, 1.9)) : vec3(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-807.957, min(_GLF_IDENTITY(-807.957, float(_GLF_IDENTITY(vec3(-807.957, 1.0, 1.0), mix(vec3(_GLF_FUZZED(26.79), (vec3(-807.957, 1.0, 1.0))[1], _GLF_FUZZED(-7.6)), vec3((vec3(-807.957, 1.0, 1.0))[0], _GLF_FUZZED(-64.49), (vec3(-807.957, 1.0, 1.0))[2]), bvec3(true, false, true))))), -807.957)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), cos(0.0), 1.0))))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.1)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(0.0, (0.0) * cos(log(1.0))), 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), (vec4(0.0, 1.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 0.0))))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0)))))
              {
               for(int _injected_loop_counter = (0 & _GLF_IDENTITY(57044, (0 | 0) + (57044))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mod(injectionSwitch, injectionSwitch)) : injectionSwitch)).x), _GLF_IDENTITY(bool(true), (bool(true)) || false))) > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (-72607 & 0) + (_injected_loop_counter ++)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) >> 0u), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) >> 0u)) << 0u), (virtual_gid) - _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)) && (false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))) || false))) ? _GLF_FUZZED(workgroup_base) : uint(_GLF_ZERO(0.0, injectionSwitch.x)))))], read, 4, 64, 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
}
