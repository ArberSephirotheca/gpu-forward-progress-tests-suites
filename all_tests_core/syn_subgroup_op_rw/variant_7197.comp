#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), bool(bool(false || (false)))))))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ((true) || false) && true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), true, true, true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false))))))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))) ^ 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1, (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1) >> 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < (0 | (0 | _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (false ? _GLF_FUZZED(81651) : 1)) : _GLF_FUZZED(1545))), 0 | (1))))); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-38563)))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(80781)), _GLF_FUZZED((-8542.1658 * -0.1))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), ((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1719.7459)), bool(false)))), float(_GLF_FUZZED(-6798.2926)), bool(false))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u), (uvec3(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(min(buf[virtual_gid], buf[virtual_gid]), min(min(buf[virtual_gid], buf[virtual_gid]), _GLF_IDENTITY(min(buf[virtual_gid], buf[virtual_gid]), (false ? _GLF_FUZZED((bvec2(true, false) , subgroup_local_id)) : min(buf[virtual_gid], buf[virtual_gid])))))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u)) >> uvec3(0u, 0u, 0u))), max(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_local_id)))], min(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))])), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_id)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid])))), ((_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u)), (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) | (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u)), _GLF_IDENTITY(1u, (1u) + 0u)), min(uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid])))), ((_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u)), (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) | (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u)), _GLF_IDENTITY(1u, (1u) + 0u)), uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid])))), ((_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u)), (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) | (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u)), _GLF_IDENTITY(1u, (1u) + 0u))))) >> uvec3(0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u), (uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), ((uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(7.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY(1u, (1u) | (1u)))) >> uvec3(0u, 0u, 0u)))))), 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0)))), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(workgroup_base) : atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))))], 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) * 1u), atomicLoad(buf[virtual_gid], 4, 64, 2)), ~ (~ (clamp(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), exp(0.0) * (injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1719.7459)), _GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec3(bvec3(bool(false), false, false))))))))), _GLF_IDENTITY(float(_GLF_FUZZED(-6798.2926)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-6798.2926)), float(mat3x4(float(_GLF_FUZZED(-6798.2926)), cos(0.0), 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-6798.2926)), min(float(_GLF_FUZZED(-6798.2926)), float(_GLF_FUZZED(-6798.2926)))))), bool(false))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), (((uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), exp(0.0) * (injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1719.7459)), _GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec3(bvec3(bool(false), false, false))))))))), _GLF_IDENTITY(float(_GLF_FUZZED(-6798.2926)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-6798.2926)), float(mat3x4(float(_GLF_FUZZED(-6798.2926)), cos(0.0), 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-6798.2926)), min(float(_GLF_FUZZED(-6798.2926)), float(_GLF_FUZZED(-6798.2926)))))), bool(false))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) / 1u), 1u), (uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])))), ((uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(46.45)), bool(false))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, 0u ^ (_GLF_IDENTITY(2u, (2u) | (_GLF_IDENTITY(2u, max(2u, 2u))))))))), 1u)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))), max(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), uint(uvec4(_GLF_FUZZED(subgroup_local_id), 1u, (0u | 0u), 0u)))))], min(_GLF_IDENTITY(buf[virtual_gid], max(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], buf[virtual_gid])), buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))])), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u), (uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid]), clamp((false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_base) : buf[virtual_gid])))))), ((_GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(-2.2))))) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), (uint(2u)) | 0u)) ^ 0u)), (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(2u), uint(2u))) | (uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u))), min(_GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u))), 0u | (_GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u))))))), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY(1u, (1u) + 0u))) >> uvec3(0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / (1u & 1u))], min(buf[virtual_gid], buf[virtual_gid])), ((uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0)))) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | 0u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), min(buf[virtual_gid], buf[virtual_gid])), ((uint(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), injectionSwitch.y), mix(float(_GLF_FUZZED(7.5)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), min(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (true ? _GLF_IDENTITY(uint(2u), uint(2u)) : _GLF_FUZZED(subgroup_base))) : _GLF_FUZZED(18596u)))))), _GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), ((1u)) << 0u)))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))))))), 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, (false ? _GLF_FUZZED(15484) : (2) << 0)))), (false ? _GLF_FUZZED(workgroup_base) : atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))), 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) / int(_GLF_ONE(1.0, injectionSwitch.y))))), 64))) + 0), 2), _GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ((atomicLoad(buf[virtual_gid], 4, 64, 2))) >> 0u) * 1u), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << 0u), 4, 64, 2))))));
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]), max(true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]), true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]))))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_IDENTITY(_GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]), (_GLF_FUZZED(vec3(_GLF_IDENTITY(-3.5, mix(float(_GLF_FUZZED(151.527)), float(-3.5), bool(true))), -8.8, -5958.5255)[1])) / 1.0), max(true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]), _GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]), (false ? _GLF_FUZZED(-5.3) : _GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]), (true ? true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.5, -8.8, -5958.5255)[1]) : _GLF_FUZZED(514.922)))))))))) - abs(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))) + sqrt(0.0)) > injectionSwitch.y))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        break;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), 0 + ((0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(17708) : _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), int(1))), clamp(~ (_GLF_IDENTITY(int(1), int(1))), ~ (_GLF_IDENTITY(int(1), int(1))), ~ (_GLF_IDENTITY(int(1), int(1)))))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(0 + (int(1)), (0 + (int(1))) | (_GLF_IDENTITY(0 + (int(1)), clamp(0 + (int(1)), 0 + (int(1)), 0 + (int(1)))))))))); _injected_loop_counter ++)
        {
         subgroupAll(false);
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) - 0)), 4, 64, 4);
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_DEAD(false))))
                  break;
                 continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     subgroupAll(false);
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2)), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2)))))))), 1 * (int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2))))))))))), min(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), (0 | (_GLF_IDENTITY(int(2), int(2)))) | (0 | (_GLF_IDENTITY(int(2), int(2)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2)))))))), 1 * (int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2))))))))))), min(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), (0 | (_GLF_IDENTITY(int(2), int(2)))) | (0 | (_GLF_IDENTITY(int(2), int(2)))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2)))))))), 1 * (int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2))))))))))), min(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), (0 | (_GLF_IDENTITY(int(2), int(2)))) | (0 | (_GLF_IDENTITY(int(2), int(2)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2)))))))), 1 * (int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2))))))))))), min(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), (0 | (_GLF_IDENTITY(int(2), int(2)))) | (0 | (_GLF_IDENTITY(int(2), int(2))))))))) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2)))))))), 1 * (int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2))))))))))), min(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), (0 | (_GLF_IDENTITY(int(2), int(2)))) | (0 | (_GLF_IDENTITY(int(2), int(2))))))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2)))))))), 1 * (int(int(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), int(int(0 | (_GLF_IDENTITY(int(2), int(2))))))))))), min(0 | (_GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(2), int(2))), (0 | (_GLF_IDENTITY(int(2), int(2)))) | (0 | (_GLF_IDENTITY(int(2), int(2)))))))))) ^ 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2))))) / 1)) ^ (-79948 & 0), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2))))) / 1)) ^ (-79948 & 0), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2))))) / 1)) ^ (-79948 & 0)) | 0)) >> 0)), 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec3(int(2), 1, 1), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3(int(2), 1, 1), ivec3(0, 0, 0) ^ (ivec3(int(2), 1, 1))))), ~ (~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(int(2), 1, 1), ivec3(0, 0, 0) ^ (ivec3(int(2), 1, 1))))))))))), int(2)), 0 | (_GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-14886) : _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), int(2))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ _GLF_IDENTITY(0, ~ (~ (0))))), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) * (1 ^ 0))), int(int((_GLF_IDENTITY(2, (2) * (1 ^ 0)))))) | (_GLF_IDENTITY(2, (2) * (1 ^ 0))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (false ? _GLF_FUZZED(18187) : (2))) * (_GLF_IDENTITY(1 ^ 0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))) ^ (1 ^ _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ 0)), (_GLF_IDENTITY(2, (2) * (1 ^ 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ 0)), (_GLF_IDENTITY(2, (2) * (1 ^ 0))) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ 0)), (_GLF_IDENTITY(2, (2) * (1 ^ 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ 0)), (_GLF_IDENTITY(2, (2) * (1 ^ 0))) - 0)))) - 0)) | (_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | (2))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), min(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY(2, (2) | (2))))), max((_GLF_IDENTITY(2, (2) | (2))), (_GLF_IDENTITY(2, (2) | (2)))))) - 0) * (1 ^ 0))))))), (int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * (1 ^ 0)), (_GLF_IDENTITY(2, (2) * (1 ^ 0))) - 0)) | (_GLF_IDENTITY(2, (2) * (1 ^ 0)))))))) / 1)) << 0), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, int(_GLF_IDENTITY(int(64), ~ (~ (int(64)))))), 4);
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)) || false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))) && true))))))
                {
                 return;
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(238.537), _GLF_FUZZED(-35.62)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), false, false, true)))))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec4(false || (_GLF_DEAD(false)), true, false, true)))), ! (! (_GLF_DEAD(false))))) || false))))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   subgroupBarrier();
  }
 atomicStore(buf[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 1), _GLF_IDENTITY(max(ivec2(4, 1), ivec2(4, 1)), (max(ivec2(4, 1), ivec2(4, 1))) | (max(ivec2(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(1, (1) | (1))))), ivec2(4, 1))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 1), _GLF_IDENTITY(max(ivec2(4, 1), ivec2(4, 1)), (max(ivec2(4, 1), ivec2(4, 1))) | (max(ivec2(4, 1), ivec2(4, 1)))))))), (~ (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 1), _GLF_IDENTITY(max(ivec2(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(87941) : 4)))), 1), ivec2(4, 1)), (max(ivec2(4, 1), ivec2(4, 1))) | (max(ivec2(4, 1), ivec2(4, 1))))))))) | (~ (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 1), _GLF_IDENTITY(max(ivec2(4, 1), ivec2(4, 1)), (max(ivec2(4, 1), _GLF_IDENTITY(ivec2(4, 1), clamp(ivec2(4, 1), ivec2(4, 1), ivec2(4, 1))))) | (max(ivec2(4, 1), ivec2(4, 1)))))))))))));
 if(_GLF_DEAD(false))
  return;
}
