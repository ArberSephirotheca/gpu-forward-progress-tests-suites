#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))), false))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4716.0334)), vec2(_GLF_FUZZED(-2.5), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x)) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) + 0)))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) + 0), int(6)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true))))))))))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findLSB(_injected_loop_counter)))), 1))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.5)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-46.79)), bool(false)))))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(2), int(2))), 0 | ((0 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), true && (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((true ? int(6) : _GLF_FUZZED(40663)), (true ? (true ? int(6) : _GLF_FUZZED(40663)) : _GLF_FUZZED(-40825)))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter / _injected_loop_counter))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
       barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], _GLF_IDENTITY(gl_WorkGroupID[2], (gl_WorkGroupID[2]) ^ 0u))), (gl_WorkGroupID) / ((uvec3(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(uvec3(uvec2(1u, 1u), 1u)))), clamp(uint(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(uvec3(uvec2(1u, 1u), 1u)))), uint(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(uvec3(uvec2(1u, 1u), _GLF_IDENTITY(1u, (1u) | (1u)))))), uint(_GLF_IDENTITY(uvec2(1u, 1u), uvec2(uvec3(uvec2(1u, 1u), 1u)))))))) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), min(gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id, 1u), uvec2(uvec3(uvec2(subgroup_id, 1u), 1u)))), (uint(_GLF_IDENTITY(uvec2(subgroup_id, 1u), uvec2(uvec3(_GLF_IDENTITY(uvec2(subgroup_id, 1u), (uvec2(subgroup_id, 1u)) << uvec2(0u, 0u)), 1u))))) - 0u)) * subgroup_size, ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), clamp(uvec2(subgroup_id, 1u), _GLF_IDENTITY(uvec2(subgroup_id, 1u), min(uvec2(subgroup_id, 1u), uvec2(subgroup_id, 1u))), uvec2(subgroup_id, 1u))), uvec2(uvec3(uvec2(subgroup_id, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, min(1u, 1u))))), 1u))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id, 1u), clamp(uvec2(subgroup_id, 1u), _GLF_IDENTITY(uvec2(subgroup_id, 1u), min(uvec2(subgroup_id, 1u), uvec2(subgroup_id, 1u))), uvec2(subgroup_id, 1u))), uvec2(uvec3(uvec2(subgroup_id, 1u), 1u)))))), (uint(_GLF_IDENTITY(uvec2(subgroup_id, 1u), uvec2(uvec3(uvec2(subgroup_id, 1u), 1u))))) - 0u)) * subgroup_size))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u)))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> 0u)), (max(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> 0u))) | (_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> 0u)), min(max(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> 0u)), max(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> 0u))))))), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY((true ? (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(_GLF_IDENTITY(-7.1, float(_GLF_IDENTITY(mat3x4(-7.1, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(mat3x4(mat3x4(mat3x4(-7.1, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0))), (mat3x4(mat3x4(mat3x4(-7.1, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0)))) * mat3(1.0))))), -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))), ((true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))) >> 0u)), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_IDENTITY(_GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAnd(subgroup_id, workgroup_id)) : _GLF_IDENTITY(_GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))), (_GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))) - 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, _GLF_IDENTITY(-3367.2672, mix(float(_GLF_IDENTITY(-3367.2672, min(-3367.2672, -3367.2672))), float(_GLF_FUZZED(-96.44)), bool(false)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))))))))))) : _GLF_FUZZED(subgroup_local_id)), (_GLF_IDENTITY((true ? (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(_GLF_IDENTITY(-7.1, (-7.1) - tan(0.0)), -3367.2672)))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), 0u ^ (~ ((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))), min(true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), 0u ^ (~ ((subgroup_local_id + 1) % subgroup_size))) : _GLF_IDENTITY(_GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))), (_GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))) >> 0u), true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), 0u ^ (~ ((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), 0u ^ (~ ((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(packHalf2x16(vec2(_GLF_IDENTITY(-7.1, (-7.1) - 0.0), -3367.2672))), min(true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), 0u ^ (~ ((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))), true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), 0u ^ (~ ((subgroup_local_id + 1) % subgroup_size))) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))) - 0u))))) : _GLF_FUZZED(subgroup_local_id)), max((true ? (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u)) | ((subgroup_local_id + 1)))))) % subgroup_size), (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 0u, 0u, 1u))), (~ (uint(uvec4(subgroup_size, 0u, 0u, 1u)))) | 0u))))) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))))))) : _GLF_FUZZED(subgroup_local_id)), _GLF_IDENTITY((true ? (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((49003u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (((subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))))))), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((49003u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (((subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))))))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((49003u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (((subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))))))))))) : _GLF_FUZZED(subgroup_local_id)), ((true ? (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((49003u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (((subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))))))), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((49003u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (((subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))))))))))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((49003u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (((subgroup_local_id + 1) % subgroup_size))), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), max(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672))))), _GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (true ? ~ ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(packHalf2x16(vec2(-7.1, -3367.2672)))))))))))))))) : _GLF_FUZZED(subgroup_local_id))) - 0u)))) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), uint(uvec3(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u, 0u)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, false, false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (true ? 2822 : 29464))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), (true ? float(mat2x3(injectionSwitch.y, 1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)) : _GLF_FUZZED(-2277.1235))))))), false, _GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (0 << _GLF_IDENTITY(int(8), int(8))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))) >> 0), int(5)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), bool(bvec2(false, true))) || (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u & _GLF_IDENTITY(177050u, (177050u) << (0u | 0u)))) + 1 < subgroup_size) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), (bool(_GLF_IDENTITY(false, true && (false)))) || false))), bool(bvec2(false, true)))))
      barrier();
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     do
      {
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(cosh(vec2(-1030.1675, -225.763))))).y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))) || false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))) < injectionSwitch.y))))
              {
               atomicStore(buf[virtual_gid], read, 4, 64, 4);
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
      }
     subgroupAll(true);
    }
  }
}
