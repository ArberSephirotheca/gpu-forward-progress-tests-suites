#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 bvec3 _f0;
 uvec2 _f1;
 bvec4 _f2;
 uvec4 _f3;
 mat3x2 _f4;
 bvec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 bool _f3;
 int _f4;
} ;

struct _GLF_struct_11 {
 mat2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 bvec3 _f3;
 mat2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_6 {
 float _f0;
 bvec4 _f1;
 uvec3 _f2;
 bvec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 uvec2 _f1;
 ivec2 _f2;
 uvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 _GLF_struct_5 _f1;
 mat3x4 _f2;
 vec2 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
 vec3 _f1;
 mat2x4 _f2;
 float _f3;
 mat4x2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_4 {
 uint _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_4 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_11 _f2;
 ivec4 _f3;
 uint next_virtual_gid;
 bvec3 _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 ivec3 _f1;
 int _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 _GLF_struct_0 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_2 {
 uint subgroup_size;
 _GLF_struct_1 _f0;
 uint _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(gl_SubgroupSize, _GLF_struct_1(mat3(1.0), _GLF_struct_0(vec2(1.0), ivec3(1), 1, bvec2(true)), mat3(1.0)), 1u);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_2.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_4(1u, _GLF_struct_3(mat2x4(1.0), vec3(1.0), mat2x4(1.0), 1.0, mat4x2(1.0), mat3x4(1.0))), _GLF_struct_8(mat2x4(1.0), _GLF_struct_5(uvec4(1u), uvec2(1u), ivec2(1), uvec4(1u), mat3(1.0)), mat3x4(1.0), vec2(1.0), _GLF_struct_6(1.0, bvec4(true), uvec3(1u), bvec2(true), mat2x3(1.0)), _GLF_struct_7(mat2x3(1.0), uvec2(1u))), _GLF_struct_11(mat2(1.0), _GLF_struct_9(uvec2(1u), mat3x4(1.0), ivec3(1), true, 1), _GLF_struct_10(bvec3(true), uvec2(1u), bvec4(true), uvec4(1u), mat3x2(1.0), bvec4(true), vec3(1.0)), bvec3(true), mat2(1.0), uvec3(1u)), ivec4(1), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size), bvec3(true));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 do
  {
   do
    {
     if((subgroup_local_id % 2) == 0)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         subgroupAll(false);
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[_GLF_struct_replacement_12.next_virtual_gid], uint(1), 4, 64, 4);
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       subgroupAll(false);
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_struct_replacement_12.next_virtual_gid], uint(1), 4, 64, 4);
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
      {
      }
     else
      {
       do
        {
         subgroupBarrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ 0)); _injected_loop_counter --)
                  {
                   do
                    {
                     atomicStore(buf[virtual_gid], read, 4, 64, 4);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
