#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(5), int(5)))))
    {
     case 0:
     case 80:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 45:
     case 69:
     case 63:
     case 50:
     case 37:
     case 12:
     if(_GLF_DEAD(false))
      return;
     case 42:
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z = _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))));
     break;
     if(_GLF_DEAD(false))
      return;
     case 99:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     lessThan(ivec2(37281, -97214), (ivec2(29492, -72550) + _GLF_IDENTITY(-88423, (-88423) | (-88423))));
     default:
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-84807)))); _injected_loop_counter ++)
      {
       1;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w = subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    return;
  }
 else
  {
  }
 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.y = subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.w = workgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], _GLF_IDENTITY(gl_WorkGroupID, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))[2])).x;
 uint workgroup_base = GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.w * workgroup_id;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z = workgroup_base;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size)).z, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z, 0u ^ (GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z)), _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z) - 0u, min((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z) - 0u, _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z) - 0u, ((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z) - 0u) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size)).z, 0u ^ (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z, (GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z) - 0u)))) << 0u) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])), (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])), (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3]))) + uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(uvec4(113149u, 118698u, 81693u, 47981u)))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])), clamp(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])), _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])))))).y, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size, uvec4(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size[3])).y) << 0u);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(794.451), clamp(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(794.451), sqrt(0.0) + (true ? injectionSwitch.x : _GLF_FUZZED(794.451))), true ? injectionSwitch.x : _GLF_FUZZED(794.451), true ? injectionSwitch.x : _GLF_FUZZED(794.451))))))) > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z, uint(uvec2(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z, 1u)))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z) << 0u), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z)))) * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w + ((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.y + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w);
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))) ^ 1), min((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))) ^ 1), (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))) ^ 1))) | (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 | (4)), 4)))), 64, _GLF_IDENTITY(0, ~ (~ (0))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))))); _injected_loop_counter --)
    {
     return;
    }
  }
 _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.x = read, ~ (~ (GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.x = read)));
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x], uint(1), 4, 64, 4);
 do
  {
   do
    {
     switch(_GLF_SWITCH(0))
      {
       case 69:
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if((uvec2(77475u, 45788u) != uvec2(26937u, 132865u)))
          {
           {
            if((ivec3(-63040, -30308, 60780)[2] != -19364))
             {
              ((mat3x2(mat4x2(-913.377, -5096.0270, -67.31, -73.54, 5.0, -9978.7351, -8.8, 243.856)) - mat3x2(3.2, 94.96, -1997.8883, -2.9, -92.73, -3952.5830)) , mat2x4(4.0, -63.66, trunc(240.773), 30.57, -2996.1780, 8.4, -90.53, -5407.2098));
              vec3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v[94], _GLF_SWITCH_2_2v;
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
               {
                _GLF_SWITCH_2_0v;
               }
              else
               {
               }
              mat3x2 _GLF_SWITCH_2_3v[91];
             }
            else
             {
              GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.ba.ts;
              ;
              mat4x2 _GLF_SWITCH_2_4v, _GLF_SWITCH_2_5v, _GLF_SWITCH_2_6v;
              float _GLF_SWITCH_2_7v[13], _GLF_SWITCH_2_8v;
              uvec4 _GLF_SWITCH_2_9v, _GLF_SWITCH_2_10v[96];
             }
            if((bvec2(true, true) == bvec2(false, false)))
             {
              cos(vec4(1.9, -44.33, -87.20, 47.70));
              ;
              pow(vec3(461.169, -4087.9796, 7.4), vec3(63.95, -6.7, 45.29));
              bvec4 _GLF_SWITCH_2_11v, _GLF_SWITCH_2_12v;
              ceil(vec2(-5.1, -5.0));
              (0.8 >= determinant(mat3(-135.163, -13.52, 98.68, 0.8, 5080.6064, -8.0, 8991.2944, 552.307, 98.33)));
              mat3x4(-835.554, -27.33, 4.3, -5077.8681, -75.49, 4025.8012, -92.49, -525.910, -4.7, -13.54, -99.29, -4.2);
              clamp(uvec3(122618u, 97897u, 111896u), workgroup_id, subgroup_id);
             }
            else
             {
              mat3x2 _GLF_SWITCH_2_13v;
              ;
              mat3x4 _GLF_SWITCH_2_14v, _GLF_SWITCH_2_15v;
              mat4x3 _GLF_SWITCH_2_16v;
              bvec2 _GLF_SWITCH_2_17v[74];
             }
            ;
            {
             (ivec3(31247, 14523, 52335) - 90847);
             subgroup_id;
             ;
             uvec2 _GLF_SWITCH_2_18v, _GLF_SWITCH_2_19v;
             (ivec4(-11389, 11130, -17113, -8490) != bitfieldReverse(ivec4(-81773, 20246, 13888, 26500)));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               bvec4(true, false, true, true);
              }
             else
              {
              }
             subgroup_id;
             mat2x3 _GLF_SWITCH_2_20v;
            }
            while((mat4x2(-876.501, 0.0, 4.0, -7.1, 7.2, -42.71, 644.332, -2405.7256) != mat4x2(0.2, -1617.6937, 32.22, -8127.6688, 789.829, -264.080, 6704.2616, 664.716)))
             {
              uint _GLF_SWITCH_2_21v, _GLF_SWITCH_2_22v[97];
              notEqual(ivec3(16227, -16732, -1730), max(ivec3(12677, -95860, 81029), ivec3(-68240, -42647, 12682)));
              bvec4(true, false, true, true);
              not(bvec2(true, true));
              log2(injectionSwitch);
              (workgroup_size * uvec2(154305u, 88024u));
              workgroup_base;
              uvec2 _GLF_SWITCH_2_23v, _GLF_SWITCH_2_24v, _GLF_SWITCH_2_25v;
             }
            true;
           }
           ;
           isinf((-8.3 * vec3(-1.3, -6127.5698, 9422.5381)));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             ;
            }
          }
         else
          {
           for(           greaterThan(min(ivec3(35435, -9190, -23257), -82360), ivec3(-61280, -72909, -4527));
 (uvec2(90490u, 164929u) , (mat4x2(-61.77, -4.3, -64.46, -9.1, 3.9, 89.98, -17.32, 51.50) == mat4x2(mat3x2(-50.38, 4.6, -2.3, -4622.0344, 8.3, 49.56)))); ivec2(90609, -22571))
            {
             bvec3 _GLF_SWITCH_2_26v[20], _GLF_SWITCH_2_27v, _GLF_SWITCH_2_28v;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | 1)); _injected_loop_counter ++)
              {
               mat3x2(mat2x3(5.0, 9.2, 3.8, -361.799, -5383.2898, 849.973));
              }
             while(false)
              {
               mat2(-9.3, -4.9, -60.72, -1.7);
               mat3(mat3x4(207.131, 1.2, -2.5, -2145.4370, 730.712, -929.678, -541.863, -0.9, 2641.1629, 1.6, 36.89, -1.9));
              }
             mat4x2 _GLF_SWITCH_2_29v;
             -43357;
            }
           bool _GLF_SWITCH_2_30v;
           transpose(mat2(79.63, 7.1, 4.6, -4.2));
           {
            (mat3(mat3x4(-504.637, -394.736, 85.72, 5.2, -8152.9533, 8.8, 6.7, -834.572, -45.17, 3097.2280, -75.44, 5752.0773)) / -8115.2591);
            ;
            bvec3 _GLF_SWITCH_2_31v[39], _GLF_SWITCH_2_32v;
            bvec4 _GLF_SWITCH_2_33v;
            do
             {
              vec3 _GLF_SWITCH_2_34v, _GLF_SWITCH_2_35v;
             }
            while((-72899 < -57493));
            sign(7673);
            {
             uvec3 _GLF_SWITCH_2_36v, _GLF_SWITCH_2_37v;
             do
              {
               mat3x2(-8288.5579, -3371.6754, -605.866, 9.4, 2.1, 66.90);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             workgroup_size;
             ivec2(-23831, 17246);
             mat2x4(3.9, -4810.3024, -3.1, 62.11, 9345.9921, 3581.2551, -0.9, -321.604);
            }
            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
             {
              mat4x2(-185.355, 4.0, -0.2, -69.57, 7.0, -73.49, -411.436, -1.6);
             }
            bvec4(false, true, true, true);
           }
           {
            (-583.425 , bvec3(true, true, false));
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              do
               {
                ivec4(-12235, 28327, -41370, -82203);
                vec4(2.2, -601.020, -3.4, -1.0);
                uvec2 _GLF_SWITCH_2_38v[76];
                ivec2(15153, 37895);
                (subgroup_size * min(uvec3(79104u, 90298u, 10974u), uvec3(16162u, 39169u, 92488u)));
                (~ uvec3(156056u, 47982u, 149559u).xyx);
                (mat4(3.7, 1.3, 80.69, 0.8, 4.6, -3.0, 467.159, 13.21, 5.9, 7.8, -44.51, -14.78, -5927.6434, -8.6, -594.384, -5.8) - 911.612);
                vec3 _GLF_SWITCH_2_39v, _GLF_SWITCH_2_40v, _GLF_SWITCH_2_41v[34];
               }
              while((false && (bvec3(true, true, false) != bvec3(true, false, true))));
             }
            for(            ivec4(-9728, 75435, -37651, 9352);
 ((46895 != -9466) != true); atan(vec3(-411.309, 5.8, -30.02), vec3(49.42, -7.8, -6.5)))
             {
              mat4x2 _GLF_SWITCH_2_42v;
             }
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              uvec3(73906u, 120956u, 70942u);
             }
            else
             {
             }
            uvec4 _GLF_SWITCH_2_43v, _GLF_SWITCH_2_44v[41];
            float _GLF_SWITCH_2_45v, _GLF_SWITCH_2_46v, _GLF_SWITCH_2_47v[4];
           }
          }
        }
       case 82:
       mat3(mat3x4(0.3, 6.1, 8821.3721, -56.74, -0.9, 7589.1871, -980.274, -6.1, 455.950, -4.6, -6399.0751, -6.1));
       case 0:
       case 22:
       case 54:
       case 2:
       case 24:
       case 96:
       case 38:
       case 72:
       case 33:
       case 79:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
          {
           case 0:
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           return;
           break;
           case 18:
           while(false)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               while(((-82039 * 85901) >= max(25061, 91951)))
                {
                 equal(bvec4(true, true, false, false), isinf(vec4(-4498.9981, -4.8, -0.4, 48.05)));
                 mat2x4(2097.6347, -3.0, -979.801, 2.1, 166.178, -7.6, 168.564, 239.603);
                 uvec2 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
                 ;
                 abs(ivec3(55734, 61300, -1723));
                }
              }
             (- mat4(-0.2, 578.991, 6.1, 64.21, 38.09, 9.0, -455.332, 661.461, -7.2, -8.6, -2.3, -334.258, -5159.6470, 3.3, -35.68, 78.82));
             uvec3 _GLF_SWITCH_2_2v;
             (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size / workgroup_id);
             if(true)
              {
               fract(16.05);
               uvec4 _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v[23], _GLF_SWITCH_2_5v[84];
               mat2x4 _GLF_SWITCH_2_6v;
               vec2 _GLF_SWITCH_2_7v, _GLF_SWITCH_2_8v, _GLF_SWITCH_2_9v;
               _GLF_SWITCH_2_2v;
               uvec2 _GLF_SWITCH_2_10v[9];
               mat2x3 _GLF_SWITCH_2_11v;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 mat3x4(5.3, -6.4, -2.8, 6.9, -4.4, -7.0, 2.5, -776.908, 196.048, 655.966, 8026.0452, -1.0);
                }
              }
             false;
             {
              mat3x4 _GLF_SWITCH_2_12v, _GLF_SWITCH_2_13v;
              mat3x4 _GLF_SWITCH_2_14v, _GLF_SWITCH_2_15v, _GLF_SWITCH_2_16v;
              ivec4(15480, 30017, -50006, -7809);
              (vec4(5.5, -763.289, 80.51, 782.767) + -8.7);
             }
            }
           default:
           1;
          }
        }
       break;
       case 73:
       for(uint _GLF_SWITCH_2_48v, _GLF_SWITCH_2_49v; (vec4(68.60, 996.822, -482.076, -407.684) != vec4(-4.4, 7316.6162, -3.7, -6846.3978)); bvec4(true, true, false, true))
        {
         mat4x2(-5.9, -7.7, -1428.1121, 6.4, -546.303, -4777.7716, 4.3, -818.543);
         while((mat4x2(-4.6, -9066.2784, 3.2, -2006.7252, 87.56, -93.72, -8488.9298, -8883.4819) != (mat3x2(5932.9750, -8.1, 793.664, -206.507, 23.93, -337.673) * mat4x3(-15.56, -6.5, -635.025, 9859.7266, -5.5, 508.245, -7.2, -61.05, -7.3, 9.7, 21.96, -6274.8432))))
          {
          }
         for(mat3x4 _GLF_SWITCH_2_50v; true; outerProduct(injectionSwitch, vec4(2.6, -48.80, -9.9, -674.989)))
          {
           while((workgroup_base < workgroup_id))
            {
             do
              {
               length(-1584.3509);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           (576.378 - mat2x4(mat4x3(9.3, -367.362, 55.31, 936.799, -12.15, -2.6, -3698.0340, 7.2, -468.916, -1.5, 381.623, 1.1)));
           inverse(mat2(755.317, -0.0, -0.8, 6.3));
           bvec3(true, false, false).ppt;
           vec4 _GLF_SWITCH_2_51v;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             (mat2x4(-3.5, 8.0, -86.82, 5768.6908, -9.3, 82.56, -375.858, 4419.3074) * vec2(-240.929, 94.65));
            }
           ivec2(88469, 19691);
           (transpose(mat2(-9.0, -787.520, -6318.9586, -4.0)) * (+ mat2(6142.4669, -5.3, 9.4, 70.37)));
           bitCount(uvec2(86103u, 7912u));
          }
         if((min(ivec3(-90486, 10814, -69144), ivec3(-59194, 25770, 76721)) != ivec3(-49704, 73524, 59080)))
          {
           while((bvec2(true, true) != bvec2(true, false)))
            {
             mat2x3(6443.8712, 8559.5642, 7.0, 9271.1339, 4323.9922, -2.0);
             uvec4(128117u, 12943u, 113848u, 144919u);
             (uvec2(98268u, 179550u) / uvec2(140493u, 35558u));
             uvec4(54763u, 51525u, 60451u, 112859u);
             bvec4(false, true, true, true);
             mix(-7.4, -0.1, -711.283);
             mat2x3 _GLF_SWITCH_2_52v;
             lessThanEqual(uvec3(38591u, 31346u, 145612u), uvec3(1205u, 48705u, 116709u));
             ivec2 _GLF_SWITCH_2_53v, _GLF_SWITCH_2_54v;
            }
           mat3x2 _GLF_SWITCH_2_55v, _GLF_SWITCH_2_56v, _GLF_SWITCH_2_57v;
           int _GLF_SWITCH_2_58v, _GLF_SWITCH_2_59v;
           uvec3(164243u, 72848u, 54626u);
           if((greaterThan(uvec2(75419u, 19595u), uvec2(174106u, 55270u)) != bvec2(false, false)))
            {
            }
           for(mat3x4 _GLF_SWITCH_2_60v, _GLF_SWITCH_2_61v[56], _GLF_SWITCH_2_62v; false; (mat3(-6.7, -3.6, 757.571, -0.2, -89.46, 12.59, -1946.5219, 9611.8839, 9237.5252) * mat2x3(-0.4, -374.743, -0.9, 2332.7731, -409.382, -94.13)))
            {
             mat4(57.05, -7.0, -9929.0080, -2368.1919, -1336.0507, 2.2, 270.428, -75.82, 38.01, -7.2, -4488.7258, 3.6, 4.7, -5556.1150, -275.946, -4920.3452);
             ivec4 _GLF_SWITCH_2_63v, _GLF_SWITCH_2_64v;
             vec2 _GLF_SWITCH_2_65v[10], _GLF_SWITCH_2_66v, _GLF_SWITCH_2_67v[20];
             ;
            }
           mat2x3 _GLF_SWITCH_2_68v;
           mat4x3(mat2(-741.269, -5.8, 7.5, 8.9));
           while(false)
            {
             ;
             lessThan(ivec3(-46318, 57184, -15468), ivec3(-77299, -46910, 5454));
             mat3x2 _GLF_SWITCH_2_69v;
             _GLF_SWITCH_2_59v;
             vec3 _GLF_SWITCH_2_70v, _GLF_SWITCH_2_71v;
             (-4874.6008 + mat3x2(417.169, -894.294, -56.17, -3.8, 1.9, 4100.5062));
             float _GLF_SWITCH_2_72v;
             mat2x3 _GLF_SWITCH_2_73v, _GLF_SWITCH_2_74v;
            }
          }
         else
          {
          }
         int _GLF_SWITCH_2_75v;
         if(true)
          {
           for(bvec3 _GLF_SWITCH_2_76v, _GLF_SWITCH_2_77v; (ivec2(98296, -75969) != ivec2(-96533, 58327)); uvec3(41465u, 170315u, 191202u))
            {
             (uvec3(113882u, 51661u, 44383u) & uvec3(44380u, 131271u, 31468u));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               bvec4(true, true, false, true);
              }
             else
              {
              }
             mat4x2 _GLF_SWITCH_2_78v, _GLF_SWITCH_2_79v;
             vec3(6.1, -43.74, -1737.9973);
             (mat2x3(2.1, 1.7, -0.2, -7895.6512, -52.21, -6309.3077) + -2.4);
             vec2 _GLF_SWITCH_2_80v, _GLF_SWITCH_2_81v, _GLF_SWITCH_2_82v;
            }
           if(false)
            {
            }
           while(true)
            {
             outerProduct(vec4(-407.436, 88.15, 32.57, 5.6), injectionSwitch);
             -780.036;
             mat2x3 _GLF_SWITCH_2_83v[90], _GLF_SWITCH_2_84v;
             mat2 _GLF_SWITCH_2_85v, _GLF_SWITCH_2_86v[21];
             uintBitsToFloat(subgroup_id);
             mat3(-29.87, -2491.2533, -6.9, 1.1, 8.7, -1645.4842, -54.84, 8.0, 82.57);
            }
           (9.2 / vec3(5.7, 6.8, -5.7));
           for(mat3x2 _GLF_SWITCH_2_87v; true; mat4x2(mat3x2(0.4, -1.6, 0.5, 18.98, -534.052, 33.56)))
            {
             uvec2 _GLF_SWITCH_2_88v;
             subgroup_local_id;
             uint _GLF_SWITCH_2_89v, _GLF_SWITCH_2_90v, _GLF_SWITCH_2_91v[95];
             vec4(-3.0, -5499.8005, 7.6, -5.4);
             mat3x4 _GLF_SWITCH_2_92v[81], _GLF_SWITCH_2_93v, _GLF_SWITCH_2_94v;
            }
           sinh(clamp(step(-5.4, vec4(487.020, 9.7, -6.4, 5.1)), vec4(3307.8457, -5668.4013, 1.2, 2.3), vec4(3978.0794, 71.02, -8.6, 651.238)));
           while(true)
            {
             (uvec2(37191u, 193738u) << uvec2(6520u, 41880u));
            }
          }
         {
         }
        }
       default:
       1;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), false, true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), false, false)))))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))), false, false)))) || false), true), true))), true, true)), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))), true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).y)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), true), true))), true, true)), true)))))), ! (! (bool(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), true, true, false)))))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true)))))))))), (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true)))))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (true) && true))))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, _GLF_IDENTITY(true, bool(bvec3(true, false, false))))), true)))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true)))))), _GLF_IDENTITY(false, true && (false)), true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (true) && true))))))) || false)), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), _GLF_IDENTITY(true, ! (! (true))))))))), false, true))))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false)))))))))))))), ! (! (! (bool(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false), true && (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)))))))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))) || false))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true)), false, false)))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)), true), true))), _GLF_IDENTITY(true, false || (true)), true)), true), false)))), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), _GLF_IDENTITY(true, true && (true)), true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))), true, true)), true), false)))), false))))))))))))))))))))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), true)))))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) ^ 0)) >> 0), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) ^ 0)) >> 0), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) ^ 0)) >> 0), (_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) ^ _GLF_IDENTITY(0, max(0, 0)))) >> 0)) - 0))), int(8))))))) < _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size)).w, clamp(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)), clamp(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)))))))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       switch(_GLF_SWITCH(0))
        {
         case 19:
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           ((mat4x3(-5953.9452, -921.487, -4.3, -8.2, 2358.9526, 5.7, 7109.3646, -8.6, 0.8, 3463.3495, -0.0, -9375.5478)) * vec4(0.9, -103.713, -96.71, 2.3));
          }
         case 57:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           mat4x3(-779.837, 55.63, _GLF_IDENTITY(-3941.0380, min(-3941.0380, -3941.0380)), -4559.4487, -76.65, 50.03, 774.944, -9.4, 1.4, -6.6, -18.89, 4196.6426);
          }
         case 0:
         case 2:
         case 1:
         if(_GLF_DEAD(false))
          break;
         case 27:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         case 87:
         case 72:
         case 70:
         if(_GLF_DEAD(false))
          continue;
         case 15:
         case 77:
         do
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 57:
             case 25:
             case 56:
             switch(_GLF_SWITCH(0))
              {
               case 0:
               atomicStore(checker[virtual_gid], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.x, 4, 64, 4);
               subgroupAll(false);
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                return;
               break;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), bool(bvec2(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), false))))))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               case 62:
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || false), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), false, false);
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
               case 13:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               mat3x4 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[39];
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) + 0))))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                  }
                }
               default:
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
               if(_GLF_DEAD(false))
                return;
               1;
              }
             break;
             case 44:
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             (mat4x2(-45.67, 4117.9755, -951.102, -4.6, -178.370, 28.32, -6542.2191, 4.1));
             default:
             1;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         break;
         case 53:
         if(_GLF_DEAD(false))
          return;
         _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size << next_virtual_gid), ((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size << next_virtual_gid)) | (_GLF_IDENTITY((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size << next_virtual_gid), min((GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size << next_virtual_gid), (GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size << next_virtual_gid)))));
         case 94:
         mat3 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v;
         default:
         1;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec2(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y)), (bool((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y))) && true), false))) && true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))) : _GLF_FUZZED(vec2(92.98, -6.4))))).x > injectionSwitch.y)))) || false, bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))) : _GLF_FUZZED(vec2(92.98, -6.4))))).x > injectionSwitch.y)))) || false, false)))), false, _GLF_IDENTITY(false, (false) || false), false))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         switch(_GLF_SWITCH(0))
          {
           case 96:
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9774.6624)), bool(false)))) + 0.0)))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           (ivec4(79830, -86441, 1331, -82276) >> -98022);
           case 47:
           bvec2(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(15004u, 162114u, 24371u, 175481u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(15004u, 162114u, 24371u, 175481u))), (true ? _GLF_IDENTITY(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)) ^ _GLF_IDENTITY((uvec4(15004u, 162114u, 24371u, 175481u)), ((uvec4(15004u, 162114u, 24371u, 175481u))) << uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED((workgroup_base | uvec4(52388u, 44156u, 44686u, _GLF_IDENTITY(190196u, min(_GLF_IDENTITY(190196u, (190196u) / 1u), _GLF_IDENTITY(190196u, clamp(190196u, 190196u, 190196u))))))))) == uvec4(38553u, 31013u, 9698u, 144129u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(15004u, 162114u, 24371u, 175481u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(15004u, 162114u, 24371u, 175481u))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), min(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), _GLF_IDENTITY(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), (uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u)) ^ uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)) ^ _GLF_IDENTITY((uvec4(15004u, 162114u, 24371u, 175481u)), ((uvec4(15004u, 162114u, 24371u, 175481u))) << uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED((workgroup_base | uvec4(52388u, 44156u, _GLF_IDENTITY(44686u, ~ (_GLF_IDENTITY(~ (44686u), (~ (44686u)) | (~ (44686u))))), _GLF_IDENTITY(190196u, min(_GLF_IDENTITY(190196u, (_GLF_IDENTITY(190196u, max(190196u, _GLF_IDENTITY(190196u, min(_GLF_IDENTITY(190196u, ~ (~ (190196u))), 190196u))))) / 1u), _GLF_IDENTITY(190196u, clamp(190196u, 190196u, 190196u)))))))), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), min(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), _GLF_IDENTITY(uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u), (uvec4(15004u, _GLF_IDENTITY(162114u, (162114u) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 24371u, 175481u)) ^ uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)) ^ _GLF_IDENTITY((uvec4(15004u, 162114u, 24371u, 175481u)), ((uvec4(15004u, 162114u, 24371u, 175481u))) << uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED((workgroup_base | uvec4(52388u, 44156u, _GLF_IDENTITY(44686u, ~ (_GLF_IDENTITY(~ (44686u), (~ (44686u)) | (~ (44686u))))), _GLF_IDENTITY(190196u, min(_GLF_IDENTITY(190196u, (_GLF_IDENTITY(190196u, max(190196u, _GLF_IDENTITY(190196u, min(_GLF_IDENTITY(190196u, ~ (~ (190196u))), 190196u))))) / 1u), _GLF_IDENTITY(190196u, clamp(190196u, 190196u, 190196u))))))))) | uvec4(0u, 0u, 0u, 0u))) == uvec4(38553u, 31013u, 9698u, 144129u)) && true)));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) - vec2(0.0, 0.0)).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) || false)))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           case 0:
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1193.6709)))) / 1.0)) - 0.0)))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-834.575, -1.7)))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
           case 16:
           case 72:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           atomicStore(buf[virtual_gid], GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.x, 4, 64, 4);
           case 62:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           case 82:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           case 93:
           if(_GLF_DEAD(false))
            return;
           case 59:
           case 68:
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.8)), bvec2(true, false))) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           case 22:
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
            continue;
           subgroupAll(true);
           break;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0)))), int(_GLF_IDENTITY(1, (1) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           default:
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), 1 * (int(6))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), (true ? int(6) : _GLF_FUZZED(22306))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             1;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))));
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
}
