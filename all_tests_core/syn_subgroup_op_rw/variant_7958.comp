#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat2 _f0;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 _GLF_struct_0 _f1;
 vec4 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_3 {
 uint workgroup_size;
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_WorkGroupSize.x, _GLF_struct_2(uvec3(1u), _GLF_struct_0(mat4x2(1.0), ivec3(1)), vec4(1.0), _GLF_struct_1(mat2(1.0))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (0u >> _GLF_IDENTITY(uint(7u), uint(7u))));
 GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.z = workgroup_id;
 uint workgroup_base = _GLF_struct_replacement_3.workgroup_size * GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.z;
 GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base.y = workgroup_base;
 uint subgroup_base = subgroup_id * subgroup_size;
 GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base.x = subgroup_base;
 uint virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base.y + GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base.x + subgroup_local_id;
 GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.y = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base.y + GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base.x + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.y], 4, 64, 2);
 GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.x = read;
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.y], GLF_merged3_0_1_4_1_1_11_2_1_12readvirtual_gidworkgroup_id.x, 4, 64, 4);
}
