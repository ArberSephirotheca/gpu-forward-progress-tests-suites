#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 mat3x2 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 mat2 _f3;
 int _f4;
} ;

struct _GLF_struct_19 {
 int _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 vec4 _f3;
 mat2x4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
 mat4 _f1;
 uvec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_20 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 mat4x3 _f1;
 bool _f2;
 ivec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_17 {
 int _f0;
 _GLF_struct_16 _f1;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 vec2 _f1;
 ivec3 _f2;
 uint _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 bvec4 _f1;
 bvec2 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_22 {
 _GLF_struct_15 _f0;
 mat3 _f1;
 _GLF_struct_17 _f2;
 bool _f3;
 _GLF_struct_21 _f4;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 vec2 _f1;
 bvec3 _f2;
 mat4x2 _f3;
 float _f4;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 mat3x2 _f1;
 int _f2;
 vec3 _f3;
 mat3x4 _f4;
 ivec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 vec3 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 vec4 _f1;
 _GLF_struct_7 _f2;
 mat3x4 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 mat4x3 _f1;
 mat2x3 _f2;
 bool _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 mat2x3 _f1;
 ivec4 _f2;
 mat2x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 vec3 _f1;
 vec2 _f2;
 int _f3;
 mat3x2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 mat4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 bool _f0;
 mat2x4 _f1;
 vec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 mat3x4 _f1;
 uvec3 _f2;
 uvec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_10 _f3;
 uint num_workgroup;
 ivec4 _f4;
 mat2x4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 _GLF_struct_22 _GLF_struct_replacement_22;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(uvec2(1u), _GLF_struct_2(_GLF_struct_0(mat2x3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat3x4(1.0), uvec3(1u), uvec2(1u), ivec2(1)), _GLF_struct_1(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), mat2x4(1.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, cos(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, cos(0.0), 0.0))) + (1.0)), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, cos(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, 0.0, cos(0.0), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(-8.1)))), vec4(mat4x3(vec4(1.0, 0.0, cos(0.0), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(-8.1)))), 1.0, 0.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))) + (1.0))) / 1.0)), 1u)), _GLF_struct_6(mat2x3(1.0), _GLF_struct_3(vec4(1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x)))), max(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0)))), (vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0))))) / vec2(1.0, 1.0)))[0], injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), int(ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))])).x)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 ^ (1)))), 1))])).x)), min(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), sin(0.0), 1.0, log(1.0), 1.0, 0.0, 0.0, 0.0)), clamp(vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), sin(0.0), 1.0, log(1.0), 1.0, 0.0, 0.0, 0.0)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), sin(0.0), 1.0, log(1.0), 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), sin(0.0), 1.0, log(1.0), 1.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))), sin(0.0), 1.0, log(1.0), 1.0, 0.0, 0.0, 0.0))))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(3305) : 1)), 1))], max(injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(3305) : 1)), 1))], injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(3305) : 1)), 1))])))).x)), mix(float(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x))), float(_GLF_FUZZED(-0.7)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), float(mat4x2(_GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(-893.907))), 1.0, 1.0, 1.0, 1.0, abs(1.0), cos(0.0), 1.0))) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).x)), mix(float(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (_GLF_IDENTITY(int(ivec2(1, 1)), 1 * (int(ivec2(1, 1))))) + 0)), 1))])).x))), float(_GLF_FUZZED(-0.7)), bool(false)))) - 0.0)))))), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(mix(atan(5.8), _GLF_IDENTITY(-9.1, _GLF_IDENTITY((false ? _GLF_FUZZED(dot(926.798, _GLF_IDENTITY(0.6, (0.6) / round(length(normalize(vec3(1.0, 1.0, 1.0))))))) : -9.1), min((false ? _GLF_FUZZED(dot(926.798, 0.6)) : -9.1), (false ? _GLF_FUZZED(dot(926.798, 0.6)) : -9.1)))), 0.4)) : 1.0))), 1, mat3x2(1.0), uvec4(1u)), _GLF_struct_4(ivec4(1), mat2x3(1.0), ivec4(1), mat2x4(1.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, bool(bvec2((true) && true, true)))), (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, bool(bvec2((true) && true, true))))) && true) ? 1.0 : _GLF_FUZZED(-48.22)), 1.0 * ((_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, bool(bvec2((true) && true, true)))) ? 1.0 : _GLF_FUZZED(-48.22))))), float(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, (true) && true) ? 1.0 : _GLF_FUZZED(-48.22))), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5414.6046) : 0.0)), 0.0, 1.0))))), mat4(1.0), _GLF_struct_5(bvec2(true), mat4x3(1.0), mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), max(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), (min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))) - 0.0), min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), min(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))))) / 1.0))), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + 0.0)))), _GLF_IDENTITY(true, bool(bvec2(true, false))), mat4x2(1.0))), _GLF_struct_10(bvec4(true), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) + _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(200.805, -4.1, 6508.1868, _GLF_IDENTITY(-1.6, float(mat2(-1.6, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 236.589, -8.3, 1627.6588, -9.9, 3980.3130)))))), 0.0, 0.0)), 0.0, 0.0), (vec4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(200.805, -4.1, 6508.1868, -1.6, 236.589, -8.3, 1627.6588, -9.9, 3980.3130)))))), 0.0, 0.0)), 0.0, 0.0)) * mat4(1.0)), vec4(0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) + _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(mat3(200.805, -4.1, 6508.1868, -1.6, 236.589, -8.3, 1627.6588, -9.9, 3980.3130)))))), 0.0, 0.0)), 0.0, 0.0), (vec4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), (true ? mat3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(200.805, -4.1, 6508.1868, -1.6, 236.589, -8.3, 1627.6588, -9.9, 3980.3130)))))), 0.0, 0.0)), 0.0, 0.0)) * mat4(1.0)), vec4(0.0, 0.0, 0.0, 0.0))))) / cos(vec4(0.0, 0.0, 0.0, 0.0))), _GLF_struct_7(mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, sqrt(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0, 1.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0)), 0.0))), 1.0, 1.0))))) - _GLF_IDENTITY(determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), (true ? determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)) : _GLF_FUZZED(1397.3790))))), vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4x3(1.0), mat2x4(1.0), bvec4(true)), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(max(1.0, 1.0), _GLF_IDENTITY(max(1.0, 1.0), max(max(1.0, 1.0), max(1.0, 1.0))))))), _GLF_struct_8(bvec4(true), mat3x2(1.0), 1, vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mat3x4(1.0), ivec4(1), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), _GLF_IDENTITY(false, false || (false)), true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) || (false)), true)), true && (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))) && true)), true)), (bool(bvec3(true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) && true))), (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false)))))), true && (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (false)), true)), (bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bvec3(bvec4(bvec3(true, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), true && (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), (bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, false || (false)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, false || (false)), true), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, false || (false)), true))))))))) && true))))), (bool(bool(_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), true && (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), (bool(bvec3(true, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)))), false || (bool(_GLF_IDENTITY(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))))), true && (! (false || (false)))))))))), (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true))) && true), true))) && true)))))) && true)), ((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), true && (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), (bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, false || (false)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, false || (false)), true), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, false || (false)), true))))))))) && true))))), (bool(bool(_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), true && (_GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, false || (false)), true)), (bool(bvec3(true, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)))), false || (bool(_GLF_IDENTITY(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(! (false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))))), true && (! (false || (false)))))))))), (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true))) && true), true))) && true)))))) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_struct_9(vec3(1.0), vec2(1.0), bvec3(true), mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0), mat3x4(1.0)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) + uvec3(0u, 0u, 0u)), uvec3(uvec4(gl_NumWorkGroups, 0u))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), _GLF_IDENTITY((uvec3(uvec3(gl_NumWorkGroups))) | _GLF_IDENTITY((uvec3(uvec3(gl_NumWorkGroups))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(gl_NumWorkGroups))))), ~ (~ ((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(gl_NumWorkGroups))))))))))), ((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), max(_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), ~ (~ (uvec3(uvec3(gl_NumWorkGroups)))))))) | _GLF_IDENTITY((uvec3(uvec3(gl_NumWorkGroups))), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(gl_NumWorkGroups)))))), min(_GLF_IDENTITY(((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(gl_NumWorkGroups)))))), (((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(gl_NumWorkGroups))))))) ^ uvec3(0u, 0u, 0u)), ((_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | (uvec3(uvec3(gl_NumWorkGroups))))))))))) << uvec3(0u, 0u, 0u)))), (uvec3(_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(104874u) : _GLF_IDENTITY(0u, min(0u, 0u)))), 0u))))))) | (uvec3(uvec3(gl_NumWorkGroups)))))) / uvec3(1u, 1u, 1u))))).x, ivec4(1), mat2x4(1.0));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) << 0, ((int(4)) << 0) + 0))))); _GLF_IDENTITY(_injected_loop_counter --, (1 ^ 1) | (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (((1 | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             return;
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     break;
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))) || false)), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), false || (bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))) && true))), ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))) || false)), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), false || (bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))) && true)))) && true) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) / 1) < (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false), true, true, true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            return;
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3)), clamp(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3)), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3)), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (88821 & 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), true && (bool(_GLF_IDENTITY(false, true && (false))))))), _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec4(false, false, false, false)), true), bvec2(bvec3(bvec2(bool(bvec4(false, false, _GLF_IDENTITY(false, false || (false)), false)), true), true)))), (bool(_GLF_IDENTITY(bvec2(bool(bvec4(false, false, false, false)), true), bvec2(bvec3(bvec2(bool(bvec4(false, false, false, false)), true), true))))) || false)))), true))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), (bool(bvec3(false, true, false))) || false), bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))) || false), false))))), true))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))))));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))))), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))))), false, true, true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
    {
    }
   else
    {
     _GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.y = _GLF_struct_replacement_11.num_workgroup;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u);
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((injectionSwitch.x > injectionSwitch.y) || false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), log(1.0), 0.0, 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), _GLF_IDENTITY((vec4(283.342, 291.149, 262.453, 6.9)) * mat4(1.0), max((vec4(283.342, _GLF_IDENTITY(291.149, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6737.1910) : _GLF_IDENTITY(291.149, (291.149) * 1.0))), 262.453, 6.9)) * mat4(1.0), _GLF_IDENTITY((vec4(283.342, 291.149, 262.453, 6.9)) * mat4(1.0), max(_GLF_IDENTITY((vec4(_GLF_IDENTITY(283.342, clamp(_GLF_IDENTITY(283.342, min(283.342, 283.342)), _GLF_IDENTITY(283.342, mix(float(_GLF_FUZZED(float(false))), float(283.342), bool(true))), 283.342)), 291.149, 262.453, 6.9)), (true ? _GLF_IDENTITY((vec4(283.342, 291.149, 262.453, 6.9)), vec4(0.0, 0.0, 0.0, 0.0) + ((vec4(283.342, 291.149, 262.453, 6.9)))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(86.96, -6.2, 16.21, -38.47)), (false ? _GLF_FUZZED(vec4(8.9, -343.241, 545.574, -4.8)) : _GLF_FUZZED(vec4(86.96, -6.2, 16.21, -38.47)))))) * mat4(1.0), (vec4(283.342, 291.149, 262.453, 6.9)) * _GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(vec4(_GLF_IDENTITY(-14.43, min(-14.43, -14.43)), _GLF_IDENTITY(4.7, float(vec2(_GLF_IDENTITY(4.7, min(4.7, 4.7)), 1.0))), -1677.4968, -13.85), vec4(-8.5, -3569.1433, 1096.8664, 1.8), vec4(-926.608, -3.3, 473.516, 0.6), vec4(6.2, 1.3, -2.1, -240.571))) : _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.8)), bool(false))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))) : vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)), log(1.0), 0.0, 1.0)))), max(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), log(1.0), 0.0, 1.0), (false ? _GLF_FUZZED(vec4(283.342, 291.149, 262.453, 6.9)) : vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), log(1.0), 0.0, 1.0)))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), log(1.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0), mat2(1.0) * (mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0)))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))))) ? _GLF_FUZZED(vec4(-0.1, 4.4, 5.8, 0.4)) : _GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (vec4(283.342, 291.149, 262.453, 6.9)) / vec4(1.0, 1.0, 1.0, 1.0))))) : vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), length(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))).x, injectionSwitch.x, injectionSwitch.x)), log(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.8)))), 0.0, 1.0), max(false ? _GLF_FUZZED(_GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))))) ? _GLF_FUZZED(vec4(-0.1, 4.4, 5.8, 0.4)) : _GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (vec4(283.342, 291.149, 262.453, 6.9)) / vec4(1.0, 1.0, 1.0, 1.0))))) : vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), length(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))).x, injectionSwitch.x, injectionSwitch.x)), log(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.8)))), 0.0, 1.0), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))))) ? _GLF_FUZZED(vec4(-0.1, 4.4, 5.8, 0.4)) : _GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (vec4(283.342, 291.149, 262.453, 6.9)) / vec4(1.0, 1.0, 1.0, 1.0))))) : vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), length(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))).x, injectionSwitch.x, injectionSwitch.x)), log(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.8)))), 0.0, 1.0), (false ? _GLF_FUZZED(max(vec4(-22.46, -5513.2333, 57.19, 97.50), vec4(-6714.2224, -130.883, 193.259, -949.465))) : false ? _GLF_FUZZED(_GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))))) ? _GLF_FUZZED(vec4(-0.1, 4.4, 5.8, 0.4)) : _GLF_IDENTITY(vec4(283.342, 291.149, 262.453, 6.9), (vec4(283.342, 291.149, 262.453, 6.9)) / vec4(1.0, 1.0, 1.0, 1.0))))) : vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), length(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))).x, injectionSwitch.x, injectionSwitch.x)), log(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.8)))), 0.0, 1.0))))))))))) > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         _GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z = virtual_gid;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(subgroup_size)), ~ (~ (uint(uint(subgroup_size)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = (1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 + ((1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, 0 ^ (0)))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 _GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x = next_virtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | (2)))), (_GLF_IDENTITY(int(2), int(2))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.9, -12.75)) : injectionSwitch))) / abs(vec2(1.0, 1.0))).y)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-491.020)), bool(false))))) && true)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(771.612)), bool(false)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), ((injectionSwitch.x > injectionSwitch.y)) && true))) && true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), _GLF_IDENTITY(bool(bvec2((bool(false)), true)), ! (! (bool(bvec2((bool(false)), true))))))))))))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           break;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), (! (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false))))))) || false)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))), bool(bvec4(false, true, true, false))), false, false))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(buf[_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x], uint(1), 4, 64, 4);
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ (~ (_GLF_IDENTITY(1, (1) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (((-39851 / 42549) + -33162) & 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(true, true, true)), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))), true))))))), false), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, false || (true))), bvec3(bvec3(bvec3(true, true, true)))))))), false)))))))))), bool(bool(true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch), clamp(false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch), false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch), false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))))), (injectionSwitch))) * mat2(1.0))) + vec2(0.0, 0.0)), injectionSwitch)).y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.0)), float(injectionSwitch.y), bool(true))))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.0)), float(injectionSwitch.y), bool(true)))))) - 0.0))), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4096.9998) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) : _GLF_FUZZED(-4849.9391))), max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4096.9998) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) : _GLF_FUZZED(-4849.9391))), max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4096.9998) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) : _GLF_FUZZED(-4849.9391))), max(injectionSwitch.y, injectionSwitch.y)), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4096.9998) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) : _GLF_FUZZED(-4849.9391))), max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(372.360)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(42.43) : injectionSwitch.x))), bool(true))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(normalize(898.444)) : injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y)), false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))))).x > injectionSwitch.y)))))) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))), (injectionSwitch))) * mat2(1.0))) + vec2(0.0, 0.0)), injectionSwitch)).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-7.0)), float(injectionSwitch.y), bool(true)), max(mix(float(_GLF_FUZZED(-7.0)), float(injectionSwitch.y), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-7.0)), float(injectionSwitch.y), bool(true)), 1.0 * (mix(float(_GLF_FUZZED(-7.0)), float(injectionSwitch.y), bool(true))))))))))), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(normalize(898.444)) : injectionSwitch.y)), max(injectionSwitch.y, injectionSwitch.y)), false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) / abs(vec2(1.0, 1.0)), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) / abs(vec2(1.0, 1.0)), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) / abs(vec2(1.0, 1.0))) / vec2(1.0, 1.0)), 1.0, 0.0)))).x > injectionSwitch.y)))))) || false))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
              break;
             return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) / 1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y))))) > 0); _injected_loop_counter --)
          {
           if(subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) | (1)))) < subgroup_size)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               atomicStore(checker[_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z], read, 4, 64, 4);
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 subgroupAll(false);
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   continue;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), false)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                        break;
                       return;
                      }
                     break;
                    }
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    return;
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))) || false))
                    continue;
                   break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               do
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((78285 / int(25921u)), _GLF_IDENTITY(((78285 / int(25921u))) / 1, max(((78285 / int(25921u))) / 1, ((78285 / int(25921u))) / 1))) & 0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(78285 / int(25921u), (_GLF_IDENTITY(78285 / int(25921u), ~ (~ (78285 / int(25921u))))) >> 0)) & 0, (true ? (_GLF_IDENTITY(78285 / int(25921u), (_GLF_IDENTITY(78285 / int(25921u), ~ (~ (78285 / int(25921u))))) >> 0)) & 0 : _GLF_FUZZED(-85806))), _GLF_IDENTITY((78285 / int(25921u)) & 0, ((78285 / int(25921u)) & 0) - 0), (78285 / _GLF_IDENTITY(int(25921u), _GLF_IDENTITY((int(25921u)), min((int(25921u)), (int(25921u)))) << 0)) & 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) / 1.0), true, false)))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)), false || (_GLF_IDENTITY(false, true && (false))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), true, false))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, length(0.0), 0.0, abs(1.0), sin(0.0), 0.0), mat2x3(mat2x3(mat2x3(injectionSwitch.x, length(0.0), 0.0, abs(1.0), sin(0.0), 0.0))))), mix(float(_GLF_FUZZED(4966.5787)), float(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, length(0.0), 0.0, abs(1.0), sin(0.0), 0.0), mat2x3(mat2x3(mat2x3(injectionSwitch.x, length(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), abs(1.0), sin(0.0), 0.0)))))), bool(true)))) < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), _GLF_IDENTITY(int(7), (0 << _GLF_IDENTITY(int(3), int(3))) | _GLF_IDENTITY((_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), (int(7)) << 0)))), max((int(7)), (int(7)))))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), _GLF_IDENTITY(int(7), (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (1 ^ 1) + (3))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (1 ^ 1) + (3))), _GLF_IDENTITY(int(ivec4(int(_GLF_IDENTITY(3, (1 ^ 1) + (3))), 1, (0 << _GLF_IDENTITY(int(1), int(1))), 0)), (int(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (3) >> 0)))), (1 ^ 1) + (3))), 1, (0 << _GLF_IDENTITY(int(1), int(1))), 0))) + 0)), 1, 1), (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (1 ^ 1) + (3))), _GLF_IDENTITY(int(ivec4(int(_GLF_IDENTITY(3, (1 ^ 1) + (3))), 1, (0 << _GLF_IDENTITY(int(1), int(1))), 0)), (int(ivec4(int(_GLF_IDENTITY(3, (1 ^ 1) + (3))), 1, (0 << _GLF_IDENTITY(int(1), int(1))), 0))) + 0)), 1, 1)) ^ ivec3(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((~ _injected_loop_counter)) : _GLF_IDENTITY(0, (0) ^ 0))), 0)), 0, 0))))), (~ (int(3))) * 1))))))) | (int(7))))) << (0 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) / 1))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).x, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).x, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), vec3(0.0, 1.0, 0.0))) * 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).x, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), vec3(0.0, 1.0, 0.0))) * 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0)))))) > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, false, true)))))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                  }
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z), max((_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z), _GLF_IDENTITY((_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z), (_GLF_IDENTITY(true, (true) || false) ? (_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z) : _GLF_FUZZED(subgroup_local_id))))) * 1u, min((_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z) * 1u, (_GLF_struct_replacement_22.GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z) * 1u)))], _GLF_IDENTITY(read, clamp(read, _GLF_IDENTITY(read, (_GLF_IDENTITY(read, min(read, read))) - 0u), read)), 4, 64, 4);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(true);
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
}
