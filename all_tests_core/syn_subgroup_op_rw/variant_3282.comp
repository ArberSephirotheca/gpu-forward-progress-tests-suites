#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (-15686 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))))), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) + 0u) : _GLF_FUZZED(subgroup_size))), 0u, 0u)))).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)) && true))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))));
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, true)))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bool(! (_GLF_IDENTITY(false, true && (false)))))))))))))));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.9) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_IDENTITY(_GLF_FUZZED(-75169), int(_GLF_IDENTITY(ivec4(_GLF_FUZZED(-75169), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | 1)), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(_GLF_FUZZED(-75169), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | 1)), (ivec4(_GLF_FUZZED(-75169), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | 1))) ^ ivec4(0, 0, 0, 0)))))) : int(6)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.3) : injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.3) : injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0))), mat2(1.0) * (injectionSwitch))))[0]) : injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), float(vec4(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), min((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) : injectionSwitch.y))), 0.0, 1.0, 1.0))), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), float(vec4(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), min((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) : injectionSwitch.y))), 0.0, 1.0, 1.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), float(vec4(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), min((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) : injectionSwitch.y))), 0.0, 1.0, 1.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), float(vec4(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), min((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) : injectionSwitch.y))), 0.0, 1.0, 1.0)))))) * 1.0))), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), mat2(1.0) * (injectionSwitch))))[0]) : injectionSwitch.y), (_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), float(vec4(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y, (false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y) * abs(1.0))), min((false ? _GLF_FUZZED(injectionSwitch[0]) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) : injectionSwitch.y))), 0.0, 1.0, 1.0)))) * 1.0)))), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), mat2(1.0) * (injectionSwitch))))[0]) : injectionSwitch.y), (_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y), float(vec4(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y, (false ? _GLF_FUZZED(injectionSwitch[0]) : injectionSwitch.y) * abs(1.0))), min((false ? _GLF_FUZZED(injectionSwitch[0]) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), (false ? _GLF_FUZZED(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) : injectionSwitch.y))), 0.0, 1.0, 1.0)))) * 1.0))))) && true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), 0u))), (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u);
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), ~ (~ (1))))) : _GLF_IDENTITY(_GLF_FUZZED(50621), (_GLF_IDENTITY(_GLF_FUZZED(50621), (_GLF_FUZZED(50621)) * 1)) | (_GLF_IDENTITY(_GLF_FUZZED(50621), (_GLF_FUZZED(50621)) | (_GLF_FUZZED(50621))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))))) : _GLF_FUZZED(50621))), (false ? _GLF_FUZZED(-46226) : _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (1))))) : _GLF_FUZZED(50621))), 0 | (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (1))))) : _GLF_FUZZED(50621))))))), 0, 0)))))) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), false))), _GLF_IDENTITY(false || (true), (false || (true)) || false)) ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(_GLF_IDENTITY(50621, (_GLF_IDENTITY(_GLF_IDENTITY(50621, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(50621, (50621) >> 0), 0 ^ (50621)))), min(50621, 50621))) >> 0))))))) % subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(_GLF_IDENTITY(50621, 0 | (50621)))))))) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))))))) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(-97385) : _GLF_IDENTITY(1, min(1, 1))))) - 0)))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(_GLF_IDENTITY(50621, 0 | (50621)))))))) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))))))) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(-97385) : _GLF_IDENTITY(1, min(1, 1))))) - 0)))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size))))))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), ~ (~ (1))))) : _GLF_IDENTITY(_GLF_FUZZED(50621), (_GLF_IDENTITY(_GLF_FUZZED(50621), (_GLF_FUZZED(50621)) * 1)) | (_GLF_IDENTITY(_GLF_FUZZED(50621), (_GLF_FUZZED(50621)) | (_GLF_FUZZED(50621))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))))) : _GLF_FUZZED(50621))), (false ? _GLF_FUZZED(-46226) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))), ~ (~ (1))))) : _GLF_FUZZED(50621))), 0 | (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (1))))) : _GLF_FUZZED(50621))))))), 0, 0)))))) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), false))), _GLF_IDENTITY(false || (true), (false || (true)) || false)) ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(_GLF_IDENTITY(50621, (_GLF_IDENTITY(_GLF_IDENTITY(50621, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(50621, (50621) >> 0), 0 ^ (50621)))), min(50621, 50621))) >> 0))))))) % subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-45667) : 1)), (_GLF_IDENTITY(1, (1) >> 0)) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(_GLF_IDENTITY(50621, 0 | (50621)))))))) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 | ((~ (1))))))) : _GLF_FUZZED(50621))), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))))))) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(-97385) : _GLF_IDENTITY(1, min(1, 1))))) - 0)))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size))), min(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size)))))))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0), ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(_GLF_IDENTITY(50621, 0 | (50621)))))))) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), false || (false)))), bool(bool(bool(bvec4(true, false, false, _GLF_IDENTITY(false, false || (false)))))))) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(-97385) : _GLF_IDENTITY(1, min(1, 1))))) - 0)))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))), 0 | ((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), max(~ (~ (1)), ~ (~ (1))))))) : _GLF_FUZZED(50621)))))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), min(int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))), ((_GLF_IDENTITY(1, ~ (~ (1))))) | 0))))))) : _GLF_FUZZED(50621))), 0u | (subgroup_local_id + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))) : _GLF_FUZZED(50621)))))) % subgroup_size)))))))))))) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))) || false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-336.225, 1.0 * (-336.225)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))) && true))))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                                    return;
                                  }
                                 return;
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                  break;
                                 break;
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-2.3)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(761.385)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7233.2262), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-44.08)), bvec2(true, false))))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7233.2262), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-44.08)), bvec2(true, false))))).x > injectionSwitch.y)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7233.2262), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-44.08)), bvec2(true, false))))).x > injectionSwitch.y)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), abs(1.0), length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, sqrt(1.0), 1.0, 0.0, determinant(mat4(0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0)), 0.0, abs(0.0)))), 0.0, 1.0))))) > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), abs(1.0), length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, sqrt(1.0), 1.0, 0.0, determinant(mat4(0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0)), 0.0, abs(0.0)))), 0.0, 1.0))))) > injectionSwitch.y) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false)))))) && true)))))
            break;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, min(0, 0))) ^ _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) * (1), (false ? _GLF_FUZZED(41584) : int(_GLF_ONE(1.0, injectionSwitch.y)) * (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 1)), clamp(int(ivec3(1, 0, _GLF_IDENTITY(1, int(ivec3(1, 1, 1))))), _GLF_IDENTITY(int(ivec3(1, 0, 1)), clamp(int(ivec3(1, 0, 1)), int(ivec3(1, 0, 1)), int(ivec3(1, 0, 1)))), int(ivec3(1, 0, 1))))), 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 1)), clamp(int(ivec3(1, 0, _GLF_IDENTITY(1, int(ivec3(1, _GLF_IDENTITY(1, int(ivec2(1, 0))), 1))))), _GLF_IDENTITY(int(ivec3(1, 0, 1)), clamp(int(ivec3(1, 0, 1)), int(ivec3(1, 0, 1)), int(ivec3(1, 0, 1)))), int(ivec3(1, 0, 1)))))))), 4, 64, 4);
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && true)))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(int(int(4)))), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         return;
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(0u, 0u)), ~ (~ (_GLF_IDENTITY((subgroup_local_id) | 0u, ((subgroup_local_id) | 0u) - 0u))))), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + 1 < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (4) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-17317) : 0))), 64, 4);
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), false || (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))))))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            return;
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
       atomicStore(buf[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), (_GLF_IDENTITY(4, int(int(4)))) >> 0)) >> 0));
       subgroupAll(true);
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) < 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), (_GLF_IDENTITY(false, (false) && true)) && true))), false, false)))) && true))))
              {
               do
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter * _injected_loop_counter))))) | 0) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_IDENTITY(_GLF_FUZZED(72096), (true ? _GLF_FUZZED(72096) : _GLF_FUZZED(67655))) : _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) << 0), int(7)), max(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, 1 * (7))))))) >> _GLF_IDENTITY(int(7), int(7)), ((_GLF_IDENTITY(1, (1) | 0) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(_injected_loop_counter)))) << 0)))) >> _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), int(ivec3((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), (0 | 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
                    break;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true)) && true))))), ! (! (bool(bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0), (injectionSwitch.x) - sin(0.0)) > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true), (_GLF_IDENTITY(false, (false) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false)), bool(bool(_GLF_IDENTITY(false, (false) || false))))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
}
