#version 460
struct _GLF_struct_7 {
 uvec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 uvec4 _f1;
 mat4x2 _f2;
 vec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_9 {
 bool _f0;
 _GLF_struct_8 _f1;
 bvec4 _f2;
 uint num_workgroup;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 uvec3 _f1;
 mat3x2 _f2;
 float _f3;
 mat3 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat4 _f1;
 vec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_3 {
 uint subgroup_id;
 ivec2 _f0;
 _GLF_struct_0 _f1;
 ivec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(gl_SubgroupID, ivec2(1), _GLF_struct_0(mat3x4(1.0), mat4(1.0), vec3(1.0), mat3(1.0)), ivec2(1), _GLF_struct_1(mat4x2(1.0), mat2x3(1.0)), _GLF_struct_2(mat4x2(1.0))), _GLF_struct_5(_GLF_struct_4(ivec2(1), uvec3(1u), mat3x2(1.0), 1.0, mat3(1.0)), vec2(1.0)));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(true, _GLF_struct_8(_GLF_struct_7(uvec3(1u), uvec4(1u)), uvec4(1u), mat4x2(1.0), vec2(1.0), mat2x3(1.0)), bvec4(true), gl_NumWorkGroups.x);
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_struct_replacement_6._f0.subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
}
