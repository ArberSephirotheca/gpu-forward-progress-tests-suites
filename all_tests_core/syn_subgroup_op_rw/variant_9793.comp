#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_21 {
 ivec3 _f0;
 vec4 _f1;
 vec4 _f2;
 mat2x4 _f3;
 mat3 _f4;
 uint _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 uvec4 _f1;
 _GLF_struct_21 _f2;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 bvec4 _f3;
 mat3x4 _f4;
 mat4x2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_20 {
 ivec3 _f0;
 _GLF_struct_19 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_23 {
 _GLF_struct_20 _f0;
 _GLF_struct_22 _f1;
 uint workgroup_id;
} ;

struct _GLF_struct_16 {
 mat4 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 bvec3 _f1;
 uvec2 _f2;
 float _f3;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_17 {
 uvec2 _f0;
 bool _f1;
 mat2x3 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_12 {
 int _f0;
 mat3 _f1;
} ;

struct _GLF_struct_11 {
 int _f0;
 bvec2 _f1;
 uint _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 mat3 _f1;
 uint _f2;
 mat4 _f3;
 mat2 _f4;
 mat2x3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 mat4x3 _f1;
 uvec3 _f2;
 mat3x4 _f3;
 uvec3 _f4;
 mat2x3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_6 {
 uint _f0;
 mat2x3 _f1;
 bool _f2;
 vec2 _f3;
 mat4x3 _f4;
 mat4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 _GLF_struct_6 _f1;
 bool _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 vec4 _f1;
 vec3 _f2;
 uint _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 uint _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_18 {
 uvec2 _f0;
 _GLF_struct_5 _f1;
 mat4x3 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_17 _f5;
 mat4x3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(uvec2(1u), _GLF_struct_5(uvec4(1u), 1u, _GLF_struct_0(mat4(1.0)), _GLF_struct_1(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0)), mat4x2(1.0)), _GLF_struct_2(vec4(1.0)), _GLF_struct_3(mat2(1.0)), _GLF_struct_4(uvec3(1u), vec4(1.0), vec3(1.0), 1u, mat3x4(1.0))), mat4x3(1.0), _GLF_struct_9(ivec3(1), _GLF_struct_6(1u, mat2x3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))), max(0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))))))), true, vec2(1.0), mat4x3(1.0), mat4(1.0), mat3x2(1.0)), true, _GLF_struct_7(bvec4(true), mat4x3(1.0), uvec3(1u), mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(float(uint(7557.6969))) : 1.0))), uvec3(1u), mat2x3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6382.0498) : _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6382.0498) : _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6382.0498) : _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))))), min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(0.5, max(0.5, 0.5)))), float(1.0), bool(true)))) : _GLF_FUZZED(7030.7357))))), 1.0)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float((1.0)), float(_GLF_FUZZED((0.4))), bool(false))) + 0.0))))), _GLF_struct_8(_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))))), _GLF_struct_13(mat2x4(1.0), _GLF_struct_10(vec2(1.0), mat3(1.0), 1u, _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)), mat2x3(1.0), mat4x2(1.0)), _GLF_struct_11(1, bvec2(true), 1u, mat2x3(1.0)), _GLF_struct_12(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(1, 1)), 0), ~ (~ (ivec2(_GLF_IDENTITY(1, min(1, 1)), 0)))))), mat3(1.0))), _GLF_struct_17(uvec2(1u), true, mat2x3(1.0), _GLF_struct_14(mat2x3(1.0), _GLF_IDENTITY(ivec2(1), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))))), _GLF_struct_15(bvec4(true), bvec3(true), _GLF_IDENTITY(uvec2(1u), ~ (_GLF_IDENTITY(~ (uvec2(1u)), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), min(~ (uvec2(1u)), ~ (uvec2(1u)))) : _GLF_FUZZED(_GLF_IDENTITY(uvec2(78862u, 63960u), clamp(_GLF_IDENTITY(uvec2(78862u, 63960u), min(uvec2(78862u, 63960u), uvec2(78862u, 63960u))), uvec2(78862u, 63960u), uvec2(78862u, 63960u)))))))), 1.0), _GLF_struct_16(mat4(1.0), gl_SubgroupSize)), mat4x3(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, max(1, 1)) | (-25141 & 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + (0 ^ 0)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), _GLF_IDENTITY(int(ivec4(int(int(1)), 0, 0, 0)), (_GLF_IDENTITY(int(ivec4(int(int(1)), 0, 0, 0)), min(int(ivec4(int(int(1)), 0, 0, 0)), int(ivec4(int(int(1)), 0, 0, 0))))) | (int(ivec4(int(int(1)), 0, 0, 0))))))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-34.61)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true))))))) || false)))) - 0.0)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), int(ivec2(_GLF_IDENTITY(~ (_injected_loop_counter), clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter))), 1))))) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) >> 0)), int(8)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, exp(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, sqrt(1.0), length(0.0), cos(0.0), 0.0, 1.0))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) >> 0))), (false ? _GLF_FUZZED(65826) : 1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), 0 | (~ (5))))), 1, 0, 1)))) >> 0)))))) >> _GLF_IDENTITY(int(5), int(5))), clamp(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1), (true ? ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1) : _GLF_FUZZED(ivec3(50561, 56930, -11199)))))))))), ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1), (true ? ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1) : _GLF_FUZZED(ivec3(50561, 56930, -11199))))))))))) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), int(ivec4(_GLF_IDENTITY(int(5), (int(5)) - 0), 0, 1, 1))), int(5))), int(5))), clamp(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 | (5))) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, clamp(5, 5, 5)))))) >> 0)) | 0)))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), 0 + ((_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1), (true ? ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1) : _GLF_FUZZED(ivec3(50561, 56930, -11199)))))))))), ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1), (true ? ivec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), min(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), int(ivec2(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), min(ivec4(5, 1, 0, 1), ivec4(5, 1, 0, 1))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), (true ? ivec4(5, 1, 0, 1) : _GLF_FUZZED(min(ivec4(-31155, 38231, 54288, 53265), ivec4(-15303, -44922, -69224, -83284))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (int(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))), (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))))) | (clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 1, 0, 1), ivec4(0, 0, 0, 0) + (ivec4(5, 1, 0, 1))))), clamp(_GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1))), _GLF_IDENTITY(5, int(ivec4(5, _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 1, 1, 1)))))))), _GLF_IDENTITY(5, int(ivec4(5, 1, 0, 1)))))) | 0)))) >> 0, (0 ^ 0), 1) : _GLF_FUZZED(ivec3(50561, 56930, -11199))))))))))) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), int(ivec4(_GLF_IDENTITY(int(5), (int(5)) - 0), 0, 1, 1))), int(5))), int(5))), clamp(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 | (5))) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, clamp(5, 5, 5)))))) >> 0)) | 0)))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))))) - 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | 1), bool(bvec4(_injected_loop_counter != (1 | 1), false, true, true)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _injected_loop_counter)) != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(float(true)), _GLF_IDENTITY(float(mat3x2(_GLF_FUZZED(float(true)), 1.0, 1.0, 1.0, 0.0, 0.0)), (float(mat3x2(_GLF_FUZZED(float(true)), 1.0, 1.0, 1.0, 0.0, 0.0))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0))), bool(true)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))[0], injectionSwitch[1])).y)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) >> 0) + (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 1))), 0)) + (0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(0 + (0), max(0 + (0), _GLF_IDENTITY(0 + (0), (0 + (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))) | 0))) | (0 + (0))))))) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) - 0.0))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) && true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) && true))), (bool(bool(_GLF_IDENTITY(true, (true) && true)))) && true)))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(bvec4(false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), true, false, true)), true && (_GLF_IDENTITY(bool(bvec4(false || (false), true, false, true)), bool(bvec4(bool(bvec4(false || (false), true, false, true)), false, true, false))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | _GLF_IDENTITY((int(7)), _GLF_IDENTITY(((int(7))) << 0, (((int(7))) << 0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) * 1), 0)), 0)) ^ (_GLF_IDENTITY((int(7)), ((int(7))) | ((int(7)))) | (int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((vec4(-53.28, -2849.7754, -6508.8510, -7247.9148) * mat4(-4.3, -790.995, 60.05, 72.57, 7.3, 9.3, 1.6, 73.57, 39.50, 3.0, -4.8, 47.89, -967.992, 9.8, -559.426, 109.055)).t)), vec2(_GLF_FUZZED(-34.78), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, _GLF_IDENTITY(0 ^ 1, 1 * (0 ^ 1)), _GLF_IDENTITY(0 ^ 1, (0 ^ 1) << 0))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, (true) && true)))), false || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), _GLF_IDENTITY(true, (true) && true)))))), (false) || false)))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))) || false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (0 >> _GLF_IDENTITY(int(5), int(5))) | (int(3))), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3)))), (_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))))) << (0 | 0))), int(3))), max(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (0 >> _GLF_IDENTITY(int(5), int(5))) | (int(3))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))))), 0 ^ (int(_GLF_IDENTITY(3, _GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3)))))))) << (0 | 0)), int(3))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (0 >> _GLF_IDENTITY(int(5), int(5))) | (int(3))), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(_GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))), clamp(_GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))), (_GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3)))) >> 0), _GLF_IDENTITY(clamp(3, 3, 3), max(clamp(3, 3, 3), clamp(3, 3, 3))))))), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))), true && (false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) | 0, ((_injected_loop_counter --) | 0) ^ (0 << _GLF_IDENTITY(int(4), int(4))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec2(0.0, 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), true && (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))), float(_GLF_FUZZED(93.70)), bool(false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), sqrt(0.0), 0.0))), true)))))))) || _GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true)))))), true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), true)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), true)))))) || false))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-0.3) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(-969.276, 8.1)) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y))) || false, bool(bvec2((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-969.276, 8.1)) : injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false, false)))), true, false)))) || false)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (true))), true && (bool(_GLF_IDENTITY(true, true && (true))))))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))) || false)))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-903.059), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((true ? -83.54 : (-2.1 + -1981.2366)))), bvec2(true, false))).y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   barrier();
  }
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_struct_20(ivec3(1), _GLF_struct_19(vec2(1.0), mat4x2(_GLF_IDENTITY(1.0, float(float(1.0)))), _GLF_IDENTITY(ivec3(1), ivec3(1, 1, 1) * (ivec3(1))), bvec4(true), mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), mat4x2(1.0), mat2(1.0)), bvec4(true)), _GLF_struct_22(bvec4(true), uvec4(1u), _GLF_struct_21(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(ivec3(1), (ivec3(1)) + ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(ivec3(1), (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) - 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, _GLF_IDENTITY(1, 0 ^ (1)))), int(_GLF_IDENTITY(ivec2(1, 1), max(ivec2(1, 1), ivec2(1, 1))))))))) + ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat4x2(injectionSwitch.x, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0)), (true ? transpose(mat4x2(injectionSwitch.x, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2x4(-5.5, 7977.1576, 471.706, 814.860, -5.0, 45.64, 829.974, 4.1))))))))))))), ~ (~ (~ (~ (_GLF_IDENTITY(ivec3(1), (ivec3(1)) + ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))))), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, 1.0))), ((_GLF_IDENTITY(1.0, max(1.0, 1.0)))) - 0.0) / 1.0)), (vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0))) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.1) : 1.0)))), 1.0)), vec4(1.0), mat2x4(1.0), mat3(1.0), 1u, mat3x2(1.0))), gl_WorkGroupID.x);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_23.workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(636.954, -1.7)) : injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) >> 0) > (0 & -57624)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   barrier();
                  }
                }
              }
             else
              {
              }
             do
              {
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), bool(bvec3(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), false, true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(809.156) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))) && true, (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))))))) && true) || false))), ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))) && true))) || false)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_struct_replacement_18._f5._f5.subgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_18._f5._f5.subgroup_size, (_GLF_struct_replacement_18._f5._f5.subgroup_size) ^ 0u), 1u, 1u)), (uint(uvec3(workgroup_base + subgroup_id * _GLF_struct_replacement_18._f5._f5.subgroup_size, _GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : 1u)), 1u))) << 0u)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), max(_GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), ((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), subgroup_id)))))) | (min(subgroup_id, subgroup_id)))))) / 1u), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) | (0u))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u))) * _GLF_struct_replacement_18._f5._f5.subgroup_size, max(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), 0u ^ (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), _GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)), clamp(((subgroup_id)), ((subgroup_id)), _GLF_IDENTITY(((subgroup_id)), min(((subgroup_id)), ((subgroup_id)))))) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id)), uint(uvec2((min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id)), 1u)))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u))) * _GLF_struct_replacement_18._f5._f5.subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), clamp((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), 0u ^ (uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), clamp((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)))), (uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u))) * _GLF_struct_replacement_18._f5._f5.subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u)), (min(subgroup_id, subgroup_id)) | (_GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | 0u)) ^ 0u))))), ~ (~ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u)), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u), clamp(_GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(subgroup_id, subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u), _GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)) * ((subgroup_id))), ((subgroup_id)) ^ 0u) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) | (min(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id)), subgroup_id, subgroup_id)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))), 0u))), subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (_GLF_IDENTITY(1u, (1u) * _GLF_IDENTITY(1u, (1u) - 0u)))), 1u))) - 0u), _GLF_IDENTITY(uint(uvec4((subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), max((min(subgroup_id, subgroup_id)), (min(subgroup_id, subgroup_id)))) | (min(subgroup_id, subgroup_id))))), 0u, 1u, 1u)), (uint(uvec4(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ 0u) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), _GLF_IDENTITY((min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uvec4((min(subgroup_id, subgroup_id)), 1u, 0u, 0u)), (uint(uvec4((min(subgroup_id, subgroup_id)), 1u, 0u, 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (min(subgroup_id, subgroup_id))))), 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | (1u)), 1u))) - 0u)))) ^ 0u))) * _GLF_struct_replacement_18._f5._f5.subgroup_size)))) + ((subgroup_local_id + 1) % _GLF_struct_replacement_18._f5._f5.subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | 0));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(6.2), _GLF_FUZZED(858.376)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), clamp(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false, false, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
    }
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))), 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec4(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, _GLF_IDENTITY(-3.6, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(-3.6, 0.0), clamp(vec2(-3.6, 0.0), vec2(-3.6, 0.0), vec2(-3.6, 0.0)))), 0.0 + (float(_GLF_IDENTITY(vec2(-3.6, 0.0), clamp(vec2(-3.6, 0.0), vec2(-3.6, 0.0), vec2(-3.6, 0.0)))))))))))), max((true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6))))), (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))))), injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x), min(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x)) / 1.0), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x), mix(float(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(278.536, length(vec4(-38.77, -3913.2705, -5614.7275, -3.6)))))), injectionSwitch.x)), _GLF_IDENTITY(float(_GLF_FUZZED(584.564)), (float(_GLF_FUZZED(584.564))) * _GLF_ONE(1.0, injectionSwitch.y)), bool(false))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(58.27))) > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 & -53407); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u ^ 0u))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u ^ 0u))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u ^ 0u)))) - 0u), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u ^ 0u)))))) + 1 < _GLF_struct_replacement_18._f5._f5.subgroup_size)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y))))), false || (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(1845.4406)), bool(false)))), vec2(_GLF_FUZZED(-2843.0001), _GLF_FUZZED(-5.9)), bvec2(false, false))).x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y))))), false || (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))))) || false)))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-64931)))))) >> _GLF_IDENTITY(int(5), int(5))), ~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-64931)))))) >> _GLF_IDENTITY(int(5), int(5))), (((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-64931)))))) >> _GLF_IDENTITY(int(5), int(5)))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((72605 & _GLF_IDENTITY(0, (0) << (0 >> _GLF_IDENTITY(int(0), int(0))))) & -28046); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _injected_loop_counter), ((- -51927) & 0) + (max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _injected_loop_counter)))) < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  barrier();
                }
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(false);
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (! (false)), (false || (! (false))) && true)), ! (! (! (_GLF_IDENTITY(false || (! (false)), (false || (! (false))) && true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))) || false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     do
      {
       atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) ^ _GLF_IDENTITY((read), 0u ^ ((read)))), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, 0.0), (mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))), 1.0, 0.0)) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(vec2(-67.71, -4.0).s)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)), min(mix(float(_GLF_FUZZED(vec2(-67.71, -4.0).s)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)), mix(float(_GLF_FUZZED(vec2(-67.71, -4.0).s)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))))), 1.0)))), log(1.0)))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) + vec2(0.0, 0.0))[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))))), log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(267.059)), float(1.0), bool(true))), 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 1.0))).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), max(_GLF_IDENTITY(int(int(int(3))), _GLF_IDENTITY(min(int(int(int(3))), int(int(int(3)))), (_GLF_IDENTITY(min(int(int(int(3))), int(int(int(3)))), (min(int(int(int(3))), int(int(int(3))))) >> 0)) << (0 | 0))), _GLF_IDENTITY(int(int(int(3))), int(ivec2(int(int(int(3))), (1 | 1)))))))), (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), max(_GLF_IDENTITY(int(int(int(3))), min(int(int(int(3))), int(int(int(3))))), _GLF_IDENTITY(int(int(int(3))), int(ivec2(int(int(int(3))), (1 | 1))))))))) | (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), max(_GLF_IDENTITY(int(int(int(3))), min(int(int(int(3))), int(int(int(3))))), _GLF_IDENTITY(int(int(int(3))), int(ivec2(int(int(int(3))), (_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(1 | 1, int(int(1 | 1)))) << 0)))))))))))), int(_GLF_IDENTITY(ivec4((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))), 0, 0, 1), (ivec4((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), 0 | (_GLF_IDENTITY(int(int(int(3))), max(int(int(int(3))), int(int(int(3)))))))), (_GLF_IDENTITY(int(3), int(int(int(3))))) - (0 >> _GLF_IDENTITY(int(6), int(6)))))), 0, 0, 1)) / ivec4(1, 1, 1, 1))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
