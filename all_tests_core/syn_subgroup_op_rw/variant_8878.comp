#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 mat2 _f0;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 bvec4 _f1;
 bvec3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_6 {
 float _f0;
 mat3x2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 mat3x4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 _GLF_struct_2 _f1;
 bvec2 _f2;
 uint workgroup_size;
 _GLF_struct_6 _f3;
 mat4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, log(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-8575) : 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.9))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.9))) > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.9))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.9))) > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.9))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.9))) > injectionSwitch.y)))), true, true, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), (uvec3(uvec4(gl_NumWorkGroups, 0u))) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups)))), uvec3(1u, 1u, 1u) * (clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), (uvec3(uvec4(gl_NumWorkGroups, 0u))) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups)))) + uvec3(0u, 0u, 0u)))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(uvec4(1u), _GLF_struct_2(_GLF_struct_0(mat2x3(1.0), mat3x4(1.0), mat4(1.0)), _GLF_struct_1(_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(_GLF_IDENTITY(transpose(mat2(1.0)), (false ? _GLF_FUZZED(mat2(46.68, -7.0, -7.3, 3.0)) : _GLF_IDENTITY(transpose(mat2(1.0)), transpose(transpose(transpose(mat2(1.0))))))), (transpose(mat2(1.0))) / mat2(1.0, 1.0, 1.0, 1.0)))))), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), _GLF_struct_6(1.0, mat3x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.9)), float(1.0), bool(true))), 1.0)))))), _GLF_struct_3(mat3(1.0), bvec4(true), bvec3(true), mat2x3(1.0)), _GLF_struct_4(mat2(1.0)), _GLF_struct_5(mat2(1.0))), mat4(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) | (1u))))) ^ (_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), 1u * (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), _GLF_IDENTITY(0u, (0u) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) ^ (packSnorm2x16(vec2(7.8, -0.8)))))), 1u * (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), _GLF_IDENTITY((_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(_GLF_IDENTITY(7.8, (true ? 7.8 : _GLF_FUZZED(-297.223))), -0.8))) | (packSnorm2x16(vec2(7.8, -0.8))))) | (packSnorm2x16(vec2(_GLF_IDENTITY(7.8, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(30.56)), bool(false))), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))) + (7.8)), -0.8))), max(_GLF_IDENTITY((_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, -0.8))) | (packSnorm2x16(vec2(_GLF_IDENTITY(7.8, clamp(7.8, _GLF_IDENTITY(7.8, clamp(_GLF_IDENTITY(7.8, clamp(7.8, 7.8, 7.8)), 7.8, 7.8)), 7.8)), -0.8))))) | _GLF_IDENTITY((packSnorm2x16(vec2(_GLF_IDENTITY(7.8, clamp(7.8, _GLF_IDENTITY(7.8, clamp(7.8, _GLF_IDENTITY(7.8, max(7.8, 7.8)), 7.8)), _GLF_IDENTITY(7.8, (7.8) * 1.0))), -0.8))), ((packSnorm2x16(vec2(_GLF_IDENTITY(7.8, clamp(7.8, _GLF_IDENTITY(7.8, _GLF_IDENTITY(clamp(7.8, _GLF_IDENTITY(7.8, max(7.8, 7.8)), 7.8), max(clamp(7.8, _GLF_IDENTITY(7.8, max(7.8, 7.8)), 7.8), clamp(7.8, _GLF_IDENTITY(7.8, max(7.8, 7.8)), 7.8)))), _GLF_IDENTITY(7.8, (7.8) * 1.0))), -0.8)))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, -0.8))) | (packSnorm2x16(_GLF_IDENTITY(vec2(7.8, -0.8), mix(vec2((vec2(7.8, -0.8))[0], _GLF_FUZZED(42.88)), vec2(_GLF_FUZZED(-0.5), (vec2(7.8, -0.8))[1]), bvec2(false, true))))))) | (packSnorm2x16(vec2(7.8, -0.8))), max((_GLF_IDENTITY(_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(-0.8, clamp(-0.8, -0.8, -0.8))))))) | (packSnorm2x16(vec2(7.8, -0.8)))), (_GLF_IDENTITY(_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(-0.8, clamp(-0.8, -0.8, -0.8))))))) | (packSnorm2x16(vec2(7.8, -0.8)))), max(_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(-0.8, clamp(-0.8, -0.8, -0.8))))))) | (packSnorm2x16(vec2(7.8, -0.8)))), _GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(-0.8, clamp(-0.8, -0.8, -0.8))))))) | (packSnorm2x16(vec2(7.8, -0.8))))))) | (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(-0.8, clamp(-0.8, -0.8, -0.8))))))) | (packSnorm2x16(vec2(7.8, -0.8))))))) | (packSnorm2x16(vec2(7.8, -0.8))), (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, -0.8))) | (packSnorm2x16(_GLF_IDENTITY(vec2(7.8, -0.8), vec2(mat3(_GLF_IDENTITY(vec2(7.8, -0.8), vec2(_GLF_IDENTITY(mat3(vec2(7.8, -0.8), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), (_GLF_IDENTITY(mat3(vec2(7.8, -0.8), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), mat3(mat3x4(mat3(vec2(7.8, -0.8), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))))) - mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0))))))) | (packSnorm2x16(vec2(7.8, -0.8))))))), (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (packSnorm2x16(vec2(7.8, -0.8))) | (packSnorm2x16(_GLF_IDENTITY(vec2(7.8, -0.8), _GLF_IDENTITY(vec2(mat3(vec2(7.8, -0.8), 1.0, 1.0, abs(1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0)), (vec2(mat3(vec2(7.8, -0.8), 1.0, 1.0, abs(1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0))) - vec2(0.0, 0.0))))))) | (packSnorm2x16(vec2(7.8, -0.8))))))))), (80407u & 0u) ^ (true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), 1u * (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, -0.8)), (_GLF_IDENTITY(packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -0.8 : _GLF_FUZZED(exp(_GLF_IDENTITY(-20.78, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(388.489) : _GLF_IDENTITY(-20.78, mix(float(-20.78), float(_GLF_FUZZED(7198.9776)), bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))))))))), (packSnorm2x16(vec2(7.8, _GLF_IDENTITY(-0.8, mix(float(_GLF_IDENTITY(-0.8, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(mix(-5059.4687, -3.4, false)), (_GLF_FUZZED(mix(-5059.4687, -3.4, _GLF_IDENTITY(false, ! (! (false)))))) / 1.0) : -0.8, mix(float(false ? _GLF_IDENTITY(_GLF_FUZZED(mix(-5059.4687, -3.4, false)), (_GLF_FUZZED(mix(-5059.4687, -3.4, _GLF_IDENTITY(false, ! (! (false)))))) / 1.0) : -0.8), float(_GLF_FUZZED(float(3658u))), bool(false)))))), float(_GLF_FUZZED(-4.5)), bool(false)))))) | (packSnorm2x16(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), _GLF_IDENTITY(vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)), mix(vec2(_GLF_FUZZED(-1512.0448), (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[1]), vec2(_GLF_IDENTITY((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], max((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0])), _GLF_FUZZED(55.05)), bvec2(true, false)))), mix(vec2(_GLF_FUZZED(-3.5), _GLF_FUZZED((-8.5 / -854.281))), vec2(_GLF_IDENTITY((_GLF_IDENTITY(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), _GLF_IDENTITY(vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)), mix(vec2(_GLF_FUZZED(-1512.0448), (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[1]), vec2(_GLF_IDENTITY((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], max((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0])), _GLF_FUZZED(55.05)), bvec2(true, false)))))[0], float(_GLF_IDENTITY(mat3((_GLF_IDENTITY(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), _GLF_IDENTITY(vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)), mix(vec2(_GLF_FUZZED(-1512.0448), (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[1]), vec2(_GLF_IDENTITY((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], max((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0])), _GLF_FUZZED(55.05)), bvec2(true, false)))))[0], 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat3((_GLF_IDENTITY(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), _GLF_IDENTITY(vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)), mix(vec2(_GLF_FUZZED(-1512.0448), (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[1]), vec2(_GLF_IDENTITY((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], max((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0])), _GLF_FUZZED(55.05)), bvec2(true, false)))))[0], 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), _GLF_IDENTITY(vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)), mix(vec2(_GLF_FUZZED(-1512.0448), (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[1]), vec2(_GLF_IDENTITY((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], max((vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0], (vec2(mat4x2(vec2(_GLF_IDENTITY(7.8, float(mat3x2(7.8, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))), -0.8), cos(0.0), cos(0.0), 0.0, 1.0, tan(0.0), 1.0)))[0])), _GLF_FUZZED(55.05)), bvec2(true, false)))))[1]), bvec2(true, true))))))) | _GLF_IDENTITY((packSnorm2x16(vec2(7.8, -0.8))), (0u | 0u) + ((packSnorm2x16(vec2(7.8, -0.8))))))))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) - uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) ^ 0u)), 1u), _GLF_IDENTITY(uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) | 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u ^ ((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u), 1u)), max(uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) | 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u ^ ((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u), 1u)), uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) | 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u ^ ((1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u), 1u)))))))), 1u)) * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, min(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_7.workgroup_size * workgroup_id), 0u ^ ((_GLF_struct_replacement_7.workgroup_size * workgroup_id))), _GLF_IDENTITY(uint(uint((_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id)), clamp(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id)), _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id)), min(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id)), _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id))))))))), (uint(uint((_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), workgroup_id, workgroup_id))) | (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), workgroup_id)))))))) >> 0u)) | (_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size, (_GLF_struct_replacement_7.workgroup_size) << 0u) * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) - 0u)), max((_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) - 0u)), (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) - 0u)))), ~ (~ (~ (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) - 0u))))))))), _GLF_struct_replacement_7.workgroup_size * workgroup_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_size)))) | (_GLF_struct_replacement_7.workgroup_size * workgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_7.workgroup_size * workgroup_id))), ~ (~ (min(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_size))), min(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_size)))))) | (_GLF_struct_replacement_7.workgroup_size * workgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_7.workgroup_size * workgroup_id))))))), (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, false))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size, (_GLF_struct_replacement_7.workgroup_size) | (_GLF_struct_replacement_7.workgroup_size)) * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), (_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_size)))) | (_GLF_struct_replacement_7.workgroup_size * workgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_7.workgroup_size * workgroup_id)))), (_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, min(_GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), _GLF_IDENTITY((true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) ^ 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (_GLF_IDENTITY((true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) ^ 0u, (_GLF_IDENTITY((true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) ^ 0u, uint(uint((true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) ^ 0u)))) | (_GLF_IDENTITY((true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) ^ 0u, uint(uvec4((true ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))) ^ 0u, 1u, 1u, 1u))))))))))) | (_GLF_struct_replacement_7.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u))), _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size * workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_7.workgroup_size * workgroup_id))))) / 1u) : _GLF_FUZZED(workgroup_id))))) - 0u));
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0)), max(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0)), float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0))))), _GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) * (1u | 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u) + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) * _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, max(1u, 1u)), 1u, 1u)), (uint(uvec3(_GLF_IDENTITY(1u, max(1u, 1u)), 1u, 1u))) + 0u)), clamp((subgroup_base) * 1u, (subgroup_base) * 1u, (subgroup_base) * 1u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec2(bvec2(bvec2(true, false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec2(bvec2(bvec2(true, false))))), false, false))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(true, false), true)))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), ! (! (bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), true)))))))))))), _GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))), true)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(true, false), true)))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1163.0280)), bool(false)))), float(_GLF_FUZZED(2.0)), bool(false))))), true, false)), ! (! (bool(bvec4(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), true, false)))))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, false))), bvec2(bvec3(bvec2(bvec2(bvec2(true, false))), true)))))), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))), ! (! (bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))))))), bool(bvec4(true, true, true, true)))), true)))))), false, false)))))))) && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false), false, true))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, 1u * (workgroup_base + subgroup_base))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED(workgroup_base))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(atomicMin(read, virtual_gid)) : subgroup_local_id)) % 2) - (0u | 0u))) == 0)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y)), true, true, true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.8) : injectionSwitch.y)))))))))
              return;
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7.7)), float(injectionSwitch.y), bool(true)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))))))))), false, false)))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(-72101, (-72101) >> 0) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              barrier();
             return;
            }
           subgroupAll(false);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u), next_virtual_gid))], uint(1), 4, 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
         barrier();
        }
      }
     else
      {
       subgroupAll(false);
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (4) >> 0));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y)))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), true && (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), ! (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), true && (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), ! (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))))))), true && (! (! (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), true && (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), ! (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))))))))))))))))))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(-40927), ~ (~ (true ? 0 : _GLF_FUZZED(-40927)))))), 0))), 0)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), int(ivec3((0), 0, 1)))), max(~ (_GLF_IDENTITY((0), int(ivec3((0), 0, 1)))), ~ (_GLF_IDENTITY((0), int(ivec3((0), 0, 1)))))))) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-40927))), 0))), 0)), min(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - sin(0.0))) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-40927))), 0))), 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-40927))), 0))), 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-40927))), 0))), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) | (_GLF_IDENTITY(1 ^ 0, max(_GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)), 1 ^ 0)))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true))))))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupBarrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0) * (vec4(injectionSwitch.x, 1.0, 1.0, 1.0)), min(vec4(1.0, 1.0, 1.0, 1.0) * (vec4(injectionSwitch.x, 1.0, 1.0, 1.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(injectionSwitch.x, 1.0, 1.0, 1.0))))))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))) || false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) + 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(83198) : 2)), _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, max(2, 2)), 2))))), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) / 1u)) ^ 0u), _GLF_IDENTITY(4, int(ivec3(4, _GLF_IDENTITY(0, 1 * (0)), 1))), 64, _GLF_IDENTITY(4, (4) | _GLF_IDENTITY((_GLF_IDENTITY(4, int(ivec3(4, 0, 0)))), clamp((4), (4), _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), 0 | ((4)))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (0 & 89391)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
