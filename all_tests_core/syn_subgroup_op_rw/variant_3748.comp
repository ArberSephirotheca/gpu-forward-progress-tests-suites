#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(uvec2(158092u, 125218u)[0]))), 0u ^ (workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(uvec2(158092u, 125218u)[0]))), 0u ^ (workgroup_id))) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).y)), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (true ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))))).y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), max(float(float(1.0)), float(float(1.0))))))), 0.0, 0.0)), float(vec2(float(mat2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), max(float(float(1.0)), float(float(1.0))))))), 0.0, 0.0)), 0.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))) - 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))), ~ (~ ((_GLF_IDENTITY(false, (false) || false) ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)), (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u))) | (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)))) : uvec3(workgroup_base, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x)))), (0u | 0u)))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uint(0u))))))), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)), uvec3(0u, 0u, 0u) ^ (_GLF_FUZZED(uvec3(157553u, 17410u, 188826u)))) : uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0), 0.0)), injectionSwitch.x)), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))) >> uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY(((uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(157553u, (_GLF_IDENTITY(157553u, clamp(157553u, 157553u, 157553u))) >> (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))) >> uvec3(0u, 0u, 0u))))))), ~ (~ (_GLF_IDENTITY(((uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(157553u, (_GLF_IDENTITY(157553u, clamp(157553u, 157553u, 157553u))) >> (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))) >> uvec3(0u, 0u, 0u))))))), min(((uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(157553u, (_GLF_IDENTITY(157553u, clamp(157553u, 157553u, 157553u))) >> (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))) >> uvec3(0u, 0u, 0u))))))), ((uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(157553u, (_GLF_IDENTITY(157553u, clamp(157553u, 157553u, 157553u))) >> (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))) >> uvec3(0u, 0u, 0u)))))))))))) - 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | _GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u))))), (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : _GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), (0u | 0u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))))), _GLF_IDENTITY(0u, min(0u, 0u)))), _GLF_IDENTITY(0u, (0u) | (0u)))) | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(0u | 0u, (true ? _GLF_IDENTITY(0u | 0u, (0u | 0u) | 0u) : _GLF_FUZZED((subgroup_id & workgroup_base))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((0u | 0u), 0u | ((0u | 0u)))), ~ (~ _GLF_IDENTITY((uvec3(workgroup_base, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u), (0u | 0u))), ((uvec3(workgroup_base, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u), (0u | 0u)))) | ((uvec3(workgroup_base, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u), (0u | 0u)))))))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base), (_GLF_IDENTITY(uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-72.14) : 1.0))), float(_GLF_FUZZED(68.24)), bool(false))), injectionSwitch.y)) * (workgroup_base), (uint(_GLF_ONE(1.0, injectionSwitch.y)) * (workgroup_base)) << 0u)) | 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) : _GLF_FUZZED((-- subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))))))))), _GLF_IDENTITY(~ (~ (uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) - vec2(0.0, 0.0)).x)), _GLF_IDENTITY((0u | 0u), ((0u | 0u)) >> 0u)), (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : _GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(80.65), _GLF_FUZZED(9.9)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x), float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))), 1.0, tan(0.0), 0.0, 1.0, 1.0, 1.0, log(1.0))))), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((0u | 0u), ~ (_GLF_IDENTITY(~ ((0u | 0u)), uint(uvec3(~ ((0u | 0u)), 1u, 0u)))))), _GLF_IDENTITY(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(exp2(-4429.4414)) : 0.0)), injectionSwitch.x)), (_GLF_IDENTITY(0u | 0u, (0u | 0u) | 0u))))), min(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))))))))))))))), 0u ^ (_GLF_IDENTITY(~ (~ (uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1])))).x)), (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (~ (0u))))) | 0u)), (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : _GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, sin(0.0), 0.0, 0.0, log(1.0), sqrt(0.0)), transpose(transpose(mat2x3(0.0, sin(0.0), 0.0, 0.0, log(1.0), sqrt(0.0))))))), injectionSwitch.x)), (0u | 0u))), ~ (_GLF_IDENTITY(~ (~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, sin(0.0), 0.0, 0.0, log(1.0), sqrt(0.0)), transpose(transpose(mat2x3(0.0, sin(0.0), 0.0, 0.0, log(1.0), sqrt(0.0))))))), injectionSwitch.x)), (0u | 0u)))), (~ (~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, sin(0.0), 0.0, 0.0, log(1.0), sqrt(0.0)), transpose(transpose(mat2x3(0.0, sin(0.0), 0.0, 0.0, log(1.0), sqrt(0.0))))))), injectionSwitch.x)), (0u | 0u))))) << uvec3(0u, 0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ _GLF_IDENTITY((~ (uvec3(workgroup_base, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-59.42)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))), (0u | 0u)))), ((~ (uvec3(workgroup_base, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-59.42)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))), (0u | 0u))))) >> uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))), injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (0u | 0u)))))))))))))), (~ (~ (uint(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : _GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), _GLF_IDENTITY(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), max(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), _GLF_IDENTITY(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u))))), (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), ~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), _GLF_IDENTITY(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), max(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), _GLF_IDENTITY(~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (~ (~ (uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)))))))))))))))))))))) | 0u)))), (true ? uint(_GLF_IDENTITY(uvec3(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u)), (false ? _GLF_FUZZED(uvec3(157553u, 17410u, 188826u)) : uvec3(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, abs(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))).x)), (0u | 0u))))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size)))))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))), (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) ^ (1 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-490.862), _GLF_FUZZED(6.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7881.6899)), float(injectionSwitch.y), bool(true)))) - 0.0), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-490.862), _GLF_FUZZED(6.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(7881.6899, (false ? _GLF_FUZZED(4.1) : 7881.6899)))), float(injectionSwitch.y), bool(true)))) - 0.0), injectionSwitch.y))) / 1.0)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (0 & (_GLF_IDENTITY(43160 / 72386, min(43160 / 72386, 43160 / 72386)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((false ? -47363 : 44995) & 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.2), _GLF_FUZZED(407.264)), bvec2(false, false))).x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << 0u) + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size))), workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u) + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size)) - 0u)));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = ((1 ^ 1) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) * 1)), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y))) - 0), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) && true)))))))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((-77987 & 41298) & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(subgroup_local_id + 1 < subgroup_size)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(false), false || (bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(bool(false), false || (bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)))))), false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], read, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 + (4)), (4) | (4)), 64, _GLF_IDENTITY(4, (4) - 0));
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), 0 ^ ((1 << _GLF_IDENTITY(int(7), int(7)))))) + 0) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))) && true)))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), (! (true)) || false))), bool(bvec4(! (true), false, false, false)))))))
                  {
                   subgroupAll(false);
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || false))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))))))))
                      {
                       do
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
                  {
                   atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(4, (4) | (0 ^ 0)), 64, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | (4)))));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       subgroupAll(true);
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))) - 0)) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(true, false || (true))))));
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    {
                     for(int _injected_loop_counter = (-42247 & (0 << _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(atomicMin(_injected_loop_counter, -75631))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))), true, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))), true, false)))))))))) || false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), bool(bool((! (true))))))))), false, true)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, ! (! (true))), false, true)), bool(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, ! (! (true))), false, true)), false, true))))))) || false, true, true))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, true, true))))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, true, true))))))))), ! (! (bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)), true)))) || false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)))), true, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)), bool(bool(! (_GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)))))))))), true, false, true)))))) || false, true, true)), (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)))), true, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)), bool(bool(! (_GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)))))))))), true, false, true)))))) || false, true, true))) || false)))))))), ! (! (_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true)))) || false, false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false), (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false)) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false), (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false)) && true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false), (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false)) && true))))), true && ((! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false), (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false)) && true))))))))), true && (bool(bool(_GLF_IDENTITY((! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false), (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false)) && true))))), true && ((! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false), (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false)) && true)))))))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false)))))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))) || false, true, _GLF_IDENTITY(true, ! (! (true))))))))), ! (! (bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, (true) || false), false, true)))) || false, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true))) || false)))), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true))) || false))), false || (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), false, true)), (bool(bvec3(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))), true))) || false)))))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, false, false))), false, true)))))) || false, true, true)))))))))))))))));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
}
